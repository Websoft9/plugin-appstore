(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global = global || self, global.simpleUpdateIn = factory());
}(this, (function () { 'use strict';

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }

    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }

  function _asyncToGenerator(fn) {
    return function () {
      var self = this,
          args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);

        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }

        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }

        _next(undefined);
      });
    };
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys(Object(source), true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  function _toArray(arr) {
    return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest();
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
  }

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

    return arr2;
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _createForOfIteratorHelper(o) {
    if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
      if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) {
        var i = 0;

        var F = function () {};

        return {
          s: F,
          n: function () {
            if (i >= o.length) return {
              done: true
            };
            return {
              done: false,
              value: o[i++]
            };
          },
          e: function (e) {
            throw e;
          },
          f: F
        };
      }

      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    var it,
        normalCompletion = true,
        didErr = false,
        err;
    return {
      s: function () {
        it = o[Symbol.iterator]();
      },
      n: function () {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      },
      e: function (e) {
        didErr = true;
        err = e;
      },
      f: function () {
        try {
          if (!normalCompletion && it.return != null) it.return();
        } finally {
          if (didErr) throw err;
        }
      }
    };
  }

  var objectIs = Object.is || function (x, y) {
    return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
  };

  function simpleUpdateIn(obj, path, updater) {
    validatePath(path);
    var paths = getPaths(obj, path);

    var _iterator = _createForOfIteratorHelper(paths),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var _path = _step.value;
        obj = setValue(obj, _path, updater ? updater(getValue(obj, _path)) : undefined);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return obj;
  }

  function updateInAsync(_x, _x2, _x3) {
    return _updateInAsync.apply(this, arguments);
  }

  function _updateInAsync() {
    _updateInAsync = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(obj, path, updater) {
      var paths, _iterator2, _step2, _path4;

      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              validatePath(path);
              _context.next = 3;
              return getPathsAsync(obj, path);

            case 3:
              paths = _context.sent;
              _iterator2 = _createForOfIteratorHelper(paths);
              _context.prev = 5;

              _iterator2.s();

            case 7:
              if ((_step2 = _iterator2.n()).done) {
                _context.next = 23;
                break;
              }

              _path4 = _step2.value;
              _context.t0 = setValue;
              _context.t1 = obj;
              _context.t2 = _path4;

              if (!updater) {
                _context.next = 18;
                break;
              }

              _context.next = 15;
              return updater(getValue(obj, _path4));

            case 15:
              _context.t3 = _context.sent;
              _context.next = 19;
              break;

            case 18:
              _context.t3 = undefined;

            case 19:
              _context.t4 = _context.t3;
              obj = (0, _context.t0)(_context.t1, _context.t2, _context.t4);

            case 21:
              _context.next = 7;
              break;

            case 23:
              _context.next = 28;
              break;

            case 25:
              _context.prev = 25;
              _context.t5 = _context["catch"](5);

              _iterator2.e(_context.t5);

            case 28:
              _context.prev = 28;

              _iterator2.f();

              return _context.finish(28);

            case 31:
              return _context.abrupt("return", obj);

            case 32:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[5, 25, 28, 31]]);
    }));
    return _updateInAsync.apply(this, arguments);
  }

  simpleUpdateIn.updateInAsync = updateInAsync;

  function validatePath(path) {
    if (!Array.isArray(path)) {
      throw new Error('path must be an array');
    }
  }

  var RESERVED_KEYS = ['__proto__', 'constructor', 'prototype'];

  function reserved(key) {
    return RESERVED_KEYS.includes(key);
  }

  function getPaths(obj, path) {
    if (!path.length) {
      return;
    }

    var _path2 = _toArray(path),
        accessor = _path2[0],
        nextPath = _path2.slice(1);

    if (typeof accessor === 'function') {
      var results = [];

      if (Array.isArray(obj)) {
        for (var index = 0, length = obj.length; index < length; index++) {
          accessor.call(obj, obj[index], index) && results.push.apply(results, _toConsumableArray(getPaths(obj, [index].concat(_toConsumableArray(nextPath)))));
        }
      } else {
        for (var key in obj || {}) {
          accessor.call(obj, obj[key], key) && results.push.apply(results, _toConsumableArray(getPaths(obj, [key].concat(_toConsumableArray(nextPath)))));
        }
      }

      return results;
    }

    var result = getPaths(typeof obj !== 'undefined' && obj[accessor], nextPath);
    return result ? result.map(function (result) {
      return [accessor].concat(_toConsumableArray(result));
    }) : [[accessor]];
  }

  function getPathsAsync(_x4, _x5) {
    return _getPathsAsync.apply(this, arguments);
  }

  function _getPathsAsync() {
    _getPathsAsync = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(obj, path) {
      var _path5, accessor, nextPath, results, index, length, key, result;

      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (path.length) {
                _context2.next = 2;
                break;
              }

              return _context2.abrupt("return");

            case 2:
              _path5 = _toArray(path), accessor = _path5[0], nextPath = _path5.slice(1);

              if (!(typeof accessor === 'function')) {
                _context2.next = 43;
                break;
              }

              results = [];

              if (!Array.isArray(obj)) {
                _context2.next = 25;
                break;
              }

              index = 0, length = obj.length;

            case 7:
              if (!(index < length)) {
                _context2.next = 23;
                break;
              }

              _context2.next = 10;
              return accessor.call(obj, obj[index], index);

            case 10:
              _context2.t0 = _context2.sent;

              if (!_context2.t0) {
                _context2.next = 20;
                break;
              }

              _context2.t1 = results.push;
              _context2.t2 = results;
              _context2.t3 = _toConsumableArray;
              _context2.next = 17;
              return getPathsAsync(obj, [index].concat(_toConsumableArray(nextPath)));

            case 17:
              _context2.t4 = _context2.sent;
              _context2.t5 = (0, _context2.t3)(_context2.t4);

              _context2.t1.apply.call(_context2.t1, _context2.t2, _context2.t5);

            case 20:
              index++;
              _context2.next = 7;
              break;

            case 23:
              _context2.next = 42;
              break;

            case 25:
              _context2.t6 = regeneratorRuntime.keys(obj || {});

            case 26:
              if ((_context2.t7 = _context2.t6()).done) {
                _context2.next = 42;
                break;
              }

              key = _context2.t7.value;
              _context2.next = 30;
              return accessor.call(obj, obj[key], key);

            case 30:
              _context2.t8 = _context2.sent;

              if (!_context2.t8) {
                _context2.next = 40;
                break;
              }

              _context2.t9 = results.push;
              _context2.t10 = results;
              _context2.t11 = _toConsumableArray;
              _context2.next = 37;
              return getPathsAsync(obj, [key].concat(_toConsumableArray(nextPath)));

            case 37:
              _context2.t12 = _context2.sent;
              _context2.t13 = (0, _context2.t11)(_context2.t12);

              _context2.t9.apply.call(_context2.t9, _context2.t10, _context2.t13);

            case 40:
              _context2.next = 26;
              break;

            case 42:
              return _context2.abrupt("return", results);

            case 43:
              _context2.next = 45;
              return getPathsAsync(typeof obj !== 'undefined' && obj[accessor], nextPath);

            case 45:
              result = _context2.sent;
              return _context2.abrupt("return", result ? result.map(function (result) {
                return [accessor].concat(_toConsumableArray(result));
              }) : [[accessor]]);

            case 47:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));
    return _getPathsAsync.apply(this, arguments);
  }

  function getValue(obj, path) {
    return path.reduce(function (obj, accessor) {
      return obj && obj[accessor];
    }, obj);
  }

  function setValue(obj, path, target) {
    if (!path.length) {
      return target;
    }

    var _path3 = _toArray(path),
        accessor = _path3[0],
        nextPath = _path3.slice(1);

    var value = typeof obj !== 'undefined' && obj[accessor];
    var nextObj = obj;

    if (reserved(accessor)) {
      return obj;
    }

    if (typeof accessor === 'string' && (_typeof(nextObj) !== 'object' || Array.isArray(nextObj))) {
      nextObj = {};
    } else if (typeof accessor === 'number' && !Array.isArray(nextObj)) {
      nextObj = [];
    }

    if (typeof accessor === 'number') {
      var nextValue = setValue(value, nextPath, target);

      if (typeof nextValue === 'undefined') {
        if (typeof obj === 'undefined') {
          return obj;
        } else {
          // If updater returned undefined or no updater at all, delete the item
          if (accessor in nextObj) {
            nextObj = _toConsumableArray(nextObj);
            nextObj.splice(accessor, 1);
          }

          return nextObj;
        }
      } else {
        if (objectIs(nextValue, value)) {
          return obj;
        } else {
          nextObj = _toConsumableArray(nextObj);
          nextObj[accessor] = nextValue;
          return nextObj;
        }
      }
    } else {
      var _nextValue = setValue(value, nextPath, target);

      if (typeof _nextValue === 'undefined') {
        if (typeof obj === 'undefined') {
          return obj;
        } else {
          // If updater returned undefined or no updater at all, delete the key
          if (accessor in nextObj) {
            nextObj = _objectSpread2({}, nextObj);
            delete nextObj[accessor];
          }

          return nextObj;
        }
      } else {
        if (objectIs(_nextValue, value)) {
          return obj;
        } else {
          return _objectSpread2(_objectSpread2({}, nextObj), {}, _defineProperty({}, accessor, _nextValue));
        }
      }
    }
  }

  return simpleUpdateIn;

})));
