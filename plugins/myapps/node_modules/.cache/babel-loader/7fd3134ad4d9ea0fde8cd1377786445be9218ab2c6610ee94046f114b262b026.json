{"ast":null,"code":"import { __assign, __rest as __rest_1, __spreadArray } from \"tslib\";\nimport { __rest } from \"tslib\";\nimport { mergeDeep } from \"../common/mergeDeep.js\";\nexport function concatPagination(keyArgs) {\n  if (keyArgs === void 0) {\n    keyArgs = false;\n  }\n  return {\n    keyArgs: keyArgs,\n    merge: function merge(existing, incoming) {\n      return existing ? __spreadArray(__spreadArray([], existing, true), incoming, true) : incoming;\n    }\n  };\n}\nexport function offsetLimitPagination(keyArgs) {\n  if (keyArgs === void 0) {\n    keyArgs = false;\n  }\n  return {\n    keyArgs: keyArgs,\n    merge: function merge(existing, incoming, _a) {\n      var args = _a.args;\n      var merged = existing ? existing.slice(0) : [];\n      if (incoming) {\n        if (args) {\n          var _b = args.offset,\n            offset = _b === void 0 ? 0 : _b;\n          for (var i = 0; i < incoming.length; ++i) {\n            merged[offset + i] = incoming[i];\n          }\n        } else {\n          merged.push.apply(merged, incoming);\n        }\n      }\n      return merged;\n    }\n  };\n}\nexport function relayStylePagination(keyArgs) {\n  if (keyArgs === void 0) {\n    keyArgs = false;\n  }\n  return {\n    keyArgs: keyArgs,\n    read: function read(existing, _a) {\n      var canRead = _a.canRead,\n        readField = _a.readField;\n      if (!existing) return existing;\n      var edges = [];\n      var firstEdgeCursor = \"\";\n      var lastEdgeCursor = \"\";\n      existing.edges.forEach(function (edge) {\n        if (canRead(readField(\"node\", edge))) {\n          edges.push(edge);\n          if (edge.cursor) {\n            firstEdgeCursor = firstEdgeCursor || edge.cursor || \"\";\n            lastEdgeCursor = edge.cursor || lastEdgeCursor;\n          }\n        }\n      });\n      var _b = existing.pageInfo || {},\n        startCursor = _b.startCursor,\n        endCursor = _b.endCursor;\n      return __assign(__assign({}, getExtras(existing)), {\n        edges: edges,\n        pageInfo: __assign(__assign({}, existing.pageInfo), {\n          startCursor: startCursor || firstEdgeCursor,\n          endCursor: endCursor || lastEdgeCursor\n        })\n      });\n    },\n    merge: function merge(existing, incoming, _a) {\n      var args = _a.args,\n        isReference = _a.isReference,\n        readField = _a.readField;\n      if (!existing) {\n        existing = makeEmptyData();\n      }\n      if (!incoming) {\n        return existing;\n      }\n      var incomingEdges = incoming.edges ? incoming.edges.map(function (edge) {\n        if (isReference(edge = __assign({}, edge))) {\n          edge.cursor = readField(\"cursor\", edge);\n        }\n        return edge;\n      }) : [];\n      if (incoming.pageInfo) {\n        var pageInfo_1 = incoming.pageInfo;\n        var startCursor = pageInfo_1.startCursor,\n          endCursor = pageInfo_1.endCursor;\n        var firstEdge = incomingEdges[0];\n        var lastEdge = incomingEdges[incomingEdges.length - 1];\n        if (firstEdge && startCursor) {\n          firstEdge.cursor = startCursor;\n        }\n        if (lastEdge && endCursor) {\n          lastEdge.cursor = endCursor;\n        }\n        var firstCursor = firstEdge && firstEdge.cursor;\n        if (firstCursor && !startCursor) {\n          incoming = mergeDeep(incoming, {\n            pageInfo: {\n              startCursor: firstCursor\n            }\n          });\n        }\n        var lastCursor = lastEdge && lastEdge.cursor;\n        if (lastCursor && !endCursor) {\n          incoming = mergeDeep(incoming, {\n            pageInfo: {\n              endCursor: lastCursor\n            }\n          });\n        }\n      }\n      var prefix = existing.edges;\n      var suffix = [];\n      if (args && args.after) {\n        var index = prefix.findIndex(function (edge) {\n          return edge.cursor === args.after;\n        });\n        if (index >= 0) {\n          prefix = prefix.slice(0, index + 1);\n        }\n      } else if (args && args.before) {\n        var index = prefix.findIndex(function (edge) {\n          return edge.cursor === args.before;\n        });\n        suffix = index < 0 ? prefix : prefix.slice(index);\n        prefix = [];\n      } else if (incoming.edges) {\n        prefix = [];\n      }\n      var edges = __spreadArray(__spreadArray(__spreadArray([], prefix, true), incomingEdges, true), suffix, true);\n      var pageInfo = __assign(__assign({}, incoming.pageInfo), existing.pageInfo);\n      if (incoming.pageInfo) {\n        var _b = incoming.pageInfo,\n          hasPreviousPage = _b.hasPreviousPage,\n          hasNextPage = _b.hasNextPage,\n          startCursor = _b.startCursor,\n          endCursor = _b.endCursor,\n          extras = __rest_1(_b, [\"hasPreviousPage\", \"hasNextPage\", \"startCursor\", \"endCursor\"]);\n        Object.assign(pageInfo, extras);\n        if (!prefix.length) {\n          if (void 0 !== hasPreviousPage) pageInfo.hasPreviousPage = hasPreviousPage;\n          if (void 0 !== startCursor) pageInfo.startCursor = startCursor;\n        }\n        if (!suffix.length) {\n          if (void 0 !== hasNextPage) pageInfo.hasNextPage = hasNextPage;\n          if (void 0 !== endCursor) pageInfo.endCursor = endCursor;\n        }\n      }\n      return __assign(__assign(__assign({}, getExtras(existing)), getExtras(incoming)), {\n        edges: edges,\n        pageInfo: pageInfo\n      });\n    }\n  };\n}\nvar getExtras = function getExtras(obj) {\n  return __rest(obj, notExtras);\n};\nvar notExtras = [\"edges\", \"pageInfo\"];\nfunction makeEmptyData() {\n  return {\n    edges: [],\n    pageInfo: {\n      hasPreviousPage: false,\n      hasNextPage: true,\n      startCursor: \"\",\n      endCursor: \"\"\n    }\n  };\n}","map":{"version":3,"names":["__rest","mergeDeep","concatPagination","keyArgs","merge","existing","incoming","__spreadArray","offsetLimitPagination","_a","args","merged","slice","_b","offset","i","length","push","apply","relayStylePagination","read","canRead","readField","edges","firstEdgeCursor","lastEdgeCursor","forEach","edge","cursor","pageInfo","startCursor","endCursor","__assign","getExtras","isReference","makeEmptyData","incomingEdges","map","pageInfo_1","firstEdge","lastEdge","firstCursor","lastCursor","prefix","suffix","after","index","findIndex","before","hasPreviousPage","hasNextPage","extras","__rest_1","Object","assign","obj","notExtras"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@apollo/src/utilities/policies/pagination.ts"],"sourcesContent":["import { __rest } from \"tslib\";\n\nimport { FieldPolicy, Reference } from '../../cache';\nimport { mergeDeep } from '../common/mergeDeep';\n\ntype KeyArgs = FieldPolicy<any>[\"keyArgs\"];\n\n// A very basic pagination field policy that always concatenates new\n// results onto the existing array, without examining options.args.\nexport function concatPagination<T = Reference>(\n  keyArgs: KeyArgs = false,\n): FieldPolicy<T[]> {\n  return {\n    keyArgs,\n    merge(existing, incoming) {\n      return existing ? [\n        ...existing,\n        ...incoming,\n      ] : incoming;\n    },\n  };\n}\n\n// A basic field policy that uses options.args.{offset,limit} to splice\n// the incoming data into the existing array. If your arguments are called\n// something different (like args.{start,count}), feel free to copy/paste\n// this implementation and make the appropriate changes.\nexport function offsetLimitPagination<T = Reference>(\n  keyArgs: KeyArgs = false,\n): FieldPolicy<T[]> {\n  return {\n    keyArgs,\n    merge(existing, incoming, { args }) {\n      const merged = existing ? existing.slice(0) : [];\n\n      if (incoming) {\n        if (args) {\n          // Assume an offset of 0 if args.offset omitted.\n          const { offset = 0 } = args;\n          for (let i = 0; i < incoming.length; ++i) {\n            merged[offset + i] = incoming[i];\n          }\n        } else {\n          // It's unusual (probably a mistake) for a paginated field not\n          // to receive any arguments, so you might prefer to throw an\n          // exception here, instead of recovering by appending incoming\n          // onto the existing array.\n          merged.push.apply(merged, incoming);\n        }\n      }\n\n      return merged;\n    },\n  };\n}\n\n// Whether TRelayEdge<TNode> is a normalized Reference or a non-normalized\n// object, it needs a .cursor property where the relayStylePagination\n// merge function can store cursor strings taken from pageInfo. Storing an\n// extra reference.cursor property should be safe, and is easier than\n// attempting to update the cursor field of the normalized StoreObject\n// that the reference refers to, or managing edge wrapper objects\n// (something I attempted in #7023, but abandoned because of #7088).\nexport type TRelayEdge<TNode> = {\n  cursor?: string;\n  node: TNode;\n} | (Reference & { cursor?: string });\n\nexport type TRelayPageInfo = {\n  hasPreviousPage: boolean;\n  hasNextPage: boolean;\n  startCursor: string;\n  endCursor: string;\n};\n\nexport type TExistingRelay<TNode> = Readonly<{\n  edges: TRelayEdge<TNode>[];\n  pageInfo: TRelayPageInfo;\n}>;\n\nexport type TIncomingRelay<TNode> = {\n  edges?: TRelayEdge<TNode>[];\n  pageInfo?: TRelayPageInfo;\n};\n\nexport type RelayFieldPolicy<TNode> = FieldPolicy<\n  TExistingRelay<TNode> | null,\n  TIncomingRelay<TNode> | null,\n  TIncomingRelay<TNode> | null\n>;\n\n// As proof of the flexibility of field policies, this function generates\n// one that handles Relay-style pagination, without Apollo Client knowing\n// anything about connections, edges, cursors, or pageInfo objects.\nexport function relayStylePagination<TNode extends Reference = Reference>(\n  keyArgs: KeyArgs = false,\n): RelayFieldPolicy<TNode> {\n  return {\n    keyArgs,\n\n    read(existing, { canRead, readField }) {\n      if (!existing) return existing;\n\n      const edges: TRelayEdge<TNode>[] = [];\n      let firstEdgeCursor = \"\";\n      let lastEdgeCursor = \"\";\n      existing.edges.forEach(edge => {\n        // Edges themselves could be Reference objects, so it's important\n        // to use readField to access the edge.edge.node property.\n        if (canRead(readField(\"node\", edge))) {\n          edges.push(edge);\n          if (edge.cursor) {\n            firstEdgeCursor = firstEdgeCursor || edge.cursor || \"\";\n            lastEdgeCursor = edge.cursor || lastEdgeCursor;\n          }\n        }\n      });\n\n      const {\n        startCursor,\n        endCursor,\n      } = existing.pageInfo || {};\n\n      return {\n        // Some implementations return additional Connection fields, such\n        // as existing.totalCount. These fields are saved by the merge\n        // function, so the read function should also preserve them.\n        ...getExtras(existing),\n        edges,\n        pageInfo: {\n          ...existing.pageInfo,\n          // If existing.pageInfo.{start,end}Cursor are undefined or \"\", default\n          // to firstEdgeCursor and/or lastEdgeCursor.\n          startCursor: startCursor || firstEdgeCursor,\n          endCursor: endCursor || lastEdgeCursor,\n        },\n      };\n    },\n\n    merge(existing, incoming, { args, isReference, readField }) {\n      if (!existing) {\n        existing = makeEmptyData();\n      }\n\n      if (!incoming) {\n        return existing;\n      }\n\n      const incomingEdges = incoming.edges ? incoming.edges.map(edge => {\n        if (isReference(edge = { ...edge })) {\n          // In case edge is a Reference, we read out its cursor field and\n          // store it as an extra property of the Reference object.\n          edge.cursor = readField<string>(\"cursor\", edge);\n        }\n        return edge;\n      }) : [];\n\n      if (incoming.pageInfo) {\n        const { pageInfo } = incoming;\n        const { startCursor, endCursor } = pageInfo;\n        const firstEdge = incomingEdges[0];\n        const lastEdge = incomingEdges[incomingEdges.length - 1];\n        // In case we did not request the cursor field for edges in this\n        // query, we can still infer cursors from pageInfo.\n        if (firstEdge && startCursor) {\n          firstEdge.cursor = startCursor;\n        }\n        if (lastEdge && endCursor) {\n          lastEdge.cursor = endCursor;\n        }\n        // Cursors can also come from edges, so we default\n        // pageInfo.{start,end}Cursor to {first,last}Edge.cursor.\n        const firstCursor = firstEdge && firstEdge.cursor;\n        if (firstCursor && !startCursor) {\n          incoming = mergeDeep(incoming, {\n            pageInfo: {\n              startCursor: firstCursor,\n            },\n          });\n        }\n        const lastCursor = lastEdge && lastEdge.cursor;\n        if (lastCursor && !endCursor) {\n          incoming = mergeDeep(incoming, {\n            pageInfo: {\n              endCursor: lastCursor,\n            },\n          });\n        }\n      }\n\n      let prefix = existing.edges;\n      let suffix: typeof prefix = [];\n\n      if (args && args.after) {\n        // This comparison does not need to use readField(\"cursor\", edge),\n        // because we stored the cursor field of any Reference edges as an\n        // extra property of the Reference object.\n        const index = prefix.findIndex(edge => edge.cursor === args.after);\n        if (index >= 0) {\n          prefix = prefix.slice(0, index + 1);\n          // suffix = []; // already true\n        }\n      } else if (args && args.before) {\n        const index = prefix.findIndex(edge => edge.cursor === args.before);\n        suffix = index < 0 ? prefix : prefix.slice(index);\n        prefix = [];\n      } else if (incoming.edges) {\n        // If we have neither args.after nor args.before, the incoming\n        // edges cannot be spliced into the existing edges, so they must\n        // replace the existing edges. See #6592 for a motivating example.\n        prefix = [];\n      }\n\n      const edges = [\n        ...prefix,\n        ...incomingEdges,\n        ...suffix,\n      ];\n\n      const pageInfo: TRelayPageInfo = {\n        // The ordering of these two ...spreads may be surprising, but it\n        // makes sense because we want to combine PageInfo properties with a\n        // preference for existing values, *unless* the existing values are\n        // overridden by the logic below, which is permitted only when the\n        // incoming page falls at the beginning or end of the data.\n        ...incoming.pageInfo,\n        ...existing.pageInfo,\n      };\n\n      if (incoming.pageInfo) {\n        const {\n          hasPreviousPage, hasNextPage,\n          startCursor, endCursor,\n          ...extras\n        } = incoming.pageInfo;\n\n        // If incoming.pageInfo had any extra non-standard properties,\n        // assume they should take precedence over any existing properties\n        // of the same name, regardless of where this page falls with\n        // respect to the existing data.\n        Object.assign(pageInfo, extras);\n\n        // Keep existing.pageInfo.has{Previous,Next}Page unless the\n        // placement of the incoming edges means incoming.hasPreviousPage\n        // or incoming.hasNextPage should become the new values for those\n        // properties in existing.pageInfo. Note that these updates are\n        // only permitted when the beginning or end of the incoming page\n        // coincides with the beginning or end of the existing data, as\n        // determined using prefix.length and suffix.length.\n        if (!prefix.length) {\n          if (void 0 !== hasPreviousPage) pageInfo.hasPreviousPage = hasPreviousPage;\n          if (void 0 !== startCursor) pageInfo.startCursor = startCursor;\n        }\n        if (!suffix.length) {\n          if (void 0 !== hasNextPage) pageInfo.hasNextPage = hasNextPage;\n          if (void 0 !== endCursor) pageInfo.endCursor = endCursor;\n        }\n      }\n\n      return {\n        ...getExtras(existing),\n        ...getExtras(incoming),\n        edges,\n        pageInfo,\n      };\n    },\n  };\n}\n\n// Returns any unrecognized properties of the given object.\nconst getExtras = (obj: Record<string, any>) => __rest(obj, notExtras);\nconst notExtras = [\"edges\", \"pageInfo\"];\n\nfunction makeEmptyData(): TExistingRelay<any> {\n  return {\n    edges: [],\n    pageInfo: {\n      hasPreviousPage: false,\n      hasNextPage: true,\n      startCursor: \"\",\n      endCursor: \"\",\n    },\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}