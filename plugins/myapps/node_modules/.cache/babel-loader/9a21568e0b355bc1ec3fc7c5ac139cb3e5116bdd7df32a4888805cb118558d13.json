{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Progress/progress';\nimport { css } from '@patternfly/react-styles';\nexport var ProgressBar = function ProgressBar(_a) {\n  var progressBarAriaProps = _a.progressBarAriaProps,\n    _a$className = _a.className,\n    className = _a$className === void 0 ? '' : _a$className,\n    _a$children = _a.children,\n    children = _a$children === void 0 ? null : _a$children,\n    value = _a.value,\n    props = __rest(_a, [\"progressBarAriaProps\", \"className\", \"children\", \"value\"]);\n  return React.createElement(\"div\", Object.assign({}, props, {\n    className: css(styles.progressBar, className)\n  }, progressBarAriaProps), React.createElement(\"div\", {\n    className: css(styles.progressIndicator),\n    style: {\n      width: \"\".concat(value, \"%\")\n    }\n  }, React.createElement(\"span\", {\n    className: css(styles.progressMeasure)\n  }, children)));\n};\nProgressBar.displayName = 'ProgressBar';","map":{"version":3,"names":["React","styles","css","ProgressBar","_a","progressBarAriaProps","_a$className","className","_a$children","children","value","props","__rest","createElement","Object","assign","progressBar","progressIndicator","style","width","concat","progressMeasure","displayName"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@patternfly/react-core/src/components/Progress/ProgressBar.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Progress/progress';\nimport { css } from '@patternfly/react-styles';\n\nexport interface AriaProps {\n  'aria-labelledby'?: string;\n  'aria-label'?: string;\n  'aria-valuemin'?: number;\n  'aria-valuenow'?: number;\n  'aria-valuemax'?: number;\n  'aria-valuetext'?: string;\n}\n\nexport interface ProgressBarProps extends React.HTMLProps<HTMLDivElement> {\n  /** What should be rendered inside progress bar. */\n  children?: React.ReactNode;\n  /** Additional classes for Progres bar. */\n  className?: string;\n  /** Actual progress value. */\n  value: number;\n  /** Minimal value of progress. */\n  progressBarAriaProps?: AriaProps;\n}\n\nexport const ProgressBar: React.FunctionComponent<ProgressBarProps> = ({\n  progressBarAriaProps,\n  className = '',\n  children = null,\n  value,\n  ...props\n}: ProgressBarProps) => (\n  <div {...props} className={css(styles.progressBar, className)} {...progressBarAriaProps}>\n    <div className={css(styles.progressIndicator)} style={{ width: `${value}%` }}>\n      <span className={css(styles.progressMeasure)}>{children}</span>\n    </div>\n  </div>\n);\nProgressBar.displayName = 'ProgressBar';\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,MAAM,MAAM,2DAA2D;AAC9E,SAASC,GAAG,QAAQ,0BAA0B;AAsB9C,OAAO,IAAMC,WAAW,GAA8C,SAAzDA,WAAWA,CAA+CC,EAMpD,EAAI;MALrBC,oBAAoB,GAGfD,EAEY,CALjBC,oBAAoB;IAAAC,YAAA,GAGfF,EAEY,CAJjBG,SAAS;IAATA,SAAS,GAAAD,YAAA,cAAG,EAAE,GAAAA,YAAA;IAAAE,WAAA,GAETJ,EAEY,CAHjBK,QAAQ;IAARA,QAAQ,GAAAD,WAAA,cAAG,IAAI,GAAAA,WAAA;IACfE,KAAK,GAAAN,EAEY,CAFjBM,KAAK;IACFC,KAAK,GAAAC,MAAA,CAAAR,EAAA,EAL6D,0DAMtE,CADS;EACc,OACtBJ,KAAA,CAAAa,aAAA,QAAAC,MAAA,CAAAC,MAAA,KAASJ,KAAK;IAAEJ,SAAS,EAAEL,GAAG,CAACD,MAAM,CAACe,WAAW,EAAET,SAAS;EAAC,GAAMF,oBAAoB,GACrFL,KAAA,CAAAa,aAAA;IAAKN,SAAS,EAAEL,GAAG,CAACD,MAAM,CAACgB,iBAAiB,CAAC;IAAEC,KAAK,EAAE;MAAEC,KAAK,KAAAC,MAAA,CAAKV,KAAK;IAAG;EAAE,GAC1EV,KAAA,CAAAa,aAAA;IAAMN,SAAS,EAAEL,GAAG,CAACD,MAAM,CAACoB,eAAe;EAAC,GAAGZ,QAAQ,CAAQ,CAC3D,CACF;CACP;AACDN,WAAW,CAACmB,WAAW,GAAG,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}