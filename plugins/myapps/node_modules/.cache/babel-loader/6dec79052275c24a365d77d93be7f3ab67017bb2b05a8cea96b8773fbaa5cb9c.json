{"ast":null,"code":"export var fileReaderType;\n(function (fileReaderType) {\n  fileReaderType[\"text\"] = \"text\";\n  fileReaderType[\"dataURL\"] = \"dataURL\";\n})(fileReaderType || (fileReaderType = {}));\n/**\n * Read a file using the FileReader API, either as a plain text string or as a DataURL string.\n * Returns a promise which will resolve with the file contents as a string or reject with a DOMException.\n *\n * @param {File} fileHandle - File object to read\n * @param {fileReaderType} type - How to read it\n */\nexport function readFile(fileHandle, type) {\n  return new Promise(function (resolve, reject) {\n    var reader = new FileReader();\n    reader.onload = function () {\n      return resolve(reader.result);\n    };\n    reader.onerror = function () {\n      return reject(reader.error);\n    };\n    if (type === fileReaderType.text) {\n      reader.readAsText(fileHandle);\n    } else if (type === fileReaderType.dataURL) {\n      reader.readAsDataURL(fileHandle);\n    } else {\n      reject('unknown type');\n    }\n  });\n}","map":{"version":3,"names":["fileReaderType","readFile","fileHandle","type","Promise","resolve","reject","reader","FileReader","onload","result","onerror","error","text","readAsText","dataURL","readAsDataURL"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@patternfly/react-core/src/helpers/fileUtils.ts"],"sourcesContent":["export enum fileReaderType {\n  text = 'text',\n  dataURL = 'dataURL'\n}\n\n/**\n * Read a file using the FileReader API, either as a plain text string or as a DataURL string.\n * Returns a promise which will resolve with the file contents as a string or reject with a DOMException.\n *\n * @param {File} fileHandle - File object to read\n * @param {fileReaderType} type - How to read it\n */\nexport function readFile(fileHandle: File, type: fileReaderType) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => resolve(reader.result);\n    reader.onerror = () => reject(reader.error);\n    if (type === fileReaderType.text) {\n      reader.readAsText(fileHandle);\n    } else if (type === fileReaderType.dataURL) {\n      reader.readAsDataURL(fileHandle);\n    } else {\n      reject('unknown type');\n    }\n  });\n}\n"],"mappings":"AAAA,WAAYA,cAGX;AAHD,WAAYA,cAAc;EACxBA,cAAA,iBAAa;EACbA,cAAA,uBAAmB;AACrB,CAAC,EAHWA,cAAc,KAAdA,cAAc;AAK1B;;;;;;;AAOA,OAAM,SAAUC,QAAQA,CAACC,UAAgB,EAAEC,IAAoB;EAC7D,OAAO,IAAIC,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAI;IACrC,IAAMC,MAAM,GAAG,IAAIC,UAAU,EAAE;IAC/BD,MAAM,CAACE,MAAM,GAAG;MAAA,OAAMJ,OAAO,CAACE,MAAM,CAACG,MAAM,CAAC;IAAA;IAC5CH,MAAM,CAACI,OAAO,GAAG;MAAA,OAAML,MAAM,CAACC,MAAM,CAACK,KAAK,CAAC;IAAA;IAC3C,IAAIT,IAAI,KAAKH,cAAc,CAACa,IAAI,EAAE;MAChCN,MAAM,CAACO,UAAU,CAACZ,UAAU,CAAC;KAC9B,MAAM,IAAIC,IAAI,KAAKH,cAAc,CAACe,OAAO,EAAE;MAC1CR,MAAM,CAACS,aAAa,CAACd,UAAU,CAAC;KACjC,MAAM;MACLI,MAAM,CAAC,cAAc,CAAC;;EAE1B,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}