{"ast":null,"code":"import _slicedToArray from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Timestamp/timestamp';\nimport { css } from '@patternfly/react-styles';\nimport { Tooltip } from '../Tooltip';\nimport { isValidDate } from '../../helpers/datetimeUtils';\nexport var TimestampFormat;\n(function (TimestampFormat) {\n  TimestampFormat[\"full\"] = \"full\";\n  TimestampFormat[\"long\"] = \"long\";\n  TimestampFormat[\"medium\"] = \"medium\";\n  TimestampFormat[\"short\"] = \"short\";\n})(TimestampFormat || (TimestampFormat = {}));\nexport var TimestampTooltipVariant;\n(function (TimestampTooltipVariant) {\n  TimestampTooltipVariant[\"default\"] = \"default\";\n  TimestampTooltipVariant[\"custom\"] = \"custom\";\n})(TimestampTooltipVariant || (TimestampTooltipVariant = {}));\nexport var Timestamp = function Timestamp(_a) {\n  var children = _a.children,\n    className = _a.className,\n    customFormat = _a.customFormat,\n    dateProp = _a.date,\n    dateFormat = _a.dateFormat,\n    _a$displaySuffix = _a.displaySuffix,\n    displaySuffix = _a$displaySuffix === void 0 ? '' : _a$displaySuffix,\n    is12Hour = _a.is12Hour,\n    locale = _a.locale,\n    timeFormat = _a.timeFormat,\n    tooltip = _a.tooltip,\n    props = __rest(_a, [\"children\", \"className\", \"customFormat\", \"date\", \"dateFormat\", \"displaySuffix\", \"is12Hour\", \"locale\", \"timeFormat\", \"tooltip\"]);\n  var _React$useState = React.useState(function () {\n      var initDate = new Date(dateProp);\n      if (isValidDate(initDate)) {\n        return initDate;\n      }\n      return new Date();\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    date = _React$useState2[0],\n    setDate = _React$useState2[1];\n  React.useEffect(function () {\n    var dateFromProp = new Date(dateProp);\n    if (isValidDate(dateFromProp) && dateFromProp.toString() !== new Date(date).toString()) {\n      setDate(dateFromProp);\n    } else if (!dateProp) {\n      setDate(new Date());\n    }\n  }, [dateProp]);\n  var hasTimeFormat = timeFormat && !customFormat;\n  var formatOptions = Object.assign(Object.assign(Object.assign({}, dateFormat && !customFormat && {\n    dateStyle: dateFormat\n  }), customFormat && Object.assign({}, customFormat)), is12Hour !== undefined && {\n    hour12: is12Hour\n  });\n  var dateAsLocaleString = new Date(date).toLocaleString(locale, Object.assign(Object.assign({}, formatOptions), hasTimeFormat && {\n    timeStyle: timeFormat\n  }));\n  var defaultDisplay = \"\".concat(dateAsLocaleString).concat(displaySuffix ? ' ' + displaySuffix : '');\n  var utcTimeFormat = timeFormat !== 'short' ? 'medium' : 'short';\n  var convertToUTCString = function convertToUTCString(date) {\n    return new Date(date).toUTCString().slice(0, -3);\n  };\n  var utcDateString = new Date(convertToUTCString(date)).toLocaleString(locale, Object.assign(Object.assign({}, formatOptions), hasTimeFormat && {\n    timeStyle: utcTimeFormat\n  }));\n  var defaultTooltipContent = \"\".concat(utcDateString).concat((tooltip === null || tooltip === void 0 ? void 0 : tooltip.suffix) ? ' ' + tooltip.suffix : ' UTC');\n  var dateTime = props.dateTime,\n    propsWithoutDateTime = __rest(props, [\"dateTime\"]);\n  var timestamp = React.createElement(\"span\", Object.assign({\n    className: css(styles.timestamp, tooltip && styles.modifiers.helpText, className)\n  }, tooltip && {\n    tabIndex: 0\n  }, propsWithoutDateTime), React.createElement(\"time\", {\n    className: \"pf-c-timestamp__text\",\n    dateTime: dateTime || new Date(date).toISOString()\n  }, !children ? defaultDisplay : children));\n  return tooltip ? React.createElement(Tooltip, Object.assign({\n    content: tooltip.variant === TimestampTooltipVariant.default ? defaultTooltipContent : tooltip.content\n  }, tooltip.tooltipProps), timestamp) : timestamp;\n};\nTimestamp.displayName = 'Timestamp';","map":{"version":3,"names":["React","styles","css","Tooltip","isValidDate","TimestampFormat","TimestampTooltipVariant","Timestamp","_a","children","className","customFormat","dateProp","date","dateFormat","_a$displaySuffix","displaySuffix","is12Hour","locale","timeFormat","tooltip","props","__rest","_React$useState","useState","initDate","Date","_React$useState2","_slicedToArray","setDate","useEffect","dateFromProp","toString","hasTimeFormat","formatOptions","Object","assign","dateStyle","undefined","hour12","dateAsLocaleString","toLocaleString","timeStyle","defaultDisplay","concat","utcTimeFormat","convertToUTCString","toUTCString","slice","utcDateString","defaultTooltipContent","suffix","dateTime","propsWithoutDateTime","timestamp","createElement","modifiers","helpText","tabIndex","toISOString","content","variant","default","tooltipProps","displayName"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@patternfly/react-core/src/components/Timestamp/Timestamp.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Timestamp/timestamp';\nimport { css } from '@patternfly/react-styles';\nimport { Tooltip } from '../Tooltip';\nimport { isValidDate } from '../../helpers/datetimeUtils';\n\nexport enum TimestampFormat {\n  full = 'full',\n  long = 'long',\n  medium = 'medium',\n  short = 'short'\n}\n\nexport enum TimestampTooltipVariant {\n  default = 'default',\n  custom = 'custom'\n}\n\nexport interface TimestampTooltip {\n  /** The variant of the tooltip. The \"default\" variant displays the date passed into\n   * the timestamp's date prop as a UTC string.\n   */\n  variant: 'default' | 'custom';\n  /** Content displayed in the tooltip when using the \"custom\" variant. */\n  content?: React.ReactNode;\n  /** Additional props passed to the tooltip. */\n  tooltipProps?: any;\n  /** A custom suffix to apply to a \"default\" variant tooltip. */\n  suffix?: string;\n}\n\nexport interface TimestampProps extends React.HTMLProps<HTMLSpanElement> {\n  /** Displays custom content inside the timestamp, such as a relative time. This prop will\n   * override the default content that is displayed. Custom content will not be affected by\n   * any props that format or add to displayed content.\n   */\n  children?: React.ReactNode;\n  /** Class to add to the outer span. */\n  className?: string;\n  /** Applies custom formatting to the displayed date and/or time. Passing this prop in will\n   * override the dateFormat and timeFormat props.\n   */\n  customFormat?: { [key: string]: string };\n  /** Determines the default content that is displayed inside the timestamp and the value of\n   * the inner time element's datetime attribute. */\n  date?: Date;\n  /** Determines the format of the displayed date in the timestamp and UTC tooltip. Examples:\n   * \"Full\" => Tuesday, August 9, 2022;\n   * \"Long\" => August 9, 2022;\n   * \"Medium\" => Aug 9, 2022;\n   * \"Short\" => 8/9/22\n   */\n  dateFormat?: 'full' | 'long' | 'medium' | 'short';\n  /** Applies a custom suffix to the displayed content, usually after the time, such as a\n   * custom time zone.\n   */\n  displaySuffix?: string;\n  /** Flag for displaying the time in a 12 hour format. If this prop is not passed in,\n   * the hour format will be based on the locale prop's value.\n   */\n  is12Hour?: boolean;\n  /** Determines which locale to use in the displayed content. Defaults to the current locale\n   * when this prop is not passed in. For more information about locale's:\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation\n   */\n  locale?: string;\n  /** Determines the format of the displayed time in the timestamp and UTC tooltip. Examples:\n   * \"Full\" => 11:25:00 AM Eastern Daylight Time\n   * \"Long\" => 11:25:00 AM EDT\n   * \"Medium\" => 11:25:00 AM\n   * \"Short\" => 11:25 AM\n   */\n  timeFormat?: 'full' | 'long' | 'medium' | 'short';\n  /** Adds a tooltip to the timestamp. */\n  tooltip?: TimestampTooltip;\n}\n\nexport const Timestamp: React.FunctionComponent<TimestampProps> = ({\n  children,\n  className,\n  customFormat,\n  date: dateProp,\n  dateFormat,\n  displaySuffix = '',\n  is12Hour,\n  locale,\n  timeFormat,\n  tooltip,\n  ...props\n}: TimestampProps) => {\n  const [date, setDate] = React.useState(() => {\n    const initDate = new Date(dateProp);\n    if (isValidDate(initDate)) {\n      return initDate;\n    }\n\n    return new Date();\n  });\n\n  React.useEffect(() => {\n    const dateFromProp = new Date(dateProp);\n    if (isValidDate(dateFromProp) && dateFromProp.toString() !== new Date(date).toString()) {\n      setDate(dateFromProp);\n    } else if (!dateProp) {\n      setDate(new Date());\n    }\n  }, [dateProp]);\n\n  const hasTimeFormat = timeFormat && !customFormat;\n  const formatOptions = {\n    ...(dateFormat && !customFormat && { dateStyle: dateFormat }),\n    ...(customFormat && { ...customFormat }),\n    ...(is12Hour !== undefined && { hour12: is12Hour })\n  };\n\n  const dateAsLocaleString = new Date(date).toLocaleString(locale, {\n    ...formatOptions,\n    ...(hasTimeFormat && { timeStyle: timeFormat })\n  });\n  const defaultDisplay = `${dateAsLocaleString}${displaySuffix ? ' ' + displaySuffix : ''}`;\n\n  const utcTimeFormat = timeFormat !== 'short' ? 'medium' : 'short';\n  const convertToUTCString = (date: Date) => new Date(date).toUTCString().slice(0, -3);\n  const utcDateString = new Date(convertToUTCString(date)).toLocaleString(locale, {\n    ...formatOptions,\n    ...(hasTimeFormat && { timeStyle: utcTimeFormat })\n  });\n  const defaultTooltipContent = `${utcDateString}${tooltip?.suffix ? ' ' + tooltip.suffix : ' UTC'}`;\n\n  const { dateTime, ...propsWithoutDateTime } = props;\n\n  const timestamp = (\n    <span\n      className={css(styles.timestamp, tooltip && styles.modifiers.helpText, className)}\n      {...(tooltip && { tabIndex: 0 })}\n      {...propsWithoutDateTime}\n    >\n      <time className=\"pf-c-timestamp__text\" dateTime={dateTime || new Date(date).toISOString()}>\n        {!children ? defaultDisplay : children}\n      </time>\n    </span>\n  );\n\n  return tooltip ? (\n    <Tooltip\n      content={tooltip.variant === TimestampTooltipVariant.default ? defaultTooltipContent : tooltip.content}\n      {...tooltip.tooltipProps}\n    >\n      {timestamp}\n    </Tooltip>\n  ) : (\n    timestamp\n  );\n};\nTimestamp.displayName = 'Timestamp';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}