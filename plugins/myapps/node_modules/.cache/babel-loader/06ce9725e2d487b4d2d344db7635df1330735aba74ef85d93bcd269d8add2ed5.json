{"ast":null,"code":"// @ts-nocheck\nexport var top = 'top';\nexport var bottom = 'bottom';\nexport var right = 'right';\nexport var left = 'left';\nexport var auto = 'auto';\nexport var basePlacements = [top, bottom, right, left];\nexport var start = 'start';\nexport var end = 'end';\nexport var clippingParents = 'clippingParents';\nexport var viewport = 'viewport';\nexport var popper = 'popper';\nexport var reference = 'reference';\nexport var variationPlacements = basePlacements.reduce(function (acc, placement) {\n  return acc.concat([\"\".concat(placement, \"-\").concat(start), \"\".concat(placement, \"-\").concat(end)]);\n}, []);\nexport var placements = [].concat(basePlacements, [auto]).reduce(function (acc, placement) {\n  return acc.concat([placement, \"\".concat(placement, \"-\").concat(start), \"\".concat(placement, \"-\").concat(end)]);\n}, []);\n// modifiers that need to read the DOM\nexport var beforeRead = 'beforeRead';\nexport var read = 'read';\nexport var afterRead = 'afterRead';\n// pure-logic modifiers\nexport var beforeMain = 'beforeMain';\nexport var main = 'main';\nexport var afterMain = 'afterMain';\n// modifier with the purpose to write to the DOM (or write into a framework state)\nexport var beforeWrite = 'beforeWrite';\nexport var write = 'write';\nexport var afterWrite = 'afterWrite';\nexport var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];","map":{"version":3,"names":["top","bottom","right","left","auto","basePlacements","start","end","clippingParents","viewport","popper","reference","variationPlacements","reduce","acc","placement","concat","placements","beforeRead","read","afterRead","beforeMain","main","afterMain","beforeWrite","write","afterWrite","modifierPhases"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@patternfly/react-core/src/helpers/Popper/thirdparty/popper-core/enums.ts"],"sourcesContent":["// @ts-nocheck\nexport const top: 'top' = 'top';\nexport const bottom: 'bottom' = 'bottom';\nexport const right: 'right' = 'right';\nexport const left: 'left' = 'left';\nexport const auto: 'auto' = 'auto';\nexport type BasePlacement = typeof top | typeof bottom | typeof right | typeof left;\nexport const basePlacements: BasePlacement[] = [top, bottom, right, left];\n\nexport const start: 'start' = 'start';\nexport const end: 'end' = 'end';\nexport type Variation = typeof start | typeof end;\n\nexport const clippingParents: 'clippingParents' = 'clippingParents';\nexport const viewport: 'viewport' = 'viewport';\nexport type Boundary = HTMLElement | HTMLElement[] | typeof clippingParents;\nexport type RootBoundary = typeof viewport | 'document';\n\nexport const popper: 'popper' = 'popper';\nexport const reference: 'reference' = 'reference';\nexport type Context = typeof popper | typeof reference;\n\nexport type VariationPlacement =\n  | 'top-start'\n  | 'top-end'\n  | 'bottom-start'\n  | 'bottom-end'\n  | 'right-start'\n  | 'right-end'\n  | 'left-start'\n  | 'left-end';\nexport type AutoPlacement = 'auto' | 'auto-start' | 'auto-end';\nexport type ComputedPlacement = VariationPlacement | BasePlacement;\nexport type Placement = AutoPlacement | BasePlacement | VariationPlacement;\n\nexport const variationPlacements: VariationPlacement[] = basePlacements.reduce(\n  (acc: VariationPlacement[], placement: BasePlacement) =>\n    acc.concat([`${placement}-${start}` as any, `${placement}-${end}` as any]),\n  []\n);\nexport const placements: Placement[] = [...basePlacements, auto].reduce(\n  (acc: Placement[], placement: BasePlacement | typeof auto): Placement[] =>\n    acc.concat([placement, `${placement}-${start}` as any, `${placement}-${end}` as any]),\n  []\n);\n\n// modifiers that need to read the DOM\nexport const beforeRead: 'beforeRead' = 'beforeRead';\nexport const read: 'read' = 'read';\nexport const afterRead: 'afterRead' = 'afterRead';\n// pure-logic modifiers\nexport const beforeMain: 'beforeMain' = 'beforeMain';\nexport const main: 'main' = 'main';\nexport const afterMain: 'afterMain' = 'afterMain';\n// modifier with the purpose to write to the DOM (or write into a framework state)\nexport const beforeWrite: 'beforeWrite' = 'beforeWrite';\nexport const write: 'write' = 'write';\nexport const afterWrite: 'afterWrite' = 'afterWrite';\nexport const modifierPhases: ModifierPhases[] = [\n  beforeRead,\n  read,\n  afterRead,\n  beforeMain,\n  main,\n  afterMain,\n  beforeWrite,\n  write,\n  afterWrite\n];\n\nexport type ModifierPhases =\n  | typeof beforeRead\n  | typeof read\n  | typeof afterRead\n  | typeof beforeMain\n  | typeof main\n  | typeof afterMain\n  | typeof beforeWrite\n  | typeof write\n  | typeof afterWrite;\n"],"mappings":"AAAA;AACA,OAAO,IAAMA,GAAG,GAAU,KAAK;AAC/B,OAAO,IAAMC,MAAM,GAAa,QAAQ;AACxC,OAAO,IAAMC,KAAK,GAAY,OAAO;AACrC,OAAO,IAAMC,IAAI,GAAW,MAAM;AAClC,OAAO,IAAMC,IAAI,GAAW,MAAM;AAElC,OAAO,IAAMC,cAAc,GAAoB,CAACL,GAAG,EAAEC,MAAM,EAAEC,KAAK,EAAEC,IAAI,CAAC;AAEzE,OAAO,IAAMG,KAAK,GAAY,OAAO;AACrC,OAAO,IAAMC,GAAG,GAAU,KAAK;AAG/B,OAAO,IAAMC,eAAe,GAAsB,iBAAiB;AACnE,OAAO,IAAMC,QAAQ,GAAe,UAAU;AAI9C,OAAO,IAAMC,MAAM,GAAa,QAAQ;AACxC,OAAO,IAAMC,SAAS,GAAgB,WAAW;AAgBjD,OAAO,IAAMC,mBAAmB,GAAyBP,cAAc,CAACQ,MAAM,CAC5E,UAACC,GAAyB,EAAEC,SAAwB;EAAA,OAClDD,GAAG,CAACE,MAAM,CAAC,IAAAA,MAAA,CAAID,SAAS,OAAAC,MAAA,CAAIV,KAAK,MAAAU,MAAA,CAAcD,SAAS,OAAAC,MAAA,CAAIT,GAAG,EAAU,CAAC;AAAA,GAC5E,EAAE,CACH;AACD,OAAO,IAAMU,UAAU,GAAgB,GAAAD,MAAA,CAAIX,cAAc,GAAED,IAAI,GAAES,MAAM,CACrE,UAACC,GAAgB,EAAEC,SAAsC;EAAA,OACvDD,GAAG,CAACE,MAAM,CAAC,CAACD,SAAS,KAAAC,MAAA,CAAKD,SAAS,OAAAC,MAAA,CAAIV,KAAK,MAAAU,MAAA,CAAcD,SAAS,OAAAC,MAAA,CAAIT,GAAG,EAAU,CAAC;AAAA,GACvF,EAAE,CACH;AAED;AACA,OAAO,IAAMW,UAAU,GAAiB,YAAY;AACpD,OAAO,IAAMC,IAAI,GAAW,MAAM;AAClC,OAAO,IAAMC,SAAS,GAAgB,WAAW;AACjD;AACA,OAAO,IAAMC,UAAU,GAAiB,YAAY;AACpD,OAAO,IAAMC,IAAI,GAAW,MAAM;AAClC,OAAO,IAAMC,SAAS,GAAgB,WAAW;AACjD;AACA,OAAO,IAAMC,WAAW,GAAkB,aAAa;AACvD,OAAO,IAAMC,KAAK,GAAY,OAAO;AACrC,OAAO,IAAMC,UAAU,GAAiB,YAAY;AACpD,OAAO,IAAMC,cAAc,GAAqB,CAC9CT,UAAU,EACVC,IAAI,EACJC,SAAS,EACTC,UAAU,EACVC,IAAI,EACJC,SAAS,EACTC,WAAW,EACXC,KAAK,EACLC,UAAU,CACX"},"metadata":{},"sourceType":"module","externalDependencies":[]}