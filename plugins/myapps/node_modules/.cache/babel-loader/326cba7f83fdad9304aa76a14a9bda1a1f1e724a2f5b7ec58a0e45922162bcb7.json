{"ast":null,"code":"import { maybe } from \"../globals/index.js\";\nexport var canUseWeakMap = typeof WeakMap === 'function' && maybe(function () {\n  return navigator.product;\n}) !== 'ReactNative';\nexport var canUseWeakSet = typeof WeakSet === 'function';\nexport var canUseSymbol = typeof Symbol === 'function' && typeof Symbol.for === 'function';\nexport var canUseAsyncIteratorSymbol = canUseSymbol && Symbol.asyncIterator;\nexport var canUseDOM = typeof maybe(function () {\n  return window.document.createElement;\n}) === \"function\";\nvar usingJSDOM = maybe(function () {\n  return navigator.userAgent.indexOf(\"jsdom\") >= 0;\n}) || false;\nexport var canUseLayoutEffect = canUseDOM && !usingJSDOM;","map":{"version":3,"names":["maybe","canUseWeakMap","WeakMap","navigator","product","canUseWeakSet","WeakSet","canUseSymbol","Symbol","for","canUseAsyncIteratorSymbol","asyncIterator","canUseDOM","window","document","createElement","usingJSDOM","userAgent","indexOf","canUseLayoutEffect"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@apollo/src/utilities/common/canUse.ts"],"sourcesContent":["import { maybe } from \"../globals\";\n\nexport const canUseWeakMap =\n  typeof WeakMap === 'function' &&\n  maybe(() => navigator.product) !== 'ReactNative';\n\nexport const canUseWeakSet = typeof WeakSet === 'function';\n\nexport const canUseSymbol =\n  typeof Symbol === 'function' &&\n  typeof Symbol.for === 'function';\n\nexport const canUseAsyncIteratorSymbol = canUseSymbol && Symbol.asyncIterator;\n\nexport const canUseDOM =\n  typeof maybe(() => window.document.createElement) === \"function\";\n\nconst usingJSDOM: boolean =\n  // Following advice found in this comment from @domenic (maintainer of jsdom):\n  // https://github.com/jsdom/jsdom/issues/1537#issuecomment-229405327\n  //\n  // Since we control the version of Jest and jsdom used when running Apollo\n  // Client tests, and that version is recent enought to include \" jsdom/x.y.z\"\n  // at the end of the user agent string, I believe this case is all we need to\n  // check. Testing for \"Node.js\" was recommended for backwards compatibility\n  // with older version of jsdom, but we don't have that problem.\n  maybe(() => navigator.userAgent.indexOf(\"jsdom\") >= 0) || false;\n\n// Our tests should all continue to pass if we remove this !usingJSDOM\n// condition, thereby allowing useLayoutEffect when using jsdom. Unfortunately,\n// if we allow useLayoutEffect, then useSyncExternalStore generates many\n// warnings about useLayoutEffect doing nothing on the server. While these\n// warnings are harmless, this !usingJSDOM condition seems to be the best way to\n// prevent them (i.e. skipping useLayoutEffect when using jsdom).\nexport const canUseLayoutEffect = canUseDOM && !usingJSDOM;\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,qBAAa;AAEnC,OAAO,IAAMC,aAAa,GACxB,OAAOC,OAAO,KAAK,UAAU,IAC7BF,KAAK,CAAC;EAAM,OAAAG,SAAS,CAACC,OAAO;AAAjB,CAAiB,CAAC,KAAK,aAAa;AAElD,OAAO,IAAMC,aAAa,GAAG,OAAOC,OAAO,KAAK,UAAU;AAE1D,OAAO,IAAMC,YAAY,GACvB,OAAOC,MAAM,KAAK,UAAU,IAC5B,OAAOA,MAAM,CAACC,GAAG,KAAK,UAAU;AAElC,OAAO,IAAMC,yBAAyB,GAAGH,YAAY,IAAIC,MAAM,CAACG,aAAa;AAE7E,OAAO,IAAMC,SAAS,GACpB,OAAOZ,KAAK,CAAC;EAAM,OAAAa,MAAM,CAACC,QAAQ,CAACC,aAAa;AAA7B,CAA6B,CAAC,KAAK,UAAU;AAElE,IAAMC,UAAU,GASdhB,KAAK,CAAC;EAAM,OAAAG,SAAS,CAACc,SAAS,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC;AAAzC,CAAyC,CAAC,IAAI,KAAK;AAQjE,OAAO,IAAMC,kBAAkB,GAAGP,SAAS,IAAI,CAACI,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}