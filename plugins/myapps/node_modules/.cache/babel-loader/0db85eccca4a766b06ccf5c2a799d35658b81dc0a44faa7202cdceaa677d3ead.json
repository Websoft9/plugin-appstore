{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport \"../../utilities/globals/index.js\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport { visit } from 'graphql';\nimport { ApolloLink } from \"../core/index.js\";\nimport { Observable, hasDirectives } from \"../../utilities/index.js\";\nimport { serializeFetchParameter } from \"./serializeFetchParameter.js\";\nimport { selectURI } from \"./selectURI.js\";\nimport { handleError, readMultipartBody, readJsonBody } from \"./parseAndCheckHttpResponse.js\";\nimport { checkFetcher } from \"./checkFetcher.js\";\nimport { selectHttpOptionsAndBodyInternal, defaultPrinter, fallbackHttpConfig } from \"./selectHttpOptionsAndBody.js\";\nimport { createSignalIfSupported } from \"./createSignalIfSupported.js\";\nimport { rewriteURIForGET } from \"./rewriteURIForGET.js\";\nimport { fromError } from \"../utils/index.js\";\nimport { maybe, getMainDefinition } from \"../../utilities/index.js\";\nvar backupFetch = maybe(function () {\n  return fetch;\n});\nexport var createHttpLink = function createHttpLink(linkOptions) {\n  if (linkOptions === void 0) {\n    linkOptions = {};\n  }\n  var _a = linkOptions.uri,\n    uri = _a === void 0 ? '/graphql' : _a,\n    preferredFetch = linkOptions.fetch,\n    _b = linkOptions.print,\n    print = _b === void 0 ? defaultPrinter : _b,\n    includeExtensions = linkOptions.includeExtensions,\n    preserveHeaderCase = linkOptions.preserveHeaderCase,\n    useGETForQueries = linkOptions.useGETForQueries,\n    _c = linkOptions.includeUnusedVariables,\n    includeUnusedVariables = _c === void 0 ? false : _c,\n    requestOptions = __rest(linkOptions, [\"uri\", \"fetch\", \"print\", \"includeExtensions\", \"preserveHeaderCase\", \"useGETForQueries\", \"includeUnusedVariables\"]);\n  if (__DEV__) {\n    checkFetcher(preferredFetch || backupFetch);\n  }\n  var linkConfig = {\n    http: {\n      includeExtensions: includeExtensions,\n      preserveHeaderCase: preserveHeaderCase\n    },\n    options: requestOptions.fetchOptions,\n    credentials: requestOptions.credentials,\n    headers: requestOptions.headers\n  };\n  return new ApolloLink(function (operation) {\n    var chosenURI = selectURI(operation, uri);\n    var context = operation.getContext();\n    var clientAwarenessHeaders = {};\n    if (context.clientAwareness) {\n      var _a = context.clientAwareness,\n        name_1 = _a.name,\n        version = _a.version;\n      if (name_1) {\n        clientAwarenessHeaders['apollographql-client-name'] = name_1;\n      }\n      if (version) {\n        clientAwarenessHeaders['apollographql-client-version'] = version;\n      }\n    }\n    var contextHeaders = __assign(__assign({}, clientAwarenessHeaders), context.headers);\n    var contextConfig = {\n      http: context.http,\n      options: context.fetchOptions,\n      credentials: context.credentials,\n      headers: contextHeaders\n    };\n    var _b = selectHttpOptionsAndBodyInternal(operation, print, fallbackHttpConfig, linkConfig, contextConfig),\n      options = _b.options,\n      body = _b.body;\n    if (body.variables && !includeUnusedVariables) {\n      var unusedNames_1 = new Set(Object.keys(body.variables));\n      visit(operation.query, {\n        Variable: function Variable(node, _key, parent) {\n          if (parent && parent.kind !== 'VariableDefinition') {\n            unusedNames_1.delete(node.name.value);\n          }\n        }\n      });\n      if (unusedNames_1.size) {\n        body.variables = __assign({}, body.variables);\n        unusedNames_1.forEach(function (name) {\n          delete body.variables[name];\n        });\n      }\n    }\n    var controller;\n    if (!options.signal) {\n      var _c = createSignalIfSupported(),\n        _controller = _c.controller,\n        signal = _c.signal;\n      controller = _controller;\n      if (controller) options.signal = signal;\n    }\n    var definitionIsMutation = function definitionIsMutation(d) {\n      return d.kind === 'OperationDefinition' && d.operation === 'mutation';\n    };\n    var definitionIsSubscription = function definitionIsSubscription(d) {\n      return d.kind === 'OperationDefinition' && d.operation === 'subscription';\n    };\n    var isSubscription = definitionIsSubscription(getMainDefinition(operation.query));\n    var hasDefer = hasDirectives(['defer'], operation.query);\n    if (useGETForQueries && !operation.query.definitions.some(definitionIsMutation)) {\n      options.method = 'GET';\n    }\n    if (hasDefer || isSubscription) {\n      options.headers = options.headers || {};\n      var acceptHeader = \"multipart/mixed;\";\n      if (isSubscription && hasDefer) {\n        __DEV__ && invariant.warn(\"Multipart-subscriptions do not support @defer\");\n      }\n      if (isSubscription) {\n        acceptHeader += 'boundary=graphql;subscriptionSpec=1.0,application/json';\n      } else if (hasDefer) {\n        acceptHeader += 'deferSpec=20220824,application/json';\n      }\n      options.headers.accept = acceptHeader;\n    }\n    if (options.method === 'GET') {\n      var _d = rewriteURIForGET(chosenURI, body),\n        newURI = _d.newURI,\n        parseError = _d.parseError;\n      if (parseError) {\n        return fromError(parseError);\n      }\n      chosenURI = newURI;\n    } else {\n      try {\n        options.body = serializeFetchParameter(body, 'Payload');\n      } catch (parseError) {\n        return fromError(parseError);\n      }\n    }\n    return new Observable(function (observer) {\n      var currentFetch = preferredFetch || maybe(function () {\n        return fetch;\n      }) || backupFetch;\n      currentFetch(chosenURI, options).then(function (response) {\n        var _a;\n        operation.setContext({\n          response: response\n        });\n        var ctype = (_a = response.headers) === null || _a === void 0 ? void 0 : _a.get('content-type');\n        if (ctype !== null && /^multipart\\/mixed/i.test(ctype)) {\n          return readMultipartBody(response, observer);\n        } else {\n          return readJsonBody(response, operation, observer);\n        }\n      }).catch(function (err) {\n        return handleError(err, observer);\n      });\n      return function () {\n        if (controller) controller.abort();\n      };\n    });\n  });\n};","map":{"version":3,"names":["invariant","visit","ApolloLink","Observable","hasDirectives","serializeFetchParameter","selectURI","handleError","readMultipartBody","readJsonBody","checkFetcher","selectHttpOptionsAndBodyInternal","defaultPrinter","fallbackHttpConfig","createSignalIfSupported","rewriteURIForGET","fromError","maybe","getMainDefinition","backupFetch","fetch","createHttpLink","linkOptions","_a","uri","preferredFetch","_b","print","includeExtensions","preserveHeaderCase","useGETForQueries","_c","includeUnusedVariables","requestOptions","__rest","__DEV__","linkConfig","http","options","fetchOptions","credentials","headers","operation","chosenURI","context","getContext","clientAwarenessHeaders","clientAwareness","name_1","name","version","contextHeaders","__assign","contextConfig","body","variables","unusedNames_1","Set","Object","keys","query","Variable","node","_key","parent","kind","delete","value","size","forEach","controller","signal","_controller","definitionIsMutation","d","definitionIsSubscription","isSubscription","hasDefer","definitions","some","method","acceptHeader","warn","accept","_d","newURI","parseError","observer","currentFetch","then","response","setContext","ctype","get","test","catch","err","abort"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@apollo/src/link/http/createHttpLink.ts"],"sourcesContent":["import '../../utilities/globals';\nimport { invariant } from '../../utilities/globals';\n\nimport { visit, DefinitionNode, VariableDefinitionNode } from 'graphql';\n\nimport { ApolloLink } from '../core';\nimport { Observable, hasDirectives } from '../../utilities';\nimport { serializeFetchParameter } from './serializeFetchParameter';\nimport { selectURI } from './selectURI';\nimport {\n  handleError,\n  readMultipartBody,\n  readJsonBody\n} from './parseAndCheckHttpResponse';\nimport { checkFetcher } from './checkFetcher';\nimport {\n  selectHttpOptionsAndBodyInternal,\n  defaultPrinter,\n  fallbackHttpConfig,\n  HttpOptions\n} from './selectHttpOptionsAndBody';\nimport { createSignalIfSupported } from './createSignalIfSupported';\nimport { rewriteURIForGET } from './rewriteURIForGET';\nimport { fromError } from '../utils';\nimport { maybe, getMainDefinition } from '../../utilities';\n\nconst backupFetch = maybe(() => fetch);\n\nexport const createHttpLink = (linkOptions: HttpOptions = {}) => {\n  let {\n    uri = '/graphql',\n    // use default global fetch if nothing passed in\n    fetch: preferredFetch,\n    print = defaultPrinter,\n    includeExtensions,\n    preserveHeaderCase,\n    useGETForQueries,\n    includeUnusedVariables = false,\n    ...requestOptions\n  } = linkOptions;\n\n  if (__DEV__) {\n    // Make sure at least one of preferredFetch, window.fetch, or backupFetch is\n    // defined, so requests won't fail at runtime.\n    checkFetcher(preferredFetch || backupFetch);\n  }\n\n  const linkConfig = {\n    http: { includeExtensions, preserveHeaderCase },\n    options: requestOptions.fetchOptions,\n    credentials: requestOptions.credentials,\n    headers: requestOptions.headers,\n  };\n\n  return new ApolloLink(operation => {\n    let chosenURI = selectURI(operation, uri);\n\n    const context = operation.getContext();\n\n    // `apollographql-client-*` headers are automatically set if a\n    // `clientAwareness` object is found in the context. These headers are\n    // set first, followed by the rest of the headers pulled from\n    // `context.headers`. If desired, `apollographql-client-*` headers set by\n    // the `clientAwareness` object can be overridden by\n    // `apollographql-client-*` headers set in `context.headers`.\n    const clientAwarenessHeaders: {\n      'apollographql-client-name'?: string;\n      'apollographql-client-version'?: string;\n    } = {};\n\n    if (context.clientAwareness) {\n      const { name, version } = context.clientAwareness;\n      if (name) {\n        clientAwarenessHeaders['apollographql-client-name'] = name;\n      }\n      if (version) {\n        clientAwarenessHeaders['apollographql-client-version'] = version;\n      }\n    }\n\n    const contextHeaders = { ...clientAwarenessHeaders, ...context.headers };\n\n    const contextConfig = {\n      http: context.http,\n      options: context.fetchOptions,\n      credentials: context.credentials,\n      headers: contextHeaders,\n    };\n\n    //uses fallback, link, and then context to build options\n    const { options, body } = selectHttpOptionsAndBodyInternal(\n      operation,\n      print,\n      fallbackHttpConfig,\n      linkConfig,\n      contextConfig,\n    );\n\n    if (body.variables && !includeUnusedVariables) {\n      const unusedNames = new Set(Object.keys(body.variables));\n      visit(operation.query, {\n        Variable(node, _key, parent) {\n          // A variable type definition at the top level of a query is not\n          // enough to silence server-side errors about the variable being\n          // unused, so variable definitions do not count as usage.\n          // https://spec.graphql.org/draft/#sec-All-Variables-Used\n          if (parent && (parent as VariableDefinitionNode).kind !== 'VariableDefinition') {\n            unusedNames.delete(node.name.value);\n          }\n        },\n      });\n      if (unusedNames.size) {\n        // Make a shallow copy of body.variables (with keys in the same\n        // order) and then delete unused variables from the copy.\n        body.variables = { ...body.variables };\n        unusedNames.forEach(name => {\n          delete body.variables![name];\n        });\n      }\n    }\n\n    let controller: any;\n    if (!(options as any).signal) {\n      const { controller: _controller, signal } = createSignalIfSupported();\n      controller = _controller;\n      if (controller) (options as any).signal = signal;\n    }\n\n    // If requested, set method to GET if there are no mutations.\n    const definitionIsMutation = (d: DefinitionNode) => {\n      return d.kind === 'OperationDefinition' && d.operation === 'mutation';\n    };\n    const definitionIsSubscription = (d: DefinitionNode) => {\n      return d.kind === 'OperationDefinition' && d.operation === 'subscription';\n    };\n    const isSubscription = definitionIsSubscription(getMainDefinition(operation.query));\n    // does not match custom directives beginning with @defer\n    const hasDefer = hasDirectives(['defer'], operation.query);\n    if (\n      useGETForQueries &&\n      !operation.query.definitions.some(definitionIsMutation)\n    ) {\n      options.method = 'GET';\n    }\n\n    if (hasDefer || isSubscription) {\n      options.headers = options.headers || {};\n      let acceptHeader = \"multipart/mixed;\";\n      // Omit defer-specific headers if the user attempts to defer a selection\n      // set on a subscription and log a warning.\n      if (isSubscription && hasDefer) {\n        invariant.warn(\"Multipart-subscriptions do not support @defer\");\n      }\n\n      if (isSubscription) {\n        acceptHeader += 'boundary=graphql;subscriptionSpec=1.0,application/json';\n      } else if (hasDefer) {\n        acceptHeader += 'deferSpec=20220824,application/json';\n      }\n      options.headers.accept = acceptHeader;\n    }\n\n    if (options.method === 'GET') {\n      const { newURI, parseError } = rewriteURIForGET(chosenURI, body);\n      if (parseError) {\n        return fromError(parseError);\n      }\n      chosenURI = newURI;\n    } else {\n      try {\n        (options as any).body = serializeFetchParameter(body, 'Payload');\n      } catch (parseError) {\n        return fromError(parseError);\n      }\n    }\n\n    return new Observable(observer => {\n      // Prefer linkOptions.fetch (preferredFetch) if provided, and otherwise\n      // fall back to the *current* global window.fetch function (see issue\n      // #7832), or (if all else fails) the backupFetch function we saved when\n      // this module was first evaluated. This last option protects against the\n      // removal of window.fetch, which is unlikely but not impossible.\n      const currentFetch = preferredFetch || maybe(() => fetch) || backupFetch;\n\n      currentFetch!(chosenURI, options)\n        .then(response => {\n          operation.setContext({ response });\n          const ctype = response.headers?.get('content-type');\n\n          if (ctype !== null && /^multipart\\/mixed/i.test(ctype)) {\n            return readMultipartBody(response, observer);\n          } else {\n            return readJsonBody(response, operation, observer);\n          }\n        })\n        .catch(err => handleError(err, observer));\n\n      return () => {\n        // XXX support canceling this request\n        // https://developers.google.com/web/updates/2017/09/abortable-fetch\n        if (controller) controller.abort();\n      };\n    });\n  });\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}