{"ast":null,"code":"import inspect from \"../jsutils/inspect.mjs\";\nimport memoize3 from \"../jsutils/memoize3.mjs\";\nimport invariant from \"../jsutils/invariant.mjs\";\nimport devAssert from \"../jsutils/devAssert.mjs\";\nimport isPromise from \"../jsutils/isPromise.mjs\";\nimport isObjectLike from \"../jsutils/isObjectLike.mjs\";\nimport safeArrayFrom from \"../jsutils/safeArrayFrom.mjs\";\nimport promiseReduce from \"../jsutils/promiseReduce.mjs\";\nimport promiseForObject from \"../jsutils/promiseForObject.mjs\";\nimport { addPath, pathToArray } from \"../jsutils/Path.mjs\";\nimport { GraphQLError } from \"../error/GraphQLError.mjs\";\nimport { locatedError } from \"../error/locatedError.mjs\";\nimport { Kind } from \"../language/kinds.mjs\";\nimport { assertValidSchema } from \"../type/validate.mjs\";\nimport { SchemaMetaFieldDef, TypeMetaFieldDef, TypeNameMetaFieldDef } from \"../type/introspection.mjs\";\nimport { GraphQLIncludeDirective, GraphQLSkipDirective } from \"../type/directives.mjs\";\nimport { isNamedType, isObjectType, isAbstractType, isLeafType, isListType, isNonNullType } from \"../type/definition.mjs\";\nimport { typeFromAST } from \"../utilities/typeFromAST.mjs\";\nimport { getOperationRootType } from \"../utilities/getOperationRootType.mjs\";\nimport { getVariableValues, getArgumentValues, getDirectiveValues } from \"./values.mjs\";\n/**\n * Terminology\n *\n * \"Definitions\" are the generic name for top-level statements in the document.\n * Examples of this include:\n * 1) Operations (such as a query)\n * 2) Fragments\n *\n * \"Operations\" are a generic name for requests in the document.\n * Examples of this include:\n * 1) query,\n * 2) mutation\n *\n * \"Selections\" are the definitions that can appear legally and at\n * single level of the query. These include:\n * 1) field references e.g \"a\"\n * 2) fragment \"spreads\" e.g. \"...c\"\n * 3) inline fragment \"spreads\" e.g. \"...on Type { a }\"\n */\n\n/**\n * Data that must be available at all points during query execution.\n *\n * Namely, schema of the type system that is currently executing,\n * and the fragments defined in the query document\n */\n\nexport function execute(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, typeResolver) {\n  /* eslint-enable no-redeclare */\n  // Extract arguments from object args if provided.\n  return arguments.length === 1 ? executeImpl(argsOrSchema) : executeImpl({\n    schema: argsOrSchema,\n    document: document,\n    rootValue: rootValue,\n    contextValue: contextValue,\n    variableValues: variableValues,\n    operationName: operationName,\n    fieldResolver: fieldResolver,\n    typeResolver: typeResolver\n  });\n}\n/**\n * Also implements the \"Evaluating requests\" section of the GraphQL specification.\n * However, it guarantees to complete synchronously (or throw an error) assuming\n * that all field resolvers are also synchronous.\n */\n\nexport function executeSync(args) {\n  var result = executeImpl(args); // Assert that the execution was synchronous.\n\n  if (isPromise(result)) {\n    throw new Error('GraphQL execution failed to complete synchronously.');\n  }\n  return result;\n}\nfunction executeImpl(args) {\n  var schema = args.schema,\n    document = args.document,\n    rootValue = args.rootValue,\n    contextValue = args.contextValue,\n    variableValues = args.variableValues,\n    operationName = args.operationName,\n    fieldResolver = args.fieldResolver,\n    typeResolver = args.typeResolver; // If arguments are missing or incorrect, throw an error.\n\n  assertValidExecutionArguments(schema, document, variableValues); // If a valid execution context cannot be created due to incorrect arguments,\n  // a \"Response\" with only errors is returned.\n\n  var exeContext = buildExecutionContext(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, typeResolver); // Return early errors if execution context failed.\n\n  if (Array.isArray(exeContext)) {\n    return {\n      errors: exeContext\n    };\n  } // Return a Promise that will eventually resolve to the data described by\n  // The \"Response\" section of the GraphQL specification.\n  //\n  // If errors are encountered while executing a GraphQL field, only that\n  // field and its descendants will be omitted, and sibling fields will still\n  // be executed. An execution which encounters errors will still result in a\n  // resolved Promise.\n\n  var data = executeOperation(exeContext, exeContext.operation, rootValue);\n  return buildResponse(exeContext, data);\n}\n/**\n * Given a completed execution context and data, build the { errors, data }\n * response defined by the \"Response\" section of the GraphQL specification.\n */\n\nfunction buildResponse(exeContext, data) {\n  if (isPromise(data)) {\n    return data.then(function (resolved) {\n      return buildResponse(exeContext, resolved);\n    });\n  }\n  return exeContext.errors.length === 0 ? {\n    data: data\n  } : {\n    errors: exeContext.errors,\n    data: data\n  };\n}\n/**\n * Essential assertions before executing to provide developer feedback for\n * improper use of the GraphQL library.\n *\n * @internal\n */\n\nexport function assertValidExecutionArguments(schema, document, rawVariableValues) {\n  document || devAssert(0, 'Must provide document.'); // If the schema used for execution is invalid, throw an error.\n\n  assertValidSchema(schema); // Variables, if provided, must be an object.\n\n  rawVariableValues == null || isObjectLike(rawVariableValues) || devAssert(0, 'Variables must be provided as an Object where each property is a variable value. Perhaps look to see if an unparsed JSON string was provided.');\n}\n/**\n * Constructs a ExecutionContext object from the arguments passed to\n * execute, which we will pass throughout the other execution methods.\n *\n * Throws a GraphQLError if a valid execution context cannot be created.\n *\n * @internal\n */\n\nexport function buildExecutionContext(schema, document, rootValue, contextValue, rawVariableValues, operationName, fieldResolver, typeResolver) {\n  var _definition$name, _operation$variableDe;\n  var operation;\n  var fragments = Object.create(null);\n  for (var _i2 = 0, _document$definitions2 = document.definitions; _i2 < _document$definitions2.length; _i2++) {\n    var definition = _document$definitions2[_i2];\n    switch (definition.kind) {\n      case Kind.OPERATION_DEFINITION:\n        if (operationName == null) {\n          if (operation !== undefined) {\n            return [new GraphQLError('Must provide operation name if query contains multiple operations.')];\n          }\n          operation = definition;\n        } else if (((_definition$name = definition.name) === null || _definition$name === void 0 ? void 0 : _definition$name.value) === operationName) {\n          operation = definition;\n        }\n        break;\n      case Kind.FRAGMENT_DEFINITION:\n        fragments[definition.name.value] = definition;\n        break;\n    }\n  }\n  if (!operation) {\n    if (operationName != null) {\n      return [new GraphQLError(\"Unknown operation named \\\"\".concat(operationName, \"\\\".\"))];\n    }\n    return [new GraphQLError('Must provide an operation.')];\n  } // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n\n  var variableDefinitions = (_operation$variableDe = operation.variableDefinitions) !== null && _operation$variableDe !== void 0 ? _operation$variableDe : [];\n  var coercedVariableValues = getVariableValues(schema, variableDefinitions, rawVariableValues !== null && rawVariableValues !== void 0 ? rawVariableValues : {}, {\n    maxErrors: 50\n  });\n  if (coercedVariableValues.errors) {\n    return coercedVariableValues.errors;\n  }\n  return {\n    schema: schema,\n    fragments: fragments,\n    rootValue: rootValue,\n    contextValue: contextValue,\n    operation: operation,\n    variableValues: coercedVariableValues.coerced,\n    fieldResolver: fieldResolver !== null && fieldResolver !== void 0 ? fieldResolver : defaultFieldResolver,\n    typeResolver: typeResolver !== null && typeResolver !== void 0 ? typeResolver : defaultTypeResolver,\n    errors: []\n  };\n}\n/**\n * Implements the \"Evaluating operations\" section of the spec.\n */\n\nfunction executeOperation(exeContext, operation, rootValue) {\n  var type = getOperationRootType(exeContext.schema, operation);\n  var fields = collectFields(exeContext, type, operation.selectionSet, Object.create(null), Object.create(null));\n  var path = undefined; // Errors from sub-fields of a NonNull type may propagate to the top level,\n  // at which point we still log the error and null the parent field, which\n  // in this case is the entire response.\n\n  try {\n    var result = operation.operation === 'mutation' ? executeFieldsSerially(exeContext, type, rootValue, path, fields) : executeFields(exeContext, type, rootValue, path, fields);\n    if (isPromise(result)) {\n      return result.then(undefined, function (error) {\n        exeContext.errors.push(error);\n        return Promise.resolve(null);\n      });\n    }\n    return result;\n  } catch (error) {\n    exeContext.errors.push(error);\n    return null;\n  }\n}\n/**\n * Implements the \"Evaluating selection sets\" section of the spec\n * for \"write\" mode.\n */\n\nfunction executeFieldsSerially(exeContext, parentType, sourceValue, path, fields) {\n  return promiseReduce(Object.keys(fields), function (results, responseName) {\n    var fieldNodes = fields[responseName];\n    var fieldPath = addPath(path, responseName, parentType.name);\n    var result = resolveField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);\n    if (result === undefined) {\n      return results;\n    }\n    if (isPromise(result)) {\n      return result.then(function (resolvedResult) {\n        results[responseName] = resolvedResult;\n        return results;\n      });\n    }\n    results[responseName] = result;\n    return results;\n  }, Object.create(null));\n}\n/**\n * Implements the \"Evaluating selection sets\" section of the spec\n * for \"read\" mode.\n */\n\nfunction executeFields(exeContext, parentType, sourceValue, path, fields) {\n  var results = Object.create(null);\n  var containsPromise = false;\n  for (var _i4 = 0, _Object$keys2 = Object.keys(fields); _i4 < _Object$keys2.length; _i4++) {\n    var responseName = _Object$keys2[_i4];\n    var fieldNodes = fields[responseName];\n    var fieldPath = addPath(path, responseName, parentType.name);\n    var result = resolveField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);\n    if (result !== undefined) {\n      results[responseName] = result;\n      if (isPromise(result)) {\n        containsPromise = true;\n      }\n    }\n  } // If there are no promises, we can just return the object\n\n  if (!containsPromise) {\n    return results;\n  } // Otherwise, results is a map from field name to the result of resolving that\n  // field, which is possibly a promise. Return a promise that will return this\n  // same map, but with any promises replaced with the values they resolved to.\n\n  return promiseForObject(results);\n}\n/**\n * Given a selectionSet, adds all of the fields in that selection to\n * the passed in map of fields, and returns it at the end.\n *\n * CollectFields requires the \"runtime type\" of an object. For a field which\n * returns an Interface or Union type, the \"runtime type\" will be the actual\n * Object type returned by that field.\n *\n * @internal\n */\n\nexport function collectFields(exeContext, runtimeType, selectionSet, fields, visitedFragmentNames) {\n  for (var _i6 = 0, _selectionSet$selecti2 = selectionSet.selections; _i6 < _selectionSet$selecti2.length; _i6++) {\n    var selection = _selectionSet$selecti2[_i6];\n    switch (selection.kind) {\n      case Kind.FIELD:\n        {\n          if (!shouldIncludeNode(exeContext, selection)) {\n            continue;\n          }\n          var name = getFieldEntryKey(selection);\n          if (!fields[name]) {\n            fields[name] = [];\n          }\n          fields[name].push(selection);\n          break;\n        }\n      case Kind.INLINE_FRAGMENT:\n        {\n          if (!shouldIncludeNode(exeContext, selection) || !doesFragmentConditionMatch(exeContext, selection, runtimeType)) {\n            continue;\n          }\n          collectFields(exeContext, runtimeType, selection.selectionSet, fields, visitedFragmentNames);\n          break;\n        }\n      case Kind.FRAGMENT_SPREAD:\n        {\n          var fragName = selection.name.value;\n          if (visitedFragmentNames[fragName] || !shouldIncludeNode(exeContext, selection)) {\n            continue;\n          }\n          visitedFragmentNames[fragName] = true;\n          var fragment = exeContext.fragments[fragName];\n          if (!fragment || !doesFragmentConditionMatch(exeContext, fragment, runtimeType)) {\n            continue;\n          }\n          collectFields(exeContext, runtimeType, fragment.selectionSet, fields, visitedFragmentNames);\n          break;\n        }\n    }\n  }\n  return fields;\n}\n/**\n * Determines if a field should be included based on the @include and @skip\n * directives, where @skip has higher precedence than @include.\n */\n\nfunction shouldIncludeNode(exeContext, node) {\n  var skip = getDirectiveValues(GraphQLSkipDirective, node, exeContext.variableValues);\n  if ((skip === null || skip === void 0 ? void 0 : skip.if) === true) {\n    return false;\n  }\n  var include = getDirectiveValues(GraphQLIncludeDirective, node, exeContext.variableValues);\n  if ((include === null || include === void 0 ? void 0 : include.if) === false) {\n    return false;\n  }\n  return true;\n}\n/**\n * Determines if a fragment is applicable to the given type.\n */\n\nfunction doesFragmentConditionMatch(exeContext, fragment, type) {\n  var typeConditionNode = fragment.typeCondition;\n  if (!typeConditionNode) {\n    return true;\n  }\n  var conditionalType = typeFromAST(exeContext.schema, typeConditionNode);\n  if (conditionalType === type) {\n    return true;\n  }\n  if (isAbstractType(conditionalType)) {\n    return exeContext.schema.isSubType(conditionalType, type);\n  }\n  return false;\n}\n/**\n * Implements the logic to compute the key of a given field's entry\n */\n\nfunction getFieldEntryKey(node) {\n  return node.alias ? node.alias.value : node.name.value;\n}\n/**\n * Resolves the field on the given source object. In particular, this\n * figures out the value that the field returns by calling its resolve function,\n * then calls completeValue to complete promises, serialize scalars, or execute\n * the sub-selection-set for objects.\n */\n\nfunction resolveField(exeContext, parentType, source, fieldNodes, path) {\n  var _fieldDef$resolve;\n  var fieldNode = fieldNodes[0];\n  var fieldName = fieldNode.name.value;\n  var fieldDef = getFieldDef(exeContext.schema, parentType, fieldName);\n  if (!fieldDef) {\n    return;\n  }\n  var returnType = fieldDef.type;\n  var resolveFn = (_fieldDef$resolve = fieldDef.resolve) !== null && _fieldDef$resolve !== void 0 ? _fieldDef$resolve : exeContext.fieldResolver;\n  var info = buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path); // Get the resolve function, regardless of if its result is normal or abrupt (error).\n\n  try {\n    // Build a JS object of arguments from the field.arguments AST, using the\n    // variables scope to fulfill any variable references.\n    // TODO: find a way to memoize, in case this field is within a List type.\n    var args = getArgumentValues(fieldDef, fieldNodes[0], exeContext.variableValues); // The resolve function's optional third argument is a context value that\n    // is provided to every resolve function within an execution. It is commonly\n    // used to represent an authenticated user, or request-specific caches.\n\n    var _contextValue = exeContext.contextValue;\n    var result = resolveFn(source, args, _contextValue, info);\n    var completed;\n    if (isPromise(result)) {\n      completed = result.then(function (resolved) {\n        return completeValue(exeContext, returnType, fieldNodes, info, path, resolved);\n      });\n    } else {\n      completed = completeValue(exeContext, returnType, fieldNodes, info, path, result);\n    }\n    if (isPromise(completed)) {\n      // Note: we don't rely on a `catch` method, but we do expect \"thenable\"\n      // to take a second callback for the error case.\n      return completed.then(undefined, function (rawError) {\n        var error = locatedError(rawError, fieldNodes, pathToArray(path));\n        return handleFieldError(error, returnType, exeContext);\n      });\n    }\n    return completed;\n  } catch (rawError) {\n    var error = locatedError(rawError, fieldNodes, pathToArray(path));\n    return handleFieldError(error, returnType, exeContext);\n  }\n}\n/**\n * @internal\n */\n\nexport function buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path) {\n  // The resolve function's optional fourth argument is a collection of\n  // information about the current execution state.\n  return {\n    fieldName: fieldDef.name,\n    fieldNodes: fieldNodes,\n    returnType: fieldDef.type,\n    parentType: parentType,\n    path: path,\n    schema: exeContext.schema,\n    fragments: exeContext.fragments,\n    rootValue: exeContext.rootValue,\n    operation: exeContext.operation,\n    variableValues: exeContext.variableValues\n  };\n}\nfunction handleFieldError(error, returnType, exeContext) {\n  // If the field type is non-nullable, then it is resolved without any\n  // protection from errors, however it still properly locates the error.\n  if (isNonNullType(returnType)) {\n    throw error;\n  } // Otherwise, error protection is applied, logging the error and resolving\n  // a null value for this field if one is encountered.\n\n  exeContext.errors.push(error);\n  return null;\n}\n/**\n * Implements the instructions for completeValue as defined in the\n * \"Field entries\" section of the spec.\n *\n * If the field type is Non-Null, then this recursively completes the value\n * for the inner type. It throws a field error if that completion returns null,\n * as per the \"Nullability\" section of the spec.\n *\n * If the field type is a List, then this recursively completes the value\n * for the inner type on each item in the list.\n *\n * If the field type is a Scalar or Enum, ensures the completed value is a legal\n * value of the type by calling the `serialize` method of GraphQL type\n * definition.\n *\n * If the field is an abstract type, determine the runtime type of the value\n * and then complete based on that type\n *\n * Otherwise, the field type expects a sub-selection set, and will complete the\n * value by evaluating all sub-selections.\n */\n\nfunction completeValue(exeContext, returnType, fieldNodes, info, path, result) {\n  // If result is an Error, throw a located error.\n  if (result instanceof Error) {\n    throw result;\n  } // If field type is NonNull, complete for inner type, and throw field error\n  // if result is null.\n\n  if (isNonNullType(returnType)) {\n    var completed = completeValue(exeContext, returnType.ofType, fieldNodes, info, path, result);\n    if (completed === null) {\n      throw new Error(\"Cannot return null for non-nullable field \".concat(info.parentType.name, \".\").concat(info.fieldName, \".\"));\n    }\n    return completed;\n  } // If result value is null or undefined then return null.\n\n  if (result == null) {\n    return null;\n  } // If field type is List, complete each item in the list with the inner type\n\n  if (isListType(returnType)) {\n    return completeListValue(exeContext, returnType, fieldNodes, info, path, result);\n  } // If field type is a leaf type, Scalar or Enum, serialize to a valid value,\n  // returning null if serialization is not possible.\n\n  if (isLeafType(returnType)) {\n    return completeLeafValue(returnType, result);\n  } // If field type is an abstract type, Interface or Union, determine the\n  // runtime Object type and complete for that type.\n\n  if (isAbstractType(returnType)) {\n    return completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result);\n  } // If field type is Object, execute and complete all sub-selections.\n  // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')\n\n  if (isObjectType(returnType)) {\n    return completeObjectValue(exeContext, returnType, fieldNodes, info, path, result);\n  } // istanbul ignore next (Not reachable. All possible output types have been considered)\n\n  false || invariant(0, 'Cannot complete value of unexpected output type: ' + inspect(returnType));\n}\n/**\n * Complete a list value by completing each item in the list with the\n * inner type\n */\n\nfunction completeListValue(exeContext, returnType, fieldNodes, info, path, result) {\n  // This is specified as a simple map, however we're optimizing the path\n  // where the list contains no Promises by avoiding creating another Promise.\n  var itemType = returnType.ofType;\n  var containsPromise = false;\n  var completedResults = safeArrayFrom(result, function (item, index) {\n    // No need to modify the info object containing the path,\n    // since from here on it is not ever accessed by resolver functions.\n    var itemPath = addPath(path, index, undefined);\n    try {\n      var completedItem;\n      if (isPromise(item)) {\n        completedItem = item.then(function (resolved) {\n          return completeValue(exeContext, itemType, fieldNodes, info, itemPath, resolved);\n        });\n      } else {\n        completedItem = completeValue(exeContext, itemType, fieldNodes, info, itemPath, item);\n      }\n      if (isPromise(completedItem)) {\n        containsPromise = true; // Note: we don't rely on a `catch` method, but we do expect \"thenable\"\n        // to take a second callback for the error case.\n\n        return completedItem.then(undefined, function (rawError) {\n          var error = locatedError(rawError, fieldNodes, pathToArray(itemPath));\n          return handleFieldError(error, itemType, exeContext);\n        });\n      }\n      return completedItem;\n    } catch (rawError) {\n      var error = locatedError(rawError, fieldNodes, pathToArray(itemPath));\n      return handleFieldError(error, itemType, exeContext);\n    }\n  });\n  if (completedResults == null) {\n    throw new GraphQLError(\"Expected Iterable, but did not find one for field \\\"\".concat(info.parentType.name, \".\").concat(info.fieldName, \"\\\".\"));\n  }\n  return containsPromise ? Promise.all(completedResults) : completedResults;\n}\n/**\n * Complete a Scalar or Enum by serializing to a valid value, returning\n * null if serialization is not possible.\n */\n\nfunction completeLeafValue(returnType, result) {\n  var serializedResult = returnType.serialize(result);\n  if (serializedResult === undefined) {\n    throw new Error(\"Expected a value of type \\\"\".concat(inspect(returnType), \"\\\" but \") + \"received: \".concat(inspect(result)));\n  }\n  return serializedResult;\n}\n/**\n * Complete a value of an abstract type by determining the runtime object type\n * of that value, then complete the value for that type.\n */\n\nfunction completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result) {\n  var _returnType$resolveTy;\n  var resolveTypeFn = (_returnType$resolveTy = returnType.resolveType) !== null && _returnType$resolveTy !== void 0 ? _returnType$resolveTy : exeContext.typeResolver;\n  var contextValue = exeContext.contextValue;\n  var runtimeType = resolveTypeFn(result, contextValue, info, returnType);\n  if (isPromise(runtimeType)) {\n    return runtimeType.then(function (resolvedRuntimeType) {\n      return completeObjectValue(exeContext, ensureValidRuntimeType(resolvedRuntimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result);\n    });\n  }\n  return completeObjectValue(exeContext, ensureValidRuntimeType(runtimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result);\n}\nfunction ensureValidRuntimeType(runtimeTypeOrName, exeContext, returnType, fieldNodes, info, result) {\n  if (runtimeTypeOrName == null) {\n    throw new GraphQLError(\"Abstract type \\\"\".concat(returnType.name, \"\\\" must resolve to an Object type at runtime for field \\\"\").concat(info.parentType.name, \".\").concat(info.fieldName, \"\\\". Either the \\\"\").concat(returnType.name, \"\\\" type should provide a \\\"resolveType\\\" function or each possible type should provide an \\\"isTypeOf\\\" function.\"), fieldNodes);\n  } // FIXME: temporary workaround until support for passing object types would be removed in v16.0.0\n\n  var runtimeTypeName = isNamedType(runtimeTypeOrName) ? runtimeTypeOrName.name : runtimeTypeOrName;\n  if (typeof runtimeTypeName !== 'string') {\n    throw new GraphQLError(\"Abstract type \\\"\".concat(returnType.name, \"\\\" must resolve to an Object type at runtime for field \\\"\").concat(info.parentType.name, \".\").concat(info.fieldName, \"\\\" with \") + \"value \".concat(inspect(result), \", received \\\"\").concat(inspect(runtimeTypeOrName), \"\\\".\"));\n  }\n  var runtimeType = exeContext.schema.getType(runtimeTypeName);\n  if (runtimeType == null) {\n    throw new GraphQLError(\"Abstract type \\\"\".concat(returnType.name, \"\\\" was resolve to a type \\\"\").concat(runtimeTypeName, \"\\\" that does not exist inside schema.\"), fieldNodes);\n  }\n  if (!isObjectType(runtimeType)) {\n    throw new GraphQLError(\"Abstract type \\\"\".concat(returnType.name, \"\\\" was resolve to a non-object type \\\"\").concat(runtimeTypeName, \"\\\".\"), fieldNodes);\n  }\n  if (!exeContext.schema.isSubType(returnType, runtimeType)) {\n    throw new GraphQLError(\"Runtime Object type \\\"\".concat(runtimeType.name, \"\\\" is not a possible type for \\\"\").concat(returnType.name, \"\\\".\"), fieldNodes);\n  }\n  return runtimeType;\n}\n/**\n * Complete an Object value by executing all sub-selections.\n */\n\nfunction completeObjectValue(exeContext, returnType, fieldNodes, info, path, result) {\n  // If there is an isTypeOf predicate function, call it with the\n  // current result. If isTypeOf returns false, then raise an error rather\n  // than continuing execution.\n  if (returnType.isTypeOf) {\n    var isTypeOf = returnType.isTypeOf(result, exeContext.contextValue, info);\n    if (isPromise(isTypeOf)) {\n      return isTypeOf.then(function (resolvedIsTypeOf) {\n        if (!resolvedIsTypeOf) {\n          throw invalidReturnTypeError(returnType, result, fieldNodes);\n        }\n        return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result);\n      });\n    }\n    if (!isTypeOf) {\n      throw invalidReturnTypeError(returnType, result, fieldNodes);\n    }\n  }\n  return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result);\n}\nfunction invalidReturnTypeError(returnType, result, fieldNodes) {\n  return new GraphQLError(\"Expected value of type \\\"\".concat(returnType.name, \"\\\" but got: \").concat(inspect(result), \".\"), fieldNodes);\n}\nfunction collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result) {\n  // Collect sub-fields to execute to complete this value.\n  var subFieldNodes = collectSubfields(exeContext, returnType, fieldNodes);\n  return executeFields(exeContext, returnType, result, path, subFieldNodes);\n}\n/**\n * A memoized collection of relevant subfields with regard to the return\n * type. Memoizing ensures the subfields are not repeatedly calculated, which\n * saves overhead when resolving lists of values.\n */\n\nvar collectSubfields = memoize3(_collectSubfields);\nfunction _collectSubfields(exeContext, returnType, fieldNodes) {\n  var subFieldNodes = Object.create(null);\n  var visitedFragmentNames = Object.create(null);\n  for (var _i8 = 0; _i8 < fieldNodes.length; _i8++) {\n    var node = fieldNodes[_i8];\n    if (node.selectionSet) {\n      subFieldNodes = collectFields(exeContext, returnType, node.selectionSet, subFieldNodes, visitedFragmentNames);\n    }\n  }\n  return subFieldNodes;\n}\n/**\n * If a resolveType function is not given, then a default resolve behavior is\n * used which attempts two strategies:\n *\n * First, See if the provided value has a `__typename` field defined, if so, use\n * that value as name of the resolved type.\n *\n * Otherwise, test each possible type for the abstract type by calling\n * isTypeOf for the object being coerced, returning the first type that matches.\n */\n\nexport var defaultTypeResolver = function defaultTypeResolver(value, contextValue, info, abstractType) {\n  // First, look for `__typename`.\n  if (isObjectLike(value) && typeof value.__typename === 'string') {\n    return value.__typename;\n  } // Otherwise, test each possible type.\n\n  var possibleTypes = info.schema.getPossibleTypes(abstractType);\n  var promisedIsTypeOfResults = [];\n  for (var i = 0; i < possibleTypes.length; i++) {\n    var type = possibleTypes[i];\n    if (type.isTypeOf) {\n      var isTypeOfResult = type.isTypeOf(value, contextValue, info);\n      if (isPromise(isTypeOfResult)) {\n        promisedIsTypeOfResults[i] = isTypeOfResult;\n      } else if (isTypeOfResult) {\n        return type.name;\n      }\n    }\n  }\n  if (promisedIsTypeOfResults.length) {\n    return Promise.all(promisedIsTypeOfResults).then(function (isTypeOfResults) {\n      for (var _i9 = 0; _i9 < isTypeOfResults.length; _i9++) {\n        if (isTypeOfResults[_i9]) {\n          return possibleTypes[_i9].name;\n        }\n      }\n    });\n  }\n};\n/**\n * If a resolve function is not given, then a default resolve behavior is used\n * which takes the property of the source object of the same name as the field\n * and returns it as the result, or if it's a function, returns the result\n * of calling that function while passing along args and context value.\n */\n\nexport var defaultFieldResolver = function defaultFieldResolver(source, args, contextValue, info) {\n  // ensure source is a value for which property access is acceptable.\n  if (isObjectLike(source) || typeof source === 'function') {\n    var property = source[info.fieldName];\n    if (typeof property === 'function') {\n      return source[info.fieldName](args, contextValue, info);\n    }\n    return property;\n  }\n};\n/**\n * This method looks up the field on the given type definition.\n * It has special casing for the three introspection fields,\n * __schema, __type and __typename. __typename is special because\n * it can always be queried as a field, even in situations where no\n * other fields are allowed, like on a Union. __schema and __type\n * could get automatically added to the query type, but that would\n * require mutating type definitions, which would cause issues.\n *\n * @internal\n */\n\nexport function getFieldDef(schema, parentType, fieldName) {\n  if (fieldName === SchemaMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return SchemaMetaFieldDef;\n  } else if (fieldName === TypeMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return TypeMetaFieldDef;\n  } else if (fieldName === TypeNameMetaFieldDef.name) {\n    return TypeNameMetaFieldDef;\n  }\n  return parentType.getFields()[fieldName];\n}","map":{"version":3,"names":["inspect","memoize3","invariant","devAssert","isPromise","isObjectLike","safeArrayFrom","promiseReduce","promiseForObject","addPath","pathToArray","GraphQLError","locatedError","Kind","assertValidSchema","SchemaMetaFieldDef","TypeMetaFieldDef","TypeNameMetaFieldDef","GraphQLIncludeDirective","GraphQLSkipDirective","isNamedType","isObjectType","isAbstractType","isLeafType","isListType","isNonNullType","typeFromAST","getOperationRootType","getVariableValues","getArgumentValues","getDirectiveValues","execute","argsOrSchema","document","rootValue","contextValue","variableValues","operationName","fieldResolver","typeResolver","arguments","length","executeImpl","schema","executeSync","args","result","Error","assertValidExecutionArguments","exeContext","buildExecutionContext","Array","isArray","errors","data","executeOperation","operation","buildResponse","then","resolved","rawVariableValues","_definition$name","_operation$variableDe","fragments","Object","create","_i2","_document$definitions2","definitions","definition","kind","OPERATION_DEFINITION","undefined","name","value","FRAGMENT_DEFINITION","concat","variableDefinitions","coercedVariableValues","maxErrors","coerced","defaultFieldResolver","defaultTypeResolver","type","fields","collectFields","selectionSet","path","executeFieldsSerially","executeFields","error","push","Promise","resolve","parentType","sourceValue","keys","results","responseName","fieldNodes","fieldPath","resolveField","resolvedResult","containsPromise","_i4","_Object$keys2","runtimeType","visitedFragmentNames","_i6","_selectionSet$selecti2","selections","selection","FIELD","shouldIncludeNode","getFieldEntryKey","INLINE_FRAGMENT","doesFragmentConditionMatch","FRAGMENT_SPREAD","fragName","fragment","node","skip","if","include","typeConditionNode","typeCondition","conditionalType","isSubType","alias","source","_fieldDef$resolve","fieldNode","fieldName","fieldDef","getFieldDef","returnType","resolveFn","info","buildResolveInfo","_contextValue","completed","completeValue","rawError","handleFieldError","ofType","completeListValue","completeLeafValue","completeAbstractValue","completeObjectValue","itemType","completedResults","item","index","itemPath","completedItem","all","serializedResult","serialize","_returnType$resolveTy","resolveTypeFn","resolveType","resolvedRuntimeType","ensureValidRuntimeType","runtimeTypeOrName","runtimeTypeName","getType","isTypeOf","resolvedIsTypeOf","invalidReturnTypeError","collectAndExecuteSubfields","subFieldNodes","collectSubfields","_collectSubfields","_i8","abstractType","__typename","possibleTypes","getPossibleTypes","promisedIsTypeOfResults","i","isTypeOfResult","isTypeOfResults","_i9","property","getQueryType","getFields"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/graphql/execution/execute.mjs"],"sourcesContent":["import inspect from \"../jsutils/inspect.mjs\";\nimport memoize3 from \"../jsutils/memoize3.mjs\";\nimport invariant from \"../jsutils/invariant.mjs\";\nimport devAssert from \"../jsutils/devAssert.mjs\";\nimport isPromise from \"../jsutils/isPromise.mjs\";\nimport isObjectLike from \"../jsutils/isObjectLike.mjs\";\nimport safeArrayFrom from \"../jsutils/safeArrayFrom.mjs\";\nimport promiseReduce from \"../jsutils/promiseReduce.mjs\";\nimport promiseForObject from \"../jsutils/promiseForObject.mjs\";\nimport { addPath, pathToArray } from \"../jsutils/Path.mjs\";\nimport { GraphQLError } from \"../error/GraphQLError.mjs\";\nimport { locatedError } from \"../error/locatedError.mjs\";\nimport { Kind } from \"../language/kinds.mjs\";\nimport { assertValidSchema } from \"../type/validate.mjs\";\nimport { SchemaMetaFieldDef, TypeMetaFieldDef, TypeNameMetaFieldDef } from \"../type/introspection.mjs\";\nimport { GraphQLIncludeDirective, GraphQLSkipDirective } from \"../type/directives.mjs\";\nimport { isNamedType, isObjectType, isAbstractType, isLeafType, isListType, isNonNullType } from \"../type/definition.mjs\";\nimport { typeFromAST } from \"../utilities/typeFromAST.mjs\";\nimport { getOperationRootType } from \"../utilities/getOperationRootType.mjs\";\nimport { getVariableValues, getArgumentValues, getDirectiveValues } from \"./values.mjs\";\n/**\n * Terminology\n *\n * \"Definitions\" are the generic name for top-level statements in the document.\n * Examples of this include:\n * 1) Operations (such as a query)\n * 2) Fragments\n *\n * \"Operations\" are a generic name for requests in the document.\n * Examples of this include:\n * 1) query,\n * 2) mutation\n *\n * \"Selections\" are the definitions that can appear legally and at\n * single level of the query. These include:\n * 1) field references e.g \"a\"\n * 2) fragment \"spreads\" e.g. \"...c\"\n * 3) inline fragment \"spreads\" e.g. \"...on Type { a }\"\n */\n\n/**\n * Data that must be available at all points during query execution.\n *\n * Namely, schema of the type system that is currently executing,\n * and the fragments defined in the query document\n */\n\nexport function execute(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, typeResolver) {\n  /* eslint-enable no-redeclare */\n  // Extract arguments from object args if provided.\n  return arguments.length === 1 ? executeImpl(argsOrSchema) : executeImpl({\n    schema: argsOrSchema,\n    document: document,\n    rootValue: rootValue,\n    contextValue: contextValue,\n    variableValues: variableValues,\n    operationName: operationName,\n    fieldResolver: fieldResolver,\n    typeResolver: typeResolver\n  });\n}\n/**\n * Also implements the \"Evaluating requests\" section of the GraphQL specification.\n * However, it guarantees to complete synchronously (or throw an error) assuming\n * that all field resolvers are also synchronous.\n */\n\nexport function executeSync(args) {\n  var result = executeImpl(args); // Assert that the execution was synchronous.\n\n  if (isPromise(result)) {\n    throw new Error('GraphQL execution failed to complete synchronously.');\n  }\n\n  return result;\n}\n\nfunction executeImpl(args) {\n  var schema = args.schema,\n      document = args.document,\n      rootValue = args.rootValue,\n      contextValue = args.contextValue,\n      variableValues = args.variableValues,\n      operationName = args.operationName,\n      fieldResolver = args.fieldResolver,\n      typeResolver = args.typeResolver; // If arguments are missing or incorrect, throw an error.\n\n  assertValidExecutionArguments(schema, document, variableValues); // If a valid execution context cannot be created due to incorrect arguments,\n  // a \"Response\" with only errors is returned.\n\n  var exeContext = buildExecutionContext(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, typeResolver); // Return early errors if execution context failed.\n\n  if (Array.isArray(exeContext)) {\n    return {\n      errors: exeContext\n    };\n  } // Return a Promise that will eventually resolve to the data described by\n  // The \"Response\" section of the GraphQL specification.\n  //\n  // If errors are encountered while executing a GraphQL field, only that\n  // field and its descendants will be omitted, and sibling fields will still\n  // be executed. An execution which encounters errors will still result in a\n  // resolved Promise.\n\n\n  var data = executeOperation(exeContext, exeContext.operation, rootValue);\n  return buildResponse(exeContext, data);\n}\n/**\n * Given a completed execution context and data, build the { errors, data }\n * response defined by the \"Response\" section of the GraphQL specification.\n */\n\n\nfunction buildResponse(exeContext, data) {\n  if (isPromise(data)) {\n    return data.then(function (resolved) {\n      return buildResponse(exeContext, resolved);\n    });\n  }\n\n  return exeContext.errors.length === 0 ? {\n    data: data\n  } : {\n    errors: exeContext.errors,\n    data: data\n  };\n}\n/**\n * Essential assertions before executing to provide developer feedback for\n * improper use of the GraphQL library.\n *\n * @internal\n */\n\n\nexport function assertValidExecutionArguments(schema, document, rawVariableValues) {\n  document || devAssert(0, 'Must provide document.'); // If the schema used for execution is invalid, throw an error.\n\n  assertValidSchema(schema); // Variables, if provided, must be an object.\n\n  rawVariableValues == null || isObjectLike(rawVariableValues) || devAssert(0, 'Variables must be provided as an Object where each property is a variable value. Perhaps look to see if an unparsed JSON string was provided.');\n}\n/**\n * Constructs a ExecutionContext object from the arguments passed to\n * execute, which we will pass throughout the other execution methods.\n *\n * Throws a GraphQLError if a valid execution context cannot be created.\n *\n * @internal\n */\n\nexport function buildExecutionContext(schema, document, rootValue, contextValue, rawVariableValues, operationName, fieldResolver, typeResolver) {\n  var _definition$name, _operation$variableDe;\n\n  var operation;\n  var fragments = Object.create(null);\n\n  for (var _i2 = 0, _document$definitions2 = document.definitions; _i2 < _document$definitions2.length; _i2++) {\n    var definition = _document$definitions2[_i2];\n\n    switch (definition.kind) {\n      case Kind.OPERATION_DEFINITION:\n        if (operationName == null) {\n          if (operation !== undefined) {\n            return [new GraphQLError('Must provide operation name if query contains multiple operations.')];\n          }\n\n          operation = definition;\n        } else if (((_definition$name = definition.name) === null || _definition$name === void 0 ? void 0 : _definition$name.value) === operationName) {\n          operation = definition;\n        }\n\n        break;\n\n      case Kind.FRAGMENT_DEFINITION:\n        fragments[definition.name.value] = definition;\n        break;\n    }\n  }\n\n  if (!operation) {\n    if (operationName != null) {\n      return [new GraphQLError(\"Unknown operation named \\\"\".concat(operationName, \"\\\".\"))];\n    }\n\n    return [new GraphQLError('Must provide an operation.')];\n  } // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n\n\n  var variableDefinitions = (_operation$variableDe = operation.variableDefinitions) !== null && _operation$variableDe !== void 0 ? _operation$variableDe : [];\n  var coercedVariableValues = getVariableValues(schema, variableDefinitions, rawVariableValues !== null && rawVariableValues !== void 0 ? rawVariableValues : {}, {\n    maxErrors: 50\n  });\n\n  if (coercedVariableValues.errors) {\n    return coercedVariableValues.errors;\n  }\n\n  return {\n    schema: schema,\n    fragments: fragments,\n    rootValue: rootValue,\n    contextValue: contextValue,\n    operation: operation,\n    variableValues: coercedVariableValues.coerced,\n    fieldResolver: fieldResolver !== null && fieldResolver !== void 0 ? fieldResolver : defaultFieldResolver,\n    typeResolver: typeResolver !== null && typeResolver !== void 0 ? typeResolver : defaultTypeResolver,\n    errors: []\n  };\n}\n/**\n * Implements the \"Evaluating operations\" section of the spec.\n */\n\nfunction executeOperation(exeContext, operation, rootValue) {\n  var type = getOperationRootType(exeContext.schema, operation);\n  var fields = collectFields(exeContext, type, operation.selectionSet, Object.create(null), Object.create(null));\n  var path = undefined; // Errors from sub-fields of a NonNull type may propagate to the top level,\n  // at which point we still log the error and null the parent field, which\n  // in this case is the entire response.\n\n  try {\n    var result = operation.operation === 'mutation' ? executeFieldsSerially(exeContext, type, rootValue, path, fields) : executeFields(exeContext, type, rootValue, path, fields);\n\n    if (isPromise(result)) {\n      return result.then(undefined, function (error) {\n        exeContext.errors.push(error);\n        return Promise.resolve(null);\n      });\n    }\n\n    return result;\n  } catch (error) {\n    exeContext.errors.push(error);\n    return null;\n  }\n}\n/**\n * Implements the \"Evaluating selection sets\" section of the spec\n * for \"write\" mode.\n */\n\n\nfunction executeFieldsSerially(exeContext, parentType, sourceValue, path, fields) {\n  return promiseReduce(Object.keys(fields), function (results, responseName) {\n    var fieldNodes = fields[responseName];\n    var fieldPath = addPath(path, responseName, parentType.name);\n    var result = resolveField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);\n\n    if (result === undefined) {\n      return results;\n    }\n\n    if (isPromise(result)) {\n      return result.then(function (resolvedResult) {\n        results[responseName] = resolvedResult;\n        return results;\n      });\n    }\n\n    results[responseName] = result;\n    return results;\n  }, Object.create(null));\n}\n/**\n * Implements the \"Evaluating selection sets\" section of the spec\n * for \"read\" mode.\n */\n\n\nfunction executeFields(exeContext, parentType, sourceValue, path, fields) {\n  var results = Object.create(null);\n  var containsPromise = false;\n\n  for (var _i4 = 0, _Object$keys2 = Object.keys(fields); _i4 < _Object$keys2.length; _i4++) {\n    var responseName = _Object$keys2[_i4];\n    var fieldNodes = fields[responseName];\n    var fieldPath = addPath(path, responseName, parentType.name);\n    var result = resolveField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);\n\n    if (result !== undefined) {\n      results[responseName] = result;\n\n      if (isPromise(result)) {\n        containsPromise = true;\n      }\n    }\n  } // If there are no promises, we can just return the object\n\n\n  if (!containsPromise) {\n    return results;\n  } // Otherwise, results is a map from field name to the result of resolving that\n  // field, which is possibly a promise. Return a promise that will return this\n  // same map, but with any promises replaced with the values they resolved to.\n\n\n  return promiseForObject(results);\n}\n/**\n * Given a selectionSet, adds all of the fields in that selection to\n * the passed in map of fields, and returns it at the end.\n *\n * CollectFields requires the \"runtime type\" of an object. For a field which\n * returns an Interface or Union type, the \"runtime type\" will be the actual\n * Object type returned by that field.\n *\n * @internal\n */\n\n\nexport function collectFields(exeContext, runtimeType, selectionSet, fields, visitedFragmentNames) {\n  for (var _i6 = 0, _selectionSet$selecti2 = selectionSet.selections; _i6 < _selectionSet$selecti2.length; _i6++) {\n    var selection = _selectionSet$selecti2[_i6];\n\n    switch (selection.kind) {\n      case Kind.FIELD:\n        {\n          if (!shouldIncludeNode(exeContext, selection)) {\n            continue;\n          }\n\n          var name = getFieldEntryKey(selection);\n\n          if (!fields[name]) {\n            fields[name] = [];\n          }\n\n          fields[name].push(selection);\n          break;\n        }\n\n      case Kind.INLINE_FRAGMENT:\n        {\n          if (!shouldIncludeNode(exeContext, selection) || !doesFragmentConditionMatch(exeContext, selection, runtimeType)) {\n            continue;\n          }\n\n          collectFields(exeContext, runtimeType, selection.selectionSet, fields, visitedFragmentNames);\n          break;\n        }\n\n      case Kind.FRAGMENT_SPREAD:\n        {\n          var fragName = selection.name.value;\n\n          if (visitedFragmentNames[fragName] || !shouldIncludeNode(exeContext, selection)) {\n            continue;\n          }\n\n          visitedFragmentNames[fragName] = true;\n          var fragment = exeContext.fragments[fragName];\n\n          if (!fragment || !doesFragmentConditionMatch(exeContext, fragment, runtimeType)) {\n            continue;\n          }\n\n          collectFields(exeContext, runtimeType, fragment.selectionSet, fields, visitedFragmentNames);\n          break;\n        }\n    }\n  }\n\n  return fields;\n}\n/**\n * Determines if a field should be included based on the @include and @skip\n * directives, where @skip has higher precedence than @include.\n */\n\nfunction shouldIncludeNode(exeContext, node) {\n  var skip = getDirectiveValues(GraphQLSkipDirective, node, exeContext.variableValues);\n\n  if ((skip === null || skip === void 0 ? void 0 : skip.if) === true) {\n    return false;\n  }\n\n  var include = getDirectiveValues(GraphQLIncludeDirective, node, exeContext.variableValues);\n\n  if ((include === null || include === void 0 ? void 0 : include.if) === false) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * Determines if a fragment is applicable to the given type.\n */\n\n\nfunction doesFragmentConditionMatch(exeContext, fragment, type) {\n  var typeConditionNode = fragment.typeCondition;\n\n  if (!typeConditionNode) {\n    return true;\n  }\n\n  var conditionalType = typeFromAST(exeContext.schema, typeConditionNode);\n\n  if (conditionalType === type) {\n    return true;\n  }\n\n  if (isAbstractType(conditionalType)) {\n    return exeContext.schema.isSubType(conditionalType, type);\n  }\n\n  return false;\n}\n/**\n * Implements the logic to compute the key of a given field's entry\n */\n\n\nfunction getFieldEntryKey(node) {\n  return node.alias ? node.alias.value : node.name.value;\n}\n/**\n * Resolves the field on the given source object. In particular, this\n * figures out the value that the field returns by calling its resolve function,\n * then calls completeValue to complete promises, serialize scalars, or execute\n * the sub-selection-set for objects.\n */\n\n\nfunction resolveField(exeContext, parentType, source, fieldNodes, path) {\n  var _fieldDef$resolve;\n\n  var fieldNode = fieldNodes[0];\n  var fieldName = fieldNode.name.value;\n  var fieldDef = getFieldDef(exeContext.schema, parentType, fieldName);\n\n  if (!fieldDef) {\n    return;\n  }\n\n  var returnType = fieldDef.type;\n  var resolveFn = (_fieldDef$resolve = fieldDef.resolve) !== null && _fieldDef$resolve !== void 0 ? _fieldDef$resolve : exeContext.fieldResolver;\n  var info = buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path); // Get the resolve function, regardless of if its result is normal or abrupt (error).\n\n  try {\n    // Build a JS object of arguments from the field.arguments AST, using the\n    // variables scope to fulfill any variable references.\n    // TODO: find a way to memoize, in case this field is within a List type.\n    var args = getArgumentValues(fieldDef, fieldNodes[0], exeContext.variableValues); // The resolve function's optional third argument is a context value that\n    // is provided to every resolve function within an execution. It is commonly\n    // used to represent an authenticated user, or request-specific caches.\n\n    var _contextValue = exeContext.contextValue;\n    var result = resolveFn(source, args, _contextValue, info);\n    var completed;\n\n    if (isPromise(result)) {\n      completed = result.then(function (resolved) {\n        return completeValue(exeContext, returnType, fieldNodes, info, path, resolved);\n      });\n    } else {\n      completed = completeValue(exeContext, returnType, fieldNodes, info, path, result);\n    }\n\n    if (isPromise(completed)) {\n      // Note: we don't rely on a `catch` method, but we do expect \"thenable\"\n      // to take a second callback for the error case.\n      return completed.then(undefined, function (rawError) {\n        var error = locatedError(rawError, fieldNodes, pathToArray(path));\n        return handleFieldError(error, returnType, exeContext);\n      });\n    }\n\n    return completed;\n  } catch (rawError) {\n    var error = locatedError(rawError, fieldNodes, pathToArray(path));\n    return handleFieldError(error, returnType, exeContext);\n  }\n}\n/**\n * @internal\n */\n\n\nexport function buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path) {\n  // The resolve function's optional fourth argument is a collection of\n  // information about the current execution state.\n  return {\n    fieldName: fieldDef.name,\n    fieldNodes: fieldNodes,\n    returnType: fieldDef.type,\n    parentType: parentType,\n    path: path,\n    schema: exeContext.schema,\n    fragments: exeContext.fragments,\n    rootValue: exeContext.rootValue,\n    operation: exeContext.operation,\n    variableValues: exeContext.variableValues\n  };\n}\n\nfunction handleFieldError(error, returnType, exeContext) {\n  // If the field type is non-nullable, then it is resolved without any\n  // protection from errors, however it still properly locates the error.\n  if (isNonNullType(returnType)) {\n    throw error;\n  } // Otherwise, error protection is applied, logging the error and resolving\n  // a null value for this field if one is encountered.\n\n\n  exeContext.errors.push(error);\n  return null;\n}\n/**\n * Implements the instructions for completeValue as defined in the\n * \"Field entries\" section of the spec.\n *\n * If the field type is Non-Null, then this recursively completes the value\n * for the inner type. It throws a field error if that completion returns null,\n * as per the \"Nullability\" section of the spec.\n *\n * If the field type is a List, then this recursively completes the value\n * for the inner type on each item in the list.\n *\n * If the field type is a Scalar or Enum, ensures the completed value is a legal\n * value of the type by calling the `serialize` method of GraphQL type\n * definition.\n *\n * If the field is an abstract type, determine the runtime type of the value\n * and then complete based on that type\n *\n * Otherwise, the field type expects a sub-selection set, and will complete the\n * value by evaluating all sub-selections.\n */\n\n\nfunction completeValue(exeContext, returnType, fieldNodes, info, path, result) {\n  // If result is an Error, throw a located error.\n  if (result instanceof Error) {\n    throw result;\n  } // If field type is NonNull, complete for inner type, and throw field error\n  // if result is null.\n\n\n  if (isNonNullType(returnType)) {\n    var completed = completeValue(exeContext, returnType.ofType, fieldNodes, info, path, result);\n\n    if (completed === null) {\n      throw new Error(\"Cannot return null for non-nullable field \".concat(info.parentType.name, \".\").concat(info.fieldName, \".\"));\n    }\n\n    return completed;\n  } // If result value is null or undefined then return null.\n\n\n  if (result == null) {\n    return null;\n  } // If field type is List, complete each item in the list with the inner type\n\n\n  if (isListType(returnType)) {\n    return completeListValue(exeContext, returnType, fieldNodes, info, path, result);\n  } // If field type is a leaf type, Scalar or Enum, serialize to a valid value,\n  // returning null if serialization is not possible.\n\n\n  if (isLeafType(returnType)) {\n    return completeLeafValue(returnType, result);\n  } // If field type is an abstract type, Interface or Union, determine the\n  // runtime Object type and complete for that type.\n\n\n  if (isAbstractType(returnType)) {\n    return completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result);\n  } // If field type is Object, execute and complete all sub-selections.\n  // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')\n\n\n  if (isObjectType(returnType)) {\n    return completeObjectValue(exeContext, returnType, fieldNodes, info, path, result);\n  } // istanbul ignore next (Not reachable. All possible output types have been considered)\n\n\n  false || invariant(0, 'Cannot complete value of unexpected output type: ' + inspect(returnType));\n}\n/**\n * Complete a list value by completing each item in the list with the\n * inner type\n */\n\n\nfunction completeListValue(exeContext, returnType, fieldNodes, info, path, result) {\n  // This is specified as a simple map, however we're optimizing the path\n  // where the list contains no Promises by avoiding creating another Promise.\n  var itemType = returnType.ofType;\n  var containsPromise = false;\n  var completedResults = safeArrayFrom(result, function (item, index) {\n    // No need to modify the info object containing the path,\n    // since from here on it is not ever accessed by resolver functions.\n    var itemPath = addPath(path, index, undefined);\n\n    try {\n      var completedItem;\n\n      if (isPromise(item)) {\n        completedItem = item.then(function (resolved) {\n          return completeValue(exeContext, itemType, fieldNodes, info, itemPath, resolved);\n        });\n      } else {\n        completedItem = completeValue(exeContext, itemType, fieldNodes, info, itemPath, item);\n      }\n\n      if (isPromise(completedItem)) {\n        containsPromise = true; // Note: we don't rely on a `catch` method, but we do expect \"thenable\"\n        // to take a second callback for the error case.\n\n        return completedItem.then(undefined, function (rawError) {\n          var error = locatedError(rawError, fieldNodes, pathToArray(itemPath));\n          return handleFieldError(error, itemType, exeContext);\n        });\n      }\n\n      return completedItem;\n    } catch (rawError) {\n      var error = locatedError(rawError, fieldNodes, pathToArray(itemPath));\n      return handleFieldError(error, itemType, exeContext);\n    }\n  });\n\n  if (completedResults == null) {\n    throw new GraphQLError(\"Expected Iterable, but did not find one for field \\\"\".concat(info.parentType.name, \".\").concat(info.fieldName, \"\\\".\"));\n  }\n\n  return containsPromise ? Promise.all(completedResults) : completedResults;\n}\n/**\n * Complete a Scalar or Enum by serializing to a valid value, returning\n * null if serialization is not possible.\n */\n\n\nfunction completeLeafValue(returnType, result) {\n  var serializedResult = returnType.serialize(result);\n\n  if (serializedResult === undefined) {\n    throw new Error(\"Expected a value of type \\\"\".concat(inspect(returnType), \"\\\" but \") + \"received: \".concat(inspect(result)));\n  }\n\n  return serializedResult;\n}\n/**\n * Complete a value of an abstract type by determining the runtime object type\n * of that value, then complete the value for that type.\n */\n\n\nfunction completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result) {\n  var _returnType$resolveTy;\n\n  var resolveTypeFn = (_returnType$resolveTy = returnType.resolveType) !== null && _returnType$resolveTy !== void 0 ? _returnType$resolveTy : exeContext.typeResolver;\n  var contextValue = exeContext.contextValue;\n  var runtimeType = resolveTypeFn(result, contextValue, info, returnType);\n\n  if (isPromise(runtimeType)) {\n    return runtimeType.then(function (resolvedRuntimeType) {\n      return completeObjectValue(exeContext, ensureValidRuntimeType(resolvedRuntimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result);\n    });\n  }\n\n  return completeObjectValue(exeContext, ensureValidRuntimeType(runtimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result);\n}\n\nfunction ensureValidRuntimeType(runtimeTypeOrName, exeContext, returnType, fieldNodes, info, result) {\n  if (runtimeTypeOrName == null) {\n    throw new GraphQLError(\"Abstract type \\\"\".concat(returnType.name, \"\\\" must resolve to an Object type at runtime for field \\\"\").concat(info.parentType.name, \".\").concat(info.fieldName, \"\\\". Either the \\\"\").concat(returnType.name, \"\\\" type should provide a \\\"resolveType\\\" function or each possible type should provide an \\\"isTypeOf\\\" function.\"), fieldNodes);\n  } // FIXME: temporary workaround until support for passing object types would be removed in v16.0.0\n\n\n  var runtimeTypeName = isNamedType(runtimeTypeOrName) ? runtimeTypeOrName.name : runtimeTypeOrName;\n\n  if (typeof runtimeTypeName !== 'string') {\n    throw new GraphQLError(\"Abstract type \\\"\".concat(returnType.name, \"\\\" must resolve to an Object type at runtime for field \\\"\").concat(info.parentType.name, \".\").concat(info.fieldName, \"\\\" with \") + \"value \".concat(inspect(result), \", received \\\"\").concat(inspect(runtimeTypeOrName), \"\\\".\"));\n  }\n\n  var runtimeType = exeContext.schema.getType(runtimeTypeName);\n\n  if (runtimeType == null) {\n    throw new GraphQLError(\"Abstract type \\\"\".concat(returnType.name, \"\\\" was resolve to a type \\\"\").concat(runtimeTypeName, \"\\\" that does not exist inside schema.\"), fieldNodes);\n  }\n\n  if (!isObjectType(runtimeType)) {\n    throw new GraphQLError(\"Abstract type \\\"\".concat(returnType.name, \"\\\" was resolve to a non-object type \\\"\").concat(runtimeTypeName, \"\\\".\"), fieldNodes);\n  }\n\n  if (!exeContext.schema.isSubType(returnType, runtimeType)) {\n    throw new GraphQLError(\"Runtime Object type \\\"\".concat(runtimeType.name, \"\\\" is not a possible type for \\\"\").concat(returnType.name, \"\\\".\"), fieldNodes);\n  }\n\n  return runtimeType;\n}\n/**\n * Complete an Object value by executing all sub-selections.\n */\n\n\nfunction completeObjectValue(exeContext, returnType, fieldNodes, info, path, result) {\n  // If there is an isTypeOf predicate function, call it with the\n  // current result. If isTypeOf returns false, then raise an error rather\n  // than continuing execution.\n  if (returnType.isTypeOf) {\n    var isTypeOf = returnType.isTypeOf(result, exeContext.contextValue, info);\n\n    if (isPromise(isTypeOf)) {\n      return isTypeOf.then(function (resolvedIsTypeOf) {\n        if (!resolvedIsTypeOf) {\n          throw invalidReturnTypeError(returnType, result, fieldNodes);\n        }\n\n        return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result);\n      });\n    }\n\n    if (!isTypeOf) {\n      throw invalidReturnTypeError(returnType, result, fieldNodes);\n    }\n  }\n\n  return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result);\n}\n\nfunction invalidReturnTypeError(returnType, result, fieldNodes) {\n  return new GraphQLError(\"Expected value of type \\\"\".concat(returnType.name, \"\\\" but got: \").concat(inspect(result), \".\"), fieldNodes);\n}\n\nfunction collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result) {\n  // Collect sub-fields to execute to complete this value.\n  var subFieldNodes = collectSubfields(exeContext, returnType, fieldNodes);\n  return executeFields(exeContext, returnType, result, path, subFieldNodes);\n}\n/**\n * A memoized collection of relevant subfields with regard to the return\n * type. Memoizing ensures the subfields are not repeatedly calculated, which\n * saves overhead when resolving lists of values.\n */\n\n\nvar collectSubfields = memoize3(_collectSubfields);\n\nfunction _collectSubfields(exeContext, returnType, fieldNodes) {\n  var subFieldNodes = Object.create(null);\n  var visitedFragmentNames = Object.create(null);\n\n  for (var _i8 = 0; _i8 < fieldNodes.length; _i8++) {\n    var node = fieldNodes[_i8];\n\n    if (node.selectionSet) {\n      subFieldNodes = collectFields(exeContext, returnType, node.selectionSet, subFieldNodes, visitedFragmentNames);\n    }\n  }\n\n  return subFieldNodes;\n}\n/**\n * If a resolveType function is not given, then a default resolve behavior is\n * used which attempts two strategies:\n *\n * First, See if the provided value has a `__typename` field defined, if so, use\n * that value as name of the resolved type.\n *\n * Otherwise, test each possible type for the abstract type by calling\n * isTypeOf for the object being coerced, returning the first type that matches.\n */\n\n\nexport var defaultTypeResolver = function defaultTypeResolver(value, contextValue, info, abstractType) {\n  // First, look for `__typename`.\n  if (isObjectLike(value) && typeof value.__typename === 'string') {\n    return value.__typename;\n  } // Otherwise, test each possible type.\n\n\n  var possibleTypes = info.schema.getPossibleTypes(abstractType);\n  var promisedIsTypeOfResults = [];\n\n  for (var i = 0; i < possibleTypes.length; i++) {\n    var type = possibleTypes[i];\n\n    if (type.isTypeOf) {\n      var isTypeOfResult = type.isTypeOf(value, contextValue, info);\n\n      if (isPromise(isTypeOfResult)) {\n        promisedIsTypeOfResults[i] = isTypeOfResult;\n      } else if (isTypeOfResult) {\n        return type.name;\n      }\n    }\n  }\n\n  if (promisedIsTypeOfResults.length) {\n    return Promise.all(promisedIsTypeOfResults).then(function (isTypeOfResults) {\n      for (var _i9 = 0; _i9 < isTypeOfResults.length; _i9++) {\n        if (isTypeOfResults[_i9]) {\n          return possibleTypes[_i9].name;\n        }\n      }\n    });\n  }\n};\n/**\n * If a resolve function is not given, then a default resolve behavior is used\n * which takes the property of the source object of the same name as the field\n * and returns it as the result, or if it's a function, returns the result\n * of calling that function while passing along args and context value.\n */\n\nexport var defaultFieldResolver = function defaultFieldResolver(source, args, contextValue, info) {\n  // ensure source is a value for which property access is acceptable.\n  if (isObjectLike(source) || typeof source === 'function') {\n    var property = source[info.fieldName];\n\n    if (typeof property === 'function') {\n      return source[info.fieldName](args, contextValue, info);\n    }\n\n    return property;\n  }\n};\n/**\n * This method looks up the field on the given type definition.\n * It has special casing for the three introspection fields,\n * __schema, __type and __typename. __typename is special because\n * it can always be queried as a field, even in situations where no\n * other fields are allowed, like on a Union. __schema and __type\n * could get automatically added to the query type, but that would\n * require mutating type definitions, which would cause issues.\n *\n * @internal\n */\n\nexport function getFieldDef(schema, parentType, fieldName) {\n  if (fieldName === SchemaMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return SchemaMetaFieldDef;\n  } else if (fieldName === TypeMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return TypeMetaFieldDef;\n  } else if (fieldName === TypeNameMetaFieldDef.name) {\n    return TypeNameMetaFieldDef;\n  }\n\n  return parentType.getFields()[fieldName];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}