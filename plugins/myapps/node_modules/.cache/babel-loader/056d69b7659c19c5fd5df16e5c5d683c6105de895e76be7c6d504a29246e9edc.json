{"ast":null,"code":"import _defineProperty from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _classCallCheck from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n// This currentContext variable will only be used if the makeSlotClass\n// function is called, which happens only if this is the first copy of the\n// @wry/context package to be imported.\nvar currentContext = null;\n// This unique internal object is used to denote the absence of a value\n// for a given Slot, and is never exposed to outside code.\nvar MISSING_VALUE = {};\nvar idCounter = 1;\n// Although we can't do anything about the cost of duplicated code from\n// accidentally bundling multiple copies of the @wry/context package, we can\n// avoid creating the Slot class more than once using makeSlotClass.\nvar makeSlotClass = function makeSlotClass() {\n  return /*#__PURE__*/function () {\n    function Slot() {\n      _classCallCheck(this, Slot);\n      // If you have a Slot object, you can find out its slot.id, but you cannot\n      // guess the slot.id of a Slot you don't have access to, thanks to the\n      // randomized suffix.\n      this.id = [\"slot\", idCounter++, Date.now(), Math.random().toString(36).slice(2)].join(\":\");\n    }\n    _createClass(Slot, [{\n      key: \"hasValue\",\n      value: function hasValue() {\n        for (var context = currentContext; context; context = context.parent) {\n          // We use the Slot object iself as a key to its value, which means the\n          // value cannot be obtained without a reference to the Slot object.\n          if (this.id in context.slots) {\n            var value = context.slots[this.id];\n            if (value === MISSING_VALUE) break;\n            if (context !== currentContext) {\n              // Cache the value in currentContext.slots so the next lookup will\n              // be faster. This caching is safe because the tree of contexts and\n              // the values of the slots are logically immutable.\n              currentContext.slots[this.id] = value;\n            }\n            return true;\n          }\n        }\n        if (currentContext) {\n          // If a value was not found for this Slot, it's never going to be found\n          // no matter how many times we look it up, so we might as well cache\n          // the absence of the value, too.\n          currentContext.slots[this.id] = MISSING_VALUE;\n        }\n        return false;\n      }\n    }, {\n      key: \"getValue\",\n      value: function getValue() {\n        if (this.hasValue()) {\n          return currentContext.slots[this.id];\n        }\n      }\n    }, {\n      key: \"withValue\",\n      value: function withValue(value, callback,\n      // Given the prevalence of arrow functions, specifying arguments is likely\n      // to be much more common than specifying `this`, hence this ordering:\n      args, thisArg) {\n        var slots = _defineProperty({\n          __proto__: null\n        }, this.id, value);\n        var parent = currentContext;\n        currentContext = {\n          parent: parent,\n          slots: slots\n        };\n        try {\n          // Function.prototype.apply allows the arguments array argument to be\n          // omitted or undefined, so args! is fine here.\n          return callback.apply(thisArg, args);\n        } finally {\n          currentContext = parent;\n        }\n      }\n      // Capture the current context and wrap a callback function so that it\n      // reestablishes the captured context when called.\n    }], [{\n      key: \"bind\",\n      value: function bind(callback) {\n        var context = currentContext;\n        return function () {\n          var saved = currentContext;\n          try {\n            currentContext = context;\n            return callback.apply(this, arguments);\n          } finally {\n            currentContext = saved;\n          }\n        };\n      }\n      // Immediately run a callback function without any captured context.\n    }, {\n      key: \"noContext\",\n      value: function noContext(callback,\n      // Given the prevalence of arrow functions, specifying arguments is likely\n      // to be much more common than specifying `this`, hence this ordering:\n      args, thisArg) {\n        if (currentContext) {\n          var saved = currentContext;\n          try {\n            currentContext = null;\n            // Function.prototype.apply allows the arguments array argument to be\n            // omitted or undefined, so args! is fine here.\n            return callback.apply(thisArg, args);\n          } finally {\n            currentContext = saved;\n          }\n        } else {\n          return callback.apply(thisArg, args);\n        }\n      }\n    }]);\n    return Slot;\n  }();\n};\nfunction maybe(fn) {\n  try {\n    return fn();\n  } catch (ignored) {}\n}\n// We store a single global implementation of the Slot class as a permanent\n// non-enumerable property of the globalThis object. This obfuscation does\n// nothing to prevent access to the Slot class, but at least it ensures the\n// implementation (i.e. currentContext) cannot be tampered with, and all copies\n// of the @wry/context package (hopefully just one) will share the same Slot\n// implementation. Since the first copy of the @wry/context package to be\n// imported wins, this technique imposes a steep cost for any future breaking\n// changes to the Slot class.\nvar globalKey = \"@wry/context:Slot\";\nvar host =\n// Prefer globalThis when available.\n// https://github.com/benjamn/wryware/issues/347\nmaybe(function () {\n  return globalThis;\n}) ||\n// Fall back to global, which works in Node.js and may be converted by some\n// bundlers to the appropriate identifier (window, self, ...) depending on the\n// bundling target. https://github.com/endojs/endo/issues/576#issuecomment-1178515224\nmaybe(function () {\n  return global;\n}) ||\n// Otherwise, use a dummy host that's local to this module. We used to fall\n// back to using the Array constructor as a namespace, but that was flagged in\n// https://github.com/benjamn/wryware/issues/347, and can be avoided.\nObject.create(null);\n// Whichever globalHost we're using, make TypeScript happy about the additional\n// globalKey property.\nvar globalHost = host;\nexport var Slot = globalHost[globalKey] ||\n// Earlier versions of this package stored the globalKey property on the Array\n// constructor, so we check there as well, to prevent Slot class duplication.\nArray[globalKey] || function (Slot) {\n  try {\n    Object.defineProperty(globalHost, globalKey, {\n      value: Slot,\n      enumerable: false,\n      writable: false,\n      // When it was possible for globalHost to be the Array constructor (a\n      // legacy Slot dedup strategy), it was important for the property to be\n      // configurable:true so it could be deleted. That does not seem to be as\n      // important when globalHost is the global object, but I don't want to\n      // cause similar problems again, and configurable:true seems safest.\n      // https://github.com/endojs/endo/issues/576#issuecomment-1178274008\n      configurable: true\n    });\n  } finally {\n    return Slot;\n  }\n}(makeSlotClass());","map":{"version":3,"names":["currentContext","MISSING_VALUE","idCounter","makeSlotClass","Slot","_classCallCheck","id","Date","now","Math","random","toString","slice","join","_createClass","key","value","hasValue","context","parent","slots","getValue","withValue","callback","args","thisArg","_defineProperty","__proto__","apply","bind","saved","arguments","noContext","maybe","fn","ignored","globalKey","host","globalThis","global","Object","create","globalHost","Array","defineProperty","enumerable","writable","configurable"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@wry/context/src/slot.ts"],"sourcesContent":["type Context = {\n  parent: Context | null;\n  slots: { [slotId: string]: any };\n}\n\n// This currentContext variable will only be used if the makeSlotClass\n// function is called, which happens only if this is the first copy of the\n// @wry/context package to be imported.\nlet currentContext: Context | null = null;\n\n// This unique internal object is used to denote the absence of a value\n// for a given Slot, and is never exposed to outside code.\nconst MISSING_VALUE: any = {};\n\nlet idCounter = 1;\n\n// Although we can't do anything about the cost of duplicated code from\n// accidentally bundling multiple copies of the @wry/context package, we can\n// avoid creating the Slot class more than once using makeSlotClass.\nconst makeSlotClass = () => class Slot<TValue> {\n  // If you have a Slot object, you can find out its slot.id, but you cannot\n  // guess the slot.id of a Slot you don't have access to, thanks to the\n  // randomized suffix.\n  public readonly id = [\n    \"slot\",\n    idCounter++,\n    Date.now(),\n    Math.random().toString(36).slice(2),\n  ].join(\":\");\n\n  public hasValue() {\n    for (let context = currentContext; context; context = context.parent) {\n      // We use the Slot object iself as a key to its value, which means the\n      // value cannot be obtained without a reference to the Slot object.\n      if (this.id in context.slots) {\n        const value = context.slots[this.id];\n        if (value === MISSING_VALUE) break;\n        if (context !== currentContext) {\n          // Cache the value in currentContext.slots so the next lookup will\n          // be faster. This caching is safe because the tree of contexts and\n          // the values of the slots are logically immutable.\n          currentContext!.slots[this.id] = value;\n        }\n        return true;\n      }\n    }\n    if (currentContext) {\n      // If a value was not found for this Slot, it's never going to be found\n      // no matter how many times we look it up, so we might as well cache\n      // the absence of the value, too.\n      currentContext.slots[this.id] = MISSING_VALUE;\n    }\n    return false;\n  }\n\n  public getValue(): TValue | undefined {\n    if (this.hasValue()) {\n      return currentContext!.slots[this.id] as TValue;\n    }\n  }\n\n  public withValue<TResult, TArgs extends any[], TThis = any>(\n    value: TValue,\n    callback: (this: TThis, ...args: TArgs) => TResult,\n    // Given the prevalence of arrow functions, specifying arguments is likely\n    // to be much more common than specifying `this`, hence this ordering:\n    args?: TArgs,\n    thisArg?: TThis,\n  ): TResult {\n    const slots = {\n      __proto__: null,\n      [this.id]: value,\n    };\n    const parent = currentContext;\n    currentContext = { parent, slots };\n    try {\n      // Function.prototype.apply allows the arguments array argument to be\n      // omitted or undefined, so args! is fine here.\n      return callback.apply(thisArg!, args!);\n    } finally {\n      currentContext = parent;\n    }\n  }\n\n  // Capture the current context and wrap a callback function so that it\n  // reestablishes the captured context when called.\n  static bind<TArgs extends any[], TResult, TThis = any>(\n    callback: (this: TThis, ...args: TArgs) => TResult,\n  ) {\n    const context = currentContext;\n    return function (this: TThis) {\n      const saved = currentContext;\n      try {\n        currentContext = context;\n        return callback.apply(this, arguments as any);\n      } finally {\n        currentContext = saved;\n      }\n    } as typeof callback;\n  }\n\n  // Immediately run a callback function without any captured context.\n  static noContext<TResult, TArgs extends any[], TThis = any>(\n    callback: (this: TThis, ...args: TArgs) => TResult,\n    // Given the prevalence of arrow functions, specifying arguments is likely\n    // to be much more common than specifying `this`, hence this ordering:\n    args?: TArgs,\n    thisArg?: TThis,\n  ) {\n    if (currentContext) {\n      const saved = currentContext;\n      try {\n        currentContext = null;\n        // Function.prototype.apply allows the arguments array argument to be\n        // omitted or undefined, so args! is fine here.\n        return callback.apply(thisArg!, args!);\n      } finally {\n        currentContext = saved;\n      }\n    } else {\n      return callback.apply(thisArg!, args!);\n    }\n  }\n};\n\nfunction maybe<T>(fn: () => T): T | undefined {\n  try {\n    return fn();\n  } catch (ignored) {}\n}\n\n// We store a single global implementation of the Slot class as a permanent\n// non-enumerable property of the globalThis object. This obfuscation does\n// nothing to prevent access to the Slot class, but at least it ensures the\n// implementation (i.e. currentContext) cannot be tampered with, and all copies\n// of the @wry/context package (hopefully just one) will share the same Slot\n// implementation. Since the first copy of the @wry/context package to be\n// imported wins, this technique imposes a steep cost for any future breaking\n// changes to the Slot class.\nconst globalKey = \"@wry/context:Slot\";\n\nconst host =\n  // Prefer globalThis when available.\n  // https://github.com/benjamn/wryware/issues/347\n  maybe(() => globalThis) ||\n  // Fall back to global, which works in Node.js and may be converted by some\n  // bundlers to the appropriate identifier (window, self, ...) depending on the\n  // bundling target. https://github.com/endojs/endo/issues/576#issuecomment-1178515224\n  maybe(() => global) ||\n  // Otherwise, use a dummy host that's local to this module. We used to fall\n  // back to using the Array constructor as a namespace, but that was flagged in\n  // https://github.com/benjamn/wryware/issues/347, and can be avoided.\n  Object.create(null) as typeof Array;\n\n// Whichever globalHost we're using, make TypeScript happy about the additional\n// globalKey property.\nconst globalHost: typeof host & {\n  [globalKey]?: typeof Slot;\n} = host;\n\nexport const Slot: ReturnType<typeof makeSlotClass> =\n  globalHost[globalKey] ||\n  // Earlier versions of this package stored the globalKey property on the Array\n  // constructor, so we check there as well, to prevent Slot class duplication.\n  (Array as typeof globalHost)[globalKey] ||\n  (function (Slot) {\n    try {\n      Object.defineProperty(globalHost, globalKey, {\n        value: Slot,\n        enumerable: false,\n        writable: false,\n        // When it was possible for globalHost to be the Array constructor (a\n        // legacy Slot dedup strategy), it was important for the property to be\n        // configurable:true so it could be deleted. That does not seem to be as\n        // important when globalHost is the global object, but I don't want to\n        // cause similar problems again, and configurable:true seems safest.\n        // https://github.com/endojs/endo/issues/576#issuecomment-1178274008\n        configurable: true\n      });\n    } finally {\n      return Slot;\n    }\n  })(makeSlotClass());\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}