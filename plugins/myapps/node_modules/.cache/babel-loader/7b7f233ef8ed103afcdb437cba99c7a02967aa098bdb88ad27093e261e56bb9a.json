{"ast":null,"code":"import _slicedToArray from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport * as React from 'react';\nimport { Button } from '../Button';\nimport { ActionGroup, Form, FormGroup } from '../Form';\nimport { TextInput } from '../TextInput';\nimport { GenerateId, KeyTypes } from '../../helpers';\nimport { Panel, PanelMain, PanelMainBody } from '../Panel';\nimport { css } from '@patternfly/react-styles';\nexport var AdvancedSearchMenu = function AdvancedSearchMenu(_ref) {\n  var className = _ref.className,\n    parentRef = _ref.parentRef,\n    parentInputRef = _ref.parentInputRef,\n    _ref$value = _ref.value,\n    value = _ref$value === void 0 ? '' : _ref$value,\n    _ref$attributes = _ref.attributes,\n    attributes = _ref$attributes === void 0 ? [] : _ref$attributes,\n    formAdditionalItems = _ref.formAdditionalItems,\n    _ref$hasWordsAttrLabe = _ref.hasWordsAttrLabel,\n    hasWordsAttrLabel = _ref$hasWordsAttrLabe === void 0 ? 'Has words' : _ref$hasWordsAttrLabe,\n    advancedSearchDelimiter = _ref.advancedSearchDelimiter,\n    getAttrValueMap = _ref.getAttrValueMap,\n    onChange = _ref.onChange,\n    onSearch = _ref.onSearch,\n    onClear = _ref.onClear,\n    _ref$resetButtonLabel = _ref.resetButtonLabel,\n    resetButtonLabel = _ref$resetButtonLabel === void 0 ? 'Reset' : _ref$resetButtonLabel,\n    _ref$submitSearchButt = _ref.submitSearchButtonLabel,\n    submitSearchButtonLabel = _ref$submitSearchButt === void 0 ? 'Search' : _ref$submitSearchButt,\n    isSearchMenuOpen = _ref.isSearchMenuOpen,\n    onToggleAdvancedMenu = _ref.onToggleAdvancedMenu;\n  var firstAttrRef = React.useRef(null);\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    putFocusBackOnInput = _React$useState2[0],\n    setPutFocusBackOnInput = _React$useState2[1];\n  React.useEffect(function () {\n    if (attributes.length > 0 && !advancedSearchDelimiter) {\n      // eslint-disable-next-line no-console\n      console.error('AdvancedSearchMenu: An advancedSearchDelimiter prop is required when advanced search attributes are provided using the attributes prop');\n    }\n  });\n  React.useEffect(function () {\n    if (isSearchMenuOpen && firstAttrRef && firstAttrRef.current) {\n      firstAttrRef.current.focus();\n      setPutFocusBackOnInput(true);\n    } else if (!isSearchMenuOpen && putFocusBackOnInput && parentInputRef && parentInputRef.current) {\n      parentInputRef.current.focus();\n    }\n  }, [isSearchMenuOpen]);\n  React.useEffect(function () {\n    document.addEventListener('mousedown', onDocClick);\n    document.addEventListener('touchstart', onDocClick);\n    document.addEventListener('keydown', onEscPress);\n    return function cleanup() {\n      document.removeEventListener('mousedown', onDocClick);\n      document.removeEventListener('touchstart', onDocClick);\n      document.removeEventListener('keydown', onEscPress);\n    };\n  });\n  var onDocClick = function onDocClick(event) {\n    var clickedWithinSearchInput = parentRef && parentRef.current.contains(event.target);\n    if (isSearchMenuOpen && !clickedWithinSearchInput) {\n      onToggleAdvancedMenu(event);\n    }\n  };\n  var onEscPress = function onEscPress(event) {\n    if (isSearchMenuOpen && event.key === KeyTypes.Escape && parentRef && parentRef.current.contains(event.target)) {\n      onToggleAdvancedMenu(event);\n      if (parentInputRef) {\n        parentInputRef.current.focus();\n      }\n    }\n  };\n  var onSearchHandler = function onSearchHandler(event) {\n    event.preventDefault();\n    if (onSearch) {\n      onSearch(event, value, getAttrValueMap());\n    }\n    if (isSearchMenuOpen) {\n      onToggleAdvancedMenu(event);\n    }\n  };\n  var handleValueChange = function handleValueChange(attribute, newValue, event) {\n    var newMap = getAttrValueMap();\n    newMap[attribute] = newValue;\n    var updatedValue = '';\n    Object.entries(newMap).forEach(function (_ref2) {\n      var _ref3 = _slicedToArray(_ref2, 2),\n        k = _ref3[0],\n        v = _ref3[1];\n      if (v.trim() !== '') {\n        /* Wrap the value in quotes if it contains spaces */\n        var quoteWrappedValue = v.includes(' ') ? \"'\".concat(v.replace(/(^'|'$)/g, ''), \"'\") : v;\n        if (k !== 'haswords') {\n          updatedValue = \"\".concat(updatedValue, \" \").concat(k).concat(advancedSearchDelimiter).concat(quoteWrappedValue);\n        } else {\n          updatedValue = \"\".concat(updatedValue, \" \").concat(quoteWrappedValue);\n        }\n      }\n    });\n    if (onChange) {\n      onChange(event, updatedValue.replace(/^\\s+/g, ''));\n    }\n  };\n  var getValue = function getValue(attribute) {\n    var map = getAttrValueMap();\n    return map.hasOwnProperty(attribute) ? map[attribute] : '';\n  };\n  var buildFormGroups = function buildFormGroups() {\n    var formGroups = [];\n    attributes.forEach(function (attribute, index) {\n      var display = typeof attribute === 'string' ? attribute : attribute.display;\n      var queryAttr = typeof attribute === 'string' ? attribute : attribute.attr;\n      if (index === 0) {\n        formGroups.push(React.createElement(FormGroup, {\n          label: display,\n          fieldId: \"\".concat(queryAttr, \"_\").concat(index),\n          key: \"\".concat(attribute, \"_\").concat(index)\n        }, React.createElement(TextInput, {\n          ref: firstAttrRef,\n          type: \"text\",\n          id: \"\".concat(queryAttr, \"_\").concat(index),\n          value: getValue(queryAttr),\n          onChange: function onChange(value, evt) {\n            return handleValueChange(queryAttr, value, evt);\n          }\n        })));\n      } else {\n        formGroups.push(React.createElement(FormGroup, {\n          label: display,\n          fieldId: \"\".concat(queryAttr, \"_\").concat(index),\n          key: \"\".concat(attribute, \"_\").concat(index)\n        }, React.createElement(TextInput, {\n          type: \"text\",\n          id: \"\".concat(queryAttr, \"_\").concat(index),\n          value: getValue(queryAttr),\n          onChange: function onChange(value, evt) {\n            return handleValueChange(queryAttr, value, evt);\n          }\n        })));\n      }\n    });\n    formGroups.push(React.createElement(GenerateId, {\n      key: 'hasWords'\n    }, function (randomId) {\n      return React.createElement(FormGroup, {\n        label: hasWordsAttrLabel,\n        fieldId: randomId\n      }, React.createElement(TextInput, {\n        type: \"text\",\n        id: randomId,\n        value: getValue('haswords'),\n        onChange: function onChange(value, evt) {\n          return handleValueChange('haswords', value, evt);\n        }\n      }));\n    }));\n    return formGroups;\n  };\n  return isSearchMenuOpen ? React.createElement(Panel, {\n    variant: \"raised\",\n    className: css(className)\n  }, React.createElement(PanelMain, null, React.createElement(PanelMainBody, null, React.createElement(Form, null, buildFormGroups(), formAdditionalItems ? formAdditionalItems : null, React.createElement(ActionGroup, null, React.createElement(Button, {\n    variant: \"primary\",\n    type: \"submit\",\n    onClick: onSearchHandler,\n    isDisabled: !value\n  }, submitSearchButtonLabel), !!onClear && React.createElement(Button, {\n    variant: \"link\",\n    type: \"reset\",\n    onClick: onClear\n  }, resetButtonLabel)))))) : null;\n};\nAdvancedSearchMenu.displayName = 'SearchInput';","map":{"version":3,"names":["React","Button","ActionGroup","Form","FormGroup","TextInput","GenerateId","KeyTypes","Panel","PanelMain","PanelMainBody","css","AdvancedSearchMenu","_ref","className","parentRef","parentInputRef","_ref$value","value","_ref$attributes","attributes","formAdditionalItems","_ref$hasWordsAttrLabe","hasWordsAttrLabel","advancedSearchDelimiter","getAttrValueMap","onChange","onSearch","onClear","_ref$resetButtonLabel","resetButtonLabel","_ref$submitSearchButt","submitSearchButtonLabel","isSearchMenuOpen","onToggleAdvancedMenu","firstAttrRef","useRef","_React$useState","useState","_React$useState2","_slicedToArray","putFocusBackOnInput","setPutFocusBackOnInput","useEffect","length","console","error","current","focus","document","addEventListener","onDocClick","onEscPress","cleanup","removeEventListener","event","clickedWithinSearchInput","contains","target","key","Escape","onSearchHandler","preventDefault","handleValueChange","attribute","newValue","newMap","updatedValue","Object","entries","forEach","_ref2","_ref3","k","v","trim","quoteWrappedValue","includes","concat","replace","getValue","map","hasOwnProperty","buildFormGroups","formGroups","index","display","queryAttr","attr","push","createElement","label","fieldId","ref","type","id","evt","randomId","variant","onClick","isDisabled","displayName"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@patternfly/react-core/src/components/SearchInput/AdvancedSearchMenu.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Button } from '../Button';\nimport { ActionGroup, Form, FormGroup } from '../Form';\nimport { TextInput } from '../TextInput';\nimport { GenerateId, KeyTypes } from '../../helpers';\nimport { SearchInputSearchAttribute } from './SearchInput';\nimport { Panel, PanelMain, PanelMainBody } from '../Panel';\nimport { css } from '@patternfly/react-styles';\n\nexport interface AdvancedSearchMenuProps extends Omit<React.HTMLProps<HTMLDivElement>, 'onChange'> {\n  /** Delimiter in the query string for pairing attributes with search values.\n   * Required whenever attributes are passed as props.\n   */\n  advancedSearchDelimiter?: string;\n  /** Array of attribute values used for dynamically generated advanced search. */\n  attributes?: string[] | SearchInputSearchAttribute[];\n  /** Additional classes added to the advanced search menu. */\n  className?: string;\n  /* Additional elements added after the attributes in the form.\n   * The new form elements can be wrapped in a form group component for automatic formatting. */\n  formAdditionalItems?: React.ReactNode;\n  /** Function which builds an attribute-value map by parsing the value in the search input. */\n  getAttrValueMap?: () => { [key: string]: string };\n  /** Attribute label for strings unassociated with one of the provided listed attributes. */\n  hasWordsAttrLabel?: React.ReactNode;\n  /** Flag for toggling the open/close state of the advanced search menu. */\n  isSearchMenuOpen?: boolean;\n  /** A callback for when the input value changes. */\n  onChange?: (event: React.FormEvent<HTMLInputElement>, value: string) => void;\n  /** A callback for when the user clicks the clear button. */\n  onClear?: (event: React.SyntheticEvent<HTMLButtonElement>) => void;\n  /** A callback for when the search button is clicked. */\n  onSearch?: (\n    event: React.SyntheticEvent<HTMLButtonElement>,\n    value: string,\n    attrValueMap: { [key: string]: string }\n  ) => void;\n  /** A callback for when the open advanced search button is clicked. */\n  onToggleAdvancedMenu?: (e: React.SyntheticEvent<HTMLButtonElement>) => void;\n  /** Ref of the input element within the search input. */\n  parentInputRef?: React.RefObject<any>;\n  /** Ref of the div wrapping the whole search input. */\n  parentRef?: React.RefObject<any>;\n  /** Label for the button which resets the advanced search form and clears the search input. */\n  resetButtonLabel?: string;\n  /** Label for the button which calls the onSearch event handler. */\n  submitSearchButtonLabel?: string;\n  /** Value of the search input. */\n  value?: string;\n}\n\nexport const AdvancedSearchMenu: React.FunctionComponent<AdvancedSearchMenuProps> = ({\n  className,\n  parentRef,\n  parentInputRef,\n  value = '',\n  attributes = [] as string[],\n  formAdditionalItems,\n  hasWordsAttrLabel = 'Has words',\n  advancedSearchDelimiter,\n  getAttrValueMap,\n  onChange,\n  onSearch,\n  onClear,\n  resetButtonLabel = 'Reset',\n  submitSearchButtonLabel = 'Search',\n  isSearchMenuOpen,\n  onToggleAdvancedMenu\n}: AdvancedSearchMenuProps) => {\n  const firstAttrRef = React.useRef(null);\n  const [putFocusBackOnInput, setPutFocusBackOnInput] = React.useState(false);\n\n  React.useEffect(() => {\n    if (attributes.length > 0 && !advancedSearchDelimiter) {\n      // eslint-disable-next-line no-console\n      console.error(\n        'AdvancedSearchMenu: An advancedSearchDelimiter prop is required when advanced search attributes are provided using the attributes prop'\n      );\n    }\n  });\n\n  React.useEffect(() => {\n    if (isSearchMenuOpen && firstAttrRef && firstAttrRef.current) {\n      firstAttrRef.current.focus();\n      setPutFocusBackOnInput(true);\n    } else if (!isSearchMenuOpen && putFocusBackOnInput && parentInputRef && parentInputRef.current) {\n      parentInputRef.current.focus();\n    }\n  }, [isSearchMenuOpen]);\n\n  React.useEffect(() => {\n    document.addEventListener('mousedown', onDocClick);\n    document.addEventListener('touchstart', onDocClick);\n    document.addEventListener('keydown', onEscPress);\n\n    return function cleanup() {\n      document.removeEventListener('mousedown', onDocClick);\n      document.removeEventListener('touchstart', onDocClick);\n      document.removeEventListener('keydown', onEscPress);\n    };\n  });\n\n  const onDocClick = (event: Event) => {\n    const clickedWithinSearchInput = parentRef && parentRef.current.contains(event.target as Node);\n    if (isSearchMenuOpen && !clickedWithinSearchInput) {\n      onToggleAdvancedMenu(event as any);\n    }\n  };\n\n  const onEscPress = (event: KeyboardEvent) => {\n    if (\n      isSearchMenuOpen &&\n      event.key === KeyTypes.Escape &&\n      parentRef &&\n      parentRef.current.contains(event.target as Node)\n    ) {\n      onToggleAdvancedMenu(event as any);\n      if (parentInputRef) {\n        parentInputRef.current.focus();\n      }\n    }\n  };\n\n  const onSearchHandler = (event: React.SyntheticEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n    if (onSearch) {\n      onSearch(event, value, getAttrValueMap());\n    }\n    if (isSearchMenuOpen) {\n      onToggleAdvancedMenu(event as any);\n    }\n  };\n\n  const handleValueChange = (attribute: string, newValue: string, event: React.FormEvent<HTMLInputElement>) => {\n    const newMap = getAttrValueMap();\n\n    newMap[attribute] = newValue;\n    let updatedValue = '';\n    Object.entries(newMap).forEach(([k, v]) => {\n      if (v.trim() !== '') {\n        /* Wrap the value in quotes if it contains spaces */\n        const quoteWrappedValue = v.includes(' ') ? `'${v.replace(/(^'|'$)/g, '')}'` : v;\n\n        if (k !== 'haswords') {\n          updatedValue = `${updatedValue} ${k}${advancedSearchDelimiter}${quoteWrappedValue}`;\n        } else {\n          updatedValue = `${updatedValue} ${quoteWrappedValue}`;\n        }\n      }\n    });\n\n    if (onChange) {\n      onChange(event, updatedValue.replace(/^\\s+/g, ''));\n    }\n  };\n\n  const getValue = (attribute: string) => {\n    const map = getAttrValueMap();\n    return map.hasOwnProperty(attribute) ? map[attribute] : '';\n  };\n\n  const buildFormGroups = () => {\n    const formGroups = [] as React.ReactNode[];\n    attributes.forEach((attribute: string | SearchInputSearchAttribute, index: number) => {\n      const display = typeof attribute === 'string' ? attribute : attribute.display;\n      const queryAttr = typeof attribute === 'string' ? attribute : attribute.attr;\n      if (index === 0) {\n        formGroups.push(\n          <FormGroup label={display} fieldId={`${queryAttr}_${index}`} key={`${attribute}_${index}`}>\n            <TextInput\n              ref={firstAttrRef}\n              type=\"text\"\n              id={`${queryAttr}_${index}`}\n              value={getValue(queryAttr)}\n              onChange={(value, evt) => handleValueChange(queryAttr, value, evt)}\n            />\n          </FormGroup>\n        );\n      } else {\n        formGroups.push(\n          <FormGroup label={display} fieldId={`${queryAttr}_${index}`} key={`${attribute}_${index}`}>\n            <TextInput\n              type=\"text\"\n              id={`${queryAttr}_${index}`}\n              value={getValue(queryAttr)}\n              onChange={(value, evt) => handleValueChange(queryAttr, value, evt)}\n            />\n          </FormGroup>\n        );\n      }\n    });\n    formGroups.push(\n      <GenerateId key={'hasWords'}>\n        {randomId => (\n          <FormGroup label={hasWordsAttrLabel} fieldId={randomId}>\n            <TextInput\n              type=\"text\"\n              id={randomId}\n              value={getValue('haswords')}\n              onChange={(value, evt) => handleValueChange('haswords', value, evt)}\n            />\n          </FormGroup>\n        )}\n      </GenerateId>\n    );\n    return formGroups;\n  };\n\n  return isSearchMenuOpen ? (\n    <Panel variant=\"raised\" className={css(className)}>\n      <PanelMain>\n        <PanelMainBody>\n          <Form>\n            {buildFormGroups()}\n            {formAdditionalItems ? formAdditionalItems : null}\n            <ActionGroup>\n              <Button variant=\"primary\" type=\"submit\" onClick={onSearchHandler} isDisabled={!value}>\n                {submitSearchButtonLabel}\n              </Button>\n              {!!onClear && (\n                <Button variant=\"link\" type=\"reset\" onClick={onClear}>\n                  {resetButtonLabel}\n                </Button>\n              )}\n            </ActionGroup>\n          </Form>\n        </PanelMainBody>\n      </PanelMain>\n    </Panel>\n  ) : null;\n};\nAdvancedSearchMenu.displayName = 'SearchInput';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}