{"ast":null,"code":"var toString = Object.prototype.toString;\nexport function cloneDeep(value) {\n  return cloneDeepHelper(value);\n}\nfunction cloneDeepHelper(val, seen) {\n  switch (toString.call(val)) {\n    case \"[object Array]\":\n      {\n        seen = seen || new Map();\n        if (seen.has(val)) return seen.get(val);\n        var copy_1 = val.slice(0);\n        seen.set(val, copy_1);\n        copy_1.forEach(function (child, i) {\n          copy_1[i] = cloneDeepHelper(child, seen);\n        });\n        return copy_1;\n      }\n    case \"[object Object]\":\n      {\n        seen = seen || new Map();\n        if (seen.has(val)) return seen.get(val);\n        var copy_2 = Object.create(Object.getPrototypeOf(val));\n        seen.set(val, copy_2);\n        Object.keys(val).forEach(function (key) {\n          copy_2[key] = cloneDeepHelper(val[key], seen);\n        });\n        return copy_2;\n      }\n    default:\n      return val;\n  }\n}","map":{"version":3,"names":["toString","Object","prototype","cloneDeep","value","cloneDeepHelper","val","seen","call","Map","has","get","copy_1","slice","set","forEach","child","i","copy_2","create","getPrototypeOf","keys","key"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@apollo/src/utilities/common/cloneDeep.ts"],"sourcesContent":["const { toString } = Object.prototype;\n\n/**\n * Deeply clones a value to create a new instance.\n */\nexport function cloneDeep<T>(value: T): T {\n  return cloneDeepHelper(value);\n}\n\nfunction cloneDeepHelper<T>(val: T, seen?: Map<any, any>): T {\n  switch (toString.call(val)) {\n  case \"[object Array]\": {\n    seen = seen || new Map;\n    if (seen.has(val)) return seen.get(val);\n    const copy: T & any[] = (val as any).slice(0);\n    seen.set(val, copy);\n    copy.forEach(function (child, i) {\n      copy[i] = cloneDeepHelper(child, seen);\n    });\n    return copy;\n  }\n\n  case \"[object Object]\": {\n    seen = seen || new Map;\n    if (seen.has(val)) return seen.get(val);\n    // High fidelity polyfills of Object.create and Object.getPrototypeOf are\n    // possible in all JS environments, so we will assume they exist/work.\n    const copy = Object.create(Object.getPrototypeOf(val));\n    seen.set(val, copy);\n    Object.keys(val as T & Record<string, any>).forEach(key => {\n      copy[key] = cloneDeepHelper((val as any)[key], seen);\n    });\n    return copy;\n  }\n\n  default:\n    return val;\n  }\n}\n"],"mappings":"AAAQ,IAAAA,QAAQ,GAAKC,MAAM,CAACC,SAAS,CAAAF,QAArB;AAKhB,OAAM,SAAUG,SAASA,CAAIC,KAAQ;EACnC,OAAOC,eAAe,CAACD,KAAK,CAAC;AAC/B;AAEA,SAASC,eAAeA,CAAIC,GAAM,EAAEC,IAAoB;EACtD,QAAQP,QAAQ,CAACQ,IAAI,CAACF,GAAG,CAAC;IAC1B,KAAK,gBAAgB;MAAE;QACrBC,IAAI,GAAGA,IAAI,IAAI,IAAIE,GAAG,CAAH,CAAG;QACtB,IAAIF,IAAI,CAACG,GAAG,CAACJ,GAAG,CAAC,EAAE,OAAOC,IAAI,CAACI,GAAG,CAACL,GAAG,CAAC;QACvC,IAAMM,MAAI,GAAeN,GAAW,CAACO,KAAK,CAAC,CAAC,CAAC;QAC7CN,IAAI,CAACO,GAAG,CAACR,GAAG,EAAEM,MAAI,CAAC;QACnBA,MAAI,CAACG,OAAO,CAAC,UAAUC,KAAK,EAAEC,CAAC;UAC7BL,MAAI,CAACK,CAAC,CAAC,GAAGZ,eAAe,CAACW,KAAK,EAAET,IAAI,CAAC;QACxC,CAAC,CAAC;QACF,OAAOK,MAAI;;IAGb,KAAK,iBAAiB;MAAE;QACtBL,IAAI,GAAGA,IAAI,IAAI,IAAIE,GAAG,CAAH,CAAG;QACtB,IAAIF,IAAI,CAACG,GAAG,CAACJ,GAAG,CAAC,EAAE,OAAOC,IAAI,CAACI,GAAG,CAACL,GAAG,CAAC;QAGvC,IAAMY,MAAI,GAAGjB,MAAM,CAACkB,MAAM,CAAClB,MAAM,CAACmB,cAAc,CAACd,GAAG,CAAC,CAAC;QACtDC,IAAI,CAACO,GAAG,CAACR,GAAG,EAAEY,MAAI,CAAC;QACnBjB,MAAM,CAACoB,IAAI,CAACf,GAA8B,CAAC,CAACS,OAAO,CAAC,UAAAO,GAAG;UACrDJ,MAAI,CAACI,GAAG,CAAC,GAAGjB,eAAe,CAAEC,GAAW,CAACgB,GAAG,CAAC,EAAEf,IAAI,CAAC;QACtD,CAAC,CAAC;QACF,OAAOW,MAAI;;IAGb;MACE,OAAOZ,GAAG;;AAEd"},"metadata":{},"sourceType":"module","externalDependencies":[]}