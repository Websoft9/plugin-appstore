{"ast":null,"code":"import _slicedToArray from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nfunction areEqual(a, b) {\n  return a === b;\n}\nvar EMPTY_OBJECT = {};\nvar NOOP = function NOOP() {};\n\n/**\n * Gets the current state augmented with controlled values from the outside.\n * If a state item has a corresponding controlled value, it will be used instead of the internal state.\n */\nfunction getControlledState(internalState, controlledProps) {\n  var augmentedState = _extends({}, internalState);\n  Object.keys(controlledProps).forEach(function (key) {\n    if (controlledProps[key] !== undefined) {\n      augmentedState[key] = controlledProps[key];\n    }\n  });\n  return augmentedState;\n}\n/**\n * Defines an effect that compares the next state with the previous state and calls\n * the `onStateChange` callback if the state has changed.\n * The comparison is done based on the `stateComparers` parameter.\n */\nfunction useStateChangeDetection(parameters) {\n  var nextState = parameters.nextState,\n    initialState = parameters.initialState,\n    stateComparers = parameters.stateComparers,\n    onStateChange = parameters.onStateChange,\n    controlledProps = parameters.controlledProps,\n    lastActionRef = parameters.lastActionRef;\n  var internalPreviousStateRef = React.useRef(initialState);\n  React.useEffect(function () {\n    if (lastActionRef.current === null) {\n      // Detect changes only if an action has been dispatched.\n      return;\n    }\n    var previousState = getControlledState(internalPreviousStateRef.current, controlledProps);\n    Object.keys(nextState).forEach(function (key) {\n      var _stateComparers$key;\n      // go through all state keys and compare them with the previous state\n      var stateComparer = (_stateComparers$key = stateComparers[key]) != null ? _stateComparers$key : areEqual;\n      var nextStateItem = nextState[key];\n      var previousStateItem = previousState[key];\n      if (!stateComparer(nextStateItem, previousStateItem)) {\n        var _event, _type;\n        onStateChange == null ? void 0 : onStateChange((_event = lastActionRef.current.event) != null ? _event : null, key, nextStateItem, (_type = lastActionRef.current.type) != null ? _type : '', nextState);\n      }\n    });\n    internalPreviousStateRef.current = nextState;\n    lastActionRef.current = null;\n  }, [internalPreviousStateRef, nextState, lastActionRef, onStateChange, stateComparers, controlledProps]);\n}\n\n/**\n * The alternative to `React.useReducer` that lets you control the state from the outside.\n *\n * It can be used in an uncontrolled mode, similar to `React.useReducer`, or in a controlled mode, when the state is controlled by the props.\n * It also supports partially controlled state, when some state items are controlled and some are not.\n *\n * The controlled state items are provided via the `controlledProps` parameter.\n * When a reducer action is dispatched, the internal state is updated with the new values.\n * A change event (`onStateChange`) is then triggered (for each changed state item) if the new state is different from the previous state.\n * This event can be used to update the controlled values.\n *\n * The comparison of the previous and next states is done using the `stateComparers` parameter.\n * If a state item has a corresponding comparer, it will be used to determine if the state has changed.\n * This is useful when the state item is an object and you want to compare only a subset of its properties or if it's an array and you want to compare its contents.\n *\n * An additional feature is the `actionContext` parameter. It allows you to add additional properties to every action object,\n * similarly to how React context is implicitly available to every component.\n *\n * @template State - The type of the state calculated by the reducer.\n * @template Action - The type of the actions that can be dispatched.\n * @template ActionContext - The type of the additional properties that will be added to every action object.\n *\n * @ignore - internal hook.\n */\nexport default function useControllableReducer(parameters) {\n  var lastActionRef = React.useRef(null);\n  var reducer = parameters.reducer,\n    initialState = parameters.initialState,\n    _parameters$controlle = parameters.controlledProps,\n    controlledProps = _parameters$controlle === void 0 ? EMPTY_OBJECT : _parameters$controlle,\n    _parameters$stateComp = parameters.stateComparers,\n    stateComparers = _parameters$stateComp === void 0 ? EMPTY_OBJECT : _parameters$stateComp,\n    _parameters$onStateCh = parameters.onStateChange,\n    onStateChange = _parameters$onStateCh === void 0 ? NOOP : _parameters$onStateCh,\n    actionContext = parameters.actionContext;\n\n  // The reducer that is passed to React.useReducer is wrapped with a function that augments the state with controlled values.\n  var reducerWithControlledState = React.useCallback(function (state, action) {\n    lastActionRef.current = action;\n    var controlledState = getControlledState(state, controlledProps);\n    return reducer(controlledState, action);\n  }, [controlledProps, reducer]);\n  var _React$useReducer = React.useReducer(reducerWithControlledState, initialState),\n    _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n    nextState = _React$useReducer2[0],\n    dispatch = _React$useReducer2[1];\n\n  // The action that is passed to dispatch is augmented with the actionContext.\n  var dispatchWithContext = React.useCallback(function (action) {\n    dispatch(_extends({}, action, {\n      context: actionContext\n    }));\n  }, [actionContext]);\n  useStateChangeDetection({\n    nextState: nextState,\n    initialState: initialState,\n    stateComparers: stateComparers != null ? stateComparers : EMPTY_OBJECT,\n    onStateChange: onStateChange != null ? onStateChange : NOOP,\n    controlledProps: controlledProps,\n    lastActionRef: lastActionRef\n  });\n  return [getControlledState(nextState, controlledProps), dispatchWithContext];\n}","map":{"version":3,"names":["_extends","React","areEqual","a","b","EMPTY_OBJECT","NOOP","getControlledState","internalState","controlledProps","augmentedState","Object","keys","forEach","key","undefined","useStateChangeDetection","parameters","nextState","initialState","stateComparers","onStateChange","lastActionRef","internalPreviousStateRef","useRef","useEffect","current","previousState","_stateComparers$key","stateComparer","nextStateItem","previousStateItem","_event","_type","event","type","useControllableReducer","reducer","_parameters$controlle","_parameters$stateComp","_parameters$onStateCh","actionContext","reducerWithControlledState","useCallback","state","action","controlledState","_React$useReducer","useReducer","_React$useReducer2","_slicedToArray","dispatch","dispatchWithContext","context"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@mui/base/utils/useControllableReducer.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nfunction areEqual(a, b) {\n  return a === b;\n}\nconst EMPTY_OBJECT = {};\nconst NOOP = () => {};\n\n/**\n * Gets the current state augmented with controlled values from the outside.\n * If a state item has a corresponding controlled value, it will be used instead of the internal state.\n */\nfunction getControlledState(internalState, controlledProps) {\n  const augmentedState = _extends({}, internalState);\n  Object.keys(controlledProps).forEach(key => {\n    if (controlledProps[key] !== undefined) {\n      augmentedState[key] = controlledProps[key];\n    }\n  });\n  return augmentedState;\n}\n/**\n * Defines an effect that compares the next state with the previous state and calls\n * the `onStateChange` callback if the state has changed.\n * The comparison is done based on the `stateComparers` parameter.\n */\nfunction useStateChangeDetection(parameters) {\n  const {\n    nextState,\n    initialState,\n    stateComparers,\n    onStateChange,\n    controlledProps,\n    lastActionRef\n  } = parameters;\n  const internalPreviousStateRef = React.useRef(initialState);\n  React.useEffect(() => {\n    if (lastActionRef.current === null) {\n      // Detect changes only if an action has been dispatched.\n      return;\n    }\n    const previousState = getControlledState(internalPreviousStateRef.current, controlledProps);\n    Object.keys(nextState).forEach(key => {\n      var _stateComparers$key;\n      // go through all state keys and compare them with the previous state\n      const stateComparer = (_stateComparers$key = stateComparers[key]) != null ? _stateComparers$key : areEqual;\n      const nextStateItem = nextState[key];\n      const previousStateItem = previousState[key];\n      if (!stateComparer(nextStateItem, previousStateItem)) {\n        var _event, _type;\n        onStateChange == null ? void 0 : onStateChange((_event = lastActionRef.current.event) != null ? _event : null, key, nextStateItem, (_type = lastActionRef.current.type) != null ? _type : '', nextState);\n      }\n    });\n    internalPreviousStateRef.current = nextState;\n    lastActionRef.current = null;\n  }, [internalPreviousStateRef, nextState, lastActionRef, onStateChange, stateComparers, controlledProps]);\n}\n\n/**\n * The alternative to `React.useReducer` that lets you control the state from the outside.\n *\n * It can be used in an uncontrolled mode, similar to `React.useReducer`, or in a controlled mode, when the state is controlled by the props.\n * It also supports partially controlled state, when some state items are controlled and some are not.\n *\n * The controlled state items are provided via the `controlledProps` parameter.\n * When a reducer action is dispatched, the internal state is updated with the new values.\n * A change event (`onStateChange`) is then triggered (for each changed state item) if the new state is different from the previous state.\n * This event can be used to update the controlled values.\n *\n * The comparison of the previous and next states is done using the `stateComparers` parameter.\n * If a state item has a corresponding comparer, it will be used to determine if the state has changed.\n * This is useful when the state item is an object and you want to compare only a subset of its properties or if it's an array and you want to compare its contents.\n *\n * An additional feature is the `actionContext` parameter. It allows you to add additional properties to every action object,\n * similarly to how React context is implicitly available to every component.\n *\n * @template State - The type of the state calculated by the reducer.\n * @template Action - The type of the actions that can be dispatched.\n * @template ActionContext - The type of the additional properties that will be added to every action object.\n *\n * @ignore - internal hook.\n */\nexport default function useControllableReducer(parameters) {\n  const lastActionRef = React.useRef(null);\n  const {\n    reducer,\n    initialState,\n    controlledProps = EMPTY_OBJECT,\n    stateComparers = EMPTY_OBJECT,\n    onStateChange = NOOP,\n    actionContext\n  } = parameters;\n\n  // The reducer that is passed to React.useReducer is wrapped with a function that augments the state with controlled values.\n  const reducerWithControlledState = React.useCallback((state, action) => {\n    lastActionRef.current = action;\n    const controlledState = getControlledState(state, controlledProps);\n    return reducer(controlledState, action);\n  }, [controlledProps, reducer]);\n  const [nextState, dispatch] = React.useReducer(reducerWithControlledState, initialState);\n\n  // The action that is passed to dispatch is augmented with the actionContext.\n  const dispatchWithContext = React.useCallback(action => {\n    dispatch(_extends({}, action, {\n      context: actionContext\n    }));\n  }, [actionContext]);\n  useStateChangeDetection({\n    nextState,\n    initialState,\n    stateComparers: stateComparers != null ? stateComparers : EMPTY_OBJECT,\n    onStateChange: onStateChange != null ? onStateChange : NOOP,\n    controlledProps,\n    lastActionRef\n  });\n  return [getControlledState(nextState, controlledProps), dispatchWithContext];\n}"],"mappings":";AAAA,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,QAAQA,CAACC,CAAC,EAAEC,CAAC,EAAE;EACtB,OAAOD,CAAC,KAAKC,CAAC;AAChB;AACA,IAAMC,YAAY,GAAG,CAAC,CAAC;AACvB,IAAMC,IAAI,GAAG,SAAPA,IAAIA,CAAA,EAAS,CAAC,CAAC;;AAErB;AACA;AACA;AACA;AACA,SAASC,kBAAkBA,CAACC,aAAa,EAAEC,eAAe,EAAE;EAC1D,IAAMC,cAAc,GAAGV,QAAQ,CAAC,CAAC,CAAC,EAAEQ,aAAa,CAAC;EAClDG,MAAM,CAACC,IAAI,CAACH,eAAe,CAAC,CAACI,OAAO,CAAC,UAAAC,GAAG,EAAI;IAC1C,IAAIL,eAAe,CAACK,GAAG,CAAC,KAAKC,SAAS,EAAE;MACtCL,cAAc,CAACI,GAAG,CAAC,GAAGL,eAAe,CAACK,GAAG,CAAC;IAC5C;EACF,CAAC,CAAC;EACF,OAAOJ,cAAc;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,SAASM,uBAAuBA,CAACC,UAAU,EAAE;EAC3C,IACEC,SAAS,GAMPD,UAAU,CANZC,SAAS;IACTC,YAAY,GAKVF,UAAU,CALZE,YAAY;IACZC,cAAc,GAIZH,UAAU,CAJZG,cAAc;IACdC,aAAa,GAGXJ,UAAU,CAHZI,aAAa;IACbZ,eAAe,GAEbQ,UAAU,CAFZR,eAAe;IACfa,aAAa,GACXL,UAAU,CADZK,aAAa;EAEf,IAAMC,wBAAwB,GAAGtB,KAAK,CAACuB,MAAM,CAACL,YAAY,CAAC;EAC3DlB,KAAK,CAACwB,SAAS,CAAC,YAAM;IACpB,IAAIH,aAAa,CAACI,OAAO,KAAK,IAAI,EAAE;MAClC;MACA;IACF;IACA,IAAMC,aAAa,GAAGpB,kBAAkB,CAACgB,wBAAwB,CAACG,OAAO,EAAEjB,eAAe,CAAC;IAC3FE,MAAM,CAACC,IAAI,CAACM,SAAS,CAAC,CAACL,OAAO,CAAC,UAAAC,GAAG,EAAI;MACpC,IAAIc,mBAAmB;MACvB;MACA,IAAMC,aAAa,GAAG,CAACD,mBAAmB,GAAGR,cAAc,CAACN,GAAG,CAAC,KAAK,IAAI,GAAGc,mBAAmB,GAAG1B,QAAQ;MAC1G,IAAM4B,aAAa,GAAGZ,SAAS,CAACJ,GAAG,CAAC;MACpC,IAAMiB,iBAAiB,GAAGJ,aAAa,CAACb,GAAG,CAAC;MAC5C,IAAI,CAACe,aAAa,CAACC,aAAa,EAAEC,iBAAiB,CAAC,EAAE;QACpD,IAAIC,MAAM,EAAEC,KAAK;QACjBZ,aAAa,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,aAAa,CAAC,CAACW,MAAM,GAAGV,aAAa,CAACI,OAAO,CAACQ,KAAK,KAAK,IAAI,GAAGF,MAAM,GAAG,IAAI,EAAElB,GAAG,EAAEgB,aAAa,EAAE,CAACG,KAAK,GAAGX,aAAa,CAACI,OAAO,CAACS,IAAI,KAAK,IAAI,GAAGF,KAAK,GAAG,EAAE,EAAEf,SAAS,CAAC;MAC1M;IACF,CAAC,CAAC;IACFK,wBAAwB,CAACG,OAAO,GAAGR,SAAS;IAC5CI,aAAa,CAACI,OAAO,GAAG,IAAI;EAC9B,CAAC,EAAE,CAACH,wBAAwB,EAAEL,SAAS,EAAEI,aAAa,EAAED,aAAa,EAAED,cAAc,EAAEX,eAAe,CAAC,CAAC;AAC1G;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS2B,sBAAsBA,CAACnB,UAAU,EAAE;EACzD,IAAMK,aAAa,GAAGrB,KAAK,CAACuB,MAAM,CAAC,IAAI,CAAC;EACxC,IACEa,OAAO,GAMLpB,UAAU,CANZoB,OAAO;IACPlB,YAAY,GAKVF,UAAU,CALZE,YAAY;IAAAmB,qBAAA,GAKVrB,UAAU,CAJZR,eAAe;IAAfA,eAAe,GAAA6B,qBAAA,cAAGjC,YAAY,GAAAiC,qBAAA;IAAAC,qBAAA,GAI5BtB,UAAU,CAHZG,cAAc;IAAdA,cAAc,GAAAmB,qBAAA,cAAGlC,YAAY,GAAAkC,qBAAA;IAAAC,qBAAA,GAG3BvB,UAAU,CAFZI,aAAa;IAAbA,aAAa,GAAAmB,qBAAA,cAAGlC,IAAI,GAAAkC,qBAAA;IACpBC,aAAa,GACXxB,UAAU,CADZwB,aAAa;;EAGf;EACA,IAAMC,0BAA0B,GAAGzC,KAAK,CAAC0C,WAAW,CAAC,UAACC,KAAK,EAAEC,MAAM,EAAK;IACtEvB,aAAa,CAACI,OAAO,GAAGmB,MAAM;IAC9B,IAAMC,eAAe,GAAGvC,kBAAkB,CAACqC,KAAK,EAAEnC,eAAe,CAAC;IAClE,OAAO4B,OAAO,CAACS,eAAe,EAAED,MAAM,CAAC;EACzC,CAAC,EAAE,CAACpC,eAAe,EAAE4B,OAAO,CAAC,CAAC;EAC9B,IAAAU,iBAAA,GAA8B9C,KAAK,CAAC+C,UAAU,CAACN,0BAA0B,EAAEvB,YAAY,CAAC;IAAA8B,kBAAA,GAAAC,cAAA,CAAAH,iBAAA;IAAjF7B,SAAS,GAAA+B,kBAAA;IAAEE,QAAQ,GAAAF,kBAAA;;EAE1B;EACA,IAAMG,mBAAmB,GAAGnD,KAAK,CAAC0C,WAAW,CAAC,UAAAE,MAAM,EAAI;IACtDM,QAAQ,CAACnD,QAAQ,CAAC,CAAC,CAAC,EAAE6C,MAAM,EAAE;MAC5BQ,OAAO,EAAEZ;IACX,CAAC,CAAC,CAAC;EACL,CAAC,EAAE,CAACA,aAAa,CAAC,CAAC;EACnBzB,uBAAuB,CAAC;IACtBE,SAAS,EAATA,SAAS;IACTC,YAAY,EAAZA,YAAY;IACZC,cAAc,EAAEA,cAAc,IAAI,IAAI,GAAGA,cAAc,GAAGf,YAAY;IACtEgB,aAAa,EAAEA,aAAa,IAAI,IAAI,GAAGA,aAAa,GAAGf,IAAI;IAC3DG,eAAe,EAAfA,eAAe;IACfa,aAAa,EAAbA;EACF,CAAC,CAAC;EACF,OAAO,CAACf,kBAAkB,CAACW,SAAS,EAAET,eAAe,CAAC,EAAE2C,mBAAmB,CAAC;AAC9E"},"metadata":{},"sourceType":"module","externalDependencies":[]}