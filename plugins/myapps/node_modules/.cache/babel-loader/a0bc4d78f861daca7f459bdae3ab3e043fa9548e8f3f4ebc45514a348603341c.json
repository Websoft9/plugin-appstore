{"ast":null,"code":"// @ts-nocheck\nimport getBasePlacement from './getBasePlacement';\nimport getVariation from './getVariation';\nimport getMainAxisFromPlacement from './getMainAxisFromPlacement';\nimport { top, right, bottom, left, start, end } from '../enums';\n/**\n *\n */\nexport default function computeOffsets(_ref) {\n  var reference = _ref.reference,\n    element = _ref.element,\n    placement = _ref.placement;\n  var basePlacement = placement ? getBasePlacement(placement) : null;\n  var variation = placement ? getVariation(placement) : null;\n  var commonX = reference.x + reference.width / 2 - element.width / 2;\n  var commonY = reference.y + reference.height / 2 - element.height / 2;\n  var offsets;\n  switch (basePlacement) {\n    case top:\n      offsets = {\n        x: commonX,\n        y: reference.y - element.height\n      };\n      break;\n    case bottom:\n      offsets = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n    case right:\n      offsets = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n    case left:\n      offsets = {\n        x: reference.x - element.width,\n        y: commonY\n      };\n      break;\n    default:\n      offsets = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;\n  if (mainAxis != null) {\n    var len = mainAxis === 'y' ? 'height' : 'width';\n    switch (variation) {\n      case start:\n        offsets[mainAxis] = Math.floor(offsets[mainAxis]) - Math.floor(reference[len] / 2 - element[len] / 2);\n        break;\n      case end:\n        offsets[mainAxis] = Math.floor(offsets[mainAxis]) + Math.ceil(reference[len] / 2 - element[len] / 2);\n        break;\n      default:\n    }\n  }\n  return offsets;\n}","map":{"version":3,"names":["getBasePlacement","getVariation","getMainAxisFromPlacement","top","right","bottom","left","start","end","computeOffsets","_ref","reference","element","placement","basePlacement","variation","commonX","x","width","commonY","y","height","offsets","mainAxis","len","Math","floor","ceil"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@patternfly/react-core/src/helpers/Popper/thirdparty/popper-core/utils/computeOffsets.ts"],"sourcesContent":["// @ts-nocheck\nimport getBasePlacement from './getBasePlacement';\nimport getVariation from './getVariation';\nimport getMainAxisFromPlacement from './getMainAxisFromPlacement';\nimport { Rect, PositioningStrategy, Offsets, ClientRectObject } from '../types';\nimport { top, right, bottom, left, start, end, Placement } from '../enums';\n\n/**\n *\n */\nexport default function computeOffsets({\n  reference,\n  element,\n  placement\n}: {\n  reference: Rect | ClientRectObject;\n  element: Rect | ClientRectObject;\n  strategy: PositioningStrategy;\n  placement?: Placement;\n}): Offsets {\n  const basePlacement = placement ? getBasePlacement(placement) : null;\n  const variation = placement ? getVariation(placement) : null;\n  const commonX = reference.x + reference.width / 2 - element.width / 2;\n  const commonY = reference.y + reference.height / 2 - element.height / 2;\n\n  let offsets;\n  switch (basePlacement) {\n    case top:\n      offsets = {\n        x: commonX,\n        y: reference.y - element.height\n      };\n      break;\n    case bottom:\n      offsets = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n    case right:\n      offsets = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n    case left:\n      offsets = {\n        x: reference.x - element.width,\n        y: commonY\n      };\n      break;\n    default:\n      offsets = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n\n  const mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;\n\n  if (mainAxis != null) {\n    const len = mainAxis === 'y' ? 'height' : 'width';\n\n    switch (variation) {\n      case start:\n        offsets[mainAxis] = Math.floor(offsets[mainAxis]) - Math.floor(reference[len] / 2 - element[len] / 2);\n        break;\n      case end:\n        offsets[mainAxis] = Math.floor(offsets[mainAxis]) + Math.ceil(reference[len] / 2 - element[len] / 2);\n        break;\n      default:\n    }\n  }\n\n  return offsets;\n}\n"],"mappings":"AAAA;AACA,OAAOA,gBAAgB,MAAM,oBAAoB;AACjD,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAOC,wBAAwB,MAAM,4BAA4B;AAEjE,SAASC,GAAG,EAAEC,KAAK,EAAEC,MAAM,EAAEC,IAAI,EAAEC,KAAK,EAAEC,GAAG,QAAmB,UAAU;AAE1E;;;AAGA,eAAc,SAAUC,cAAcA,CAAAC,IAAA,EASrC;EAAA,IARCC,SAAS,GAAAD,IAAA,CAATC,SAAS;IACTC,OAAO,GAAAF,IAAA,CAAPE,OAAO;IACPC,SAAS,GAAAH,IAAA,CAATG,SAAS;EAOT,IAAMC,aAAa,GAAGD,SAAS,GAAGb,gBAAgB,CAACa,SAAS,CAAC,GAAG,IAAI;EACpE,IAAME,SAAS,GAAGF,SAAS,GAAGZ,YAAY,CAACY,SAAS,CAAC,GAAG,IAAI;EAC5D,IAAMG,OAAO,GAAGL,SAAS,CAACM,CAAC,GAAGN,SAAS,CAACO,KAAK,GAAG,CAAC,GAAGN,OAAO,CAACM,KAAK,GAAG,CAAC;EACrE,IAAMC,OAAO,GAAGR,SAAS,CAACS,CAAC,GAAGT,SAAS,CAACU,MAAM,GAAG,CAAC,GAAGT,OAAO,CAACS,MAAM,GAAG,CAAC;EAEvE,IAAIC,OAAO;EACX,QAAQR,aAAa;IACnB,KAAKX,GAAG;MACNmB,OAAO,GAAG;QACRL,CAAC,EAAED,OAAO;QACVI,CAAC,EAAET,SAAS,CAACS,CAAC,GAAGR,OAAO,CAACS;OAC1B;MACD;IACF,KAAKhB,MAAM;MACTiB,OAAO,GAAG;QACRL,CAAC,EAAED,OAAO;QACVI,CAAC,EAAET,SAAS,CAACS,CAAC,GAAGT,SAAS,CAACU;OAC5B;MACD;IACF,KAAKjB,KAAK;MACRkB,OAAO,GAAG;QACRL,CAAC,EAAEN,SAAS,CAACM,CAAC,GAAGN,SAAS,CAACO,KAAK;QAChCE,CAAC,EAAED;OACJ;MACD;IACF,KAAKb,IAAI;MACPgB,OAAO,GAAG;QACRL,CAAC,EAAEN,SAAS,CAACM,CAAC,GAAGL,OAAO,CAACM,KAAK;QAC9BE,CAAC,EAAED;OACJ;MACD;IACF;MACEG,OAAO,GAAG;QACRL,CAAC,EAAEN,SAAS,CAACM,CAAC;QACdG,CAAC,EAAET,SAAS,CAACS;OACd;;EAGL,IAAMG,QAAQ,GAAGT,aAAa,GAAGZ,wBAAwB,CAACY,aAAa,CAAC,GAAG,IAAI;EAE/E,IAAIS,QAAQ,IAAI,IAAI,EAAE;IACpB,IAAMC,GAAG,GAAGD,QAAQ,KAAK,GAAG,GAAG,QAAQ,GAAG,OAAO;IAEjD,QAAQR,SAAS;MACf,KAAKR,KAAK;QACRe,OAAO,CAACC,QAAQ,CAAC,GAAGE,IAAI,CAACC,KAAK,CAACJ,OAAO,CAACC,QAAQ,CAAC,CAAC,GAAGE,IAAI,CAACC,KAAK,CAACf,SAAS,CAACa,GAAG,CAAC,GAAG,CAAC,GAAGZ,OAAO,CAACY,GAAG,CAAC,GAAG,CAAC,CAAC;QACrG;MACF,KAAKhB,GAAG;QACNc,OAAO,CAACC,QAAQ,CAAC,GAAGE,IAAI,CAACC,KAAK,CAACJ,OAAO,CAACC,QAAQ,CAAC,CAAC,GAAGE,IAAI,CAACE,IAAI,CAAChB,SAAS,CAACa,GAAG,CAAC,GAAG,CAAC,GAAGZ,OAAO,CAACY,GAAG,CAAC,GAAG,CAAC,CAAC;QACpG;MACF;;;EAIJ,OAAOF,OAAO;AAChB"},"metadata":{},"sourceType":"module","externalDependencies":[]}