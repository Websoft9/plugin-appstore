{"ast":null,"code":"import _classCallCheck from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { css } from '@patternfly/react-styles';\nimport { ToolbarContext, ToolbarContentContext } from './ToolbarUtils';\nimport { Button } from '../Button';\nimport globalBreakpointLg from '@patternfly/react-tokens/dist/esm/global_breakpoint_lg';\nimport { formatBreakpointMods, toCamel, canUseDOM } from '../../helpers/util';\nimport { PageContext } from '../Page/PageContext';\nexport var ToolbarToggleGroup = /*#__PURE__*/function (_React$Component) {\n  _inherits(ToolbarToggleGroup, _React$Component);\n  var _super = _createSuper(ToolbarToggleGroup);\n  function ToolbarToggleGroup() {\n    var _this;\n    _classCallCheck(this, ToolbarToggleGroup);\n    _this = _super.apply(this, arguments);\n    _this.isContentPopup = function () {\n      var viewportSize = canUseDOM ? window.innerWidth : 1200;\n      var lgBreakpointValue = parseInt(globalBreakpointLg.value);\n      return viewportSize < lgBreakpointValue;\n    };\n    return _this;\n  }\n  _createClass(ToolbarToggleGroup, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var _a = this.props,\n        toggleIcon = _a.toggleIcon,\n        variant = _a.variant,\n        visibility = _a.visibility,\n        visiblity = _a.visiblity,\n        breakpoint = _a.breakpoint,\n        alignment = _a.alignment,\n        spacer = _a.spacer,\n        spaceItems = _a.spaceItems,\n        className = _a.className,\n        children = _a.children,\n        props = __rest(_a, [\"toggleIcon\", \"variant\", \"visibility\", \"visiblity\", \"breakpoint\", \"alignment\", \"spacer\", \"spaceItems\", \"className\", \"children\"]);\n      if (!breakpoint && !toggleIcon) {\n        // eslint-disable-next-line no-console\n        console.error('ToolbarToggleGroup will not be visible without a breakpoint or toggleIcon.');\n      }\n      if (visiblity !== undefined) {\n        // eslint-disable-next-line no-console\n        console.warn('The ToolbarToggleGroup visiblity prop has been deprecated. ' + 'Please use the correctly spelled visibility prop instead.');\n      }\n      return React.createElement(PageContext.Consumer, null, function (_ref) {\n        var width = _ref.width,\n          getBreakpoint = _ref.getBreakpoint;\n        return React.createElement(ToolbarContext.Consumer, null, function (_ref2) {\n          var isExpanded = _ref2.isExpanded,\n            toggleIsExpanded = _ref2.toggleIsExpanded;\n          return React.createElement(ToolbarContentContext.Consumer, null, function (_ref3) {\n            var expandableContentRef = _ref3.expandableContentRef,\n              expandableContentId = _ref3.expandableContentId;\n            if (expandableContentRef.current && expandableContentRef.current.classList) {\n              if (isExpanded) {\n                expandableContentRef.current.classList.add(styles.modifiers.expanded);\n              } else {\n                expandableContentRef.current.classList.remove(styles.modifiers.expanded);\n              }\n            }\n            var breakpointMod = {};\n            breakpointMod[breakpoint] = 'show';\n            return React.createElement(\"div\", Object.assign({\n              className: css(styles.toolbarGroup, styles.modifiers.toggleGroup, variant && styles.modifiers[toCamel(variant)], formatBreakpointMods(breakpointMod, styles, '', getBreakpoint(width)), formatBreakpointMods(visibility || visiblity, styles, '', getBreakpoint(width)), formatBreakpointMods(alignment, styles, '', getBreakpoint(width)), formatBreakpointMods(spacer, styles, '', getBreakpoint(width)), formatBreakpointMods(spaceItems, styles, '', getBreakpoint(width)), className)\n            }, props), React.createElement(\"div\", {\n              className: css(styles.toolbarToggle)\n            }, React.createElement(Button, Object.assign({\n              variant: \"plain\",\n              onClick: toggleIsExpanded,\n              \"aria-label\": \"Show Filters\"\n            }, isExpanded && {\n              'aria-expanded': true\n            }, {\n              \"aria-haspopup\": isExpanded && _this2.isContentPopup(),\n              \"aria-controls\": expandableContentId\n            }), toggleIcon)), isExpanded ? ReactDOM.createPortal(children, expandableContentRef.current.firstElementChild) : children);\n          });\n        });\n      });\n    }\n  }]);\n  return ToolbarToggleGroup;\n}(React.Component);\nToolbarToggleGroup.displayName = 'ToolbarToggleGroup';","map":{"version":3,"names":["React","ReactDOM","styles","css","ToolbarContext","ToolbarContentContext","Button","globalBreakpointLg","formatBreakpointMods","toCamel","canUseDOM","PageContext","ToolbarToggleGroup","_React$Component","_inherits","_super","_createSuper","_this","_classCallCheck","isContentPopup","viewportSize","window","innerWidth","lgBreakpointValue","parseInt","value","_createClass","key","render","_this2","_a","props","toggleIcon","variant","visibility","visiblity","breakpoint","alignment","spacer","spaceItems","className","children","__rest","console","error","undefined","warn","createElement","Consumer","_ref","width","getBreakpoint","_ref2","isExpanded","toggleIsExpanded","_ref3","expandableContentRef","expandableContentId","current","classList","add","modifiers","expanded","remove","breakpointMod","Object","assign","toolbarGroup","toggleGroup","toolbarToggle","onClick","createPortal","firstElementChild","Component","displayName"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@patternfly/react-core/src/components/Toolbar/ToolbarToggleGroup.tsx"],"sourcesContent":["import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { css } from '@patternfly/react-styles';\nimport { ToolbarGroupProps } from './ToolbarGroup';\nimport { ToolbarContext, ToolbarContentContext } from './ToolbarUtils';\nimport { Button } from '../Button';\nimport globalBreakpointLg from '@patternfly/react-tokens/dist/esm/global_breakpoint_lg';\nimport { formatBreakpointMods, toCamel, canUseDOM } from '../../helpers/util';\nimport { PageContext } from '../Page/PageContext';\n\nexport interface ToolbarToggleGroupProps extends ToolbarGroupProps {\n  /** An icon to be rendered when the toggle group has collapsed down */\n  toggleIcon: React.ReactNode;\n  /** Controls when filters are shown and when the toggle button is hidden. */\n  breakpoint: 'md' | 'lg' | 'xl' | '2xl';\n  /** Visibility at various breakpoints. */\n  visibility?: {\n    default?: 'hidden' | 'visible';\n    md?: 'hidden' | 'visible';\n    lg?: 'hidden' | 'visible';\n    xl?: 'hidden' | 'visible';\n    '2xl'?: 'hidden' | 'visible';\n  };\n  /** @deprecated prop misspelled */\n  visiblity?: {\n    default?: 'hidden' | 'visible';\n    md?: 'hidden' | 'visible';\n    lg?: 'hidden' | 'visible';\n    xl?: 'hidden' | 'visible';\n    '2xl'?: 'hidden' | 'visible';\n  };\n  /** Alignment at various breakpoints. */\n  alignment?: {\n    default?: 'alignRight' | 'alignLeft';\n    md?: 'alignRight' | 'alignLeft';\n    lg?: 'alignRight' | 'alignLeft';\n    xl?: 'alignRight' | 'alignLeft';\n    '2xl'?: 'alignRight' | 'alignLeft';\n  };\n  /** Spacers at various breakpoints. */\n  spacer?: {\n    default?: 'spacerNone' | 'spacerSm' | 'spacerMd' | 'spacerLg';\n    md?: 'spacerNone' | 'spacerSm' | 'spacerMd' | 'spacerLg';\n    lg?: 'spacerNone' | 'spacerSm' | 'spacerMd' | 'spacerLg';\n    xl?: 'spacerNone' | 'spacerSm' | 'spacerMd' | 'spacerLg';\n    '2xl'?: 'spacerNone' | 'spacerSm' | 'spacerMd' | 'spacerLg';\n  };\n  /** Space items at various breakpoints. */\n  spaceItems?: {\n    default?: 'spaceItemsNone' | 'spaceItemsSm' | 'spaceItemsMd' | 'spaceItemsLg';\n    md?: 'spaceItemsNone' | 'spaceItemsSm' | 'spaceItemsMd' | 'spaceItemsLg';\n    lg?: 'spaceItemsNone' | 'spaceItemsSm' | 'spaceItemsMd' | 'spaceItemsLg';\n    xl?: 'spaceItemsNone' | 'spaceItemsSm' | 'spaceItemsMd' | 'spaceItemsLg';\n    '2xl'?: 'spaceItemsNone' | 'spaceItemsSm' | 'spaceItemsMd' | 'spaceItemsLg';\n  };\n}\n\nexport class ToolbarToggleGroup extends React.Component<ToolbarToggleGroupProps> {\n  static displayName = 'ToolbarToggleGroup';\n  isContentPopup = () => {\n    const viewportSize = canUseDOM ? window.innerWidth : 1200;\n    const lgBreakpointValue = parseInt(globalBreakpointLg.value);\n    return viewportSize < lgBreakpointValue;\n  };\n\n  render() {\n    const {\n      toggleIcon,\n      variant,\n      visibility,\n      visiblity,\n      breakpoint,\n      alignment,\n      spacer,\n      spaceItems,\n      className,\n      children,\n      ...props\n    } = this.props;\n\n    if (!breakpoint && !toggleIcon) {\n      // eslint-disable-next-line no-console\n      console.error('ToolbarToggleGroup will not be visible without a breakpoint or toggleIcon.');\n    }\n\n    if (visiblity !== undefined) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        'The ToolbarToggleGroup visiblity prop has been deprecated. ' +\n          'Please use the correctly spelled visibility prop instead.'\n      );\n    }\n\n    return (\n      <PageContext.Consumer>\n        {({ width, getBreakpoint }) => (\n          <ToolbarContext.Consumer>\n            {({ isExpanded, toggleIsExpanded }) => (\n              <ToolbarContentContext.Consumer>\n                {({ expandableContentRef, expandableContentId }) => {\n                  if (expandableContentRef.current && expandableContentRef.current.classList) {\n                    if (isExpanded) {\n                      expandableContentRef.current.classList.add(styles.modifiers.expanded);\n                    } else {\n                      expandableContentRef.current.classList.remove(styles.modifiers.expanded);\n                    }\n                  }\n\n                  const breakpointMod: {\n                    md?: 'show';\n                    lg?: 'show';\n                    xl?: 'show';\n                    '2xl'?: 'show';\n                  } = {};\n                  breakpointMod[breakpoint] = 'show';\n\n                  return (\n                    <div\n                      className={css(\n                        styles.toolbarGroup,\n                        styles.modifiers.toggleGroup,\n                        variant &&\n                          styles.modifiers[toCamel(variant) as 'filterGroup' | 'iconButtonGroup' | 'buttonGroup'],\n                        formatBreakpointMods(breakpointMod, styles, '', getBreakpoint(width)),\n                        formatBreakpointMods(visibility || visiblity, styles, '', getBreakpoint(width)),\n                        formatBreakpointMods(alignment, styles, '', getBreakpoint(width)),\n                        formatBreakpointMods(spacer, styles, '', getBreakpoint(width)),\n                        formatBreakpointMods(spaceItems, styles, '', getBreakpoint(width)),\n                        className\n                      )}\n                      {...props}\n                    >\n                      <div className={css(styles.toolbarToggle)}>\n                        <Button\n                          variant=\"plain\"\n                          onClick={toggleIsExpanded}\n                          aria-label=\"Show Filters\"\n                          {...(isExpanded && { 'aria-expanded': true })}\n                          aria-haspopup={isExpanded && this.isContentPopup()}\n                          aria-controls={expandableContentId}\n                        >\n                          {toggleIcon}\n                        </Button>\n                      </div>\n                      {isExpanded\n                        ? (ReactDOM.createPortal(\n                            children,\n                            expandableContentRef.current.firstElementChild\n                          ) as React.ReactElement)\n                        : children}\n                    </div>\n                  );\n                }}\n              </ToolbarContentContext.Consumer>\n            )}\n          </ToolbarContext.Consumer>\n        )}\n      </PageContext.Consumer>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}