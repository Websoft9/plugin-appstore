{"ast":null,"code":"import { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { print } from \"../../language/printer.mjs\";\nimport { isCompositeType } from \"../../type/definition.mjs\";\nimport { typeFromAST } from \"../../utilities/typeFromAST.mjs\";\n\n/**\n * Fragments on composite type\n *\n * Fragments use a type condition to determine if they apply, since fragments\n * can only be spread into a composite type (object, interface, or union), the\n * type condition must also be a composite type.\n */\nexport function FragmentsOnCompositeTypesRule(context) {\n  return {\n    InlineFragment: function InlineFragment(node) {\n      var typeCondition = node.typeCondition;\n      if (typeCondition) {\n        var type = typeFromAST(context.getSchema(), typeCondition);\n        if (type && !isCompositeType(type)) {\n          var typeStr = print(typeCondition);\n          context.reportError(new GraphQLError(\"Fragment cannot condition on non composite type \\\"\".concat(typeStr, \"\\\".\"), typeCondition));\n        }\n      }\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      var type = typeFromAST(context.getSchema(), node.typeCondition);\n      if (type && !isCompositeType(type)) {\n        var typeStr = print(node.typeCondition);\n        context.reportError(new GraphQLError(\"Fragment \\\"\".concat(node.name.value, \"\\\" cannot condition on non composite type \\\"\").concat(typeStr, \"\\\".\"), node.typeCondition));\n      }\n    }\n  };\n}","map":{"version":3,"names":["GraphQLError","print","isCompositeType","typeFromAST","FragmentsOnCompositeTypesRule","context","InlineFragment","node","typeCondition","type","getSchema","typeStr","reportError","concat","FragmentDefinition","name","value"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/graphql/validation/rules/FragmentsOnCompositeTypesRule.mjs"],"sourcesContent":["import { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { print } from \"../../language/printer.mjs\";\nimport { isCompositeType } from \"../../type/definition.mjs\";\nimport { typeFromAST } from \"../../utilities/typeFromAST.mjs\";\n\n/**\n * Fragments on composite type\n *\n * Fragments use a type condition to determine if they apply, since fragments\n * can only be spread into a composite type (object, interface, or union), the\n * type condition must also be a composite type.\n */\nexport function FragmentsOnCompositeTypesRule(context) {\n  return {\n    InlineFragment: function InlineFragment(node) {\n      var typeCondition = node.typeCondition;\n\n      if (typeCondition) {\n        var type = typeFromAST(context.getSchema(), typeCondition);\n\n        if (type && !isCompositeType(type)) {\n          var typeStr = print(typeCondition);\n          context.reportError(new GraphQLError(\"Fragment cannot condition on non composite type \\\"\".concat(typeStr, \"\\\".\"), typeCondition));\n        }\n      }\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      var type = typeFromAST(context.getSchema(), node.typeCondition);\n\n      if (type && !isCompositeType(type)) {\n        var typeStr = print(node.typeCondition);\n        context.reportError(new GraphQLError(\"Fragment \\\"\".concat(node.name.value, \"\\\" cannot condition on non composite type \\\"\").concat(typeStr, \"\\\".\"), node.typeCondition));\n      }\n    }\n  };\n}\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,8BAA8B;AAC3D,SAASC,KAAK,QAAQ,4BAA4B;AAClD,SAASC,eAAe,QAAQ,2BAA2B;AAC3D,SAASC,WAAW,QAAQ,iCAAiC;;AAE7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,6BAA6BA,CAACC,OAAO,EAAE;EACrD,OAAO;IACLC,cAAc,EAAE,SAASA,cAAcA,CAACC,IAAI,EAAE;MAC5C,IAAIC,aAAa,GAAGD,IAAI,CAACC,aAAa;MAEtC,IAAIA,aAAa,EAAE;QACjB,IAAIC,IAAI,GAAGN,WAAW,CAACE,OAAO,CAACK,SAAS,CAAC,CAAC,EAAEF,aAAa,CAAC;QAE1D,IAAIC,IAAI,IAAI,CAACP,eAAe,CAACO,IAAI,CAAC,EAAE;UAClC,IAAIE,OAAO,GAAGV,KAAK,CAACO,aAAa,CAAC;UAClCH,OAAO,CAACO,WAAW,CAAC,IAAIZ,YAAY,CAAC,oDAAoD,CAACa,MAAM,CAACF,OAAO,EAAE,KAAK,CAAC,EAAEH,aAAa,CAAC,CAAC;QACnI;MACF;IACF,CAAC;IACDM,kBAAkB,EAAE,SAASA,kBAAkBA,CAACP,IAAI,EAAE;MACpD,IAAIE,IAAI,GAAGN,WAAW,CAACE,OAAO,CAACK,SAAS,CAAC,CAAC,EAAEH,IAAI,CAACC,aAAa,CAAC;MAE/D,IAAIC,IAAI,IAAI,CAACP,eAAe,CAACO,IAAI,CAAC,EAAE;QAClC,IAAIE,OAAO,GAAGV,KAAK,CAACM,IAAI,CAACC,aAAa,CAAC;QACvCH,OAAO,CAACO,WAAW,CAAC,IAAIZ,YAAY,CAAC,aAAa,CAACa,MAAM,CAACN,IAAI,CAACQ,IAAI,CAACC,KAAK,EAAE,8CAA8C,CAAC,CAACH,MAAM,CAACF,OAAO,EAAE,KAAK,CAAC,EAAEJ,IAAI,CAACC,aAAa,CAAC,CAAC;MACzK;IACF;EACF,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}