{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useId as useId, unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { useTabsContext } from '../Tabs';\nimport { useCompoundItem } from '../utils/useCompoundItem';\nimport { useListItem } from '../useList';\nimport useButton from '../useButton';\nfunction tabValueGenerator(otherTabValues) {\n  return otherTabValues.size;\n}\n\n/**\n *\n * Demos:\n *\n * - [Tabs](https://mui.com/base/react-tabs/#hooks)\n *\n * API:\n *\n * - [useTab API](https://mui.com/base/react-tabs/hooks-api/#use-tab)\n */\nfunction useTab(parameters) {\n  var valueParam = parameters.value,\n    externalRef = parameters.rootRef,\n    _parameters$disabled = parameters.disabled,\n    disabled = _parameters$disabled === void 0 ? false : _parameters$disabled,\n    idParam = parameters.id;\n  var tabRef = React.useRef(null);\n  var id = useId(idParam);\n  var _useTabsContext = useTabsContext(),\n    selectedValue = _useTabsContext.value,\n    selectionFollowsFocus = _useTabsContext.selectionFollowsFocus,\n    getTabPanelId = _useTabsContext.getTabPanelId;\n  var tabMetadata = React.useMemo(function () {\n    return {\n      disabled: disabled,\n      ref: tabRef,\n      id: id\n    };\n  }, [disabled, tabRef, id]);\n  var _useCompoundItem = useCompoundItem(valueParam != null ? valueParam : tabValueGenerator, tabMetadata),\n    value = _useCompoundItem.id,\n    index = _useCompoundItem.index,\n    totalTabsCount = _useCompoundItem.totalItemCount;\n  var _useListItem = useListItem({\n      item: value\n    }),\n    getTabProps = _useListItem.getRootProps,\n    listItemRefHandler = _useListItem.rootRef,\n    highlighted = _useListItem.highlighted,\n    selected = _useListItem.selected;\n  var _useButton = useButton({\n      disabled: disabled,\n      focusableWhenDisabled: !selectionFollowsFocus,\n      type: 'button'\n    }),\n    getButtonProps = _useButton.getRootProps,\n    buttonRefHandler = _useButton.rootRef,\n    active = _useButton.active,\n    focusVisible = _useButton.focusVisible,\n    setFocusVisible = _useButton.setFocusVisible;\n  var handleRef = useForkRef(tabRef, externalRef, listItemRefHandler, buttonRefHandler);\n  var tabPanelId = value !== undefined ? getTabPanelId(value) : undefined;\n  var getRootProps = function getRootProps() {\n    var otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var resolvedTabProps = _extends({}, otherHandlers, getTabProps(otherHandlers));\n    var resolvedButtonProps = _extends({}, resolvedTabProps, getButtonProps(resolvedTabProps));\n    return _extends({}, resolvedButtonProps, {\n      role: 'tab',\n      'aria-controls': tabPanelId,\n      'aria-selected': selected,\n      id: id,\n      ref: handleRef\n    });\n  };\n  return {\n    getRootProps: getRootProps,\n    active: active,\n    focusVisible: focusVisible,\n    highlighted: highlighted,\n    index: index,\n    rootRef: handleRef,\n    // the `selected` state isn't set on the server (it relies on effects to be calculated),\n    // so we fall back to checking the `value` prop with the selectedValue from the TabsContext\n    selected: selected || value === selectedValue,\n    setFocusVisible: setFocusVisible,\n    totalTabsCount: totalTabsCount\n  };\n}\nexport default useTab;","map":{"version":3,"names":["_extends","React","unstable_useId","useId","unstable_useForkRef","useForkRef","useTabsContext","useCompoundItem","useListItem","useButton","tabValueGenerator","otherTabValues","size","useTab","parameters","valueParam","value","externalRef","rootRef","_parameters$disabled","disabled","idParam","id","tabRef","useRef","_useTabsContext","selectedValue","selectionFollowsFocus","getTabPanelId","tabMetadata","useMemo","ref","_useCompoundItem","index","totalTabsCount","totalItemCount","_useListItem","item","getTabProps","getRootProps","listItemRefHandler","highlighted","selected","_useButton","focusableWhenDisabled","type","getButtonProps","buttonRefHandler","active","focusVisible","setFocusVisible","handleRef","tabPanelId","undefined","otherHandlers","arguments","length","resolvedTabProps","resolvedButtonProps","role"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@mui/base/useTab/useTab.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useId as useId, unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { useTabsContext } from '../Tabs';\nimport { useCompoundItem } from '../utils/useCompoundItem';\nimport { useListItem } from '../useList';\nimport useButton from '../useButton';\nfunction tabValueGenerator(otherTabValues) {\n  return otherTabValues.size;\n}\n\n/**\n *\n * Demos:\n *\n * - [Tabs](https://mui.com/base/react-tabs/#hooks)\n *\n * API:\n *\n * - [useTab API](https://mui.com/base/react-tabs/hooks-api/#use-tab)\n */\nfunction useTab(parameters) {\n  const {\n    value: valueParam,\n    rootRef: externalRef,\n    disabled = false,\n    id: idParam\n  } = parameters;\n  const tabRef = React.useRef(null);\n  const id = useId(idParam);\n  const {\n    value: selectedValue,\n    selectionFollowsFocus,\n    getTabPanelId\n  } = useTabsContext();\n  const tabMetadata = React.useMemo(() => ({\n    disabled,\n    ref: tabRef,\n    id\n  }), [disabled, tabRef, id]);\n  const {\n    id: value,\n    index,\n    totalItemCount: totalTabsCount\n  } = useCompoundItem(valueParam != null ? valueParam : tabValueGenerator, tabMetadata);\n  const {\n    getRootProps: getTabProps,\n    rootRef: listItemRefHandler,\n    highlighted,\n    selected\n  } = useListItem({\n    item: value\n  });\n  const {\n    getRootProps: getButtonProps,\n    rootRef: buttonRefHandler,\n    active,\n    focusVisible,\n    setFocusVisible\n  } = useButton({\n    disabled,\n    focusableWhenDisabled: !selectionFollowsFocus,\n    type: 'button'\n  });\n  const handleRef = useForkRef(tabRef, externalRef, listItemRefHandler, buttonRefHandler);\n  const tabPanelId = value !== undefined ? getTabPanelId(value) : undefined;\n  const getRootProps = (otherHandlers = {}) => {\n    const resolvedTabProps = _extends({}, otherHandlers, getTabProps(otherHandlers));\n    const resolvedButtonProps = _extends({}, resolvedTabProps, getButtonProps(resolvedTabProps));\n    return _extends({}, resolvedButtonProps, {\n      role: 'tab',\n      'aria-controls': tabPanelId,\n      'aria-selected': selected,\n      id,\n      ref: handleRef\n    });\n  };\n  return {\n    getRootProps,\n    active,\n    focusVisible,\n    highlighted,\n    index,\n    rootRef: handleRef,\n    // the `selected` state isn't set on the server (it relies on effects to be calculated),\n    // so we fall back to checking the `value` prop with the selectedValue from the TabsContext\n    selected: selected || value === selectedValue,\n    setFocusVisible,\n    totalTabsCount\n  };\n}\nexport default useTab;"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,cAAc,IAAIC,KAAK,EAAEC,mBAAmB,IAAIC,UAAU,QAAQ,YAAY;AACvF,SAASC,cAAc,QAAQ,SAAS;AACxC,SAASC,eAAe,QAAQ,0BAA0B;AAC1D,SAASC,WAAW,QAAQ,YAAY;AACxC,OAAOC,SAAS,MAAM,cAAc;AACpC,SAASC,iBAAiBA,CAACC,cAAc,EAAE;EACzC,OAAOA,cAAc,CAACC,IAAI;AAC5B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,MAAMA,CAACC,UAAU,EAAE;EAC1B,IACSC,UAAU,GAIfD,UAAU,CAJZE,KAAK;IACIC,WAAW,GAGlBH,UAAU,CAHZI,OAAO;IAAAC,oBAAA,GAGLL,UAAU,CAFZM,QAAQ;IAARA,QAAQ,GAAAD,oBAAA,cAAG,KAAK,GAAAA,oBAAA;IACZE,OAAO,GACTP,UAAU,CADZQ,EAAE;EAEJ,IAAMC,MAAM,GAAGtB,KAAK,CAACuB,MAAM,CAAC,IAAI,CAAC;EACjC,IAAMF,EAAE,GAAGnB,KAAK,CAACkB,OAAO,CAAC;EACzB,IAAAI,eAAA,GAIInB,cAAc,CAAC,CAAC;IAHXoB,aAAa,GAAAD,eAAA,CAApBT,KAAK;IACLW,qBAAqB,GAAAF,eAAA,CAArBE,qBAAqB;IACrBC,aAAa,GAAAH,eAAA,CAAbG,aAAa;EAEf,IAAMC,WAAW,GAAG5B,KAAK,CAAC6B,OAAO,CAAC;IAAA,OAAO;MACvCV,QAAQ,EAARA,QAAQ;MACRW,GAAG,EAAER,MAAM;MACXD,EAAE,EAAFA;IACF,CAAC;EAAA,CAAC,EAAE,CAACF,QAAQ,EAAEG,MAAM,EAAED,EAAE,CAAC,CAAC;EAC3B,IAAAU,gBAAA,GAIIzB,eAAe,CAACQ,UAAU,IAAI,IAAI,GAAGA,UAAU,GAAGL,iBAAiB,EAAEmB,WAAW,CAAC;IAH/Eb,KAAK,GAAAgB,gBAAA,CAATV,EAAE;IACFW,KAAK,GAAAD,gBAAA,CAALC,KAAK;IACWC,cAAc,GAAAF,gBAAA,CAA9BG,cAAc;EAEhB,IAAAC,YAAA,GAKI5B,WAAW,CAAC;MACd6B,IAAI,EAAErB;IACR,CAAC,CAAC;IANcsB,WAAW,GAAAF,YAAA,CAAzBG,YAAY;IACHC,kBAAkB,GAAAJ,YAAA,CAA3BlB,OAAO;IACPuB,WAAW,GAAAL,YAAA,CAAXK,WAAW;IACXC,QAAQ,GAAAN,YAAA,CAARM,QAAQ;EAIV,IAAAC,UAAA,GAMIlC,SAAS,CAAC;MACZW,QAAQ,EAARA,QAAQ;MACRwB,qBAAqB,EAAE,CAACjB,qBAAqB;MAC7CkB,IAAI,EAAE;IACR,CAAC,CAAC;IATcC,cAAc,GAAAH,UAAA,CAA5BJ,YAAY;IACHQ,gBAAgB,GAAAJ,UAAA,CAAzBzB,OAAO;IACP8B,MAAM,GAAAL,UAAA,CAANK,MAAM;IACNC,YAAY,GAAAN,UAAA,CAAZM,YAAY;IACZC,eAAe,GAAAP,UAAA,CAAfO,eAAe;EAMjB,IAAMC,SAAS,GAAG9C,UAAU,CAACkB,MAAM,EAAEN,WAAW,EAAEuB,kBAAkB,EAAEO,gBAAgB,CAAC;EACvF,IAAMK,UAAU,GAAGpC,KAAK,KAAKqC,SAAS,GAAGzB,aAAa,CAACZ,KAAK,CAAC,GAAGqC,SAAS;EACzE,IAAMd,YAAY,GAAG,SAAfA,YAAYA,CAAA,EAA2B;IAAA,IAAvBe,aAAa,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAF,SAAA,GAAAE,SAAA,MAAG,CAAC,CAAC;IACtC,IAAME,gBAAgB,GAAGzD,QAAQ,CAAC,CAAC,CAAC,EAAEsD,aAAa,EAAEhB,WAAW,CAACgB,aAAa,CAAC,CAAC;IAChF,IAAMI,mBAAmB,GAAG1D,QAAQ,CAAC,CAAC,CAAC,EAAEyD,gBAAgB,EAAEX,cAAc,CAACW,gBAAgB,CAAC,CAAC;IAC5F,OAAOzD,QAAQ,CAAC,CAAC,CAAC,EAAE0D,mBAAmB,EAAE;MACvCC,IAAI,EAAE,KAAK;MACX,eAAe,EAAEP,UAAU;MAC3B,eAAe,EAAEV,QAAQ;MACzBpB,EAAE,EAAFA,EAAE;MACFS,GAAG,EAAEoB;IACP,CAAC,CAAC;EACJ,CAAC;EACD,OAAO;IACLZ,YAAY,EAAZA,YAAY;IACZS,MAAM,EAANA,MAAM;IACNC,YAAY,EAAZA,YAAY;IACZR,WAAW,EAAXA,WAAW;IACXR,KAAK,EAALA,KAAK;IACLf,OAAO,EAAEiC,SAAS;IAClB;IACA;IACAT,QAAQ,EAAEA,QAAQ,IAAI1B,KAAK,KAAKU,aAAa;IAC7CwB,eAAe,EAAfA,eAAe;IACfhB,cAAc,EAAdA;EACF,CAAC;AACH;AACA,eAAerB,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}