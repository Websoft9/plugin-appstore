{"ast":null,"code":"import find from \"../polyfills/find.mjs\";\nimport { Kind } from \"../language/kinds.mjs\";\nimport { isNode } from \"../language/ast.mjs\";\nimport { getVisitFn } from \"../language/visitor.mjs\";\nimport { isObjectType, isInterfaceType, isEnumType, isInputObjectType, isListType, isCompositeType, isInputType, isOutputType, getNullableType, getNamedType } from \"../type/definition.mjs\";\nimport { SchemaMetaFieldDef, TypeMetaFieldDef, TypeNameMetaFieldDef } from \"../type/introspection.mjs\";\nimport { typeFromAST } from \"./typeFromAST.mjs\";\n/**\n * TypeInfo is a utility class which, given a GraphQL schema, can keep track\n * of the current field and type definitions at any point in a GraphQL document\n * AST during a recursive descent by calling `enter(node)` and `leave(node)`.\n */\n\nexport var TypeInfo = /*#__PURE__*/function () {\n  function TypeInfo(schema,\n  // NOTE: this experimental optional second parameter is only needed in order\n  // to support non-spec-compliant code bases. You should never need to use it.\n  // It may disappear in the future.\n  getFieldDefFn,\n  // Initial type may be provided in rare cases to facilitate traversals\n  // beginning somewhere other than documents.\n  initialType) {\n    this._schema = schema;\n    this._typeStack = [];\n    this._parentTypeStack = [];\n    this._inputTypeStack = [];\n    this._fieldDefStack = [];\n    this._defaultValueStack = [];\n    this._directive = null;\n    this._argument = null;\n    this._enumValue = null;\n    this._getFieldDef = getFieldDefFn !== null && getFieldDefFn !== void 0 ? getFieldDefFn : getFieldDef;\n    if (initialType) {\n      if (isInputType(initialType)) {\n        this._inputTypeStack.push(initialType);\n      }\n      if (isCompositeType(initialType)) {\n        this._parentTypeStack.push(initialType);\n      }\n      if (isOutputType(initialType)) {\n        this._typeStack.push(initialType);\n      }\n    }\n  }\n  var _proto = TypeInfo.prototype;\n  _proto.getType = function getType() {\n    if (this._typeStack.length > 0) {\n      return this._typeStack[this._typeStack.length - 1];\n    }\n  };\n  _proto.getParentType = function getParentType() {\n    if (this._parentTypeStack.length > 0) {\n      return this._parentTypeStack[this._parentTypeStack.length - 1];\n    }\n  };\n  _proto.getInputType = function getInputType() {\n    if (this._inputTypeStack.length > 0) {\n      return this._inputTypeStack[this._inputTypeStack.length - 1];\n    }\n  };\n  _proto.getParentInputType = function getParentInputType() {\n    if (this._inputTypeStack.length > 1) {\n      return this._inputTypeStack[this._inputTypeStack.length - 2];\n    }\n  };\n  _proto.getFieldDef = function getFieldDef() {\n    if (this._fieldDefStack.length > 0) {\n      return this._fieldDefStack[this._fieldDefStack.length - 1];\n    }\n  };\n  _proto.getDefaultValue = function getDefaultValue() {\n    if (this._defaultValueStack.length > 0) {\n      return this._defaultValueStack[this._defaultValueStack.length - 1];\n    }\n  };\n  _proto.getDirective = function getDirective() {\n    return this._directive;\n  };\n  _proto.getArgument = function getArgument() {\n    return this._argument;\n  };\n  _proto.getEnumValue = function getEnumValue() {\n    return this._enumValue;\n  };\n  _proto.enter = function enter(node) {\n    var schema = this._schema; // Note: many of the types below are explicitly typed as \"mixed\" to drop\n    // any assumptions of a valid schema to ensure runtime types are properly\n    // checked before continuing since TypeInfo is used as part of validation\n    // which occurs before guarantees of schema and document validity.\n\n    switch (node.kind) {\n      case Kind.SELECTION_SET:\n        {\n          var namedType = getNamedType(this.getType());\n          this._parentTypeStack.push(isCompositeType(namedType) ? namedType : undefined);\n          break;\n        }\n      case Kind.FIELD:\n        {\n          var parentType = this.getParentType();\n          var fieldDef;\n          var fieldType;\n          if (parentType) {\n            fieldDef = this._getFieldDef(schema, parentType, node);\n            if (fieldDef) {\n              fieldType = fieldDef.type;\n            }\n          }\n          this._fieldDefStack.push(fieldDef);\n          this._typeStack.push(isOutputType(fieldType) ? fieldType : undefined);\n          break;\n        }\n      case Kind.DIRECTIVE:\n        this._directive = schema.getDirective(node.name.value);\n        break;\n      case Kind.OPERATION_DEFINITION:\n        {\n          var type;\n          switch (node.operation) {\n            case 'query':\n              type = schema.getQueryType();\n              break;\n            case 'mutation':\n              type = schema.getMutationType();\n              break;\n            case 'subscription':\n              type = schema.getSubscriptionType();\n              break;\n          }\n          this._typeStack.push(isObjectType(type) ? type : undefined);\n          break;\n        }\n      case Kind.INLINE_FRAGMENT:\n      case Kind.FRAGMENT_DEFINITION:\n        {\n          var typeConditionAST = node.typeCondition;\n          var outputType = typeConditionAST ? typeFromAST(schema, typeConditionAST) : getNamedType(this.getType());\n          this._typeStack.push(isOutputType(outputType) ? outputType : undefined);\n          break;\n        }\n      case Kind.VARIABLE_DEFINITION:\n        {\n          var inputType = typeFromAST(schema, node.type);\n          this._inputTypeStack.push(isInputType(inputType) ? inputType : undefined);\n          break;\n        }\n      case Kind.ARGUMENT:\n        {\n          var _this$getDirective;\n          var argDef;\n          var argType;\n          var fieldOrDirective = (_this$getDirective = this.getDirective()) !== null && _this$getDirective !== void 0 ? _this$getDirective : this.getFieldDef();\n          if (fieldOrDirective) {\n            argDef = find(fieldOrDirective.args, function (arg) {\n              return arg.name === node.name.value;\n            });\n            if (argDef) {\n              argType = argDef.type;\n            }\n          }\n          this._argument = argDef;\n          this._defaultValueStack.push(argDef ? argDef.defaultValue : undefined);\n          this._inputTypeStack.push(isInputType(argType) ? argType : undefined);\n          break;\n        }\n      case Kind.LIST:\n        {\n          var listType = getNullableType(this.getInputType());\n          var itemType = isListType(listType) ? listType.ofType : listType; // List positions never have a default value.\n\n          this._defaultValueStack.push(undefined);\n          this._inputTypeStack.push(isInputType(itemType) ? itemType : undefined);\n          break;\n        }\n      case Kind.OBJECT_FIELD:\n        {\n          var objectType = getNamedType(this.getInputType());\n          var inputFieldType;\n          var inputField;\n          if (isInputObjectType(objectType)) {\n            inputField = objectType.getFields()[node.name.value];\n            if (inputField) {\n              inputFieldType = inputField.type;\n            }\n          }\n          this._defaultValueStack.push(inputField ? inputField.defaultValue : undefined);\n          this._inputTypeStack.push(isInputType(inputFieldType) ? inputFieldType : undefined);\n          break;\n        }\n      case Kind.ENUM:\n        {\n          var enumType = getNamedType(this.getInputType());\n          var enumValue;\n          if (isEnumType(enumType)) {\n            enumValue = enumType.getValue(node.value);\n          }\n          this._enumValue = enumValue;\n          break;\n        }\n    }\n  };\n  _proto.leave = function leave(node) {\n    switch (node.kind) {\n      case Kind.SELECTION_SET:\n        this._parentTypeStack.pop();\n        break;\n      case Kind.FIELD:\n        this._fieldDefStack.pop();\n        this._typeStack.pop();\n        break;\n      case Kind.DIRECTIVE:\n        this._directive = null;\n        break;\n      case Kind.OPERATION_DEFINITION:\n      case Kind.INLINE_FRAGMENT:\n      case Kind.FRAGMENT_DEFINITION:\n        this._typeStack.pop();\n        break;\n      case Kind.VARIABLE_DEFINITION:\n        this._inputTypeStack.pop();\n        break;\n      case Kind.ARGUMENT:\n        this._argument = null;\n        this._defaultValueStack.pop();\n        this._inputTypeStack.pop();\n        break;\n      case Kind.LIST:\n      case Kind.OBJECT_FIELD:\n        this._defaultValueStack.pop();\n        this._inputTypeStack.pop();\n        break;\n      case Kind.ENUM:\n        this._enumValue = null;\n        break;\n    }\n  };\n  return TypeInfo;\n}();\n/**\n * Not exactly the same as the executor's definition of getFieldDef, in this\n * statically evaluated environment we do not always have an Object type,\n * and need to handle Interface and Union types.\n */\n\nfunction getFieldDef(schema, parentType, fieldNode) {\n  var name = fieldNode.name.value;\n  if (name === SchemaMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return SchemaMetaFieldDef;\n  }\n  if (name === TypeMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return TypeMetaFieldDef;\n  }\n  if (name === TypeNameMetaFieldDef.name && isCompositeType(parentType)) {\n    return TypeNameMetaFieldDef;\n  }\n  if (isObjectType(parentType) || isInterfaceType(parentType)) {\n    return parentType.getFields()[name];\n  }\n}\n/**\n * Creates a new visitor instance which maintains a provided TypeInfo instance\n * along with visiting visitor.\n */\n\nexport function visitWithTypeInfo(typeInfo, visitor) {\n  return {\n    enter: function enter(node) {\n      typeInfo.enter(node);\n      var fn = getVisitFn(visitor, node.kind, /* isLeaving */\n      false);\n      if (fn) {\n        var result = fn.apply(visitor, arguments);\n        if (result !== undefined) {\n          typeInfo.leave(node);\n          if (isNode(result)) {\n            typeInfo.enter(result);\n          }\n        }\n        return result;\n      }\n    },\n    leave: function leave(node) {\n      var fn = getVisitFn(visitor, node.kind, /* isLeaving */\n      true);\n      var result;\n      if (fn) {\n        result = fn.apply(visitor, arguments);\n      }\n      typeInfo.leave(node);\n      return result;\n    }\n  };\n}","map":{"version":3,"names":["find","Kind","isNode","getVisitFn","isObjectType","isInterfaceType","isEnumType","isInputObjectType","isListType","isCompositeType","isInputType","isOutputType","getNullableType","getNamedType","SchemaMetaFieldDef","TypeMetaFieldDef","TypeNameMetaFieldDef","typeFromAST","TypeInfo","schema","getFieldDefFn","initialType","_schema","_typeStack","_parentTypeStack","_inputTypeStack","_fieldDefStack","_defaultValueStack","_directive","_argument","_enumValue","_getFieldDef","getFieldDef","push","_proto","prototype","getType","length","getParentType","getInputType","getParentInputType","getDefaultValue","getDirective","getArgument","getEnumValue","enter","node","kind","SELECTION_SET","namedType","undefined","FIELD","parentType","fieldDef","fieldType","type","DIRECTIVE","name","value","OPERATION_DEFINITION","operation","getQueryType","getMutationType","getSubscriptionType","INLINE_FRAGMENT","FRAGMENT_DEFINITION","typeConditionAST","typeCondition","outputType","VARIABLE_DEFINITION","inputType","ARGUMENT","_this$getDirective","argDef","argType","fieldOrDirective","args","arg","defaultValue","LIST","listType","itemType","ofType","OBJECT_FIELD","objectType","inputFieldType","inputField","getFields","ENUM","enumType","enumValue","getValue","leave","pop","fieldNode","visitWithTypeInfo","typeInfo","visitor","fn","result","apply","arguments"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/graphql/utilities/TypeInfo.mjs"],"sourcesContent":["import find from \"../polyfills/find.mjs\";\nimport { Kind } from \"../language/kinds.mjs\";\nimport { isNode } from \"../language/ast.mjs\";\nimport { getVisitFn } from \"../language/visitor.mjs\";\nimport { isObjectType, isInterfaceType, isEnumType, isInputObjectType, isListType, isCompositeType, isInputType, isOutputType, getNullableType, getNamedType } from \"../type/definition.mjs\";\nimport { SchemaMetaFieldDef, TypeMetaFieldDef, TypeNameMetaFieldDef } from \"../type/introspection.mjs\";\nimport { typeFromAST } from \"./typeFromAST.mjs\";\n/**\n * TypeInfo is a utility class which, given a GraphQL schema, can keep track\n * of the current field and type definitions at any point in a GraphQL document\n * AST during a recursive descent by calling `enter(node)` and `leave(node)`.\n */\n\nexport var TypeInfo = /*#__PURE__*/function () {\n  function TypeInfo(schema, // NOTE: this experimental optional second parameter is only needed in order\n  // to support non-spec-compliant code bases. You should never need to use it.\n  // It may disappear in the future.\n  getFieldDefFn, // Initial type may be provided in rare cases to facilitate traversals\n  // beginning somewhere other than documents.\n  initialType) {\n    this._schema = schema;\n    this._typeStack = [];\n    this._parentTypeStack = [];\n    this._inputTypeStack = [];\n    this._fieldDefStack = [];\n    this._defaultValueStack = [];\n    this._directive = null;\n    this._argument = null;\n    this._enumValue = null;\n    this._getFieldDef = getFieldDefFn !== null && getFieldDefFn !== void 0 ? getFieldDefFn : getFieldDef;\n\n    if (initialType) {\n      if (isInputType(initialType)) {\n        this._inputTypeStack.push(initialType);\n      }\n\n      if (isCompositeType(initialType)) {\n        this._parentTypeStack.push(initialType);\n      }\n\n      if (isOutputType(initialType)) {\n        this._typeStack.push(initialType);\n      }\n    }\n  }\n\n  var _proto = TypeInfo.prototype;\n\n  _proto.getType = function getType() {\n    if (this._typeStack.length > 0) {\n      return this._typeStack[this._typeStack.length - 1];\n    }\n  };\n\n  _proto.getParentType = function getParentType() {\n    if (this._parentTypeStack.length > 0) {\n      return this._parentTypeStack[this._parentTypeStack.length - 1];\n    }\n  };\n\n  _proto.getInputType = function getInputType() {\n    if (this._inputTypeStack.length > 0) {\n      return this._inputTypeStack[this._inputTypeStack.length - 1];\n    }\n  };\n\n  _proto.getParentInputType = function getParentInputType() {\n    if (this._inputTypeStack.length > 1) {\n      return this._inputTypeStack[this._inputTypeStack.length - 2];\n    }\n  };\n\n  _proto.getFieldDef = function getFieldDef() {\n    if (this._fieldDefStack.length > 0) {\n      return this._fieldDefStack[this._fieldDefStack.length - 1];\n    }\n  };\n\n  _proto.getDefaultValue = function getDefaultValue() {\n    if (this._defaultValueStack.length > 0) {\n      return this._defaultValueStack[this._defaultValueStack.length - 1];\n    }\n  };\n\n  _proto.getDirective = function getDirective() {\n    return this._directive;\n  };\n\n  _proto.getArgument = function getArgument() {\n    return this._argument;\n  };\n\n  _proto.getEnumValue = function getEnumValue() {\n    return this._enumValue;\n  };\n\n  _proto.enter = function enter(node) {\n    var schema = this._schema; // Note: many of the types below are explicitly typed as \"mixed\" to drop\n    // any assumptions of a valid schema to ensure runtime types are properly\n    // checked before continuing since TypeInfo is used as part of validation\n    // which occurs before guarantees of schema and document validity.\n\n    switch (node.kind) {\n      case Kind.SELECTION_SET:\n        {\n          var namedType = getNamedType(this.getType());\n\n          this._parentTypeStack.push(isCompositeType(namedType) ? namedType : undefined);\n\n          break;\n        }\n\n      case Kind.FIELD:\n        {\n          var parentType = this.getParentType();\n          var fieldDef;\n          var fieldType;\n\n          if (parentType) {\n            fieldDef = this._getFieldDef(schema, parentType, node);\n\n            if (fieldDef) {\n              fieldType = fieldDef.type;\n            }\n          }\n\n          this._fieldDefStack.push(fieldDef);\n\n          this._typeStack.push(isOutputType(fieldType) ? fieldType : undefined);\n\n          break;\n        }\n\n      case Kind.DIRECTIVE:\n        this._directive = schema.getDirective(node.name.value);\n        break;\n\n      case Kind.OPERATION_DEFINITION:\n        {\n          var type;\n\n          switch (node.operation) {\n            case 'query':\n              type = schema.getQueryType();\n              break;\n\n            case 'mutation':\n              type = schema.getMutationType();\n              break;\n\n            case 'subscription':\n              type = schema.getSubscriptionType();\n              break;\n          }\n\n          this._typeStack.push(isObjectType(type) ? type : undefined);\n\n          break;\n        }\n\n      case Kind.INLINE_FRAGMENT:\n      case Kind.FRAGMENT_DEFINITION:\n        {\n          var typeConditionAST = node.typeCondition;\n          var outputType = typeConditionAST ? typeFromAST(schema, typeConditionAST) : getNamedType(this.getType());\n\n          this._typeStack.push(isOutputType(outputType) ? outputType : undefined);\n\n          break;\n        }\n\n      case Kind.VARIABLE_DEFINITION:\n        {\n          var inputType = typeFromAST(schema, node.type);\n\n          this._inputTypeStack.push(isInputType(inputType) ? inputType : undefined);\n\n          break;\n        }\n\n      case Kind.ARGUMENT:\n        {\n          var _this$getDirective;\n\n          var argDef;\n          var argType;\n          var fieldOrDirective = (_this$getDirective = this.getDirective()) !== null && _this$getDirective !== void 0 ? _this$getDirective : this.getFieldDef();\n\n          if (fieldOrDirective) {\n            argDef = find(fieldOrDirective.args, function (arg) {\n              return arg.name === node.name.value;\n            });\n\n            if (argDef) {\n              argType = argDef.type;\n            }\n          }\n\n          this._argument = argDef;\n\n          this._defaultValueStack.push(argDef ? argDef.defaultValue : undefined);\n\n          this._inputTypeStack.push(isInputType(argType) ? argType : undefined);\n\n          break;\n        }\n\n      case Kind.LIST:\n        {\n          var listType = getNullableType(this.getInputType());\n          var itemType = isListType(listType) ? listType.ofType : listType; // List positions never have a default value.\n\n          this._defaultValueStack.push(undefined);\n\n          this._inputTypeStack.push(isInputType(itemType) ? itemType : undefined);\n\n          break;\n        }\n\n      case Kind.OBJECT_FIELD:\n        {\n          var objectType = getNamedType(this.getInputType());\n          var inputFieldType;\n          var inputField;\n\n          if (isInputObjectType(objectType)) {\n            inputField = objectType.getFields()[node.name.value];\n\n            if (inputField) {\n              inputFieldType = inputField.type;\n            }\n          }\n\n          this._defaultValueStack.push(inputField ? inputField.defaultValue : undefined);\n\n          this._inputTypeStack.push(isInputType(inputFieldType) ? inputFieldType : undefined);\n\n          break;\n        }\n\n      case Kind.ENUM:\n        {\n          var enumType = getNamedType(this.getInputType());\n          var enumValue;\n\n          if (isEnumType(enumType)) {\n            enumValue = enumType.getValue(node.value);\n          }\n\n          this._enumValue = enumValue;\n          break;\n        }\n    }\n  };\n\n  _proto.leave = function leave(node) {\n    switch (node.kind) {\n      case Kind.SELECTION_SET:\n        this._parentTypeStack.pop();\n\n        break;\n\n      case Kind.FIELD:\n        this._fieldDefStack.pop();\n\n        this._typeStack.pop();\n\n        break;\n\n      case Kind.DIRECTIVE:\n        this._directive = null;\n        break;\n\n      case Kind.OPERATION_DEFINITION:\n      case Kind.INLINE_FRAGMENT:\n      case Kind.FRAGMENT_DEFINITION:\n        this._typeStack.pop();\n\n        break;\n\n      case Kind.VARIABLE_DEFINITION:\n        this._inputTypeStack.pop();\n\n        break;\n\n      case Kind.ARGUMENT:\n        this._argument = null;\n\n        this._defaultValueStack.pop();\n\n        this._inputTypeStack.pop();\n\n        break;\n\n      case Kind.LIST:\n      case Kind.OBJECT_FIELD:\n        this._defaultValueStack.pop();\n\n        this._inputTypeStack.pop();\n\n        break;\n\n      case Kind.ENUM:\n        this._enumValue = null;\n        break;\n    }\n  };\n\n  return TypeInfo;\n}();\n/**\n * Not exactly the same as the executor's definition of getFieldDef, in this\n * statically evaluated environment we do not always have an Object type,\n * and need to handle Interface and Union types.\n */\n\nfunction getFieldDef(schema, parentType, fieldNode) {\n  var name = fieldNode.name.value;\n\n  if (name === SchemaMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return SchemaMetaFieldDef;\n  }\n\n  if (name === TypeMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return TypeMetaFieldDef;\n  }\n\n  if (name === TypeNameMetaFieldDef.name && isCompositeType(parentType)) {\n    return TypeNameMetaFieldDef;\n  }\n\n  if (isObjectType(parentType) || isInterfaceType(parentType)) {\n    return parentType.getFields()[name];\n  }\n}\n/**\n * Creates a new visitor instance which maintains a provided TypeInfo instance\n * along with visiting visitor.\n */\n\n\nexport function visitWithTypeInfo(typeInfo, visitor) {\n  return {\n    enter: function enter(node) {\n      typeInfo.enter(node);\n      var fn = getVisitFn(visitor, node.kind,\n      /* isLeaving */\n      false);\n\n      if (fn) {\n        var result = fn.apply(visitor, arguments);\n\n        if (result !== undefined) {\n          typeInfo.leave(node);\n\n          if (isNode(result)) {\n            typeInfo.enter(result);\n          }\n        }\n\n        return result;\n      }\n    },\n    leave: function leave(node) {\n      var fn = getVisitFn(visitor, node.kind,\n      /* isLeaving */\n      true);\n      var result;\n\n      if (fn) {\n        result = fn.apply(visitor, arguments);\n      }\n\n      typeInfo.leave(node);\n      return result;\n    }\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}