{"ast":null,"code":"import { invariant } from \"../../utilities/globals/index.js\";\nimport { argumentsObjectFromField, DeepMerger, isNonEmptyArray, isNonNullObject } from \"../../utilities/index.js\";\nimport { hasOwn, isArray } from \"./helpers.js\";\nvar specifierInfoCache = Object.create(null);\nfunction lookupSpecifierInfo(spec) {\n  var cacheKey = JSON.stringify(spec);\n  return specifierInfoCache[cacheKey] || (specifierInfoCache[cacheKey] = Object.create(null));\n}\nexport function keyFieldsFnFromSpecifier(specifier) {\n  var info = lookupSpecifierInfo(specifier);\n  return info.keyFieldsFn || (info.keyFieldsFn = function (object, context) {\n    var extract = function extract(from, key) {\n      return context.readField(key, from);\n    };\n    var keyObject = context.keyObject = collectSpecifierPaths(specifier, function (schemaKeyPath) {\n      var extracted = extractKeyPath(context.storeObject, schemaKeyPath, extract);\n      if (extracted === void 0 && object !== context.storeObject && hasOwn.call(object, schemaKeyPath[0])) {\n        extracted = extractKeyPath(object, schemaKeyPath, extractKey);\n      }\n      __DEV__ ? invariant(extracted !== void 0, \"Missing field '\".concat(schemaKeyPath.join('.'), \"' while extracting keyFields from \").concat(JSON.stringify(object))) : invariant(extracted !== void 0, 2);\n      return extracted;\n    });\n    return \"\".concat(context.typename, \":\").concat(JSON.stringify(keyObject));\n  });\n}\nexport function keyArgsFnFromSpecifier(specifier) {\n  var info = lookupSpecifierInfo(specifier);\n  return info.keyArgsFn || (info.keyArgsFn = function (args, _a) {\n    var field = _a.field,\n      variables = _a.variables,\n      fieldName = _a.fieldName;\n    var collected = collectSpecifierPaths(specifier, function (keyPath) {\n      var firstKey = keyPath[0];\n      var firstChar = firstKey.charAt(0);\n      if (firstChar === \"@\") {\n        if (field && isNonEmptyArray(field.directives)) {\n          var directiveName_1 = firstKey.slice(1);\n          var d = field.directives.find(function (d) {\n            return d.name.value === directiveName_1;\n          });\n          var directiveArgs = d && argumentsObjectFromField(d, variables);\n          return directiveArgs && extractKeyPath(directiveArgs, keyPath.slice(1));\n        }\n        return;\n      }\n      if (firstChar === \"$\") {\n        var variableName = firstKey.slice(1);\n        if (variables && hasOwn.call(variables, variableName)) {\n          var varKeyPath = keyPath.slice(0);\n          varKeyPath[0] = variableName;\n          return extractKeyPath(variables, varKeyPath);\n        }\n        return;\n      }\n      if (args) {\n        return extractKeyPath(args, keyPath);\n      }\n    });\n    var suffix = JSON.stringify(collected);\n    if (args || suffix !== \"{}\") {\n      fieldName += \":\" + suffix;\n    }\n    return fieldName;\n  });\n}\nexport function collectSpecifierPaths(specifier, extractor) {\n  var merger = new DeepMerger();\n  return getSpecifierPaths(specifier).reduce(function (collected, path) {\n    var _a;\n    var toMerge = extractor(path);\n    if (toMerge !== void 0) {\n      for (var i = path.length - 1; i >= 0; --i) {\n        toMerge = (_a = {}, _a[path[i]] = toMerge, _a);\n      }\n      collected = merger.merge(collected, toMerge);\n    }\n    return collected;\n  }, Object.create(null));\n}\nexport function getSpecifierPaths(spec) {\n  var info = lookupSpecifierInfo(spec);\n  if (!info.paths) {\n    var paths_1 = info.paths = [];\n    var currentPath_1 = [];\n    spec.forEach(function (s, i) {\n      if (isArray(s)) {\n        getSpecifierPaths(s).forEach(function (p) {\n          return paths_1.push(currentPath_1.concat(p));\n        });\n        currentPath_1.length = 0;\n      } else {\n        currentPath_1.push(s);\n        if (!isArray(spec[i + 1])) {\n          paths_1.push(currentPath_1.slice(0));\n          currentPath_1.length = 0;\n        }\n      }\n    });\n  }\n  return info.paths;\n}\nfunction extractKey(object, key) {\n  return object[key];\n}\nexport function extractKeyPath(object, path, extract) {\n  extract = extract || extractKey;\n  return normalize(path.reduce(function reducer(obj, key) {\n    return isArray(obj) ? obj.map(function (child) {\n      return reducer(child, key);\n    }) : obj && extract(obj, key);\n  }, object));\n}\nfunction normalize(value) {\n  if (isNonNullObject(value)) {\n    if (isArray(value)) {\n      return value.map(normalize);\n    }\n    return collectSpecifierPaths(Object.keys(value).sort(), function (path) {\n      return extractKeyPath(value, path);\n    });\n  }\n  return value;\n}","map":{"version":3,"names":["invariant","argumentsObjectFromField","DeepMerger","isNonEmptyArray","isNonNullObject","hasOwn","isArray","specifierInfoCache","Object","create","lookupSpecifierInfo","spec","cacheKey","JSON","stringify","keyFieldsFnFromSpecifier","specifier","info","keyFieldsFn","object","context","extract","from","key","readField","keyObject","collectSpecifierPaths","schemaKeyPath","extracted","extractKeyPath","storeObject","call","extractKey","__DEV__","concat","join","typename","keyArgsFnFromSpecifier","keyArgsFn","args","_a","field","variables","fieldName","collected","keyPath","firstKey","firstChar","charAt","directives","directiveName_1","slice","d","find","name","value","directiveArgs","variableName","varKeyPath","suffix","extractor","merger","getSpecifierPaths","reduce","path","toMerge","i","length","merge","paths","paths_1","currentPath_1","forEach","s","p","push","normalize","reducer","obj","map","child","keys","sort"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@apollo/src/cache/inmemory/key-extractor.ts"],"sourcesContent":["import { invariant } from \"../../utilities/globals\";\n\nimport {\n  argumentsObjectFromField,\n  DeepMerger,\n  isNonEmptyArray,\n  isNonNullObject,\n} from \"../../utilities\";\n\nimport { hasOwn, isArray } from \"./helpers\";\nimport {\n  KeySpecifier,\n  KeyFieldsFunction,\n  KeyArgsFunction,\n} from \"./policies\";\n\n// Mapping from JSON-encoded KeySpecifier strings to associated information.\nconst specifierInfoCache: Record<string, {\n  paths?: string[][];\n  keyFieldsFn?: KeyFieldsFunction;\n  keyArgsFn?: KeyArgsFunction;\n}> = Object.create(null);\n\nfunction lookupSpecifierInfo(spec: KeySpecifier) {\n  // It's safe to encode KeySpecifier arrays with JSON.stringify, since they're\n  // just arrays of strings or nested KeySpecifier arrays, and the order of the\n  // array elements is important (and suitably preserved by JSON.stringify).\n  const cacheKey = JSON.stringify(spec);\n  return specifierInfoCache[cacheKey] ||\n    (specifierInfoCache[cacheKey] = Object.create(null));\n}\n\nexport function keyFieldsFnFromSpecifier(\n  specifier: KeySpecifier,\n): KeyFieldsFunction {\n  const info = lookupSpecifierInfo(specifier);\n\n  return info.keyFieldsFn || (info.keyFieldsFn = (\n    object,\n    context,\n  ) => {\n    const extract: typeof extractKey =\n      (from, key) => context.readField(key, from);\n\n    const keyObject = context.keyObject = collectSpecifierPaths(\n      specifier,\n      schemaKeyPath => {\n        let extracted = extractKeyPath(\n          context.storeObject,\n          schemaKeyPath,\n          // Using context.readField to extract paths from context.storeObject\n          // allows the extraction to see through Reference objects and respect\n          // custom read functions.\n          extract,\n        );\n\n        if (\n          extracted === void 0 &&\n          object !== context.storeObject &&\n          hasOwn.call(object, schemaKeyPath[0])\n        ) {\n          // If context.storeObject fails to provide a value for the requested\n          // path, fall back to the raw result object, if it has a top-level key\n          // matching the first key in the path (schemaKeyPath[0]). This allows\n          // key fields included in the written data to be saved in the cache\n          // even if they are not selected explicitly in context.selectionSet.\n          // Not being mentioned by context.selectionSet is convenient here,\n          // since it means these extra fields cannot be affected by field\n          // aliasing, which is why we can use extractKey instead of\n          // context.readField for this extraction.\n          extracted = extractKeyPath(object, schemaKeyPath, extractKey);\n        }\n\n        invariant(\n          extracted !== void 0,\n          `Missing field '${schemaKeyPath.join('.')}' while extracting keyFields from ${\n            JSON.stringify(object)\n          }`,\n        );\n\n        return extracted;\n      },\n    );\n\n    return `${context.typename}:${JSON.stringify(keyObject)}`;\n  });\n}\n\n// The keyArgs extraction process is roughly analogous to keyFields extraction,\n// but there are no aliases involved, missing fields are tolerated (by merely\n// omitting them from the key), and drawing from field.directives or variables\n// is allowed (in addition to drawing from the field's arguments object).\n// Concretely, these differences mean passing a different key path extractor\n// function to collectSpecifierPaths, reusing the shared extractKeyPath helper\n// wherever possible.\nexport function keyArgsFnFromSpecifier(specifier: KeySpecifier): KeyArgsFunction {\n  const info = lookupSpecifierInfo(specifier);\n\n  return info.keyArgsFn || (info.keyArgsFn = (args, {\n    field,\n    variables,\n    fieldName,\n  }) => {\n    const collected = collectSpecifierPaths(specifier, keyPath => {\n      const firstKey = keyPath[0];\n      const firstChar = firstKey.charAt(0);\n\n      if (firstChar === \"@\") {\n        if (field && isNonEmptyArray(field.directives)) {\n          const directiveName = firstKey.slice(1);\n          // If the directive appears multiple times, only the first\n          // occurrence's arguments will be used. TODO Allow repetition?\n          // TODO Cache this work somehow, a la aliasMap?\n          const d = field.directives.find(d => d.name.value === directiveName);\n          // Fortunately argumentsObjectFromField works for DirectiveNode!\n          const directiveArgs = d && argumentsObjectFromField(d, variables);\n          // For directives without arguments (d defined, but directiveArgs ===\n          // null), the presence or absence of the directive still counts as\n          // part of the field key, so we return null in those cases. If no\n          // directive with this name was found for this field (d undefined and\n          // thus directiveArgs undefined), we return undefined, which causes\n          // this value to be omitted from the key object returned by\n          // collectSpecifierPaths.\n          return directiveArgs && extractKeyPath(\n            directiveArgs,\n            // If keyPath.length === 1, this code calls extractKeyPath with an\n            // empty path, which works because it uses directiveArgs as the\n            // extracted value.\n            keyPath.slice(1),\n          );\n        }\n        // If the key started with @ but there was no corresponding directive,\n        // we want to omit this value from the key object, not fall through to\n        // treating @whatever as a normal argument name.\n        return;\n      }\n\n      if (firstChar === \"$\") {\n        const variableName = firstKey.slice(1);\n        if (variables && hasOwn.call(variables, variableName)) {\n          const varKeyPath = keyPath.slice(0);\n          varKeyPath[0] = variableName;\n          return extractKeyPath(variables, varKeyPath);\n        }\n        // If the key started with $ but there was no corresponding variable, we\n        // want to omit this value from the key object, not fall through to\n        // treating $whatever as a normal argument name.\n        return;\n      }\n\n      if (args) {\n        return extractKeyPath(args, keyPath);\n      }\n    });\n\n    const suffix = JSON.stringify(collected);\n\n    // If no arguments were passed to this field, and it didn't have any other\n    // field key contributions from directives or variables, hide the empty\n    // :{} suffix from the field key. However, a field passed no arguments can\n    // still end up with a non-empty :{...} suffix if its key configuration\n    // refers to directives or variables.\n    if (args || suffix !== \"{}\") {\n      fieldName += \":\" + suffix;\n    }\n\n    return fieldName;\n  });\n}\n\nexport function collectSpecifierPaths(\n  specifier: KeySpecifier,\n  extractor: (path: string[]) => any,\n): Record<string, any> {\n  // For each path specified by specifier, invoke the extractor, and repeatedly\n  // merge the results together, with appropriate ancestor context.\n  const merger = new DeepMerger;\n  return getSpecifierPaths(specifier).reduce((collected, path) => {\n    let toMerge = extractor(path);\n    if (toMerge !== void 0) {\n      // This path is not expected to contain array indexes, so the toMerge\n      // reconstruction will not contain arrays. TODO Fix this?\n      for (let i = path.length - 1; i >= 0; --i) {\n        toMerge = { [path[i]]: toMerge };\n      }\n      collected = merger.merge(collected, toMerge);\n    }\n    return collected;\n  }, Object.create(null));\n}\n\nexport function getSpecifierPaths(spec: KeySpecifier): string[][] {\n  const info = lookupSpecifierInfo(spec);\n\n  if (!info.paths) {\n    const paths: string[][] = info.paths = [];\n    const currentPath: string[] = [];\n\n    spec.forEach((s, i) => {\n      if (isArray(s)) {\n        getSpecifierPaths(s).forEach(p => paths.push(currentPath.concat(p)));\n        currentPath.length = 0;\n      } else {\n        currentPath.push(s);\n        if (!isArray(spec[i + 1])) {\n          paths.push(currentPath.slice(0));\n          currentPath.length = 0;\n        }\n      }\n    });\n  }\n\n  return info.paths!;\n}\n\nfunction extractKey<\n  TObj extends Record<string, any>,\n  TKey extends string,\n>(object: TObj, key: TKey): TObj[TKey] | undefined {\n  return object[key];\n}\n\nexport function extractKeyPath(\n  object: Record<string, any>,\n  path: string[],\n  extract?: typeof extractKey,\n): any {\n  // For each key in path, extract the corresponding child property from obj,\n  // flattening arrays if encountered (uncommon for keyFields and keyArgs, but\n  // possible). The final result of path.reduce is normalized so unexpected leaf\n  // objects have their keys safely sorted. That final result is difficult to\n  // type as anything other than any. You're welcome to try to improve the\n  // return type, but keep in mind extractKeyPath is not a public function\n  // (exported only for testing), so the effort may not be worthwhile unless the\n  // limited set of actual callers (see above) pass arguments that TypeScript\n  // can statically type. If we know only that path is some array of strings\n  // (and not, say, a specific tuple of statically known strings), any (or\n  // possibly unknown) is the honest answer.\n  extract = extract || extractKey;\n  return normalize(path.reduce(function reducer(obj, key): any {\n    return isArray(obj)\n      ? obj.map(child => reducer(child, key))\n      : obj && extract!(obj, key);\n  }, object));\n}\n\nfunction normalize<T>(value: T): T {\n  // Usually the extracted value will be a scalar value, since most primary\n  // key fields are scalar, but just in case we get an object or an array, we\n  // need to do some normalization of the order of (nested) keys.\n  if (isNonNullObject(value)) {\n    if (isArray(value)) {\n      return value.map(normalize) as any;\n    }\n    return collectSpecifierPaths(\n      Object.keys(value).sort(),\n      path => extractKeyPath(value, path),\n    ) as T;\n  }\n  return value;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}