{"ast":null,"code":"import objectValues from \"../polyfills/objectValues.mjs\";\nimport inspect from \"../jsutils/inspect.mjs\";\nimport invariant from \"../jsutils/invariant.mjs\";\nimport didYouMean from \"../jsutils/didYouMean.mjs\";\nimport isObjectLike from \"../jsutils/isObjectLike.mjs\";\nimport safeArrayFrom from \"../jsutils/safeArrayFrom.mjs\";\nimport suggestionList from \"../jsutils/suggestionList.mjs\";\nimport printPathArray from \"../jsutils/printPathArray.mjs\";\nimport { addPath, pathToArray } from \"../jsutils/Path.mjs\";\nimport { GraphQLError } from \"../error/GraphQLError.mjs\";\nimport { isLeafType, isInputObjectType, isListType, isNonNullType } from \"../type/definition.mjs\";\n\n/**\n * Coerces a JavaScript value given a GraphQL Input Type.\n */\nexport function coerceInputValue(inputValue, type) {\n  var onError = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultOnError;\n  return coerceInputValueImpl(inputValue, type, onError);\n}\nfunction defaultOnError(path, invalidValue, error) {\n  var errorPrefix = 'Invalid value ' + inspect(invalidValue);\n  if (path.length > 0) {\n    errorPrefix += \" at \\\"value\".concat(printPathArray(path), \"\\\"\");\n  }\n  error.message = errorPrefix + ': ' + error.message;\n  throw error;\n}\nfunction coerceInputValueImpl(inputValue, type, onError, path) {\n  if (isNonNullType(type)) {\n    if (inputValue != null) {\n      return coerceInputValueImpl(inputValue, type.ofType, onError, path);\n    }\n    onError(pathToArray(path), inputValue, new GraphQLError(\"Expected non-nullable type \\\"\".concat(inspect(type), \"\\\" not to be null.\")));\n    return;\n  }\n  if (inputValue == null) {\n    // Explicitly return the value null.\n    return null;\n  }\n  if (isListType(type)) {\n    var itemType = type.ofType;\n    var coercedList = safeArrayFrom(inputValue, function (itemValue, index) {\n      var itemPath = addPath(path, index, undefined);\n      return coerceInputValueImpl(itemValue, itemType, onError, itemPath);\n    });\n    if (coercedList != null) {\n      return coercedList;\n    } // Lists accept a non-list value as a list of one.\n\n    return [coerceInputValueImpl(inputValue, itemType, onError, path)];\n  }\n  if (isInputObjectType(type)) {\n    if (!isObjectLike(inputValue)) {\n      onError(pathToArray(path), inputValue, new GraphQLError(\"Expected type \\\"\".concat(type.name, \"\\\" to be an object.\")));\n      return;\n    }\n    var coercedValue = {};\n    var fieldDefs = type.getFields();\n    for (var _i2 = 0, _objectValues2 = objectValues(fieldDefs); _i2 < _objectValues2.length; _i2++) {\n      var field = _objectValues2[_i2];\n      var fieldValue = inputValue[field.name];\n      if (fieldValue === undefined) {\n        if (field.defaultValue !== undefined) {\n          coercedValue[field.name] = field.defaultValue;\n        } else if (isNonNullType(field.type)) {\n          var typeStr = inspect(field.type);\n          onError(pathToArray(path), inputValue, new GraphQLError(\"Field \\\"\".concat(field.name, \"\\\" of required type \\\"\").concat(typeStr, \"\\\" was not provided.\")));\n        }\n        continue;\n      }\n      coercedValue[field.name] = coerceInputValueImpl(fieldValue, field.type, onError, addPath(path, field.name, type.name));\n    } // Ensure every provided field is defined.\n\n    for (var _i4 = 0, _Object$keys2 = Object.keys(inputValue); _i4 < _Object$keys2.length; _i4++) {\n      var fieldName = _Object$keys2[_i4];\n      if (!fieldDefs[fieldName]) {\n        var suggestions = suggestionList(fieldName, Object.keys(type.getFields()));\n        onError(pathToArray(path), inputValue, new GraphQLError(\"Field \\\"\".concat(fieldName, \"\\\" is not defined by type \\\"\").concat(type.name, \"\\\".\") + didYouMean(suggestions)));\n      }\n    }\n    return coercedValue;\n  } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')\n\n  if (isLeafType(type)) {\n    var parseResult; // Scalars and Enums determine if a input value is valid via parseValue(),\n    // which can throw to indicate failure. If it throws, maintain a reference\n    // to the original error.\n\n    try {\n      parseResult = type.parseValue(inputValue);\n    } catch (error) {\n      if (error instanceof GraphQLError) {\n        onError(pathToArray(path), inputValue, error);\n      } else {\n        onError(pathToArray(path), inputValue, new GraphQLError(\"Expected type \\\"\".concat(type.name, \"\\\". \") + error.message, undefined, undefined, undefined, undefined, error));\n      }\n      return;\n    }\n    if (parseResult === undefined) {\n      onError(pathToArray(path), inputValue, new GraphQLError(\"Expected type \\\"\".concat(type.name, \"\\\".\")));\n    }\n    return parseResult;\n  } // istanbul ignore next (Not reachable. All possible input types have been considered)\n\n  false || invariant(0, 'Unexpected input type: ' + inspect(type));\n}","map":{"version":3,"names":["objectValues","inspect","invariant","didYouMean","isObjectLike","safeArrayFrom","suggestionList","printPathArray","addPath","pathToArray","GraphQLError","isLeafType","isInputObjectType","isListType","isNonNullType","coerceInputValue","inputValue","type","onError","arguments","length","undefined","defaultOnError","coerceInputValueImpl","path","invalidValue","error","errorPrefix","concat","message","ofType","itemType","coercedList","itemValue","index","itemPath","name","coercedValue","fieldDefs","getFields","_i2","_objectValues2","field","fieldValue","defaultValue","typeStr","_i4","_Object$keys2","Object","keys","fieldName","suggestions","parseResult","parseValue"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/graphql/utilities/coerceInputValue.mjs"],"sourcesContent":["import objectValues from \"../polyfills/objectValues.mjs\";\nimport inspect from \"../jsutils/inspect.mjs\";\nimport invariant from \"../jsutils/invariant.mjs\";\nimport didYouMean from \"../jsutils/didYouMean.mjs\";\nimport isObjectLike from \"../jsutils/isObjectLike.mjs\";\nimport safeArrayFrom from \"../jsutils/safeArrayFrom.mjs\";\nimport suggestionList from \"../jsutils/suggestionList.mjs\";\nimport printPathArray from \"../jsutils/printPathArray.mjs\";\nimport { addPath, pathToArray } from \"../jsutils/Path.mjs\";\nimport { GraphQLError } from \"../error/GraphQLError.mjs\";\nimport { isLeafType, isInputObjectType, isListType, isNonNullType } from \"../type/definition.mjs\";\n\n/**\n * Coerces a JavaScript value given a GraphQL Input Type.\n */\nexport function coerceInputValue(inputValue, type) {\n  var onError = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultOnError;\n  return coerceInputValueImpl(inputValue, type, onError);\n}\n\nfunction defaultOnError(path, invalidValue, error) {\n  var errorPrefix = 'Invalid value ' + inspect(invalidValue);\n\n  if (path.length > 0) {\n    errorPrefix += \" at \\\"value\".concat(printPathArray(path), \"\\\"\");\n  }\n\n  error.message = errorPrefix + ': ' + error.message;\n  throw error;\n}\n\nfunction coerceInputValueImpl(inputValue, type, onError, path) {\n  if (isNonNullType(type)) {\n    if (inputValue != null) {\n      return coerceInputValueImpl(inputValue, type.ofType, onError, path);\n    }\n\n    onError(pathToArray(path), inputValue, new GraphQLError(\"Expected non-nullable type \\\"\".concat(inspect(type), \"\\\" not to be null.\")));\n    return;\n  }\n\n  if (inputValue == null) {\n    // Explicitly return the value null.\n    return null;\n  }\n\n  if (isListType(type)) {\n    var itemType = type.ofType;\n    var coercedList = safeArrayFrom(inputValue, function (itemValue, index) {\n      var itemPath = addPath(path, index, undefined);\n      return coerceInputValueImpl(itemValue, itemType, onError, itemPath);\n    });\n\n    if (coercedList != null) {\n      return coercedList;\n    } // Lists accept a non-list value as a list of one.\n\n\n    return [coerceInputValueImpl(inputValue, itemType, onError, path)];\n  }\n\n  if (isInputObjectType(type)) {\n    if (!isObjectLike(inputValue)) {\n      onError(pathToArray(path), inputValue, new GraphQLError(\"Expected type \\\"\".concat(type.name, \"\\\" to be an object.\")));\n      return;\n    }\n\n    var coercedValue = {};\n    var fieldDefs = type.getFields();\n\n    for (var _i2 = 0, _objectValues2 = objectValues(fieldDefs); _i2 < _objectValues2.length; _i2++) {\n      var field = _objectValues2[_i2];\n      var fieldValue = inputValue[field.name];\n\n      if (fieldValue === undefined) {\n        if (field.defaultValue !== undefined) {\n          coercedValue[field.name] = field.defaultValue;\n        } else if (isNonNullType(field.type)) {\n          var typeStr = inspect(field.type);\n          onError(pathToArray(path), inputValue, new GraphQLError(\"Field \\\"\".concat(field.name, \"\\\" of required type \\\"\").concat(typeStr, \"\\\" was not provided.\")));\n        }\n\n        continue;\n      }\n\n      coercedValue[field.name] = coerceInputValueImpl(fieldValue, field.type, onError, addPath(path, field.name, type.name));\n    } // Ensure every provided field is defined.\n\n\n    for (var _i4 = 0, _Object$keys2 = Object.keys(inputValue); _i4 < _Object$keys2.length; _i4++) {\n      var fieldName = _Object$keys2[_i4];\n\n      if (!fieldDefs[fieldName]) {\n        var suggestions = suggestionList(fieldName, Object.keys(type.getFields()));\n        onError(pathToArray(path), inputValue, new GraphQLError(\"Field \\\"\".concat(fieldName, \"\\\" is not defined by type \\\"\").concat(type.name, \"\\\".\") + didYouMean(suggestions)));\n      }\n    }\n\n    return coercedValue;\n  } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')\n\n\n  if (isLeafType(type)) {\n    var parseResult; // Scalars and Enums determine if a input value is valid via parseValue(),\n    // which can throw to indicate failure. If it throws, maintain a reference\n    // to the original error.\n\n    try {\n      parseResult = type.parseValue(inputValue);\n    } catch (error) {\n      if (error instanceof GraphQLError) {\n        onError(pathToArray(path), inputValue, error);\n      } else {\n        onError(pathToArray(path), inputValue, new GraphQLError(\"Expected type \\\"\".concat(type.name, \"\\\". \") + error.message, undefined, undefined, undefined, undefined, error));\n      }\n\n      return;\n    }\n\n    if (parseResult === undefined) {\n      onError(pathToArray(path), inputValue, new GraphQLError(\"Expected type \\\"\".concat(type.name, \"\\\".\")));\n    }\n\n    return parseResult;\n  } // istanbul ignore next (Not reachable. All possible input types have been considered)\n\n\n  false || invariant(0, 'Unexpected input type: ' + inspect(type));\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}