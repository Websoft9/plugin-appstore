{"ast":null,"code":"import inspect from \"../../jsutils/inspect.mjs\";\nimport { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { getNamedType, isLeafType } from \"../../type/definition.mjs\";\n\n/**\n * Scalar leafs\n *\n * A GraphQL document is valid only if all leaf fields (fields without\n * sub selections) are of scalar or enum types.\n */\nexport function ScalarLeafsRule(context) {\n  return {\n    Field: function Field(node) {\n      var type = context.getType();\n      var selectionSet = node.selectionSet;\n      if (type) {\n        if (isLeafType(getNamedType(type))) {\n          if (selectionSet) {\n            var fieldName = node.name.value;\n            var typeStr = inspect(type);\n            context.reportError(new GraphQLError(\"Field \\\"\".concat(fieldName, \"\\\" must not have a selection since type \\\"\").concat(typeStr, \"\\\" has no subfields.\"), selectionSet));\n          }\n        } else if (!selectionSet) {\n          var _fieldName = node.name.value;\n          var _typeStr = inspect(type);\n          context.reportError(new GraphQLError(\"Field \\\"\".concat(_fieldName, \"\\\" of type \\\"\").concat(_typeStr, \"\\\" must have a selection of subfields. Did you mean \\\"\").concat(_fieldName, \" { ... }\\\"?\"), node));\n        }\n      }\n    }\n  };\n}","map":{"version":3,"names":["inspect","GraphQLError","getNamedType","isLeafType","ScalarLeafsRule","context","Field","node","type","getType","selectionSet","fieldName","name","value","typeStr","reportError","concat","_fieldName","_typeStr"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/graphql/validation/rules/ScalarLeafsRule.mjs"],"sourcesContent":["import inspect from \"../../jsutils/inspect.mjs\";\nimport { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { getNamedType, isLeafType } from \"../../type/definition.mjs\";\n\n/**\n * Scalar leafs\n *\n * A GraphQL document is valid only if all leaf fields (fields without\n * sub selections) are of scalar or enum types.\n */\nexport function ScalarLeafsRule(context) {\n  return {\n    Field: function Field(node) {\n      var type = context.getType();\n      var selectionSet = node.selectionSet;\n\n      if (type) {\n        if (isLeafType(getNamedType(type))) {\n          if (selectionSet) {\n            var fieldName = node.name.value;\n            var typeStr = inspect(type);\n            context.reportError(new GraphQLError(\"Field \\\"\".concat(fieldName, \"\\\" must not have a selection since type \\\"\").concat(typeStr, \"\\\" has no subfields.\"), selectionSet));\n          }\n        } else if (!selectionSet) {\n          var _fieldName = node.name.value;\n\n          var _typeStr = inspect(type);\n\n          context.reportError(new GraphQLError(\"Field \\\"\".concat(_fieldName, \"\\\" of type \\\"\").concat(_typeStr, \"\\\" must have a selection of subfields. Did you mean \\\"\").concat(_fieldName, \" { ... }\\\"?\"), node));\n        }\n      }\n    }\n  };\n}\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,2BAA2B;AAC/C,SAASC,YAAY,QAAQ,8BAA8B;AAC3D,SAASC,YAAY,EAAEC,UAAU,QAAQ,2BAA2B;;AAEpE;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,eAAeA,CAACC,OAAO,EAAE;EACvC,OAAO;IACLC,KAAK,EAAE,SAASA,KAAKA,CAACC,IAAI,EAAE;MAC1B,IAAIC,IAAI,GAAGH,OAAO,CAACI,OAAO,CAAC,CAAC;MAC5B,IAAIC,YAAY,GAAGH,IAAI,CAACG,YAAY;MAEpC,IAAIF,IAAI,EAAE;QACR,IAAIL,UAAU,CAACD,YAAY,CAACM,IAAI,CAAC,CAAC,EAAE;UAClC,IAAIE,YAAY,EAAE;YAChB,IAAIC,SAAS,GAAGJ,IAAI,CAACK,IAAI,CAACC,KAAK;YAC/B,IAAIC,OAAO,GAAGd,OAAO,CAACQ,IAAI,CAAC;YAC3BH,OAAO,CAACU,WAAW,CAAC,IAAId,YAAY,CAAC,UAAU,CAACe,MAAM,CAACL,SAAS,EAAE,4CAA4C,CAAC,CAACK,MAAM,CAACF,OAAO,EAAE,sBAAsB,CAAC,EAAEJ,YAAY,CAAC,CAAC;UACzK;QACF,CAAC,MAAM,IAAI,CAACA,YAAY,EAAE;UACxB,IAAIO,UAAU,GAAGV,IAAI,CAACK,IAAI,CAACC,KAAK;UAEhC,IAAIK,QAAQ,GAAGlB,OAAO,CAACQ,IAAI,CAAC;UAE5BH,OAAO,CAACU,WAAW,CAAC,IAAId,YAAY,CAAC,UAAU,CAACe,MAAM,CAACC,UAAU,EAAE,eAAe,CAAC,CAACD,MAAM,CAACE,QAAQ,EAAE,wDAAwD,CAAC,CAACF,MAAM,CAACC,UAAU,EAAE,aAAa,CAAC,EAAEV,IAAI,CAAC,CAAC;QAC1M;MACF;IACF;EACF,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}