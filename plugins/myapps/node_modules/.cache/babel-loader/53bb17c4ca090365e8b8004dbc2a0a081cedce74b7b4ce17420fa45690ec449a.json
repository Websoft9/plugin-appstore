{"ast":null,"code":"export var COMMON_MIME_TYPES = new Map([['avi', 'video/avi'], ['gif', 'image/gif'], ['ico', 'image/x-icon'], ['jpeg', 'image/jpeg'], ['jpg', 'image/jpeg'], ['mkv', 'video/x-matroska'], ['mov', 'video/quicktime'], ['mp4', 'video/mp4'], ['pdf', 'application/pdf'], ['png', 'image/png'], ['zip', 'application/zip'], ['doc', 'application/msword'], ['docx', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document']]);\nexport function toFileWithPath(file, path) {\n  var f = withMimeType(file);\n  if (typeof f.path !== 'string') {\n    // on electron, path is already set to the absolute path\n    var webkitRelativePath = file.webkitRelativePath;\n    Object.defineProperty(f, 'path', {\n      value: typeof path === 'string' ? path\n      // If <input webkitdirectory> is set,\n      // the File will have a {webkitRelativePath} property\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/webkitdirectory\n      : typeof webkitRelativePath === 'string' && webkitRelativePath.length > 0 ? webkitRelativePath : file.name,\n      writable: false,\n      configurable: false,\n      enumerable: true\n    });\n  }\n  return f;\n}\nfunction withMimeType(file) {\n  var name = file.name;\n  var hasExtension = name && name.lastIndexOf('.') !== -1;\n  if (hasExtension && !file.type) {\n    var ext = name.split('.').pop().toLowerCase();\n    var type = COMMON_MIME_TYPES.get(ext);\n    if (type) {\n      Object.defineProperty(file, 'type', {\n        value: type,\n        writable: false,\n        configurable: false,\n        enumerable: true\n      });\n    }\n  }\n  return file;\n}","map":{"version":3,"names":["COMMON_MIME_TYPES","Map","toFileWithPath","file","path","f","withMimeType","webkitRelativePath","Object","defineProperty","value","length","name","writable","configurable","enumerable","hasExtension","lastIndexOf","type","ext","split","pop","toLowerCase","get"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/file-selector/src/file.ts"],"sourcesContent":["export const COMMON_MIME_TYPES = new Map([\n    ['avi', 'video/avi'],\n    ['gif', 'image/gif'],\n    ['ico', 'image/x-icon'],\n    ['jpeg', 'image/jpeg'],\n    ['jpg', 'image/jpeg'],\n    ['mkv', 'video/x-matroska'],\n    ['mov', 'video/quicktime'],\n    ['mp4', 'video/mp4'],\n    ['pdf', 'application/pdf'],\n    ['png', 'image/png'],\n    ['zip', 'application/zip'],\n    ['doc', 'application/msword'],\n    ['docx', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document']\n]);\n\n\nexport function toFileWithPath(file: FileWithPath, path?: string): FileWithPath {\n    const f = withMimeType(file);\n    if (typeof f.path !== 'string') { // on electron, path is already set to the absolute path\n        const {webkitRelativePath} = file as FileWithWebkitPath;\n        Object.defineProperty(f, 'path', {\n            value: typeof path === 'string'\n                ? path\n                // If <input webkitdirectory> is set,\n                // the File will have a {webkitRelativePath} property\n                // https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/webkitdirectory\n                : typeof webkitRelativePath === 'string' && webkitRelativePath.length > 0\n                    ? webkitRelativePath\n                    : file.name,\n            writable: false,\n            configurable: false,\n            enumerable: true\n        });\n    }\n\n    return f;\n}\n\ninterface DOMFile extends Blob {\n    readonly lastModified: number;\n    readonly name: string;\n}\n\nexport interface FileWithPath extends DOMFile {\n    readonly path?: string;\n}\n\ninterface FileWithWebkitPath extends File {\n    readonly webkitRelativePath?: string;\n}\n\nfunction withMimeType(file: FileWithPath) {\n    const {name} = file;\n    const hasExtension = name && name.lastIndexOf('.') !== -1;\n\n    if (hasExtension && !file.type) {\n        const ext = name.split('.')\n            .pop()!.toLowerCase();\n        const type = COMMON_MIME_TYPES.get(ext);\n        if (type) {\n            Object.defineProperty(file, 'type', {\n                value: type,\n                writable: false,\n                configurable: false,\n                enumerable: true\n            });\n        }\n    }\n\n    return file;\n}\n"],"mappings":"AAAA,OAAO,IAAMA,iBAAiB,GAAG,IAAIC,GAAG,CAAC,CACrC,CAAC,KAAK,EAAE,WAAW,CAAC,EACpB,CAAC,KAAK,EAAE,WAAW,CAAC,EACpB,CAAC,KAAK,EAAE,cAAc,CAAC,EACvB,CAAC,MAAM,EAAE,YAAY,CAAC,EACtB,CAAC,KAAK,EAAE,YAAY,CAAC,EACrB,CAAC,KAAK,EAAE,kBAAkB,CAAC,EAC3B,CAAC,KAAK,EAAE,iBAAiB,CAAC,EAC1B,CAAC,KAAK,EAAE,WAAW,CAAC,EACpB,CAAC,KAAK,EAAE,iBAAiB,CAAC,EAC1B,CAAC,KAAK,EAAE,WAAW,CAAC,EACpB,CAAC,KAAK,EAAE,iBAAiB,CAAC,EAC1B,CAAC,KAAK,EAAE,oBAAoB,CAAC,EAC7B,CAAC,MAAM,EAAE,yEAAyE,CAAC,CACtF,CAAC;AAGF,OAAM,SAAUC,cAAcA,CAACC,IAAkB,EAAEC,IAAa;EAC5D,IAAMC,CAAC,GAAGC,YAAY,CAACH,IAAI,CAAC;EAC5B,IAAI,OAAOE,CAAC,CAACD,IAAI,KAAK,QAAQ,EAAE;IAAE;IACvB,IAAAG,kBAAkB,GAAIJ,IAA0B,CAAAI,kBAA9B;IACzBC,MAAM,CAACC,cAAc,CAACJ,CAAC,EAAE,MAAM,EAAE;MAC7BK,KAAK,EAAE,OAAON,IAAI,KAAK,QAAQ,GACzBA;MACF;MACA;MACA;MAAA,EACE,OAAOG,kBAAkB,KAAK,QAAQ,IAAIA,kBAAkB,CAACI,MAAM,GAAG,CAAC,GACnEJ,kBAAkB,GAClBJ,IAAI,CAACS,IAAI;MACnBC,QAAQ,EAAE,KAAK;MACfC,YAAY,EAAE,KAAK;MACnBC,UAAU,EAAE;KACf,CAAC;;EAGN,OAAOV,CAAC;AACZ;AAeA,SAASC,YAAYA,CAACH,IAAkB;EAC7B,IAAAS,IAAI,GAAIT,IAAI,CAAAS,IAAR;EACX,IAAMI,YAAY,GAAGJ,IAAI,IAAIA,IAAI,CAACK,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;EAEzD,IAAID,YAAY,IAAI,CAACb,IAAI,CAACe,IAAI,EAAE;IAC5B,IAAMC,GAAG,GAAGP,IAAI,CAACQ,KAAK,CAAC,GAAG,CAAC,CACtBC,GAAG,EAAG,CAACC,WAAW,EAAE;IACzB,IAAMJ,IAAI,GAAGlB,iBAAiB,CAACuB,GAAG,CAACJ,GAAG,CAAC;IACvC,IAAID,IAAI,EAAE;MACNV,MAAM,CAACC,cAAc,CAACN,IAAI,EAAE,MAAM,EAAE;QAChCO,KAAK,EAAEQ,IAAI;QACXL,QAAQ,EAAE,KAAK;QACfC,YAAY,EAAE,KAAK;QACnBC,UAAU,EAAE;OACf,CAAC;;;EAIV,OAAOZ,IAAI;AACf"},"metadata":{},"sourceType":"module","externalDependencies":[]}