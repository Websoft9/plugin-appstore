{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { Button, ButtonVariant } from '../Button';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/NotificationBadge/notification-badge';\nimport AttentionBellIcon from '@patternfly/react-icons/dist/esm/icons/attention-bell-icon';\nimport BellIcon from '@patternfly/react-icons/dist/esm/icons/bell-icon';\nexport var NotificationBadgeVariant;\n(function (NotificationBadgeVariant) {\n  NotificationBadgeVariant[\"read\"] = \"read\";\n  NotificationBadgeVariant[\"unread\"] = \"unread\";\n  NotificationBadgeVariant[\"attention\"] = \"attention\";\n})(NotificationBadgeVariant || (NotificationBadgeVariant = {}));\nexport var NotificationBadge = function NotificationBadge(_a) {\n  var isRead = _a.isRead,\n    children = _a.children,\n    _a$variant = _a.variant,\n    variant = _a$variant === void 0 ? isRead ? 'read' : 'unread' : _a$variant,\n    _a$count = _a.count,\n    count = _a$count === void 0 ? 0 : _a$count,\n    _a$attentionIcon = _a.attentionIcon,\n    attentionIcon = _a$attentionIcon === void 0 ? React.createElement(AttentionBellIcon, null) : _a$attentionIcon,\n    _a$icon = _a.icon,\n    icon = _a$icon === void 0 ? React.createElement(BellIcon, null) : _a$icon,\n    className = _a.className,\n    _a$isExpanded = _a.isExpanded,\n    isExpanded = _a$isExpanded === void 0 ? false : _a$isExpanded,\n    props = __rest(_a, [\"isRead\", \"children\", \"variant\", \"count\", \"attentionIcon\", \"icon\", \"className\", \"isExpanded\"]);\n  var notificationChild = icon;\n  if (children !== undefined) {\n    notificationChild = children;\n  } else if (variant === NotificationBadgeVariant.attention) {\n    notificationChild = attentionIcon;\n  }\n  return React.createElement(Button, Object.assign({\n    variant: ButtonVariant.plain,\n    className: className,\n    \"aria-expanded\": isExpanded\n  }, props), React.createElement(\"span\", {\n    className: css(styles.notificationBadge, styles.modifiers[variant], isExpanded && styles.modifiers.expanded)\n  }, notificationChild, count > 0 && React.createElement(\"span\", {\n    className: css(styles.notificationBadgeCount)\n  }, count)));\n};\nNotificationBadge.displayName = 'NotificationBadge';","map":{"version":3,"names":["React","Button","ButtonVariant","css","styles","AttentionBellIcon","BellIcon","NotificationBadgeVariant","NotificationBadge","_a","isRead","children","_a$variant","variant","_a$count","count","_a$attentionIcon","attentionIcon","createElement","_a$icon","icon","className","_a$isExpanded","isExpanded","props","__rest","notificationChild","undefined","attention","Object","assign","plain","notificationBadge","modifiers","expanded","notificationBadgeCount","displayName"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@patternfly/react-core/src/components/NotificationBadge/NotificationBadge.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Button, ButtonVariant, ButtonProps } from '../Button';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/NotificationBadge/notification-badge';\nimport AttentionBellIcon from '@patternfly/react-icons/dist/esm/icons/attention-bell-icon';\nimport BellIcon from '@patternfly/react-icons/dist/esm/icons/bell-icon';\n\nexport enum NotificationBadgeVariant {\n  read = 'read',\n  unread = 'unread',\n  attention = 'attention'\n}\n\nexport interface NotificationBadgeProps extends Omit<ButtonProps, 'variant'> {\n  /** Adds an accessible label to the notification badge. */\n  'aria-label'?: string;\n  /** Icon to display for attention variant. */\n  attentionIcon?: React.ReactNode;\n  /** Content rendered inside the notification badge. */\n  children?: React.ReactNode;\n  /** Additional classes added to the notification badge. */\n  className?: string;\n  /** A number displayed in the badge alongside the icon. */\n  count?: number;\n  /** Icon to display in the notification badge. */\n  icon?: React.ReactNode;\n  /** Flag for applying expanded styling and setting the aria-expanded attribute on the\n   * notification badge.\n   */\n  isExpanded?: boolean;\n  /** @deprecated Use the variant prop instead - Adds styling to the notification badge to indicate it has been read. */\n  isRead?: boolean;\n  /** Determines the variant of the notification badge. */\n  variant?: NotificationBadgeVariant | 'read' | 'unread' | 'attention';\n}\n\nexport const NotificationBadge: React.FunctionComponent<NotificationBadgeProps> = ({\n  isRead,\n  children,\n  variant = isRead ? 'read' : 'unread',\n  count = 0,\n  attentionIcon = <AttentionBellIcon />,\n  icon = <BellIcon />,\n  className,\n  isExpanded = false,\n  ...props\n}: NotificationBadgeProps) => {\n  let notificationChild = icon;\n  if (children !== undefined) {\n    notificationChild = children;\n  } else if (variant === NotificationBadgeVariant.attention) {\n    notificationChild = attentionIcon;\n  }\n  return (\n    <Button variant={ButtonVariant.plain} className={className} aria-expanded={isExpanded} {...props}>\n      <span\n        className={css(styles.notificationBadge, styles.modifiers[variant], isExpanded && styles.modifiers.expanded)}\n      >\n        {notificationChild}\n        {count > 0 && <span className={css(styles.notificationBadgeCount)}>{count}</span>}\n      </span>\n    </Button>\n  );\n};\nNotificationBadge.displayName = 'NotificationBadge';\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,MAAM,EAAEC,aAAa,QAAqB,WAAW;AAC9D,SAASC,GAAG,QAAQ,0BAA0B;AAC9C,OAAOC,MAAM,MAAM,8EAA8E;AACjG,OAAOC,iBAAiB,MAAM,4DAA4D;AAC1F,OAAOC,QAAQ,MAAM,kDAAkD;AAEvE,WAAYC,wBAIX;AAJD,WAAYA,wBAAwB;EAClCA,wBAAA,iBAAa;EACbA,wBAAA,qBAAiB;EACjBA,wBAAA,2BAAuB;AACzB,CAAC,EAJWA,wBAAwB,KAAxBA,wBAAwB;AA6BpC,OAAO,IAAMC,iBAAiB,GAAoD,SAArEA,iBAAiBA,CAAqDC,EAU1D,EAAI;MAT3BC,MAAM,GAOYD,EAEK,CATvBC,MAAM;IACNC,QAAQ,GAMUF,EAEK,CARvBE,QAAQ;IAAAC,UAAA,GAMUH,EAEK,CAPvBI,OAAO;IAAPA,OAAO,GAAAD,UAAA,cAAGF,MAAM,GAAG,MAAM,GAAG,QAAQ,GAAAE,UAAA;IAAAE,QAAA,GAKlBL,EAEK,CANvBM,KAAK;IAALA,KAAK,GAAAD,QAAA,cAAG,CAAC,GAAAA,QAAA;IAAAE,gBAAA,GAISP,EAEK,CALvBQ,aAAa;IAAbA,aAAa,GAAAD,gBAAA,cAAGhB,KAAA,CAAAkB,aAAA,CAACb,iBAAiB,OAAG,GAAAW,gBAAA;IAAAG,OAAA,GAGnBV,EAEK,CAJvBW,IAAI;IAAJA,IAAI,GAAAD,OAAA,cAAGnB,KAAA,CAAAkB,aAAA,CAACZ,QAAQ,OAAG,GAAAa,OAAA;IACnBE,SAAS,GACSZ,EAEK,CAHvBY,SAAS;IAAAC,aAAA,GACSb,EAEK,CAFvBc,UAAU;IAAVA,UAAU,GAAAD,aAAA,cAAG,KAAK,GAAAA,aAAA;IACfE,KAAK,GAAAC,MAAA,CAAAhB,EAAA,EATyE,8FAUlF,CADS;EAER,IAAIiB,iBAAiB,GAAGN,IAAI;EAC5B,IAAIT,QAAQ,KAAKgB,SAAS,EAAE;IAC1BD,iBAAiB,GAAGf,QAAQ;GAC7B,MAAM,IAAIE,OAAO,KAAKN,wBAAwB,CAACqB,SAAS,EAAE;IACzDF,iBAAiB,GAAGT,aAAa;;EAEnC,OACEjB,KAAA,CAAAkB,aAAA,CAACjB,MAAM,EAAA4B,MAAA,CAAAC,MAAA;IAACjB,OAAO,EAAEX,aAAa,CAAC6B,KAAK;IAAEV,SAAS,EAAEA,SAAS;IAAA,iBAAiBE;EAAU,GAAMC,KAAK,GAC9FxB,KAAA,CAAAkB,aAAA;IACEG,SAAS,EAAElB,GAAG,CAACC,MAAM,CAAC4B,iBAAiB,EAAE5B,MAAM,CAAC6B,SAAS,CAACpB,OAAO,CAAC,EAAEU,UAAU,IAAInB,MAAM,CAAC6B,SAAS,CAACC,QAAQ;EAAC,GAE3GR,iBAAiB,EACjBX,KAAK,GAAG,CAAC,IAAIf,KAAA,CAAAkB,aAAA;IAAMG,SAAS,EAAElB,GAAG,CAACC,MAAM,CAAC+B,sBAAsB;EAAC,GAAGpB,KAAK,CAAQ,CAC5E,CACA;AAEb,CAAC;AACDP,iBAAiB,CAAC4B,WAAW,GAAG,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}