{"ast":null,"code":"import _toConsumableArray from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { css } from '@patternfly/react-styles';\nimport AngleDoubleLeftIcon from '@patternfly/react-icons/dist/esm/icons/angle-double-left-icon';\nimport AngleLeftIcon from '@patternfly/react-icons/dist/esm/icons/angle-left-icon';\nimport AngleDoubleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-double-right-icon';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { DualListSelectorPane } from './DualListSelectorPane';\nimport { GenerateId } from '../../helpers';\nimport { flattenTree, flattenTreeWithFolders, filterFolders, filterTreeItems, filterTreeItemsWithoutFolders, filterRestTreeItems } from './treeUtils';\nimport { DualListSelectorControlsWrapper } from './DualListSelectorControlsWrapper';\nimport { DualListSelectorControl } from './DualListSelectorControl';\nimport { DualListSelectorContext } from './DualListSelectorContext';\nexport var DualListSelector = /*#__PURE__*/function (_React$Component) {\n  _inherits(DualListSelector, _React$Component);\n  var _super = _createSuper(DualListSelector);\n  function DualListSelector(props) {\n    var _this;\n    _classCallCheck(this, DualListSelector);\n    _this = _super.call(this, props);\n    _this.addAllButtonRef = React.createRef();\n    _this.addSelectedButtonRef = React.createRef();\n    _this.removeSelectedButtonRef = React.createRef();\n    _this.removeAllButtonRef = React.createRef();\n    /** In dev environment, prevents circular structure during JSON stringification when\n     * options passed in to the dual list selector include HTML elements.\n     */\n    _this.replacer = function (key, value) {\n      if (key[0] === '_') {\n        return undefined;\n      }\n      return value;\n    };\n    _this.onFilterUpdate = function (newFilteredOptions, paneType, isSearchReset) {\n      var isTree = _this.props.isTree;\n      if (paneType === 'available') {\n        if (isSearchReset) {\n          _this.setState({\n            availableFilteredOptions: null,\n            availableTreeFilteredOptions: null\n          });\n          return;\n        }\n        if (isTree) {\n          _this.setState({\n            availableTreeFilteredOptions: flattenTreeWithFolders(newFilteredOptions)\n          });\n        } else {\n          _this.setState({\n            availableFilteredOptions: newFilteredOptions\n          });\n        }\n      } else if (paneType === 'chosen') {\n        if (isSearchReset) {\n          _this.setState({\n            chosenFilteredOptions: null,\n            chosenTreeFilteredOptions: null\n          });\n          return;\n        }\n        if (isTree) {\n          _this.setState({\n            chosenTreeFilteredOptions: flattenTreeWithFolders(newFilteredOptions)\n          });\n        } else {\n          _this.setState({\n            chosenFilteredOptions: newFilteredOptions\n          });\n        }\n      }\n    };\n    _this.addAllVisible = function () {\n      _this.setState(function (prevState) {\n        var itemsToRemove = [];\n        var newAvailable = [];\n        var movedOptions = prevState.availableFilteredOptions || prevState.availableOptions;\n        prevState.availableOptions.forEach(function (value) {\n          if (movedOptions.indexOf(value) !== -1) {\n            itemsToRemove.push(value);\n          } else {\n            newAvailable.push(value);\n          }\n        });\n        var newChosen = [].concat(_toConsumableArray(prevState.chosenOptions), itemsToRemove);\n        _this.props.addAll && _this.props.addAll(newAvailable, newChosen);\n        _this.props.onListChange && _this.props.onListChange(newAvailable, newChosen);\n        return {\n          chosenOptions: newChosen,\n          chosenFilteredOptions: newChosen,\n          availableOptions: newAvailable,\n          availableFilteredOptions: newAvailable,\n          chosenOptionsSelected: [],\n          availableOptionsSelected: []\n        };\n      });\n    };\n    _this.addAllTreeVisible = function () {\n      _this.setState(function (prevState) {\n        var movedOptions = prevState.availableTreeFilteredOptions || flattenTreeWithFolders(prevState.availableOptions);\n        var newAvailable = prevState.availableOptions.map(function (opt) {\n          return Object.assign({}, opt);\n        }).filter(function (item) {\n          return filterRestTreeItems(item, movedOptions);\n        });\n        var currChosen = flattenTree(prevState.chosenOptions);\n        var nextChosenOptions = currChosen.concat(movedOptions);\n        var newChosen = _this.createMergedCopy().map(function (opt) {\n          return Object.assign({}, opt);\n        }).filter(function (item) {\n          return filterTreeItemsWithoutFolders(item, nextChosenOptions);\n        });\n        _this.props.addAll && _this.props.addAll(newAvailable, newChosen);\n        _this.props.onListChange && _this.props.onListChange(newAvailable, newChosen);\n        return {\n          chosenOptions: newChosen,\n          chosenFilteredOptions: newChosen,\n          availableOptions: newAvailable,\n          availableFilteredOptions: newAvailable,\n          availableTreeOptionsChecked: [],\n          chosenTreeOptionsChecked: []\n        };\n      });\n    };\n    _this.addSelected = function () {\n      _this.setState(function (prevState) {\n        var itemsToRemove = [];\n        var newAvailable = [];\n        prevState.availableOptions.forEach(function (value, index) {\n          if (prevState.availableOptionsSelected.indexOf(index) !== -1) {\n            itemsToRemove.push(value);\n          } else {\n            newAvailable.push(value);\n          }\n        });\n        var newChosen = [].concat(_toConsumableArray(prevState.chosenOptions), itemsToRemove);\n        _this.props.addSelected && _this.props.addSelected(newAvailable, newChosen);\n        _this.props.onListChange && _this.props.onListChange(newAvailable, newChosen);\n        return {\n          chosenOptionsSelected: [],\n          availableOptionsSelected: [],\n          chosenOptions: newChosen,\n          chosenFilteredOptions: newChosen,\n          availableOptions: newAvailable,\n          availableFilteredOptions: newAvailable\n        };\n      });\n    };\n    _this.addTreeSelected = function () {\n      _this.setState(function (prevState) {\n        // Remove selected available nodes from current available nodes\n        var newAvailable = prevState.availableOptions.map(function (opt) {\n          return Object.assign({}, opt);\n        }).filter(function (item) {\n          return filterRestTreeItems(item, prevState.availableTreeOptionsChecked);\n        });\n        // Get next chosen options from current + new nodes and remap from base\n        var currChosen = flattenTree(prevState.chosenOptions);\n        var nextChosenOptions = currChosen.concat(prevState.availableTreeOptionsChecked);\n        var newChosen = _this.createMergedCopy().map(function (opt) {\n          return Object.assign({}, opt);\n        }).filter(function (item) {\n          return filterTreeItemsWithoutFolders(item, nextChosenOptions);\n        });\n        _this.props.addSelected && _this.props.addSelected(newAvailable, newChosen);\n        _this.props.onListChange && _this.props.onListChange(newAvailable, newChosen);\n        return {\n          availableTreeOptionsChecked: [],\n          chosenTreeOptionsChecked: [],\n          availableOptions: newAvailable,\n          chosenOptions: newChosen\n        };\n      });\n    };\n    _this.removeAllVisible = function () {\n      _this.setState(function (prevState) {\n        var itemsToRemove = [];\n        var newChosen = [];\n        var movedOptions = prevState.chosenFilteredOptions || prevState.chosenOptions;\n        prevState.chosenOptions.forEach(function (value) {\n          if (movedOptions.indexOf(value) !== -1) {\n            itemsToRemove.push(value);\n          } else {\n            newChosen.push(value);\n          }\n        });\n        var newAvailable = [].concat(_toConsumableArray(prevState.availableOptions), itemsToRemove);\n        _this.props.removeAll && _this.props.removeAll(newAvailable, newChosen);\n        _this.props.onListChange && _this.props.onListChange(newAvailable, newChosen);\n        return {\n          chosenOptions: newChosen,\n          chosenFilteredOptions: newChosen,\n          availableOptions: newAvailable,\n          availableFilteredOptions: newAvailable,\n          chosenOptionsSelected: [],\n          availableOptionsSelected: []\n        };\n      });\n    };\n    _this.removeAllTreeVisible = function () {\n      _this.setState(function (prevState) {\n        var movedOptions = prevState.chosenTreeFilteredOptions || flattenTreeWithFolders(prevState.chosenOptions);\n        var newChosen = prevState.chosenOptions.map(function (opt) {\n          return Object.assign({}, opt);\n        }).filter(function (item) {\n          return filterRestTreeItems(item, movedOptions);\n        });\n        var currAvailable = flattenTree(prevState.availableOptions);\n        var nextAvailableOptions = currAvailable.concat(movedOptions);\n        var newAvailable = _this.createMergedCopy().map(function (opt) {\n          return Object.assign({}, opt);\n        }).filter(function (item) {\n          return filterTreeItemsWithoutFolders(item, nextAvailableOptions);\n        });\n        _this.props.removeAll && _this.props.removeAll(newAvailable, newChosen);\n        _this.props.onListChange && _this.props.onListChange(newAvailable, newChosen);\n        return {\n          chosenOptions: newChosen,\n          availableOptions: newAvailable,\n          availableTreeOptionsChecked: [],\n          chosenTreeOptionsChecked: []\n        };\n      });\n    };\n    _this.removeSelected = function () {\n      _this.setState(function (prevState) {\n        var itemsToRemove = [];\n        var newChosen = [];\n        prevState.chosenOptions.forEach(function (value, index) {\n          if (prevState.chosenOptionsSelected.indexOf(index) !== -1) {\n            itemsToRemove.push(value);\n          } else {\n            newChosen.push(value);\n          }\n        });\n        var newAvailable = [].concat(_toConsumableArray(prevState.availableOptions), itemsToRemove);\n        _this.props.removeSelected && _this.props.removeSelected(newAvailable, newChosen);\n        _this.props.onListChange && _this.props.onListChange(newAvailable, newChosen);\n        return {\n          chosenOptionsSelected: [],\n          availableOptionsSelected: [],\n          chosenOptions: newChosen,\n          chosenFilteredOptions: newChosen,\n          availableOptions: newAvailable,\n          availableFilteredOptions: newAvailable\n        };\n      });\n    };\n    _this.removeTreeSelected = function () {\n      _this.setState(function (prevState) {\n        // Remove selected chosen nodes from current chosen nodes\n        var newChosen = prevState.chosenOptions.map(function (opt) {\n          return Object.assign({}, opt);\n        }).filter(function (item) {\n          return filterRestTreeItems(item, prevState.chosenTreeOptionsChecked);\n        });\n        // Get next chosen options from current and remap from base\n        var currAvailable = flattenTree(prevState.availableOptions);\n        var nextAvailableOptions = currAvailable.concat(prevState.chosenTreeOptionsChecked);\n        var newAvailable = _this.createMergedCopy().map(function (opt) {\n          return Object.assign({}, opt);\n        }).filter(function (item) {\n          return filterTreeItemsWithoutFolders(item, nextAvailableOptions);\n        });\n        _this.props.removeSelected && _this.props.removeSelected(newAvailable, newChosen);\n        _this.props.onListChange && _this.props.onListChange(newAvailable, newChosen);\n        return {\n          availableTreeOptionsChecked: [],\n          chosenTreeOptionsChecked: [],\n          availableOptions: newAvailable,\n          chosenOptions: newChosen\n        };\n      });\n    };\n    _this.onOptionSelect = function (e, index, isChosen, /* eslint-disable @typescript-eslint/no-unused-vars */\n    id, itemData, parentData\n    /* eslint-enable @typescript-eslint/no-unused-vars */) {\n      _this.setState(function (prevState) {\n        var originalArray = isChosen ? prevState.chosenOptionsSelected : prevState.availableOptionsSelected;\n        var updatedArray = null;\n        if (originalArray.indexOf(index) !== -1) {\n          updatedArray = originalArray.filter(function (value) {\n            return value !== index;\n          });\n        } else {\n          updatedArray = [].concat(_toConsumableArray(originalArray), [index]);\n        }\n        return {\n          chosenOptionsSelected: isChosen ? updatedArray : prevState.chosenOptionsSelected,\n          availableOptionsSelected: isChosen ? prevState.availableOptionsSelected : updatedArray\n        };\n      });\n      _this.props.onOptionSelect && _this.props.onOptionSelect(e, index, isChosen, id, itemData, parentData);\n    };\n    _this.isChecked = function (treeItem, isChosen) {\n      return isChosen ? _this.state.chosenTreeOptionsChecked.includes(treeItem.id) : _this.state.availableTreeOptionsChecked.includes(treeItem.id);\n    };\n    _this.areAllDescendantsChecked = function (treeItem, isChosen) {\n      return treeItem.children ? treeItem.children.every(function (child) {\n        return _this.areAllDescendantsChecked(child, isChosen);\n      }) : _this.isChecked(treeItem, isChosen);\n    };\n    _this.areSomeDescendantsChecked = function (treeItem, isChosen) {\n      return treeItem.children ? treeItem.children.some(function (child) {\n        return _this.areSomeDescendantsChecked(child, isChosen);\n      }) : _this.isChecked(treeItem, isChosen);\n    };\n    _this.mapChecked = function (item, isChosen) {\n      var hasCheck = _this.areAllDescendantsChecked(item, isChosen);\n      item.isChecked = false;\n      if (hasCheck) {\n        item.isChecked = true;\n      } else {\n        var hasPartialCheck = _this.areSomeDescendantsChecked(item, isChosen);\n        if (hasPartialCheck) {\n          item.isChecked = null;\n        }\n      }\n      if (item.children) {\n        return Object.assign(Object.assign({}, item), {\n          children: item.children.map(function (child) {\n            return _this.mapChecked(child, isChosen);\n          })\n        });\n      }\n      return item;\n    };\n    _this.onTreeOptionCheck = function (evt, isChecked, itemData, isChosen) {\n      var _this$state = _this.state,\n        availableOptions = _this$state.availableOptions,\n        availableTreeFilteredOptions = _this$state.availableTreeFilteredOptions,\n        chosenOptions = _this$state.chosenOptions,\n        chosenTreeFilteredOptions = _this$state.chosenTreeFilteredOptions;\n      var panelOptions;\n      if (isChosen) {\n        if (chosenTreeFilteredOptions) {\n          panelOptions = chosenOptions.map(function (opt) {\n            return Object.assign({}, opt);\n          }).filter(function (item) {\n            return filterTreeItemsWithoutFolders(item, chosenTreeFilteredOptions);\n          });\n        } else {\n          panelOptions = chosenOptions;\n        }\n      } else {\n        if (availableTreeFilteredOptions) {\n          panelOptions = availableOptions.map(function (opt) {\n            return Object.assign({}, opt);\n          }).filter(function (item) {\n            return filterTreeItemsWithoutFolders(item, availableTreeFilteredOptions);\n          });\n        } else {\n          panelOptions = availableOptions;\n        }\n      }\n      var checkedOptionTree = panelOptions.map(function (opt) {\n        return Object.assign({}, opt);\n      }).filter(function (item) {\n        return filterTreeItems(item, [itemData.id]);\n      });\n      var flatTree = flattenTreeWithFolders(checkedOptionTree);\n      var prevChecked = isChosen ? _this.state.chosenTreeOptionsChecked : _this.state.availableTreeOptionsChecked;\n      var updatedChecked = [];\n      if (isChecked) {\n        updatedChecked = prevChecked.concat(flatTree.filter(function (id) {\n          return !prevChecked.includes(id);\n        }));\n      } else {\n        updatedChecked = prevChecked.filter(function (id) {\n          return !flatTree.includes(id);\n        });\n      }\n      _this.setState(function (prevState) {\n        return {\n          availableTreeOptionsChecked: isChosen ? prevState.availableTreeOptionsChecked : updatedChecked,\n          chosenTreeOptionsChecked: isChosen ? updatedChecked : prevState.chosenTreeOptionsChecked\n        };\n      }, function () {\n        _this.props.onOptionCheck && _this.props.onOptionCheck(evt, isChecked, itemData.id, updatedChecked);\n      });\n    };\n    _this.state = {\n      availableOptions: _toConsumableArray(_this.props.availableOptions),\n      availableOptionsSelected: [],\n      availableFilteredOptions: null,\n      availableTreeFilteredOptions: null,\n      chosenOptions: _toConsumableArray(_this.props.chosenOptions),\n      chosenOptionsSelected: [],\n      chosenFilteredOptions: null,\n      chosenTreeFilteredOptions: null,\n      availableTreeOptionsChecked: [],\n      chosenTreeOptionsChecked: []\n    };\n    return _this;\n  }\n  // If the DualListSelector uses trees, concat the two initial arrays and merge duplicate folder IDs\n  _createClass(DualListSelector, [{\n    key: \"createMergedCopy\",\n    value: function createMergedCopy() {\n      var copyOfAvailable = JSON.parse(JSON.stringify(this.props.availableOptions));\n      var copyOfChosen = JSON.parse(JSON.stringify(this.props.chosenOptions));\n      return this.props.isTree ? Object.values(copyOfAvailable.concat(copyOfChosen).reduce(function (mapObj, item) {\n        var key = item.id;\n        if (mapObj[key]) {\n          var _mapObj$key$children;\n          // If map already has an item ID, add the dupe ID's children to the existing map\n          (_mapObj$key$children = mapObj[key].children).push.apply(_mapObj$key$children, _toConsumableArray(item.children));\n        } else {\n          // Else clone the item data\n          mapObj[key] = Object.assign({}, item);\n        }\n        return mapObj;\n      }, {})) : null;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (JSON.stringify(this.props.availableOptions, this.replacer) !== JSON.stringify(this.state.availableOptions, this.replacer) || JSON.stringify(this.props.chosenOptions, this.replacer) !== JSON.stringify(this.state.chosenOptions, this.replacer)) {\n        this.setState({\n          availableOptions: _toConsumableArray(this.props.availableOptions),\n          chosenOptions: _toConsumableArray(this.props.chosenOptions)\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var _a = this.props,\n        availableOptionsTitle = _a.availableOptionsTitle,\n        availableOptionsActions = _a.availableOptionsActions,\n        availableOptionsSearchAriaLabel = _a.availableOptionsSearchAriaLabel,\n        className = _a.className,\n        children = _a.children,\n        chosenOptionsTitle = _a.chosenOptionsTitle,\n        chosenOptionsActions = _a.chosenOptionsActions,\n        chosenOptionsSearchAriaLabel = _a.chosenOptionsSearchAriaLabel,\n        filterOption = _a.filterOption,\n        isSearchable = _a.isSearchable,\n        chosenOptionsStatus = _a.chosenOptionsStatus,\n        availableOptionsStatus = _a.availableOptionsStatus,\n        controlsAriaLabel = _a.controlsAriaLabel,\n        addAllAriaLabel = _a.addAllAriaLabel,\n        addSelectedAriaLabel = _a.addSelectedAriaLabel,\n        removeSelectedAriaLabel = _a.removeSelectedAriaLabel,\n        removeAllAriaLabel = _a.removeAllAriaLabel,\n        consumerPassedAvailableOptions = _a.availableOptions,\n        consumerPassedChosenOptions = _a.chosenOptions,\n        removeSelected = _a.removeSelected,\n        addAll = _a.addAll,\n        removeAll = _a.removeAll,\n        addSelected = _a.addSelected,\n        onListChange = _a.onListChange,\n        onAvailableOptionsSearchInputChanged = _a.onAvailableOptionsSearchInputChanged,\n        onChosenOptionsSearchInputChanged = _a.onChosenOptionsSearchInputChanged,\n        onOptionSelect = _a.onOptionSelect,\n        onOptionCheck = _a.onOptionCheck,\n        id = _a.id,\n        isTree = _a.isTree,\n        isDisabled = _a.isDisabled,\n        addAllTooltip = _a.addAllTooltip,\n        addAllTooltipProps = _a.addAllTooltipProps,\n        addSelectedTooltip = _a.addSelectedTooltip,\n        addSelectedTooltipProps = _a.addSelectedTooltipProps,\n        removeAllTooltip = _a.removeAllTooltip,\n        removeAllTooltipProps = _a.removeAllTooltipProps,\n        removeSelectedTooltip = _a.removeSelectedTooltip,\n        removeSelectedTooltipProps = _a.removeSelectedTooltipProps,\n        props = __rest(_a, [\"availableOptionsTitle\", \"availableOptionsActions\", \"availableOptionsSearchAriaLabel\", \"className\", \"children\", \"chosenOptionsTitle\", \"chosenOptionsActions\", \"chosenOptionsSearchAriaLabel\", \"filterOption\", \"isSearchable\", \"chosenOptionsStatus\", \"availableOptionsStatus\", \"controlsAriaLabel\", \"addAllAriaLabel\", \"addSelectedAriaLabel\", \"removeSelectedAriaLabel\", \"removeAllAriaLabel\", \"availableOptions\", \"chosenOptions\", \"removeSelected\", \"addAll\", \"removeAll\", \"addSelected\", \"onListChange\", \"onAvailableOptionsSearchInputChanged\", \"onChosenOptionsSearchInputChanged\", \"onOptionSelect\", \"onOptionCheck\", \"id\", \"isTree\", \"isDisabled\", \"addAllTooltip\", \"addAllTooltipProps\", \"addSelectedTooltip\", \"addSelectedTooltipProps\", \"removeAllTooltip\", \"removeAllTooltipProps\", \"removeSelectedTooltip\", \"removeSelectedTooltipProps\"]);\n      var _this$state2 = this.state,\n        availableOptions = _this$state2.availableOptions,\n        chosenOptions = _this$state2.chosenOptions,\n        chosenOptionsSelected = _this$state2.chosenOptionsSelected,\n        availableOptionsSelected = _this$state2.availableOptionsSelected,\n        chosenTreeOptionsChecked = _this$state2.chosenTreeOptionsChecked,\n        availableTreeOptionsChecked = _this$state2.availableTreeOptionsChecked;\n      var availableOptionsStatusToDisplay = availableOptionsStatus || (isTree ? \"\".concat(filterFolders(availableOptions, availableTreeOptionsChecked).length, \" of \").concat(flattenTree(availableOptions).length, \" items selected\") : \"\".concat(availableOptionsSelected.length, \" of \").concat(availableOptions.length, \" items selected\"));\n      var chosenOptionsStatusToDisplay = chosenOptionsStatus || (isTree ? \"\".concat(filterFolders(chosenOptions, chosenTreeOptionsChecked).length, \" of \").concat(flattenTree(chosenOptions).length, \" items selected\") : \"\".concat(chosenOptionsSelected.length, \" of \").concat(chosenOptions.length, \" items selected\"));\n      var available = isTree ? availableOptions.map(function (item) {\n        return _this2.mapChecked(item, false);\n      }) : availableOptions;\n      var chosen = isTree ? chosenOptions.map(function (item) {\n        return _this2.mapChecked(item, true);\n      }) : chosenOptions;\n      return React.createElement(DualListSelectorContext.Provider, {\n        value: {\n          isTree: isTree\n        }\n      }, React.createElement(GenerateId, null, function (randomId) {\n        return React.createElement(\"div\", Object.assign({\n          className: css(styles.dualListSelector, className),\n          id: id || randomId\n        }, props), children === '' ? React.createElement(React.Fragment, null, React.createElement(DualListSelectorPane, {\n          isSearchable: isSearchable,\n          onFilterUpdate: _this2.onFilterUpdate,\n          searchInputAriaLabel: availableOptionsSearchAriaLabel,\n          filterOption: filterOption,\n          onSearchInputChanged: onAvailableOptionsSearchInputChanged,\n          status: availableOptionsStatusToDisplay,\n          title: availableOptionsTitle,\n          options: available,\n          selectedOptions: isTree ? availableTreeOptionsChecked : availableOptionsSelected,\n          onOptionSelect: _this2.onOptionSelect,\n          onOptionCheck: function onOptionCheck(e, isChecked, itemData) {\n            return _this2.onTreeOptionCheck(e, isChecked, itemData, false);\n          },\n          actions: availableOptionsActions,\n          id: \"\".concat(id || randomId, \"-available-pane\"),\n          isDisabled: isDisabled\n        }), React.createElement(DualListSelectorControlsWrapper, {\n          \"aria-label\": controlsAriaLabel\n        }, React.createElement(DualListSelectorControl, {\n          isDisabled: (isTree ? availableTreeOptionsChecked.length === 0 : availableOptionsSelected.length === 0) || isDisabled,\n          onClick: isTree ? _this2.addTreeSelected : _this2.addSelected,\n          ref: _this2.addSelectedButtonRef,\n          \"aria-label\": addSelectedAriaLabel,\n          tooltipContent: addSelectedTooltip,\n          tooltipProps: addSelectedTooltipProps\n        }, React.createElement(AngleRightIcon, null)), React.createElement(DualListSelectorControl, {\n          isDisabled: availableOptions.length === 0 || isDisabled,\n          onClick: isTree ? _this2.addAllTreeVisible : _this2.addAllVisible,\n          ref: _this2.addAllButtonRef,\n          \"aria-label\": addAllAriaLabel,\n          tooltipContent: addAllTooltip,\n          tooltipProps: addAllTooltipProps\n        }, React.createElement(AngleDoubleRightIcon, null)), React.createElement(DualListSelectorControl, {\n          isDisabled: chosenOptions.length === 0 || isDisabled,\n          onClick: isTree ? _this2.removeAllTreeVisible : _this2.removeAllVisible,\n          \"aria-label\": removeAllAriaLabel,\n          ref: _this2.removeAllButtonRef,\n          tooltipContent: removeAllTooltip,\n          tooltipProps: removeAllTooltipProps\n        }, React.createElement(AngleDoubleLeftIcon, null)), React.createElement(DualListSelectorControl, {\n          onClick: isTree ? _this2.removeTreeSelected : _this2.removeSelected,\n          isDisabled: (isTree ? chosenTreeOptionsChecked.length === 0 : chosenOptionsSelected.length === 0) || isDisabled,\n          ref: _this2.removeSelectedButtonRef,\n          \"aria-label\": removeSelectedAriaLabel,\n          tooltipContent: removeSelectedTooltip,\n          tooltipProps: removeSelectedTooltipProps\n        }, React.createElement(AngleLeftIcon, null))), React.createElement(DualListSelectorPane, {\n          isChosen: true,\n          isSearchable: isSearchable,\n          onFilterUpdate: _this2.onFilterUpdate,\n          searchInputAriaLabel: chosenOptionsSearchAriaLabel,\n          filterOption: filterOption,\n          onSearchInputChanged: onChosenOptionsSearchInputChanged,\n          title: chosenOptionsTitle,\n          status: chosenOptionsStatusToDisplay,\n          options: chosen,\n          selectedOptions: isTree ? chosenTreeOptionsChecked : chosenOptionsSelected,\n          onOptionSelect: _this2.onOptionSelect,\n          onOptionCheck: function onOptionCheck(e, isChecked, itemData) {\n            return _this2.onTreeOptionCheck(e, isChecked, itemData, true);\n          },\n          actions: chosenOptionsActions,\n          id: \"\".concat(id || randomId, \"-chosen-pane\"),\n          isDisabled: isDisabled\n        })) : children);\n      }));\n    }\n  }]);\n  return DualListSelector;\n}(React.Component);\nDualListSelector.displayName = 'DualListSelector';\nDualListSelector.defaultProps = {\n  children: '',\n  availableOptions: [],\n  availableOptionsTitle: 'Available options',\n  availableOptionsSearchAriaLabel: 'Available search input',\n  chosenOptions: [],\n  chosenOptionsTitle: 'Chosen options',\n  chosenOptionsSearchAriaLabel: 'Chosen search input',\n  controlsAriaLabel: 'Selector controls',\n  addAllAriaLabel: 'Add all',\n  addSelectedAriaLabel: 'Add selected',\n  removeSelectedAriaLabel: 'Remove selected',\n  removeAllAriaLabel: 'Remove all',\n  isTree: false,\n  isDisabled: false\n};","map":{"version":3,"names":["React","styles","css","AngleDoubleLeftIcon","AngleLeftIcon","AngleDoubleRightIcon","AngleRightIcon","DualListSelectorPane","GenerateId","flattenTree","flattenTreeWithFolders","filterFolders","filterTreeItems","filterTreeItemsWithoutFolders","filterRestTreeItems","DualListSelectorControlsWrapper","DualListSelectorControl","DualListSelectorContext","DualListSelector","_React$Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","addAllButtonRef","createRef","addSelectedButtonRef","removeSelectedButtonRef","removeAllButtonRef","replacer","key","value","undefined","onFilterUpdate","newFilteredOptions","paneType","isSearchReset","isTree","setState","availableFilteredOptions","availableTreeFilteredOptions","chosenFilteredOptions","chosenTreeFilteredOptions","addAllVisible","prevState","itemsToRemove","newAvailable","movedOptions","availableOptions","forEach","indexOf","push","newChosen","concat","_toConsumableArray","chosenOptions","addAll","onListChange","chosenOptionsSelected","availableOptionsSelected","addAllTreeVisible","map","opt","Object","assign","filter","item","currChosen","nextChosenOptions","createMergedCopy","availableTreeOptionsChecked","chosenTreeOptionsChecked","addSelected","index","addTreeSelected","removeAllVisible","removeAll","removeAllTreeVisible","currAvailable","nextAvailableOptions","removeSelected","removeTreeSelected","onOptionSelect","e","isChosen","id","itemData","parentData","originalArray","updatedArray","isChecked","treeItem","state","includes","areAllDescendantsChecked","children","every","child","areSomeDescendantsChecked","some","mapChecked","hasCheck","hasPartialCheck","onTreeOptionCheck","evt","_this$state","panelOptions","checkedOptionTree","flatTree","prevChecked","updatedChecked","onOptionCheck","_createClass","copyOfAvailable","JSON","parse","stringify","copyOfChosen","values","reduce","mapObj","_mapObj$key$children","apply","componentDidUpdate","render","_this2","_a","availableOptionsTitle","availableOptionsActions","availableOptionsSearchAriaLabel","className","chosenOptionsTitle","chosenOptionsActions","chosenOptionsSearchAriaLabel","filterOption","isSearchable","chosenOptionsStatus","availableOptionsStatus","controlsAriaLabel","addAllAriaLabel","addSelectedAriaLabel","removeSelectedAriaLabel","removeAllAriaLabel","consumerPassedAvailableOptions","consumerPassedChosenOptions","onAvailableOptionsSearchInputChanged","onChosenOptionsSearchInputChanged","isDisabled","addAllTooltip","addAllTooltipProps","addSelectedTooltip","addSelectedTooltipProps","removeAllTooltip","removeAllTooltipProps","removeSelectedTooltip","removeSelectedTooltipProps","__rest","_this$state2","availableOptionsStatusToDisplay","length","chosenOptionsStatusToDisplay","available","chosen","createElement","Provider","randomId","dualListSelector","Fragment","searchInputAriaLabel","onSearchInputChanged","status","title","options","selectedOptions","actions","onClick","ref","tooltipContent","tooltipProps","Component","displayName","defaultProps"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@patternfly/react-core/src/components/DualListSelector/DualListSelector.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { css } from '@patternfly/react-styles';\nimport AngleDoubleLeftIcon from '@patternfly/react-icons/dist/esm/icons/angle-double-left-icon';\nimport AngleLeftIcon from '@patternfly/react-icons/dist/esm/icons/angle-left-icon';\nimport AngleDoubleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-double-right-icon';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { DualListSelectorPane } from './DualListSelectorPane';\nimport { GenerateId, PickOptional } from '../../helpers';\nimport { DualListSelectorTreeItemData } from './DualListSelectorTree';\nimport {\n  flattenTree,\n  flattenTreeWithFolders,\n  filterFolders,\n  filterTreeItems,\n  filterTreeItemsWithoutFolders,\n  filterRestTreeItems\n} from './treeUtils';\nimport { DualListSelectorControlsWrapper } from './DualListSelectorControlsWrapper';\nimport { DualListSelectorControl } from './DualListSelectorControl';\nimport { DualListSelectorContext } from './DualListSelectorContext';\n\n/** Acts as a container for all other DualListSelector sub-components when using a\n * composable dual list selector.\n */\n\nexport interface DualListSelectorProps {\n  /** Additional classes applied to the dual list selector. */\n  className?: string;\n  /** Id of the dual list selector. */\n  id?: string;\n  /** Flag indicating if the dual list selector uses trees instead of simple lists */\n  isTree?: boolean;\n  /** Flag indicating if the dual list selector is in a disabled state */\n  isDisabled?: boolean;\n  /** Content to be rendered in the dual list selector. Panes & controls will not be built dynamically when children are provided. */\n  children?: React.ReactNode;\n  /** Title applied to the dynamically built available options pane. */\n  availableOptionsTitle?: string;\n  /** Options to display in the dynamically built available options pane. When using trees, the options should be in the DualListSelectorTreeItemData[] format. */\n  availableOptions?: React.ReactNode[] | DualListSelectorTreeItemData[];\n  /** Status message to display above the dynamically built available options pane. */\n  availableOptionsStatus?: string;\n  /** Actions to be displayed above the dynamically built available options pane. */\n  availableOptionsActions?: React.ReactNode[];\n  /** Title applied to the dynamically built chosen options pane. */\n  chosenOptionsTitle?: string;\n  /** Options to display in the dynamically built chosen options pane. When using trees, the options should be in the DualListSelectorTreeItemData[] format. */\n  chosenOptions?: React.ReactNode[] | DualListSelectorTreeItemData[];\n  /** Status message to display above the dynamically built chosen options pane.*/\n  chosenOptionsStatus?: string;\n  /** Actions to be displayed above the dynamically built chosen options pane. */\n  chosenOptionsActions?: React.ReactNode[];\n  /** Accessible label for the dynamically built controls between the two panes. */\n  controlsAriaLabel?: string;\n  /** Optional callback for the dynamically built add selected button */\n  addSelected?: (newAvailableOptions: React.ReactNode[], newChosenOptions: React.ReactNode[]) => void;\n  /** Accessible label for the dynamically built add selected button */\n  addSelectedAriaLabel?: string;\n  /** Tooltip content for the dynamically built add selected button */\n  addSelectedTooltip?: React.ReactNode;\n  /** Additonal tooltip properties for the dynamically built add selected tooltip */\n  addSelectedTooltipProps?: any;\n  /** Callback fired every time dynamically built options are chosen or removed */\n  onListChange?: (newAvailableOptions: React.ReactNode[], newChosenOptions: React.ReactNode[]) => void;\n  /** Optional callback for the dynamically built add all button */\n  addAll?: (newAvailableOptions: React.ReactNode[], newChosenOptions: React.ReactNode[]) => void;\n  /** Accessible label for the dynamically built add all button */\n  addAllAriaLabel?: string;\n  /** Tooltip content for the dynamically built add all button */\n  addAllTooltip?: React.ReactNode;\n  /** Additonal tooltip properties for the dynamically built add all tooltip */\n  addAllTooltipProps?: any;\n  /** Optional callback for the dynamically built remove selected button */\n  removeSelected?: (newAvailableOptions: React.ReactNode[], newChosenOptions: React.ReactNode[]) => void;\n  /** Accessible label for the dynamically built remove selected button */\n  removeSelectedAriaLabel?: string;\n  /** Tooltip content for the dynamically built remove selected button */\n  removeSelectedTooltip?: React.ReactNode;\n  /** Additonal tooltip properties for the dynamically built remove selected tooltip  */\n  removeSelectedTooltipProps?: any;\n  /** Optional callback for the dynamically built remove all button */\n  removeAll?: (newAvailableOptions: React.ReactNode[], newChosenOptions: React.ReactNode[]) => void;\n  /** Accessible label for the dynamically built remove all button */\n  removeAllAriaLabel?: string;\n  /** Tooltip content for the dynamically built remove all button */\n  removeAllTooltip?: React.ReactNode;\n  /** Additonal tooltip properties for the dynamically built remove all tooltip */\n  removeAllTooltipProps?: any;\n  /** Optional callback fired when a dynamically built option is selected */\n  onOptionSelect?: (\n    e: React.MouseEvent | React.ChangeEvent | React.KeyboardEvent,\n    index: number,\n    isChosen: boolean,\n    id: string,\n    itemData: any,\n    parentData: any\n  ) => void;\n  /** Optional callback fired when a dynamically built option is checked */\n  onOptionCheck?: (\n    e: React.MouseEvent | React.ChangeEvent<HTMLInputElement> | React.KeyboardEvent,\n    checked: boolean,\n    checkedId: string,\n    newCheckedItems: string[]\n  ) => void;\n  /** Flag indicating a search bar should be included above both the dynamically built available and chosen panes. */\n  isSearchable?: boolean;\n  /** Accessible label for the search input on the dynamically built available options pane. */\n  availableOptionsSearchAriaLabel?: string;\n  /** A callback for when the search input value for the dynamically built available options changes. */\n  onAvailableOptionsSearchInputChanged?: (value: string, event: React.FormEvent<HTMLInputElement>) => void;\n  /** Accessible label for the search input on the dynamically built chosen options pane. */\n  chosenOptionsSearchAriaLabel?: string;\n  /** A callback for when the search input value for the dynamically built chosen options changes. */\n  onChosenOptionsSearchInputChanged?: (value: string, event: React.FormEvent<HTMLInputElement>) => void;\n  /** Optional filter function for custom filtering based on search string. Used with a dynamically built search input. */\n  filterOption?: (option: React.ReactNode, input: string) => boolean;\n}\n\ninterface DualListSelectorState {\n  availableOptions: React.ReactNode[];\n  availableOptionsSelected: number[];\n  availableFilteredOptions: React.ReactNode[];\n  chosenOptions: React.ReactNode[];\n  chosenOptionsSelected: number[];\n  chosenFilteredOptions: React.ReactNode[];\n  availableTreeFilteredOptions: string[];\n  availableTreeOptionsChecked: string[];\n  chosenTreeOptionsChecked: string[];\n  chosenTreeFilteredOptions: string[];\n}\n\nexport class DualListSelector extends React.Component<DualListSelectorProps, DualListSelectorState> {\n  static displayName = 'DualListSelector';\n  private addAllButtonRef = React.createRef<HTMLButtonElement>();\n  private addSelectedButtonRef = React.createRef<HTMLButtonElement>();\n  private removeSelectedButtonRef = React.createRef<HTMLButtonElement>();\n  private removeAllButtonRef = React.createRef<HTMLButtonElement>();\n  static defaultProps: PickOptional<DualListSelectorProps> = {\n    children: '',\n    availableOptions: [],\n    availableOptionsTitle: 'Available options',\n    availableOptionsSearchAriaLabel: 'Available search input',\n    chosenOptions: [],\n    chosenOptionsTitle: 'Chosen options',\n    chosenOptionsSearchAriaLabel: 'Chosen search input',\n    controlsAriaLabel: 'Selector controls',\n    addAllAriaLabel: 'Add all',\n    addSelectedAriaLabel: 'Add selected',\n    removeSelectedAriaLabel: 'Remove selected',\n    removeAllAriaLabel: 'Remove all',\n    isTree: false,\n    isDisabled: false\n  };\n\n  // If the DualListSelector uses trees, concat the two initial arrays and merge duplicate folder IDs\n  private createMergedCopy() {\n    const copyOfAvailable = JSON.parse(JSON.stringify(this.props.availableOptions));\n    const copyOfChosen = JSON.parse(JSON.stringify(this.props.chosenOptions));\n\n    return this.props.isTree\n      ? Object.values(\n          (copyOfAvailable as DualListSelectorTreeItemData[])\n            .concat(copyOfChosen as DualListSelectorTreeItemData[])\n            .reduce((mapObj: any, item: DualListSelectorTreeItemData) => {\n              const key = item.id;\n              if (mapObj[key]) {\n                // If map already has an item ID, add the dupe ID's children to the existing map\n                mapObj[key].children.push(...item.children);\n              } else {\n                // Else clone the item data\n                mapObj[key] = { ...item };\n              }\n              return mapObj;\n            }, {})\n        )\n      : null;\n  }\n\n  constructor(props: DualListSelectorProps) {\n    super(props);\n    this.state = {\n      availableOptions: [...this.props.availableOptions] as React.ReactNode[],\n      availableOptionsSelected: [],\n      availableFilteredOptions: null,\n      availableTreeFilteredOptions: null,\n      chosenOptions: [...this.props.chosenOptions] as React.ReactNode[],\n      chosenOptionsSelected: [],\n      chosenFilteredOptions: null,\n      chosenTreeFilteredOptions: null,\n      availableTreeOptionsChecked: [],\n      chosenTreeOptionsChecked: []\n    };\n  }\n\n  /** In dev environment, prevents circular structure during JSON stringification when\n   * options passed in to the dual list selector include HTML elements.\n   */\n  replacer = (key: string, value: any) => {\n    if (key[0] === '_') {\n      return undefined;\n    }\n    return value;\n  };\n\n  componentDidUpdate() {\n    if (\n      JSON.stringify(this.props.availableOptions, this.replacer) !==\n        JSON.stringify(this.state.availableOptions, this.replacer) ||\n      JSON.stringify(this.props.chosenOptions, this.replacer) !==\n        JSON.stringify(this.state.chosenOptions, this.replacer)\n    ) {\n      this.setState({\n        availableOptions: [...this.props.availableOptions] as React.ReactNode[],\n        chosenOptions: [...this.props.chosenOptions] as React.ReactNode[]\n      });\n    }\n  }\n\n  onFilterUpdate = (newFilteredOptions: React.ReactNode[], paneType: string, isSearchReset: boolean) => {\n    const { isTree } = this.props;\n    if (paneType === 'available') {\n      if (isSearchReset) {\n        this.setState({\n          availableFilteredOptions: null,\n          availableTreeFilteredOptions: null\n        });\n        return;\n      }\n      if (isTree) {\n        this.setState({\n          availableTreeFilteredOptions: flattenTreeWithFolders(\n            (newFilteredOptions as unknown) as DualListSelectorTreeItemData[]\n          )\n        });\n      } else {\n        this.setState({\n          availableFilteredOptions: newFilteredOptions as React.ReactNode[]\n        });\n      }\n    } else if (paneType === 'chosen') {\n      if (isSearchReset) {\n        this.setState({\n          chosenFilteredOptions: null,\n          chosenTreeFilteredOptions: null\n        });\n        return;\n      }\n      if (isTree) {\n        this.setState({\n          chosenTreeFilteredOptions: flattenTreeWithFolders(\n            (newFilteredOptions as unknown) as DualListSelectorTreeItemData[]\n          )\n        });\n      } else {\n        this.setState({\n          chosenFilteredOptions: newFilteredOptions as React.ReactNode[]\n        });\n      }\n    }\n  };\n\n  addAllVisible = () => {\n    this.setState(prevState => {\n      const itemsToRemove = [] as React.ReactNode[];\n      const newAvailable = [] as React.ReactNode[];\n      const movedOptions = prevState.availableFilteredOptions || prevState.availableOptions;\n      prevState.availableOptions.forEach(value => {\n        if (movedOptions.indexOf(value) !== -1) {\n          itemsToRemove.push(value);\n        } else {\n          newAvailable.push(value);\n        }\n      });\n\n      const newChosen = [...prevState.chosenOptions, ...itemsToRemove];\n      this.props.addAll && this.props.addAll(newAvailable, newChosen);\n      this.props.onListChange && this.props.onListChange(newAvailable, newChosen);\n\n      return {\n        chosenOptions: newChosen,\n        chosenFilteredOptions: newChosen,\n        availableOptions: newAvailable,\n        availableFilteredOptions: newAvailable,\n        chosenOptionsSelected: [],\n        availableOptionsSelected: []\n      };\n    });\n  };\n\n  addAllTreeVisible = () => {\n    this.setState(prevState => {\n      const movedOptions =\n        prevState.availableTreeFilteredOptions ||\n        flattenTreeWithFolders((prevState.availableOptions as unknown) as DualListSelectorTreeItemData[]);\n      const newAvailable = prevState.availableOptions\n        .map(opt => Object.assign({}, opt))\n        .filter(item =>\n          filterRestTreeItems((item as unknown) as DualListSelectorTreeItemData, movedOptions)\n        ) as React.ReactNode[];\n\n      const currChosen = flattenTree((prevState.chosenOptions as unknown) as DualListSelectorTreeItemData[]);\n      const nextChosenOptions = currChosen.concat(movedOptions);\n      const newChosen = this.createMergedCopy()\n        .map(opt => Object.assign({}, opt))\n        .filter(item =>\n          filterTreeItemsWithoutFolders(item as DualListSelectorTreeItemData, nextChosenOptions)\n        ) as React.ReactNode[];\n\n      this.props.addAll && this.props.addAll(newAvailable, newChosen);\n      this.props.onListChange && this.props.onListChange(newAvailable, newChosen);\n\n      return {\n        chosenOptions: newChosen,\n        chosenFilteredOptions: newChosen,\n        availableOptions: newAvailable,\n        availableFilteredOptions: newAvailable,\n        availableTreeOptionsChecked: [],\n        chosenTreeOptionsChecked: []\n      };\n    });\n  };\n\n  addSelected = () => {\n    this.setState(prevState => {\n      const itemsToRemove = [] as React.ReactNode[];\n      const newAvailable = [] as React.ReactNode[];\n      prevState.availableOptions.forEach((value, index) => {\n        if (prevState.availableOptionsSelected.indexOf(index) !== -1) {\n          itemsToRemove.push(value);\n        } else {\n          newAvailable.push(value);\n        }\n      });\n\n      const newChosen = [...prevState.chosenOptions, ...itemsToRemove];\n      this.props.addSelected && this.props.addSelected(newAvailable, newChosen);\n      this.props.onListChange && this.props.onListChange(newAvailable, newChosen);\n\n      return {\n        chosenOptionsSelected: [],\n        availableOptionsSelected: [],\n        chosenOptions: newChosen,\n        chosenFilteredOptions: newChosen,\n        availableOptions: newAvailable,\n        availableFilteredOptions: newAvailable\n      };\n    });\n  };\n\n  addTreeSelected = () => {\n    this.setState(prevState => {\n      // Remove selected available nodes from current available nodes\n      const newAvailable = prevState.availableOptions\n        .map(opt => Object.assign({}, opt))\n        .filter(item =>\n          filterRestTreeItems((item as unknown) as DualListSelectorTreeItemData, prevState.availableTreeOptionsChecked)\n        );\n\n      // Get next chosen options from current + new nodes and remap from base\n      const currChosen = flattenTree((prevState.chosenOptions as unknown) as DualListSelectorTreeItemData[]);\n      const nextChosenOptions = currChosen.concat(prevState.availableTreeOptionsChecked);\n      const newChosen = this.createMergedCopy()\n        .map(opt => Object.assign({}, opt))\n        .filter(item =>\n          filterTreeItemsWithoutFolders(item as DualListSelectorTreeItemData, nextChosenOptions)\n        ) as React.ReactNode[];\n\n      this.props.addSelected && this.props.addSelected(newAvailable, newChosen);\n      this.props.onListChange && this.props.onListChange(newAvailable, newChosen);\n\n      return {\n        availableTreeOptionsChecked: [],\n        chosenTreeOptionsChecked: [],\n        availableOptions: newAvailable,\n        chosenOptions: newChosen\n      };\n    });\n  };\n\n  removeAllVisible = () => {\n    this.setState(prevState => {\n      const itemsToRemove = [] as React.ReactNode[];\n      const newChosen = [] as React.ReactNode[];\n      const movedOptions = prevState.chosenFilteredOptions || prevState.chosenOptions;\n      prevState.chosenOptions.forEach(value => {\n        if (movedOptions.indexOf(value) !== -1) {\n          itemsToRemove.push(value);\n        } else {\n          newChosen.push(value);\n        }\n      });\n\n      const newAvailable = [...prevState.availableOptions, ...itemsToRemove];\n      this.props.removeAll && this.props.removeAll(newAvailable, newChosen);\n      this.props.onListChange && this.props.onListChange(newAvailable, newChosen);\n\n      return {\n        chosenOptions: newChosen,\n        chosenFilteredOptions: newChosen,\n        availableOptions: newAvailable,\n        availableFilteredOptions: newAvailable,\n        chosenOptionsSelected: [],\n        availableOptionsSelected: []\n      };\n    });\n  };\n\n  removeAllTreeVisible = () => {\n    this.setState(prevState => {\n      const movedOptions =\n        prevState.chosenTreeFilteredOptions ||\n        flattenTreeWithFolders((prevState.chosenOptions as unknown) as DualListSelectorTreeItemData[]);\n\n      const newChosen = prevState.chosenOptions\n        .map(opt => Object.assign({}, opt))\n        .filter(item => filterRestTreeItems((item as unknown) as DualListSelectorTreeItemData, movedOptions));\n      const currAvailable = flattenTree((prevState.availableOptions as unknown) as DualListSelectorTreeItemData[]);\n      const nextAvailableOptions = currAvailable.concat(movedOptions);\n      const newAvailable = this.createMergedCopy()\n        .map(opt => Object.assign({}, opt))\n        .filter(item =>\n          filterTreeItemsWithoutFolders(item as DualListSelectorTreeItemData, nextAvailableOptions)\n        ) as React.ReactNode[];\n\n      this.props.removeAll && this.props.removeAll(newAvailable, newChosen);\n      this.props.onListChange && this.props.onListChange(newAvailable, newChosen);\n\n      return {\n        chosenOptions: newChosen,\n        availableOptions: newAvailable,\n        availableTreeOptionsChecked: [],\n        chosenTreeOptionsChecked: []\n      };\n    });\n  };\n\n  removeSelected = () => {\n    this.setState(prevState => {\n      const itemsToRemove = [] as React.ReactNode[];\n      const newChosen = [] as React.ReactNode[];\n      prevState.chosenOptions.forEach((value, index) => {\n        if (prevState.chosenOptionsSelected.indexOf(index) !== -1) {\n          itemsToRemove.push(value);\n        } else {\n          newChosen.push(value);\n        }\n      });\n\n      const newAvailable = [...prevState.availableOptions, ...itemsToRemove];\n      this.props.removeSelected && this.props.removeSelected(newAvailable, newChosen);\n      this.props.onListChange && this.props.onListChange(newAvailable, newChosen);\n\n      return {\n        chosenOptionsSelected: [],\n        availableOptionsSelected: [],\n        chosenOptions: newChosen,\n        chosenFilteredOptions: newChosen,\n        availableOptions: newAvailable,\n        availableFilteredOptions: newAvailable\n      };\n    });\n  };\n\n  removeTreeSelected = () => {\n    this.setState(prevState => {\n      // Remove selected chosen nodes from current chosen nodes\n      const newChosen = prevState.chosenOptions\n        .map(opt => Object.assign({}, opt))\n        .filter(item =>\n          filterRestTreeItems((item as unknown) as DualListSelectorTreeItemData, prevState.chosenTreeOptionsChecked)\n        );\n\n      // Get next chosen options from current and remap from base\n      const currAvailable = flattenTree((prevState.availableOptions as unknown) as DualListSelectorTreeItemData[]);\n      const nextAvailableOptions = currAvailable.concat(prevState.chosenTreeOptionsChecked);\n      const newAvailable = this.createMergedCopy()\n        .map(opt => Object.assign({}, opt))\n        .filter(item =>\n          filterTreeItemsWithoutFolders(item as DualListSelectorTreeItemData, nextAvailableOptions)\n        ) as React.ReactNode[];\n\n      this.props.removeSelected && this.props.removeSelected(newAvailable, newChosen);\n      this.props.onListChange && this.props.onListChange(newAvailable, newChosen);\n\n      return {\n        availableTreeOptionsChecked: [],\n        chosenTreeOptionsChecked: [],\n        availableOptions: newAvailable,\n        chosenOptions: newChosen\n      };\n    });\n  };\n\n  onOptionSelect = (\n    e: React.MouseEvent | React.ChangeEvent | React.KeyboardEvent,\n    index: number,\n    isChosen: boolean,\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    id?: string,\n    itemData?: any,\n    parentData?: any\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ) => {\n    this.setState(prevState => {\n      const originalArray = isChosen ? prevState.chosenOptionsSelected : prevState.availableOptionsSelected;\n\n      let updatedArray = null;\n      if (originalArray.indexOf(index) !== -1) {\n        updatedArray = originalArray.filter(value => value !== index);\n      } else {\n        updatedArray = [...originalArray, index];\n      }\n\n      return {\n        chosenOptionsSelected: isChosen ? updatedArray : prevState.chosenOptionsSelected,\n        availableOptionsSelected: isChosen ? prevState.availableOptionsSelected : updatedArray\n      };\n    });\n\n    this.props.onOptionSelect && this.props.onOptionSelect(e, index, isChosen, id, itemData, parentData);\n  };\n\n  isChecked = (treeItem: DualListSelectorTreeItemData, isChosen: boolean) =>\n    isChosen\n      ? this.state.chosenTreeOptionsChecked.includes(treeItem.id)\n      : this.state.availableTreeOptionsChecked.includes(treeItem.id);\n  areAllDescendantsChecked = (treeItem: DualListSelectorTreeItemData, isChosen: boolean): boolean =>\n    treeItem.children\n      ? treeItem.children.every(child => this.areAllDescendantsChecked(child, isChosen))\n      : this.isChecked(treeItem, isChosen);\n  areSomeDescendantsChecked = (treeItem: DualListSelectorTreeItemData, isChosen: boolean): boolean =>\n    treeItem.children\n      ? treeItem.children.some(child => this.areSomeDescendantsChecked(child, isChosen))\n      : this.isChecked(treeItem, isChosen);\n\n  mapChecked = (item: DualListSelectorTreeItemData, isChosen: boolean): DualListSelectorTreeItemData => {\n    const hasCheck = this.areAllDescendantsChecked(item, isChosen);\n    item.isChecked = false;\n\n    if (hasCheck) {\n      item.isChecked = true;\n    } else {\n      const hasPartialCheck = this.areSomeDescendantsChecked(item, isChosen);\n      if (hasPartialCheck) {\n        item.isChecked = null;\n      }\n    }\n\n    if (item.children) {\n      return {\n        ...item,\n        children: item.children.map(child => this.mapChecked(child, isChosen))\n      };\n    }\n    return item;\n  };\n\n  onTreeOptionCheck = (\n    evt: React.MouseEvent | React.ChangeEvent<HTMLInputElement> | React.KeyboardEvent,\n    isChecked: boolean,\n    itemData: DualListSelectorTreeItemData,\n    isChosen: boolean\n  ) => {\n    const { availableOptions, availableTreeFilteredOptions, chosenOptions, chosenTreeFilteredOptions } = this.state;\n    let panelOptions;\n    if (isChosen) {\n      if (chosenTreeFilteredOptions) {\n        panelOptions = chosenOptions\n          .map(opt => Object.assign({}, opt))\n          .filter(item =>\n            filterTreeItemsWithoutFolders((item as unknown) as DualListSelectorTreeItemData, chosenTreeFilteredOptions)\n          );\n      } else {\n        panelOptions = chosenOptions;\n      }\n    } else {\n      if (availableTreeFilteredOptions) {\n        panelOptions = availableOptions\n          .map(opt => Object.assign({}, opt))\n          .filter(item =>\n            filterTreeItemsWithoutFolders(\n              (item as unknown) as DualListSelectorTreeItemData,\n              availableTreeFilteredOptions\n            )\n          );\n      } else {\n        panelOptions = availableOptions;\n      }\n    }\n    const checkedOptionTree = panelOptions\n      .map(opt => Object.assign({}, opt))\n      .filter(item => filterTreeItems((item as unknown) as DualListSelectorTreeItemData, [itemData.id]));\n    const flatTree = flattenTreeWithFolders((checkedOptionTree as unknown) as DualListSelectorTreeItemData[]);\n\n    const prevChecked = isChosen ? this.state.chosenTreeOptionsChecked : this.state.availableTreeOptionsChecked;\n    let updatedChecked = [] as string[];\n    if (isChecked) {\n      updatedChecked = prevChecked.concat(flatTree.filter(id => !prevChecked.includes(id)));\n    } else {\n      updatedChecked = prevChecked.filter(id => !flatTree.includes(id));\n    }\n\n    this.setState(\n      prevState => ({\n        availableTreeOptionsChecked: isChosen ? prevState.availableTreeOptionsChecked : updatedChecked,\n        chosenTreeOptionsChecked: isChosen ? updatedChecked : prevState.chosenTreeOptionsChecked\n      }),\n      () => {\n        this.props.onOptionCheck && this.props.onOptionCheck(evt, isChecked, itemData.id, updatedChecked);\n      }\n    );\n  };\n\n  render() {\n    const {\n      availableOptionsTitle,\n      availableOptionsActions,\n      availableOptionsSearchAriaLabel,\n      className,\n      children,\n      chosenOptionsTitle,\n      chosenOptionsActions,\n      chosenOptionsSearchAriaLabel,\n      filterOption,\n      isSearchable,\n      chosenOptionsStatus,\n      availableOptionsStatus,\n      controlsAriaLabel,\n      addAllAriaLabel,\n      addSelectedAriaLabel,\n      removeSelectedAriaLabel,\n      removeAllAriaLabel,\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      availableOptions: consumerPassedAvailableOptions,\n      chosenOptions: consumerPassedChosenOptions,\n      removeSelected,\n      addAll,\n      removeAll,\n      addSelected,\n      onListChange,\n      onAvailableOptionsSearchInputChanged,\n      onChosenOptionsSearchInputChanged,\n      onOptionSelect,\n      onOptionCheck,\n      id,\n      isTree,\n      isDisabled,\n      addAllTooltip,\n      addAllTooltipProps,\n      addSelectedTooltip,\n      addSelectedTooltipProps,\n      removeAllTooltip,\n      removeAllTooltipProps,\n      removeSelectedTooltip,\n      removeSelectedTooltipProps,\n      ...props\n    } = this.props;\n    const {\n      availableOptions,\n      chosenOptions,\n      chosenOptionsSelected,\n      availableOptionsSelected,\n      chosenTreeOptionsChecked,\n      availableTreeOptionsChecked\n    } = this.state;\n    const availableOptionsStatusToDisplay =\n      availableOptionsStatus ||\n      (isTree\n        ? `${\n            filterFolders((availableOptions as unknown) as DualListSelectorTreeItemData[], availableTreeOptionsChecked)\n              .length\n          } of ${flattenTree((availableOptions as unknown) as DualListSelectorTreeItemData[]).length} items selected`\n        : `${availableOptionsSelected.length} of ${availableOptions.length} items selected`);\n    const chosenOptionsStatusToDisplay =\n      chosenOptionsStatus ||\n      (isTree\n        ? `${\n            filterFolders((chosenOptions as unknown) as DualListSelectorTreeItemData[], chosenTreeOptionsChecked).length\n          } of ${flattenTree((chosenOptions as unknown) as DualListSelectorTreeItemData[]).length} items selected`\n        : `${chosenOptionsSelected.length} of ${chosenOptions.length} items selected`);\n\n    const available = (isTree\n      ? availableOptions.map(item => this.mapChecked((item as unknown) as DualListSelectorTreeItemData, false))\n      : availableOptions) as React.ReactNode[];\n    const chosen = (isTree\n      ? chosenOptions.map(item => this.mapChecked((item as unknown) as DualListSelectorTreeItemData, true))\n      : chosenOptions) as React.ReactNode[];\n\n    return (\n      <DualListSelectorContext.Provider value={{ isTree }}>\n        <GenerateId>\n          {randomId => (\n            <div className={css(styles.dualListSelector, className)} id={id || randomId} {...props}>\n              {children === '' ? (\n                <>\n                  <DualListSelectorPane\n                    isSearchable={isSearchable}\n                    onFilterUpdate={this.onFilterUpdate}\n                    searchInputAriaLabel={availableOptionsSearchAriaLabel}\n                    filterOption={filterOption}\n                    onSearchInputChanged={onAvailableOptionsSearchInputChanged}\n                    status={availableOptionsStatusToDisplay}\n                    title={availableOptionsTitle}\n                    options={available}\n                    selectedOptions={isTree ? availableTreeOptionsChecked : availableOptionsSelected}\n                    onOptionSelect={this.onOptionSelect}\n                    onOptionCheck={(e, isChecked, itemData) => this.onTreeOptionCheck(e, isChecked, itemData, false)}\n                    actions={availableOptionsActions}\n                    id={`${id || randomId}-available-pane`}\n                    isDisabled={isDisabled}\n                  />\n                  <DualListSelectorControlsWrapper aria-label={controlsAriaLabel}>\n                    <DualListSelectorControl\n                      isDisabled={\n                        (isTree ? availableTreeOptionsChecked.length === 0 : availableOptionsSelected.length === 0) ||\n                        isDisabled\n                      }\n                      onClick={isTree ? this.addTreeSelected : this.addSelected}\n                      ref={this.addSelectedButtonRef}\n                      aria-label={addSelectedAriaLabel}\n                      tooltipContent={addSelectedTooltip}\n                      tooltipProps={addSelectedTooltipProps}\n                    >\n                      <AngleRightIcon />\n                    </DualListSelectorControl>\n                    <DualListSelectorControl\n                      isDisabled={availableOptions.length === 0 || isDisabled}\n                      onClick={isTree ? this.addAllTreeVisible : this.addAllVisible}\n                      ref={this.addAllButtonRef}\n                      aria-label={addAllAriaLabel}\n                      tooltipContent={addAllTooltip}\n                      tooltipProps={addAllTooltipProps}\n                    >\n                      <AngleDoubleRightIcon />\n                    </DualListSelectorControl>\n                    <DualListSelectorControl\n                      isDisabled={chosenOptions.length === 0 || isDisabled}\n                      onClick={isTree ? this.removeAllTreeVisible : this.removeAllVisible}\n                      aria-label={removeAllAriaLabel}\n                      ref={this.removeAllButtonRef}\n                      tooltipContent={removeAllTooltip}\n                      tooltipProps={removeAllTooltipProps}\n                    >\n                      <AngleDoubleLeftIcon />\n                    </DualListSelectorControl>\n                    <DualListSelectorControl\n                      onClick={isTree ? this.removeTreeSelected : this.removeSelected}\n                      isDisabled={\n                        (isTree ? chosenTreeOptionsChecked.length === 0 : chosenOptionsSelected.length === 0) ||\n                        isDisabled\n                      }\n                      ref={this.removeSelectedButtonRef}\n                      aria-label={removeSelectedAriaLabel}\n                      tooltipContent={removeSelectedTooltip}\n                      tooltipProps={removeSelectedTooltipProps}\n                    >\n                      <AngleLeftIcon />\n                    </DualListSelectorControl>\n                  </DualListSelectorControlsWrapper>\n                  <DualListSelectorPane\n                    isChosen\n                    isSearchable={isSearchable}\n                    onFilterUpdate={this.onFilterUpdate}\n                    searchInputAriaLabel={chosenOptionsSearchAriaLabel}\n                    filterOption={filterOption}\n                    onSearchInputChanged={onChosenOptionsSearchInputChanged}\n                    title={chosenOptionsTitle}\n                    status={chosenOptionsStatusToDisplay}\n                    options={chosen}\n                    selectedOptions={isTree ? chosenTreeOptionsChecked : chosenOptionsSelected}\n                    onOptionSelect={this.onOptionSelect}\n                    onOptionCheck={(e, isChecked, itemData) => this.onTreeOptionCheck(e, isChecked, itemData, true)}\n                    actions={chosenOptionsActions}\n                    id={`${id || randomId}-chosen-pane`}\n                    isDisabled={isDisabled}\n                  />\n                </>\n              ) : (\n                children\n              )}\n            </div>\n          )}\n        </GenerateId>\n      </DualListSelectorContext.Provider>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}