{"ast":null,"code":"import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/OptionsMenu/options-menu';\nimport { css } from '@patternfly/react-styles';\nimport { fillTemplate } from '../../helpers';\nimport { DropdownToggle } from '../Dropdown';\nexport var OptionsToggle = function OptionsToggle(_ref) {\n  var _ref$itemsTitle = _ref.itemsTitle,\n    itemsTitle = _ref$itemsTitle === void 0 ? 'items' : _ref$itemsTitle,\n    optionsToggle = _ref.optionsToggle,\n    _ref$itemsPerPageTitl = _ref.itemsPerPageTitle,\n    itemsPerPageTitle = _ref$itemsPerPageTitl === void 0 ? 'Items per page' : _ref$itemsPerPageTitl,\n    _ref$ofWord = _ref.ofWord,\n    ofWord = _ref$ofWord === void 0 ? 'of' : _ref$ofWord,\n    _ref$firstIndex = _ref.firstIndex,\n    firstIndex = _ref$firstIndex === void 0 ? 0 : _ref$firstIndex,\n    _ref$lastIndex = _ref.lastIndex,\n    lastIndex = _ref$lastIndex === void 0 ? 0 : _ref$lastIndex,\n    itemCount = _ref.itemCount,\n    _ref$widgetId = _ref.widgetId,\n    widgetId = _ref$widgetId === void 0 ? '' : _ref$widgetId,\n    _ref$showToggle = _ref.showToggle,\n    showToggle = _ref$showToggle === void 0 ? true : _ref$showToggle,\n    _ref$onToggle = _ref.onToggle,\n    onToggle = _ref$onToggle === void 0 ? function (_isOpen) {\n      return undefined;\n    } : _ref$onToggle,\n    _ref$isOpen = _ref.isOpen,\n    isOpen = _ref$isOpen === void 0 ? false : _ref$isOpen,\n    _ref$isDisabled = _ref.isDisabled,\n    isDisabled = _ref$isDisabled === void 0 ? false : _ref$isDisabled,\n    _ref$parentRef = _ref.parentRef,\n    parentRef = _ref$parentRef === void 0 ? null : _ref$parentRef,\n    ToggleTemplate = _ref.toggleTemplate,\n    _ref$onEnter = _ref.onEnter,\n    onEnter = _ref$onEnter === void 0 ? null : _ref$onEnter,\n    _ref$perPageComponent = _ref.perPageComponent,\n    perPageComponent = _ref$perPageComponent === void 0 ? 'div' : _ref$perPageComponent;\n  var isDiv = perPageComponent === 'div';\n  var toggleClasses = css(styles.optionsMenuToggle, isDisabled && styles.modifiers.disabled, styles.modifiers.plain, styles.modifiers.text);\n  var template = typeof ToggleTemplate === 'string' ? fillTemplate(ToggleTemplate, {\n    firstIndex: firstIndex,\n    lastIndex: lastIndex,\n    ofWord: ofWord,\n    itemCount: itemCount,\n    itemsTitle: itemsTitle\n  }) : React.createElement(ToggleTemplate, {\n    firstIndex: firstIndex,\n    lastIndex: lastIndex,\n    ofWord: ofWord,\n    itemCount: itemCount,\n    itemsTitle: itemsTitle\n  });\n  var dropdown = showToggle && React.createElement(React.Fragment, null, isDiv && React.createElement(\"span\", {\n    className: css(styles.optionsMenuToggleText)\n  }, template), React.createElement(DropdownToggle, Object.assign({\n    onEnter: onEnter,\n    \"aria-label\": isDiv ? optionsToggle || 'Items per page' : optionsToggle,\n    onToggle: onToggle,\n    isDisabled: isDisabled || itemCount && itemCount <= 0,\n    isOpen: isOpen\n  }, widgetId && {\n    id: \"\".concat(widgetId, \"-toggle\")\n  }, {\n    className: isDiv ? styles.optionsMenuToggleButton : toggleClasses,\n    parentRef: parentRef,\n    \"aria-haspopup\": \"listbox\"\n  }), !isDiv && template));\n  return isDiv ? React.createElement(\"div\", {\n    className: toggleClasses\n  }, dropdown) : dropdown;\n};\nOptionsToggle.displayName = 'OptionsToggle';","map":{"version":3,"names":["React","styles","css","fillTemplate","DropdownToggle","OptionsToggle","_ref","_ref$itemsTitle","itemsTitle","optionsToggle","_ref$itemsPerPageTitl","itemsPerPageTitle","_ref$ofWord","ofWord","_ref$firstIndex","firstIndex","_ref$lastIndex","lastIndex","itemCount","_ref$widgetId","widgetId","_ref$showToggle","showToggle","_ref$onToggle","onToggle","_isOpen","undefined","_ref$isOpen","isOpen","_ref$isDisabled","isDisabled","_ref$parentRef","parentRef","ToggleTemplate","toggleTemplate","_ref$onEnter","onEnter","_ref$perPageComponent","perPageComponent","isDiv","toggleClasses","optionsMenuToggle","modifiers","disabled","plain","text","template","createElement","dropdown","Fragment","className","optionsMenuToggleText","Object","assign","id","concat","optionsMenuToggleButton","displayName"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@patternfly/react-core/src/components/Pagination/OptionsToggle.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/OptionsMenu/options-menu';\nimport { css } from '@patternfly/react-styles';\n\nimport { fillTemplate } from '../../helpers';\nimport { ToggleTemplateProps } from './ToggleTemplate';\nimport { DropdownToggle } from '../Dropdown';\n\nexport interface OptionsToggleProps extends React.HTMLProps<HTMLDivElement> {\n  /** The first index of the items being paginated. */\n  firstIndex?: number;\n  /** Flag indicating if the options menu is disabled. */\n  isDisabled?: boolean;\n  /** Flag indicating if the options menu dropdown is open or not. */\n  isOpen?: boolean;\n  /** The total number of items being paginated. */\n  itemCount?: number;\n  /** The title of the pagination options menu. */\n  itemsPerPageTitle?: string;\n  /** The type or title of the items being paginated. */\n  itemsTitle?: string;\n  /** The last index of the items being paginated. */\n  lastIndex?: number;\n  /** Label for the English word \"of\". */\n  ofWord?: string;\n  /** Callback for toggle open on keyboard entry. */\n  onEnter?: () => void;\n  /** Event function that fires when user clicks the options menu toggle. */\n  onToggle?: (isOpen: boolean) => void;\n  /** Accessible label for the options toggle. */\n  optionsToggle?: string;\n  /** */\n  parentRef?: HTMLElement;\n  /** Component to be used for wrapping the toggle contents. Use \"button\" when you want\n   * all of the toggle text to be clickable.\n   */\n  perPageComponent?: 'div' | 'button';\n  /** Flag for indicating whether the toggle should be shown. */\n  showToggle?: boolean;\n  /** This will be shown in pagination toggle span. You can use firstIndex, lastIndex,\n   * itemCount, and/or itemsTitle props. */\n  toggleTemplate?: ((props: ToggleTemplateProps) => React.ReactElement) | string;\n  /** Id added to the title of the pagination options menu. */\n  widgetId?: string;\n}\n\nexport const OptionsToggle: React.FunctionComponent<OptionsToggleProps> = ({\n  itemsTitle = 'items',\n  optionsToggle,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  itemsPerPageTitle = 'Items per page',\n  ofWord = 'of',\n  firstIndex = 0,\n  lastIndex = 0,\n  itemCount,\n  widgetId = '',\n  showToggle = true,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onToggle = (_isOpen: boolean) => undefined as any,\n  isOpen = false,\n  isDisabled = false,\n  parentRef = null,\n  toggleTemplate: ToggleTemplate,\n  onEnter = null,\n  perPageComponent = 'div'\n}: OptionsToggleProps) => {\n  const isDiv = perPageComponent === 'div';\n  const toggleClasses = css(\n    styles.optionsMenuToggle,\n    isDisabled && styles.modifiers.disabled,\n    styles.modifiers.plain,\n    styles.modifiers.text\n  );\n\n  const template =\n    typeof ToggleTemplate === 'string' ? (\n      fillTemplate(ToggleTemplate, { firstIndex, lastIndex, ofWord, itemCount, itemsTitle })\n    ) : (\n      <ToggleTemplate\n        firstIndex={firstIndex}\n        lastIndex={lastIndex}\n        ofWord={ofWord}\n        itemCount={itemCount}\n        itemsTitle={itemsTitle}\n      />\n    );\n\n  const dropdown = showToggle && (\n    <React.Fragment>\n      {isDiv && <span className={css(styles.optionsMenuToggleText)}>{template}</span>}\n      <DropdownToggle\n        onEnter={onEnter}\n        aria-label={isDiv ? optionsToggle || 'Items per page' : optionsToggle}\n        onToggle={onToggle}\n        isDisabled={isDisabled || (itemCount && itemCount <= 0)}\n        isOpen={isOpen}\n        {...(widgetId && { id: `${widgetId}-toggle` })}\n        className={isDiv ? styles.optionsMenuToggleButton : toggleClasses}\n        parentRef={parentRef}\n        aria-haspopup=\"listbox\"\n      >\n        {!isDiv && template}\n      </DropdownToggle>\n    </React.Fragment>\n  );\n\n  return isDiv ? <div className={toggleClasses}>{dropdown}</div> : dropdown;\n};\nOptionsToggle.displayName = 'OptionsToggle';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}