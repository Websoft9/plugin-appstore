{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport AngleDownIcon from '@patternfly/react-icons/dist/esm/icons/angle-down-icon';\nimport { Button } from '../Button';\nexport var ClipboardCopyToggle = function ClipboardCopyToggle(_a) {\n  var onClick = _a.onClick,\n    id = _a.id,\n    textId = _a.textId,\n    contentId = _a.contentId,\n    _a$isExpanded = _a.isExpanded,\n    isExpanded = _a$isExpanded === void 0 ? false : _a$isExpanded,\n    props = __rest(_a, [\"onClick\", \"id\", \"textId\", \"contentId\", \"isExpanded\"]);\n  return React.createElement(Button, Object.assign({\n    type: \"button\",\n    variant: \"control\",\n    onClick: onClick,\n    id: id,\n    \"aria-labelledby\": \"\".concat(id, \" \").concat(textId),\n    \"aria-controls\": \"\".concat(id, \" \").concat(contentId),\n    \"aria-expanded\": isExpanded\n  }, props), isExpanded ? React.createElement(AngleDownIcon, {\n    \"aria-hidden\": \"true\"\n  }) : React.createElement(AngleRightIcon, {\n    \"aria-hidden\": \"true\"\n  }));\n};\nClipboardCopyToggle.displayName = 'ClipboardCopyToggle';","map":{"version":3,"names":["React","AngleRightIcon","AngleDownIcon","Button","ClipboardCopyToggle","_a","onClick","id","textId","contentId","_a$isExpanded","isExpanded","props","__rest","createElement","Object","assign","type","variant","concat","displayName"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@patternfly/react-core/src/components/ClipboardCopy/ClipboardCopyToggle.tsx"],"sourcesContent":["import * as React from 'react';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport AngleDownIcon from '@patternfly/react-icons/dist/esm/icons/angle-down-icon';\nimport { Button } from '../Button';\n\nexport interface ClipboardCopyToggleProps\n  extends Omit<React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, 'ref'> {\n  onClick: (event: React.MouseEvent) => void;\n  id: string;\n  textId: string;\n  contentId: string;\n  isExpanded?: boolean;\n  className?: string;\n}\n\nexport const ClipboardCopyToggle: React.FunctionComponent<ClipboardCopyToggleProps> = ({\n  onClick,\n  id,\n  textId,\n  contentId,\n  isExpanded = false,\n  ...props\n}: ClipboardCopyToggleProps) => (\n  <Button\n    type=\"button\"\n    variant=\"control\"\n    onClick={onClick}\n    id={id}\n    aria-labelledby={`${id} ${textId}`}\n    aria-controls={`${id} ${contentId}`}\n    aria-expanded={isExpanded}\n    {...props}\n  >\n    {isExpanded ? <AngleDownIcon aria-hidden=\"true\" /> : <AngleRightIcon aria-hidden=\"true\" />}\n  </Button>\n);\nClipboardCopyToggle.displayName = 'ClipboardCopyToggle';\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,cAAc,MAAM,yDAAyD;AACpF,OAAOC,aAAa,MAAM,wDAAwD;AAClF,SAASC,MAAM,QAAQ,WAAW;AAYlC,OAAO,IAAMC,mBAAmB,GAAsD,SAAzEA,mBAAmBA,CAAuDC,EAO5D,EAAI;MAN7BC,OAAO,GAIWD,EAEO,CANzBC,OAAO;IACPC,EAAE,GAGgBF,EAEO,CALzBE,EAAE;IACFC,MAAM,GAEYH,EAEO,CAJzBG,MAAM;IACNC,SAAS,GACSJ,EAEO,CAHzBI,SAAS;IAAAC,aAAA,GACSL,EAEO,CAFzBM,UAAU;IAAVA,UAAU,GAAAD,aAAA,cAAG,KAAK,GAAAA,aAAA;IACfE,KAAK,GAAAC,MAAA,CAAAR,EAAA,EAN6E,sDAOtF,CADS;EACsB,OAC9BL,KAAA,CAAAc,aAAA,CAACX,MAAM,EAAAY,MAAA,CAAAC,MAAA;IACLC,IAAI,EAAC,QAAQ;IACbC,OAAO,EAAC,SAAS;IACjBZ,OAAO,EAAEA,OAAO;IAChBC,EAAE,EAAEA,EAAE;IAAA,sBAAAY,MAAA,CACcZ,EAAE,OAAAY,MAAA,CAAIX,MAAM,CAAE;IAAA,oBAAAW,MAAA,CAChBZ,EAAE,OAAAY,MAAA,CAAIV,SAAS,CAAE;IAAA,iBACpBE;EAAU,GACrBC,KAAK,GAERD,UAAU,GAAGX,KAAA,CAAAc,aAAA,CAACZ,aAAa;IAAA,eAAa;EAAM,EAAG,GAAGF,KAAA,CAAAc,aAAA,CAACb,cAAc;IAAA,eAAa;EAAM,EAAG,CACnF;CACV;AACDG,mBAAmB,CAACgB,WAAW,GAAG,qBAAqB"},"metadata":{},"sourceType":"module","externalDependencies":[]}