{"ast":null,"code":"import _classCallCheck from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/MenuToggle/menu-toggle';\nimport { css } from '@patternfly/react-styles';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nexport var MenuToggleBase = /*#__PURE__*/function (_React$Component) {\n  _inherits(MenuToggleBase, _React$Component);\n  var _super = _createSuper(MenuToggleBase);\n  function MenuToggleBase() {\n    var _this;\n    _classCallCheck(this, MenuToggleBase);\n    _this = _super.apply(this, arguments);\n    _this.displayName = 'MenuToggleBase';\n    return _this;\n  }\n  _createClass(MenuToggleBase, [{\n    key: \"render\",\n    value: function render() {\n      var _a = this.props,\n        children = _a.children,\n        className = _a.className,\n        icon = _a.icon,\n        badge = _a.badge,\n        isExpanded = _a.isExpanded,\n        isDisabled = _a.isDisabled,\n        isFullHeight = _a.isFullHeight,\n        isFullWidth = _a.isFullWidth,\n        splitButtonOptions = _a.splitButtonOptions,\n        variant = _a.variant,\n        innerRef = _a.innerRef,\n        onClick = _a.onClick,\n        ariaLabel = _a['aria-label'],\n        otherProps = __rest(_a, [\"children\", \"className\", \"icon\", \"badge\", \"isExpanded\", \"isDisabled\", \"isFullHeight\", \"isFullWidth\", \"splitButtonOptions\", \"variant\", \"innerRef\", \"onClick\", 'aria-label']);\n      var isPlain = variant === 'plain';\n      var isPlainText = variant === 'plainText';\n      var isTypeahead = variant === 'typeahead';\n      var toggleControls = React.createElement(\"span\", {\n        className: css(styles.menuToggleControls)\n      }, React.createElement(\"span\", {\n        className: css(styles.menuToggleToggleIcon)\n      }, React.createElement(CaretDownIcon, {\n        \"aria-hidden\": true\n      })));\n      var content = React.createElement(React.Fragment, null, icon && React.createElement(\"span\", {\n        className: css(styles.menuToggleIcon)\n      }, icon), isTypeahead ? children : React.createElement(\"span\", {\n        className: css(styles.menuToggleText)\n      }, children), React.isValidElement(badge) && React.createElement(\"span\", {\n        className: css(styles.menuToggleCount)\n      }, badge), isTypeahead ? React.createElement(\"button\", {\n        type: \"button\",\n        className: css(styles.menuToggleButton),\n        \"aria-expanded\": isExpanded,\n        onClick: onClick,\n        \"aria-label\": \"Menu toggle\"\n      }, toggleControls) : toggleControls);\n      var commonStyles = css(styles.menuToggle, isExpanded && styles.modifiers.expanded, variant === 'primary' && styles.modifiers.primary, variant === 'secondary' && styles.modifiers.secondary, (isPlain || isPlainText) && styles.modifiers.plain, isPlainText && styles.modifiers.text, isFullHeight && styles.modifiers.fullHeight, isFullWidth && styles.modifiers.fullWidth, isDisabled && styles.modifiers.disabled, className);\n      var componentProps = Object.assign(Object.assign({\n        children: isPlain ? children : content\n      }, isDisabled && {\n        disabled: true\n      }), otherProps);\n      if (isTypeahead) {\n        return React.createElement(\"div\", Object.assign({\n          ref: innerRef,\n          className: css(commonStyles, styles.modifiers.typeahead)\n        }, componentProps));\n      }\n      if (splitButtonOptions) {\n        return React.createElement(\"div\", {\n          ref: innerRef,\n          className: css(commonStyles, styles.modifiers.splitButton, (splitButtonOptions === null || splitButtonOptions === void 0 ? void 0 : splitButtonOptions.variant) === 'action' && styles.modifiers.action)\n        }, splitButtonOptions === null || splitButtonOptions === void 0 ? void 0 : splitButtonOptions.items, React.createElement(\"button\", Object.assign({\n          className: css(styles.menuToggleButton),\n          type: \"button\",\n          \"aria-expanded\": isExpanded,\n          \"aria-label\": ariaLabel,\n          disabled: isDisabled,\n          onClick: onClick\n        }, otherProps), toggleControls));\n      }\n      return React.createElement(\"button\", Object.assign({\n        className: css(commonStyles),\n        type: \"button\",\n        \"aria-label\": ariaLabel,\n        \"aria-expanded\": isExpanded,\n        ref: innerRef,\n        disabled: isDisabled,\n        onClick: onClick\n      }, componentProps));\n    }\n  }]);\n  return MenuToggleBase;\n}(React.Component);\nMenuToggleBase.defaultProps = {\n  className: '',\n  isExpanded: false,\n  isDisabled: false,\n  isFullWidth: false,\n  isFullHeight: false\n};\nexport var MenuToggle = React.forwardRef(function (props, ref) {\n  return React.createElement(MenuToggleBase, Object.assign({\n    innerRef: ref\n  }, props));\n});\nMenuToggle.displayName = 'MenuToggle';","map":{"version":3,"names":["React","styles","css","CaretDownIcon","MenuToggleBase","_React$Component","_inherits","_super","_createSuper","_this","_classCallCheck","displayName","_createClass","key","value","render","_a","props","children","className","icon","badge","isExpanded","isDisabled","isFullHeight","isFullWidth","splitButtonOptions","variant","innerRef","onClick","ariaLabel","otherProps","__rest","isPlain","isPlainText","isTypeahead","toggleControls","createElement","menuToggleControls","menuToggleToggleIcon","content","Fragment","menuToggleIcon","menuToggleText","isValidElement","menuToggleCount","type","menuToggleButton","commonStyles","menuToggle","modifiers","expanded","primary","secondary","plain","text","fullHeight","fullWidth","disabled","componentProps","Object","assign","ref","typeahead","splitButton","action","items","Component","defaultProps","MenuToggle","forwardRef"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@patternfly/react-core/src/components/MenuToggle/MenuToggle.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/MenuToggle/menu-toggle';\nimport { css } from '@patternfly/react-styles';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport { BadgeProps } from '../Badge';\n\nexport type MenuToggleElement = HTMLDivElement | HTMLButtonElement;\n\nexport interface SplitButtonOptions {\n  /** Elements to display before the toggle button. When included, renders the menu toggle as a split button. */\n  items: React.ReactNode[];\n  /** Variant of split button toggle */\n  variant?: 'action' | 'checkbox';\n}\n\nexport interface MenuToggleProps\n  extends Omit<\n    React.DetailedHTMLProps<\n      React.ButtonHTMLAttributes<HTMLButtonElement> & React.HTMLAttributes<HTMLDivElement>,\n      MenuToggleElement\n    >,\n    'ref'\n  > {\n  /** Content rendered inside the toggle */\n  children?: React.ReactNode;\n  /** Additional classes added to the toggle */\n  className?: string;\n  /** Flag indicating the toggle has expanded styling */\n  isExpanded?: boolean;\n  /** Flag indicating the toggle is disabled */\n  isDisabled?: boolean;\n  /** Flag indicating the toggle is full height */\n  isFullHeight?: boolean;\n  /** Flag indicating the toggle takes up the full width of its parent */\n  isFullWidth?: boolean;\n  /** Object used to configure a split button menu toggle */\n  splitButtonOptions?: SplitButtonOptions;\n  /** Variant styles of the menu toggle */\n  variant?: 'default' | 'plain' | 'primary' | 'plainText' | 'secondary' | 'typeahead';\n  /** Optional icon rendered inside the toggle, before the children content */\n  icon?: React.ReactNode;\n  /** Optional badge rendered inside the toggle, after the children content */\n  badge?: BadgeProps | React.ReactNode;\n  /** Forwarded ref */\n  innerRef?: React.Ref<MenuToggleElement>;\n}\n\nexport class MenuToggleBase extends React.Component<MenuToggleProps> {\n  displayName = 'MenuToggleBase';\n  static defaultProps: MenuToggleProps = {\n    className: '',\n    isExpanded: false,\n    isDisabled: false,\n    isFullWidth: false,\n    isFullHeight: false\n  };\n\n  render() {\n    const {\n      children,\n      className,\n      icon,\n      badge,\n      isExpanded,\n      isDisabled,\n      isFullHeight,\n      isFullWidth,\n      splitButtonOptions,\n      variant,\n      innerRef,\n      onClick,\n      'aria-label': ariaLabel,\n      ...otherProps\n    } = this.props;\n    const isPlain = variant === 'plain';\n    const isPlainText = variant === 'plainText';\n    const isTypeahead = variant === 'typeahead';\n    const toggleControls = (\n      <span className={css(styles.menuToggleControls)}>\n        <span className={css(styles.menuToggleToggleIcon)}>\n          <CaretDownIcon aria-hidden />\n        </span>\n      </span>\n    );\n\n    const content = (\n      <>\n        {icon && <span className={css(styles.menuToggleIcon)}>{icon}</span>}\n        {isTypeahead ? children : <span className={css(styles.menuToggleText)}>{children}</span>}\n        {React.isValidElement(badge) && <span className={css(styles.menuToggleCount)}>{badge}</span>}\n        {isTypeahead ? (\n          <button\n            type=\"button\"\n            className={css(styles.menuToggleButton)}\n            aria-expanded={isExpanded}\n            onClick={onClick}\n            aria-label=\"Menu toggle\"\n          >\n            {toggleControls}\n          </button>\n        ) : (\n          toggleControls\n        )}\n      </>\n    );\n\n    const commonStyles = css(\n      styles.menuToggle,\n      isExpanded && styles.modifiers.expanded,\n      variant === 'primary' && styles.modifiers.primary,\n      variant === 'secondary' && styles.modifiers.secondary,\n      (isPlain || isPlainText) && styles.modifiers.plain,\n      isPlainText && styles.modifiers.text,\n      isFullHeight && styles.modifiers.fullHeight,\n      isFullWidth && styles.modifiers.fullWidth,\n      isDisabled && styles.modifiers.disabled,\n      className\n    );\n\n    const componentProps = {\n      children: isPlain ? children : content,\n      ...(isDisabled && { disabled: true }),\n      ...otherProps\n    };\n\n    if (isTypeahead) {\n      return (\n        <div\n          ref={innerRef as React.Ref<HTMLDivElement>}\n          className={css(commonStyles, styles.modifiers.typeahead)}\n          {...componentProps}\n        />\n      );\n    }\n\n    if (splitButtonOptions) {\n      return (\n        <div\n          ref={innerRef as React.Ref<HTMLDivElement>}\n          className={css(\n            commonStyles,\n            styles.modifiers.splitButton,\n            splitButtonOptions?.variant === 'action' && styles.modifiers.action\n          )}\n        >\n          {splitButtonOptions?.items}\n          <button\n            className={css(styles.menuToggleButton)}\n            type=\"button\"\n            aria-expanded={isExpanded}\n            aria-label={ariaLabel}\n            disabled={isDisabled}\n            onClick={onClick}\n            {...otherProps}\n          >\n            {toggleControls}\n          </button>\n        </div>\n      );\n    }\n\n    return (\n      <button\n        className={css(commonStyles)}\n        type=\"button\"\n        aria-label={ariaLabel}\n        aria-expanded={isExpanded}\n        ref={innerRef as React.Ref<HTMLButtonElement>}\n        disabled={isDisabled}\n        onClick={onClick}\n        {...componentProps}\n      />\n    );\n  }\n}\n\nexport const MenuToggle = React.forwardRef((props: MenuToggleProps, ref: React.Ref<MenuToggleElement>) => (\n  <MenuToggleBase innerRef={ref} {...props} />\n));\n\nMenuToggle.displayName = 'MenuToggle';\n"],"mappings":";;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,MAAM,MAAM,gEAAgE;AACnF,SAASC,GAAG,QAAQ,0BAA0B;AAC9C,OAAOC,aAAa,MAAM,wDAAwD;AA4ClF,WAAaC,cAAe,0BAAAC,gBAAA;EAAAC,SAAA,CAAAF,cAAA,EAAAC,gBAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,cAAA;EAA5B,SAAAA,eAAA;IAAA,IAAAK,KAAA;IAAAC,eAAA,OAAAN,cAAA;;IACEK,KAAA,CAAAE,WAAW,GAAG,gBAAgB;IAAC,OAAAF,KAAA;EA8HjC;EAACG,YAAA,CAAAR,cAAA;IAAAS,GAAA;IAAAC,KAAA,EArHC,SAAAC,OAAA,EAAM;MACE,IAAAC,EAAA,GAeF,IAAI,CAACC,KAAK;QAdZC,QAAQ,GAYeF,EAEX,CAdZE,QAAQ;QACRC,SAAS,GAWcH,EAEX,CAbZG,SAAS;QACTC,IAAI,GAUmBJ,EAEX,CAZZI,IAAI;QACJC,KAAK,GASkBL,EAEX,CAXZK,KAAK;QACLC,UAAU,GAQaN,EAEX,CAVZM,UAAU;QACVC,UAAU,GAOaP,EAEX,CATZO,UAAU;QACVC,YAAY,GAMWR,EAEX,CARZQ,YAAY;QACZC,WAAW,GAKYT,EAEX,CAPZS,WAAW;QACXC,kBAAkB,GAIKV,EAEX,CANZU,kBAAkB;QAClBC,OAAO,GAGgBX,EAEX,CALZW,OAAO;QACPC,QAAQ,GAEeZ,EAEX,CAJZY,QAAQ;QACRC,OAAO,GACgBb,EAEX,CAHZa,OAAO;QACOC,SAAS,GAAAd,EAEX,CAFZ,YAAY;QACTe,UAAU,GAAAC,MAAA,CAAAhB,EAAA,EAdT,2KAeL,CAAa;MACd,IAAMiB,OAAO,GAAGN,OAAO,KAAK,OAAO;MACnC,IAAMO,WAAW,GAAGP,OAAO,KAAK,WAAW;MAC3C,IAAMQ,WAAW,GAAGR,OAAO,KAAK,WAAW;MAC3C,IAAMS,cAAc,GAClBpC,KAAA,CAAAqC,aAAA;QAAMlB,SAAS,EAAEjB,GAAG,CAACD,MAAM,CAACqC,kBAAkB;MAAC,GAC7CtC,KAAA,CAAAqC,aAAA;QAAMlB,SAAS,EAAEjB,GAAG,CAACD,MAAM,CAACsC,oBAAoB;MAAC,GAC/CvC,KAAA,CAAAqC,aAAA,CAAClC,aAAa;QAAA;MAAA,EAAe,CACxB,CAEV;MAED,IAAMqC,OAAO,GACXxC,KAAA,CAAAqC,aAAA,CAAArC,KAAA,CAAAyC,QAAA,QACGrB,IAAI,IAAIpB,KAAA,CAAAqC,aAAA;QAAMlB,SAAS,EAAEjB,GAAG,CAACD,MAAM,CAACyC,cAAc;MAAC,GAAGtB,IAAI,CAAQ,EAClEe,WAAW,GAAGjB,QAAQ,GAAGlB,KAAA,CAAAqC,aAAA;QAAMlB,SAAS,EAAEjB,GAAG,CAACD,MAAM,CAAC0C,cAAc;MAAC,GAAGzB,QAAQ,CAAQ,EACvFlB,KAAK,CAAC4C,cAAc,CAACvB,KAAK,CAAC,IAAIrB,KAAA,CAAAqC,aAAA;QAAMlB,SAAS,EAAEjB,GAAG,CAACD,MAAM,CAAC4C,eAAe;MAAC,GAAGxB,KAAK,CAAQ,EAC3Fc,WAAW,GACVnC,KAAA,CAAAqC,aAAA;QACES,IAAI,EAAC,QAAQ;QACb3B,SAAS,EAAEjB,GAAG,CAACD,MAAM,CAAC8C,gBAAgB,CAAC;QAAA,iBACxBzB,UAAU;QACzBO,OAAO,EAAEA,OAAO;QAAA,cACL;MAAa,GAEvBO,cAAc,CACR,GAETA,cACD,CAEJ;MAED,IAAMY,YAAY,GAAG9C,GAAG,CACtBD,MAAM,CAACgD,UAAU,EACjB3B,UAAU,IAAIrB,MAAM,CAACiD,SAAS,CAACC,QAAQ,EACvCxB,OAAO,KAAK,SAAS,IAAI1B,MAAM,CAACiD,SAAS,CAACE,OAAO,EACjDzB,OAAO,KAAK,WAAW,IAAI1B,MAAM,CAACiD,SAAS,CAACG,SAAS,EACrD,CAACpB,OAAO,IAAIC,WAAW,KAAKjC,MAAM,CAACiD,SAAS,CAACI,KAAK,EAClDpB,WAAW,IAAIjC,MAAM,CAACiD,SAAS,CAACK,IAAI,EACpC/B,YAAY,IAAIvB,MAAM,CAACiD,SAAS,CAACM,UAAU,EAC3C/B,WAAW,IAAIxB,MAAM,CAACiD,SAAS,CAACO,SAAS,EACzClC,UAAU,IAAItB,MAAM,CAACiD,SAAS,CAACQ,QAAQ,EACvCvC,SAAS,CACV;MAED,IAAMwC,cAAc,GAAAC,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA;QAClB3C,QAAQ,EAAEe,OAAO,GAAGf,QAAQ,GAAGsB;MAAO,GAClCjB,UAAU,IAAI;QAAEmC,QAAQ,EAAE;MAAI,CAAG,GAClC3B,UAAU,CACd;MAED,IAAII,WAAW,EAAE;QACf,OACEnC,KAAA,CAAAqC,aAAA,QAAAuB,MAAA,CAAAC,MAAA;UACEC,GAAG,EAAElC,QAAqC;UAC1CT,SAAS,EAAEjB,GAAG,CAAC8C,YAAY,EAAE/C,MAAM,CAACiD,SAAS,CAACa,SAAS;QAAC,GACpDJ,cAAc,EAClB;;MAIN,IAAIjC,kBAAkB,EAAE;QACtB,OACE1B,KAAA,CAAAqC,aAAA;UACEyB,GAAG,EAAElC,QAAqC;UAC1CT,SAAS,EAAEjB,GAAG,CACZ8C,YAAY,EACZ/C,MAAM,CAACiD,SAAS,CAACc,WAAW,EAC5B,CAAAtC,kBAAkB,aAAlBA,kBAAkB,uBAAlBA,kBAAkB,CAAEC,OAAO,MAAK,QAAQ,IAAI1B,MAAM,CAACiD,SAAS,CAACe,MAAM;QACpE,GAEAvC,kBAAkB,aAAlBA,kBAAkB,uBAAlBA,kBAAkB,CAAEwC,KAAK,EAC1BlE,KAAA,CAAAqC,aAAA,WAAAuB,MAAA,CAAAC,MAAA;UACE1C,SAAS,EAAEjB,GAAG,CAACD,MAAM,CAAC8C,gBAAgB,CAAC;UACvCD,IAAI,EAAC,QAAQ;UAAA,iBACExB,UAAU;UAAA,cACbQ,SAAS;UACrB4B,QAAQ,EAAEnC,UAAU;UACpBM,OAAO,EAAEA;QAAO,GACZE,UAAU,GAEbK,cAAc,CACR,CACL;;MAIV,OACEpC,KAAA,CAAAqC,aAAA,WAAAuB,MAAA,CAAAC,MAAA;QACE1C,SAAS,EAAEjB,GAAG,CAAC8C,YAAY,CAAC;QAC5BF,IAAI,EAAC,QAAQ;QAAA,cACDhB,SAAS;QAAA,iBACNR,UAAU;QACzBwC,GAAG,EAAElC,QAAwC;QAC7C8B,QAAQ,EAAEnC,UAAU;QACpBM,OAAO,EAAEA;MAAO,GACZ8B,cAAc,EAClB;IAEN;EAAC;EAAA,OAAAvD,cAAA;AAAA,EA9HiCJ,KAAK,CAACmE,SAA0B;AAE3D/D,cAAA,CAAAgE,YAAY,GAAoB;EACrCjD,SAAS,EAAE,EAAE;EACbG,UAAU,EAAE,KAAK;EACjBC,UAAU,EAAE,KAAK;EACjBE,WAAW,EAAE,KAAK;EAClBD,YAAY,EAAE;CACf;AAyHH,OAAO,IAAM6C,UAAU,GAAGrE,KAAK,CAACsE,UAAU,CAAC,UAACrD,KAAsB,EAAE6C,GAAiC;EAAA,OACnG9D,KAAA,CAAAqC,aAAA,CAACjC,cAAc,EAAAwD,MAAA,CAAAC,MAAA;IAACjC,QAAQ,EAAEkC;EAAG,GAAM7C,KAAK,EAAI;AAAA,CAC7C,CAAC;AAEFoD,UAAU,CAAC1D,WAAW,GAAG,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}