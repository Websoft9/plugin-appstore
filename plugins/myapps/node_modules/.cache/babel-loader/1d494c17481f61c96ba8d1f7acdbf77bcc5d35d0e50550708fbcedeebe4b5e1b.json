{"ast":null,"code":"import _classCallCheck from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport datePickerStyles from '@patternfly/react-styles/css/components/DatePicker/date-picker';\nimport formStyles from '@patternfly/react-styles/css/components/FormControl/form-control';\nimport menuStyles from '@patternfly/react-styles/css/components/Menu/menu';\nimport { getUniqueId } from '../../helpers';\nimport { Popper } from '../../helpers/Popper/Popper';\nimport { Menu, MenuContent, MenuList, MenuItem } from '../Menu';\nimport { InputGroup } from '../InputGroup';\nimport { TextInput } from '../TextInput';\nimport { KeyTypes } from '../../helpers/constants';\nimport { parseTime, validateTime, makeTimeOptions, amSuffix, pmSuffix, getHours, getMinutes, isWithinMinMax, getSeconds } from './TimePickerUtils';\nexport var TimePicker = /*#__PURE__*/function (_React$Component) {\n  _inherits(TimePicker, _React$Component);\n  var _super = _createSuper(TimePicker);\n  function TimePicker(props) {\n    var _this;\n    _classCallCheck(this, TimePicker);\n    _this = _super.call(this, props);\n    _this.baseComponentRef = React.createRef();\n    _this.toggleRef = React.createRef();\n    _this.inputRef = React.createRef();\n    _this.menuRef = React.createRef();\n    _this.onDocClick = function (event) {\n      var _a, _b, _c, _d;\n      var clickedOnToggle = (_b = (_a = _this.toggleRef) === null || _a === void 0 ? void 0 : _a.current) === null || _b === void 0 ? void 0 : _b.contains(event.target);\n      var clickedWithinMenu = (_d = (_c = _this.menuRef) === null || _c === void 0 ? void 0 : _c.current) === null || _d === void 0 ? void 0 : _d.contains(event.target);\n      if (_this.state.isTimeOptionsOpen && !(clickedOnToggle || clickedWithinMenu)) {\n        _this.onToggle(false);\n      }\n    };\n    _this.handleGlobalKeys = function (event) {\n      var _a, _b, _c, _d;\n      var _this$state = _this.state,\n        isTimeOptionsOpen = _this$state.isTimeOptionsOpen,\n        focusedIndex = _this$state.focusedIndex,\n        scrollIndex = _this$state.scrollIndex;\n      // keyboard pressed while focus on toggle\n      if ((_b = (_a = _this.inputRef) === null || _a === void 0 ? void 0 : _a.current) === null || _b === void 0 ? void 0 : _b.contains(event.target)) {\n        if (!isTimeOptionsOpen && event.key !== KeyTypes.Tab && event.key !== KeyTypes.Escape) {\n          _this.onToggle(true);\n        } else if (isTimeOptionsOpen) {\n          if (event.key === KeyTypes.Escape || event.key === KeyTypes.Tab) {\n            _this.onToggle(false);\n          } else if (event.key === KeyTypes.Enter) {\n            if (focusedIndex !== null) {\n              _this.focusSelection(focusedIndex);\n              event.stopPropagation();\n            } else {\n              _this.onToggle(false);\n            }\n          } else if (event.key === KeyTypes.ArrowDown || event.key === KeyTypes.ArrowUp) {\n            _this.focusSelection(scrollIndex);\n            _this.updateFocusedIndex(0);\n            event.preventDefault();\n          }\n        }\n        // keyboard pressed while focus on menu item\n      } else if ((_d = (_c = _this.menuRef) === null || _c === void 0 ? void 0 : _c.current) === null || _d === void 0 ? void 0 : _d.contains(event.target)) {\n        if (event.key === KeyTypes.ArrowDown) {\n          _this.updateFocusedIndex(1);\n          event.preventDefault();\n        } else if (event.key === KeyTypes.ArrowUp) {\n          _this.updateFocusedIndex(-1);\n          event.preventDefault();\n        } else if (event.key === KeyTypes.Escape || event.key === KeyTypes.Tab) {\n          _this.inputRef.current.focus();\n          _this.onToggle(false);\n        }\n      }\n    };\n    _this.updateFocusedIndex = function (increment) {\n      _this.setState(function (prevState) {\n        var maxIndex = _this.getOptions().length - 1;\n        var nextIndex = prevState.focusedIndex !== null ? prevState.focusedIndex + increment : prevState.scrollIndex + increment;\n        if (nextIndex < 0) {\n          nextIndex = maxIndex;\n        } else if (nextIndex > maxIndex) {\n          nextIndex = 0;\n        }\n        _this.scrollToIndex(nextIndex);\n        return {\n          focusedIndex: nextIndex\n        };\n      });\n    };\n    // fixes issue where menutAppendTo=\"inline\" results in the menu item that should be scrolled to being out of view; this will select the menu item that comes before the intended one, causing that before-item to be placed out of view instead\n    _this.getIndexToScroll = function (index) {\n      if (_this.props.menuAppendTo === 'inline') {\n        return index > 0 ? index - 1 : 0;\n      }\n      return index;\n    };\n    _this.scrollToIndex = function (index) {\n      _this.getOptions()[index].closest(\".\".concat(menuStyles.menuContent)).scrollTop = _this.getOptions()[_this.getIndexToScroll(index)].offsetTop;\n    };\n    _this.focusSelection = function (index) {\n      var _a;\n      var indexToFocus = index !== -1 ? index : 0;\n      if ((_a = _this.menuRef) === null || _a === void 0 ? void 0 : _a.current) {\n        _this.getOptions()[indexToFocus].querySelector(\".\".concat(menuStyles.menuItem)).focus();\n      }\n    };\n    _this.scrollToSelection = function (time) {\n      var _this$props = _this.props,\n        delimiter = _this$props.delimiter,\n        is24Hour = _this$props.is24Hour;\n      var splitTime = time.split(_this.props.delimiter);\n      var focusedIndex = null;\n      // build out the rest of the time assuming hh:00 if it's a partial time\n      if (splitTime.length < 2) {\n        time = \"\".concat(time).concat(delimiter, \"00\");\n        splitTime = time.split(delimiter);\n        // due to only the input including seconds when includeSeconds=true, we need to build a temporary time here without those seconds so that an exact or close match can be scrolled to within the menu (which does not include seconds in any of the options)\n      } else if (splitTime.length > 2) {\n        time = parseTime(time, _this.state.timeRegex, delimiter, !is24Hour, false);\n        splitTime = time.split(delimiter);\n      }\n      // for 12hr variant, autoscroll to pm if it's currently the afternoon, otherwise autoscroll to am\n      if (!is24Hour && splitTime.length > 1 && splitTime[1].length < 2) {\n        var minutes = splitTime[1].length === 0 ? '00' : splitTime[1] + '0';\n        time = \"\".concat(splitTime[0]).concat(delimiter).concat(minutes).concat(new Date().getHours() > 11 ? pmSuffix : amSuffix);\n      } else if (!is24Hour && splitTime.length > 1 && splitTime[1].length === 2 && !time.toUpperCase().includes(amSuffix.toUpperCase().trim()) && !time.toUpperCase().includes(pmSuffix.toUpperCase().trim())) {\n        time = \"\".concat(time).concat(new Date().getHours() > 11 ? pmSuffix : amSuffix);\n      }\n      var scrollIndex = _this.getOptions().findIndex(function (option) {\n        return option.textContent === time;\n      });\n      // if we found an exact match, scroll to match and return index of match for focus\n      if (scrollIndex !== -1) {\n        _this.scrollToIndex(scrollIndex);\n        focusedIndex = scrollIndex;\n      } else if (splitTime.length === 2) {\n        // no exact match, scroll to closest hour but don't return index for focus\n        var amPm = '';\n        if (!is24Hour) {\n          if (splitTime[1].toUpperCase().includes('P')) {\n            amPm = pmSuffix;\n          } else if (splitTime[1].toUpperCase().includes('A')) {\n            amPm = amSuffix;\n          }\n        }\n        time = \"\".concat(splitTime[0]).concat(delimiter, \"00\").concat(amPm);\n        scrollIndex = _this.getOptions().findIndex(function (option) {\n          return option.textContent === time;\n        });\n        if (scrollIndex !== -1) {\n          _this.scrollToIndex(scrollIndex);\n        }\n      }\n      _this.setState({\n        focusedIndex: focusedIndex,\n        scrollIndex: scrollIndex\n      });\n    };\n    _this.getRegExp = function () {\n      var includeSeconds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      var _this$props2 = _this.props,\n        is24Hour = _this$props2.is24Hour,\n        delimiter = _this$props2.delimiter;\n      var baseRegex = \"\\\\s*(\\\\d\\\\d?)\".concat(delimiter, \"([0-5]\\\\d)\");\n      if (includeSeconds) {\n        baseRegex += \"\".concat(delimiter, \"?([0-5]\\\\d)?\");\n      }\n      return new RegExp(\"^\".concat(baseRegex).concat(is24Hour ? '' : '\\\\s*([AaPp][Mm])?', \"\\\\s*$\"));\n    };\n    _this.getOptions = function () {\n      var _a;\n      return ((_a = _this.menuRef) === null || _a === void 0 ? void 0 : _a.current) ? Array.from(_this.menuRef.current.querySelectorAll(\".\".concat(menuStyles.menuListItem))) : [];\n    };\n    _this.isValidFormat = function (time) {\n      if (_this.props.validateTime) {\n        return _this.props.validateTime(time);\n      }\n      var _this$props3 = _this.props,\n        delimiter = _this$props3.delimiter,\n        is24Hour = _this$props3.is24Hour,\n        includeSeconds = _this$props3.includeSeconds;\n      return validateTime(time, _this.getRegExp(includeSeconds), delimiter, !is24Hour);\n    };\n    _this.isValidTime = function (time) {\n      var _this$props4 = _this.props,\n        delimiter = _this$props4.delimiter,\n        includeSeconds = _this$props4.includeSeconds;\n      var _this$state2 = _this.state,\n        minTimeState = _this$state2.minTimeState,\n        maxTimeState = _this$state2.maxTimeState;\n      return isWithinMinMax(minTimeState, maxTimeState, time, delimiter, includeSeconds);\n    };\n    _this.isValid = function (time) {\n      return _this.isValidFormat(time) && _this.isValidTime(time);\n    };\n    _this.onToggle = function (isOpen) {\n      // on close, parse and validate input\n      _this.setState(function (prevState) {\n        var timeRegex = prevState.timeRegex,\n          isInvalid = prevState.isInvalid,\n          timeState = prevState.timeState;\n        var _this$props5 = _this.props,\n          delimiter = _this$props5.delimiter,\n          is24Hour = _this$props5.is24Hour,\n          includeSeconds = _this$props5.includeSeconds,\n          onChange = _this$props5.onChange;\n        var time = parseTime(timeState, timeRegex, delimiter, !is24Hour, includeSeconds);\n        // Call onChange when Enter is pressed in input and timeoption does not exist in menu\n        if (onChange && !isOpen && time !== timeState) {\n          onChange(null, time, getHours(time, timeRegex), getMinutes(time, timeRegex), getSeconds(time, timeRegex), _this.isValid(time));\n        }\n        return {\n          isTimeOptionsOpen: isOpen,\n          timeState: time,\n          isInvalid: isOpen ? isInvalid : !_this.isValid(time)\n        };\n      });\n      _this.props.setIsOpen(isOpen);\n      if (!isOpen) {\n        _this.inputRef.current.focus();\n      }\n    };\n    _this.onSelect = function (e) {\n      var _this$state3 = _this.state,\n        timeRegex = _this$state3.timeRegex,\n        timeState = _this$state3.timeState;\n      var _this$props6 = _this.props,\n        delimiter = _this$props6.delimiter,\n        is24Hour = _this$props6.is24Hour,\n        includeSeconds = _this$props6.includeSeconds,\n        setIsOpen = _this$props6.setIsOpen;\n      var time = parseTime(e.target.textContent, timeRegex, delimiter, !is24Hour, includeSeconds);\n      if (time !== timeState) {\n        _this.onInputChange(time, e);\n      }\n      _this.inputRef.current.focus();\n      _this.setState({\n        isTimeOptionsOpen: false,\n        isInvalid: false\n      });\n      setIsOpen(false);\n    };\n    _this.onInputClick = function (e) {\n      if (!_this.state.isTimeOptionsOpen) {\n        _this.onToggle(true);\n      }\n      e.stopPropagation();\n    };\n    _this.onInputChange = function (newTime, event) {\n      var onChange = _this.props.onChange;\n      var timeRegex = _this.state.timeRegex;\n      if (onChange) {\n        onChange(event, newTime, getHours(newTime, timeRegex), getMinutes(newTime, timeRegex), getSeconds(newTime, timeRegex), _this.isValid(newTime));\n      }\n      _this.scrollToSelection(newTime);\n      _this.setState({\n        timeState: newTime\n      });\n    };\n    var _this$props7 = _this.props,\n      is24Hour = _this$props7.is24Hour,\n      delimiter = _this$props7.delimiter,\n      time = _this$props7.time,\n      includeSeconds = _this$props7.includeSeconds,\n      isOpen = _this$props7.isOpen;\n    var _this$props8 = _this.props,\n      minTime = _this$props8.minTime,\n      maxTime = _this$props8.maxTime;\n    if (minTime === '') {\n      var minSeconds = includeSeconds ? \"\".concat(delimiter, \"00\") : '';\n      minTime = is24Hour ? \"00\".concat(delimiter, \"00\").concat(minSeconds) : \"12\".concat(delimiter, \"00\").concat(minSeconds, \" AM\");\n    }\n    if (maxTime === '') {\n      var maxSeconds = includeSeconds ? \"\".concat(delimiter, \"59\") : '';\n      maxTime = is24Hour ? \"23\".concat(delimiter, \"59\").concat(maxSeconds) : \"11\".concat(delimiter, \"59\").concat(maxSeconds, \" PM\");\n    }\n    var timeRegex = _this.getRegExp();\n    _this.state = {\n      isInvalid: false,\n      isTimeOptionsOpen: isOpen,\n      timeState: parseTime(time, timeRegex, delimiter, !is24Hour, includeSeconds),\n      focusedIndex: null,\n      scrollIndex: 0,\n      timeRegex: timeRegex,\n      minTimeState: parseTime(minTime, timeRegex, delimiter, !is24Hour, includeSeconds),\n      maxTimeState: parseTime(maxTime, timeRegex, delimiter, !is24Hour, includeSeconds)\n    };\n    return _this;\n  }\n  _createClass(TimePicker, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      document.addEventListener('mousedown', this.onDocClick);\n      document.addEventListener('touchstart', this.onDocClick);\n      document.addEventListener('keydown', this.handleGlobalKeys);\n      this.setState({\n        isInvalid: !this.isValid(this.state.timeState)\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      document.removeEventListener('mousedown', this.onDocClick);\n      document.removeEventListener('touchstart', this.onDocClick);\n      document.removeEventListener('keydown', this.handleGlobalKeys);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this$state4 = this.state,\n        timeState = _this$state4.timeState,\n        isTimeOptionsOpen = _this$state4.isTimeOptionsOpen,\n        isInvalid = _this$state4.isInvalid,\n        timeRegex = _this$state4.timeRegex;\n      var _this$props9 = this.props,\n        time = _this$props9.time,\n        is24Hour = _this$props9.is24Hour,\n        delimiter = _this$props9.delimiter,\n        includeSeconds = _this$props9.includeSeconds,\n        isOpen = _this$props9.isOpen,\n        minTime = _this$props9.minTime,\n        maxTime = _this$props9.maxTime;\n      if (prevProps.isOpen !== isOpen) {\n        this.onToggle(isOpen);\n      }\n      if (isTimeOptionsOpen && !prevState.isTimeOptionsOpen && timeState && !isInvalid) {\n        this.scrollToSelection(timeState);\n      }\n      if (delimiter !== prevProps.delimiter) {\n        this.setState({\n          timeRegex: this.getRegExp()\n        });\n      }\n      if (time !== '' && time !== prevProps.time) {\n        var parsedTime = parseTime(time, timeRegex, delimiter, !is24Hour, includeSeconds);\n        this.setState({\n          timeState: parsedTime,\n          isInvalid: !this.isValid(parsedTime)\n        });\n      }\n      if (minTime !== '' && minTime !== prevProps.minTime) {\n        this.setState({\n          minTimeState: parseTime(minTime, timeRegex, delimiter, !is24Hour, includeSeconds)\n        });\n      }\n      if (maxTime !== '' && maxTime !== prevProps.maxTime) {\n        this.setState({\n          maxTimeState: parseTime(maxTime, timeRegex, delimiter, !is24Hour, includeSeconds)\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var _a = this.props,\n        ariaLabel = _a['aria-label'],\n        isDisabled = _a.isDisabled,\n        className = _a.className,\n        placeholder = _a.placeholder,\n        id = _a.id,\n        menuAppendTo = _a.menuAppendTo,\n        is24Hour = _a.is24Hour,\n        invalidFormatErrorMessage = _a.invalidFormatErrorMessage,\n        invalidMinMaxErrorMessage = _a.invalidMinMaxErrorMessage,\n        stepMinutes = _a.stepMinutes,\n        width = _a.width,\n        delimiter = _a.delimiter,\n        inputProps = _a.inputProps,\n        onChange = _a.onChange,\n        setIsOpen = _a.setIsOpen,\n        isOpen = _a.isOpen,\n        time = _a.time,\n        validateTime = _a.validateTime,\n        minTime = _a.minTime,\n        maxTime = _a.maxTime,\n        includeSeconds = _a.includeSeconds,\n        removeFindDomNode = _a.removeFindDomNode,\n        zIndex = _a.zIndex,\n        props = __rest(_a, ['aria-label', \"isDisabled\", \"className\", \"placeholder\", \"id\", \"menuAppendTo\", \"is24Hour\", \"invalidFormatErrorMessage\", \"invalidMinMaxErrorMessage\", \"stepMinutes\", \"width\", \"delimiter\", \"inputProps\", \"onChange\", \"setIsOpen\", \"isOpen\", \"time\", \"validateTime\", \"minTime\", \"maxTime\", \"includeSeconds\", \"removeFindDomNode\", \"zIndex\"]);\n      var _this$state5 = this.state,\n        timeState = _this$state5.timeState,\n        isTimeOptionsOpen = _this$state5.isTimeOptionsOpen,\n        isInvalid = _this$state5.isInvalid,\n        minTimeState = _this$state5.minTimeState,\n        maxTimeState = _this$state5.maxTimeState;\n      var style = {\n        '--pf-c-date-picker__input--c-form-control--Width': width\n      };\n      var options = makeTimeOptions(stepMinutes, !is24Hour, delimiter, minTimeState, maxTimeState, includeSeconds);\n      var isValidFormat = this.isValidFormat(timeState);\n      var randomId = id || getUniqueId('time-picker');\n      var getParentElement = function getParentElement() {\n        if (_this2.baseComponentRef && _this2.baseComponentRef.current) {\n          return _this2.baseComponentRef.current.parentElement;\n        }\n        return null;\n      };\n      var menuContainer = React.createElement(Menu, {\n        ref: this.menuRef,\n        isScrollable: true\n      }, React.createElement(MenuContent, {\n        maxMenuHeight: \"200px\"\n      }, React.createElement(MenuList, {\n        \"aria-label\": ariaLabel\n      }, options.map(function (option, index) {\n        return React.createElement(MenuItem, {\n          onClick: _this2.onSelect,\n          key: option,\n          id: \"\".concat(randomId, \"-option-\").concat(index)\n        }, option);\n      }))));\n      var textInput = React.createElement(TextInput, Object.assign({\n        \"aria-haspopup\": \"menu\",\n        className: css(formStyles.formControl),\n        id: \"\".concat(randomId, \"-input\"),\n        \"aria-label\": ariaLabel,\n        validated: isInvalid ? 'error' : 'default',\n        placeholder: placeholder,\n        value: timeState || '',\n        type: \"text\",\n        iconVariant: \"clock\",\n        onClick: this.onInputClick,\n        onChange: this.onInputChange,\n        autoComplete: \"off\",\n        isDisabled: isDisabled,\n        ref: this.inputRef\n      }, inputProps));\n      var calculatedAppendTo;\n      switch (menuAppendTo) {\n        case 'inline':\n          calculatedAppendTo = function calculatedAppendTo() {\n            return _this2.toggleRef.current;\n          };\n          break;\n        case 'parent':\n          calculatedAppendTo = getParentElement;\n          break;\n        default:\n          calculatedAppendTo = menuAppendTo;\n      }\n      return React.createElement(\"div\", {\n        ref: this.baseComponentRef,\n        className: css(datePickerStyles.datePicker, className)\n      }, React.createElement(\"div\", Object.assign({\n        className: css(datePickerStyles.datePickerInput),\n        style: style\n      }, props), React.createElement(InputGroup, null, React.createElement(\"div\", {\n        id: randomId\n      }, React.createElement(\"div\", {\n        ref: this.toggleRef,\n        style: {\n          paddingLeft: '0'\n        }\n      }, React.createElement(Popper, {\n        appendTo: calculatedAppendTo,\n        trigger: textInput,\n        popper: menuContainer,\n        isVisible: isTimeOptionsOpen,\n        removeFindDomNode: removeFindDomNode,\n        zIndex: zIndex\n      })))), isInvalid && React.createElement(\"div\", {\n        className: css(datePickerStyles.datePickerHelperText, datePickerStyles.modifiers.error)\n      }, !isValidFormat ? invalidFormatErrorMessage : invalidMinMaxErrorMessage)));\n    }\n  }]);\n  return TimePicker;\n}(React.Component);\nTimePicker.displayName = 'TimePicker';\nTimePicker.defaultProps = {\n  className: '',\n  isDisabled: false,\n  time: '',\n  is24Hour: false,\n  invalidFormatErrorMessage: 'Invalid time format',\n  invalidMinMaxErrorMessage: 'Invalid time entered',\n  placeholder: 'hh:mm',\n  delimiter: ':',\n  'aria-label': 'Time picker',\n  width: '150px',\n  menuAppendTo: 'inline',\n  stepMinutes: 30,\n  inputProps: {},\n  minTime: '',\n  maxTime: '',\n  isOpen: false,\n  setIsOpen: function setIsOpen() {},\n  removeFindDomNode: false,\n  zIndex: 9999\n};","map":{"version":3,"names":["React","css","datePickerStyles","formStyles","menuStyles","getUniqueId","Popper","Menu","MenuContent","MenuList","MenuItem","InputGroup","TextInput","KeyTypes","parseTime","validateTime","makeTimeOptions","amSuffix","pmSuffix","getHours","getMinutes","isWithinMinMax","getSeconds","TimePicker","_React$Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","baseComponentRef","createRef","toggleRef","inputRef","menuRef","onDocClick","event","clickedOnToggle","_b","_a","current","contains","target","clickedWithinMenu","_d","_c","state","isTimeOptionsOpen","onToggle","handleGlobalKeys","_this$state","focusedIndex","scrollIndex","key","Tab","Escape","Enter","focusSelection","stopPropagation","ArrowDown","ArrowUp","updateFocusedIndex","preventDefault","focus","increment","setState","prevState","maxIndex","getOptions","length","nextIndex","scrollToIndex","getIndexToScroll","index","menuAppendTo","closest","concat","menuContent","scrollTop","offsetTop","indexToFocus","querySelector","menuItem","scrollToSelection","time","_this$props","delimiter","is24Hour","splitTime","split","timeRegex","minutes","Date","toUpperCase","includes","trim","findIndex","option","textContent","amPm","getRegExp","includeSeconds","arguments","undefined","_this$props2","baseRegex","RegExp","Array","from","querySelectorAll","menuListItem","isValidFormat","_this$props3","isValidTime","_this$props4","_this$state2","minTimeState","maxTimeState","isValid","isOpen","isInvalid","timeState","_this$props5","onChange","setIsOpen","onSelect","e","_this$state3","_this$props6","onInputChange","onInputClick","newTime","_this$props7","_this$props8","minTime","maxTime","minSeconds","maxSeconds","_createClass","value","componentDidMount","document","addEventListener","componentWillUnmount","removeEventListener","componentDidUpdate","prevProps","_this$state4","_this$props9","parsedTime","render","_this2","ariaLabel","isDisabled","className","placeholder","id","invalidFormatErrorMessage","invalidMinMaxErrorMessage","stepMinutes","width","inputProps","removeFindDomNode","zIndex","__rest","_this$state5","style","options","randomId","getParentElement","parentElement","menuContainer","createElement","ref","isScrollable","maxMenuHeight","map","onClick","textInput","Object","assign","formControl","validated","type","iconVariant","autoComplete","calculatedAppendTo","datePicker","datePickerInput","paddingLeft","appendTo","trigger","popper","isVisible","datePickerHelperText","modifiers","error","Component","displayName","defaultProps"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@patternfly/react-core/src/components/TimePicker/TimePicker.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport datePickerStyles from '@patternfly/react-styles/css/components/DatePicker/date-picker';\nimport formStyles from '@patternfly/react-styles/css/components/FormControl/form-control';\nimport menuStyles from '@patternfly/react-styles/css/components/Menu/menu';\nimport { getUniqueId } from '../../helpers';\nimport { Popper } from '../../helpers/Popper/Popper';\nimport { Menu, MenuContent, MenuList, MenuItem } from '../Menu';\nimport { InputGroup } from '../InputGroup';\nimport { TextInput, TextInputProps } from '../TextInput';\nimport { KeyTypes } from '../../helpers/constants';\nimport {\n  parseTime,\n  validateTime,\n  makeTimeOptions,\n  amSuffix,\n  pmSuffix,\n  getHours,\n  getMinutes,\n  isWithinMinMax,\n  getSeconds\n} from './TimePickerUtils';\n\nexport interface TimePickerProps\n  extends Omit<React.HTMLProps<HTMLDivElement>, 'onChange' | 'onFocus' | 'onBlur' | 'disabled' | 'ref'> {\n  /** Additional classes added to the time picker. */\n  className?: string;\n  /** Accessible label for the time picker */\n  'aria-label'?: string;\n  /** Flag indicating the time picker is disabled */\n  isDisabled?: boolean;\n  /** String to display in the empty time picker field as a hint for the expected time format */\n  placeholder?: string;\n  /** Character to display between the hour and minute */\n  delimiter?: string;\n  /** A time string. The format could be  an ISO 8601 formatted date string or in 'HH{delimiter}MM' format */\n  time?: string | Date;\n  /** Error message to display when the time is provided in an invalid format. */\n  invalidFormatErrorMessage?: string;\n  /** Error message to display when the time provided is not within the minTime/maxTime constriants */\n  invalidMinMaxErrorMessage?: string;\n  /** True if the time is 24 hour time. False if the time is 12 hour time */\n  is24Hour?: boolean;\n  /** Optional event handler called each time the value in the time picker input changes. */\n  onChange?: (\n    event: React.FormEvent<HTMLInputElement>,\n    time: string,\n    hour?: number,\n    minute?: number,\n    seconds?: number,\n    isValid?: boolean\n  ) => void;\n  /** Optional validator can be provided to override the internal time validator. */\n  validateTime?: (time: string) => boolean;\n  /** Id of the time picker */\n  id?: string;\n  /** Width of the time picker. */\n  width?: string;\n  /** The container to append the menu to. Defaults to 'inline'.\n   * If your menu is being cut off you can append it to an element higher up the DOM tree.\n   * Some examples:\n   * menuAppendTo=\"parent\"\n   * menuAppendTo={() => document.body}\n   * menuAppendTo={document.getElementById('target')}\n   */\n  menuAppendTo?: HTMLElement | (() => HTMLElement) | 'inline' | 'parent';\n  /** Size of step between time options in minutes.*/\n  stepMinutes?: number;\n  /** Additional props for input field */\n  inputProps?: TextInputProps;\n  /** A time string indicating the minimum value allowed. The format could be an ISO 8601 formatted date string or in 'HH{delimiter}MM' format */\n  minTime?: string | Date;\n  /** A time string indicating the maximum value allowed. The format could be an ISO 8601 formatted date string or in 'HH{delimiter}MM' format */\n  maxTime?: string | Date;\n  /** Includes number of seconds with the chosen time and allows users to manually edit the seconds value. */\n  includeSeconds?: boolean;\n  /** Flag to control the opened state of the time picker menu */\n  isOpen?: boolean;\n  /** Handler invoked each time the open state of time picker updates */\n  setIsOpen?: (isOpen?: boolean) => void;\n  /** @beta Opt-in for updated popper that does not use findDOMNode. */\n  removeFindDomNode?: boolean;\n  /** z-index of the time picker */\n  zIndex?: number;\n}\n\ninterface TimePickerState {\n  isInvalid: boolean;\n  isTimeOptionsOpen: boolean;\n  timeState: string;\n  focusedIndex: number;\n  scrollIndex: number;\n  timeRegex: RegExp;\n  minTimeState: string;\n  maxTimeState: string;\n}\n\nexport class TimePicker extends React.Component<TimePickerProps, TimePickerState> {\n  static displayName = 'TimePicker';\n  private baseComponentRef = React.createRef<any>();\n  private toggleRef = React.createRef<HTMLDivElement>();\n  private inputRef = React.createRef<HTMLInputElement>();\n  private menuRef = React.createRef<HTMLDivElement>();\n\n  static defaultProps = {\n    className: '',\n    isDisabled: false,\n    time: '',\n    is24Hour: false,\n    invalidFormatErrorMessage: 'Invalid time format',\n    invalidMinMaxErrorMessage: 'Invalid time entered',\n    placeholder: 'hh:mm',\n    delimiter: ':',\n    'aria-label': 'Time picker',\n    width: '150px',\n    menuAppendTo: 'inline',\n    stepMinutes: 30,\n    inputProps: {},\n    minTime: '',\n    maxTime: '',\n    isOpen: false,\n    setIsOpen: () => {},\n    removeFindDomNode: false,\n    zIndex: 9999\n  };\n\n  constructor(props: TimePickerProps) {\n    super(props);\n    const { is24Hour, delimiter, time, includeSeconds, isOpen } = this.props;\n    let { minTime, maxTime } = this.props;\n    if (minTime === '') {\n      const minSeconds = includeSeconds ? `${delimiter}00` : '';\n      minTime = is24Hour ? `00${delimiter}00${minSeconds}` : `12${delimiter}00${minSeconds} AM`;\n    }\n    if (maxTime === '') {\n      const maxSeconds = includeSeconds ? `${delimiter}59` : '';\n      maxTime = is24Hour ? `23${delimiter}59${maxSeconds}` : `11${delimiter}59${maxSeconds} PM`;\n    }\n    const timeRegex = this.getRegExp();\n    this.state = {\n      isInvalid: false,\n      isTimeOptionsOpen: isOpen,\n      timeState: parseTime(time, timeRegex, delimiter, !is24Hour, includeSeconds),\n      focusedIndex: null,\n      scrollIndex: 0,\n      timeRegex,\n      minTimeState: parseTime(minTime, timeRegex, delimiter, !is24Hour, includeSeconds),\n      maxTimeState: parseTime(maxTime, timeRegex, delimiter, !is24Hour, includeSeconds)\n    };\n  }\n\n  componentDidMount() {\n    document.addEventListener('mousedown', this.onDocClick);\n    document.addEventListener('touchstart', this.onDocClick);\n    document.addEventListener('keydown', this.handleGlobalKeys);\n\n    this.setState({ isInvalid: !this.isValid(this.state.timeState) });\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('mousedown', this.onDocClick);\n    document.removeEventListener('touchstart', this.onDocClick);\n    document.removeEventListener('keydown', this.handleGlobalKeys);\n  }\n\n  onDocClick = (event: MouseEvent | TouchEvent) => {\n    const clickedOnToggle = this.toggleRef?.current?.contains(event.target as Node);\n    const clickedWithinMenu = this.menuRef?.current?.contains(event.target as Node);\n    if (this.state.isTimeOptionsOpen && !(clickedOnToggle || clickedWithinMenu)) {\n      this.onToggle(false);\n    }\n  };\n\n  handleGlobalKeys = (event: KeyboardEvent) => {\n    const { isTimeOptionsOpen, focusedIndex, scrollIndex } = this.state;\n    // keyboard pressed while focus on toggle\n    if (this.inputRef?.current?.contains(event.target as Node)) {\n      if (!isTimeOptionsOpen && event.key !== KeyTypes.Tab && event.key !== KeyTypes.Escape) {\n        this.onToggle(true);\n      } else if (isTimeOptionsOpen) {\n        if (event.key === KeyTypes.Escape || event.key === KeyTypes.Tab) {\n          this.onToggle(false);\n        } else if (event.key === KeyTypes.Enter) {\n          if (focusedIndex !== null) {\n            this.focusSelection(focusedIndex);\n            event.stopPropagation();\n          } else {\n            this.onToggle(false);\n          }\n        } else if (event.key === KeyTypes.ArrowDown || event.key === KeyTypes.ArrowUp) {\n          this.focusSelection(scrollIndex);\n          this.updateFocusedIndex(0);\n          event.preventDefault();\n        }\n      }\n      // keyboard pressed while focus on menu item\n    } else if (this.menuRef?.current?.contains(event.target as Node)) {\n      if (event.key === KeyTypes.ArrowDown) {\n        this.updateFocusedIndex(1);\n        event.preventDefault();\n      } else if (event.key === KeyTypes.ArrowUp) {\n        this.updateFocusedIndex(-1);\n        event.preventDefault();\n      } else if (event.key === KeyTypes.Escape || event.key === KeyTypes.Tab) {\n        this.inputRef.current.focus();\n        this.onToggle(false);\n      }\n    }\n  };\n\n  componentDidUpdate(prevProps: TimePickerProps, prevState: TimePickerState) {\n    const { timeState, isTimeOptionsOpen, isInvalid, timeRegex } = this.state;\n    const { time, is24Hour, delimiter, includeSeconds, isOpen, minTime, maxTime } = this.props;\n    if (prevProps.isOpen !== isOpen) {\n      this.onToggle(isOpen);\n    }\n\n    if (isTimeOptionsOpen && !prevState.isTimeOptionsOpen && timeState && !isInvalid) {\n      this.scrollToSelection(timeState);\n    }\n    if (delimiter !== prevProps.delimiter) {\n      this.setState({\n        timeRegex: this.getRegExp()\n      });\n    }\n    if (time !== '' && time !== prevProps.time) {\n      const parsedTime = parseTime(time, timeRegex, delimiter, !is24Hour, includeSeconds);\n\n      this.setState({\n        timeState: parsedTime,\n        isInvalid: !this.isValid(parsedTime)\n      });\n    }\n    if (minTime !== '' && minTime !== prevProps.minTime) {\n      this.setState({\n        minTimeState: parseTime(minTime, timeRegex, delimiter, !is24Hour, includeSeconds)\n      });\n    }\n\n    if (maxTime !== '' && maxTime !== prevProps.maxTime) {\n      this.setState({\n        maxTimeState: parseTime(maxTime, timeRegex, delimiter, !is24Hour, includeSeconds)\n      });\n    }\n  }\n\n  updateFocusedIndex = (increment: number) => {\n    this.setState(prevState => {\n      const maxIndex = this.getOptions().length - 1;\n      let nextIndex =\n        prevState.focusedIndex !== null ? prevState.focusedIndex + increment : prevState.scrollIndex + increment;\n      if (nextIndex < 0) {\n        nextIndex = maxIndex;\n      } else if (nextIndex > maxIndex) {\n        nextIndex = 0;\n      }\n      this.scrollToIndex(nextIndex);\n      return {\n        focusedIndex: nextIndex\n      };\n    });\n  };\n\n  // fixes issue where menutAppendTo=\"inline\" results in the menu item that should be scrolled to being out of view; this will select the menu item that comes before the intended one, causing that before-item to be placed out of view instead\n  getIndexToScroll = (index: number) => {\n    if (this.props.menuAppendTo === 'inline') {\n      return index > 0 ? index - 1 : 0;\n    }\n    return index;\n  };\n\n  scrollToIndex = (index: number) => {\n    this.getOptions()[index].closest(`.${menuStyles.menuContent}`).scrollTop = this.getOptions()[\n      this.getIndexToScroll(index)\n    ].offsetTop;\n  };\n\n  focusSelection = (index: number) => {\n    const indexToFocus = index !== -1 ? index : 0;\n\n    if (this.menuRef?.current) {\n      (this.getOptions()[indexToFocus].querySelector(`.${menuStyles.menuItem}`) as HTMLElement).focus();\n    }\n  };\n\n  scrollToSelection = (time: string) => {\n    const { delimiter, is24Hour } = this.props;\n    let splitTime = time.split(this.props.delimiter);\n    let focusedIndex = null;\n\n    // build out the rest of the time assuming hh:00 if it's a partial time\n    if (splitTime.length < 2) {\n      time = `${time}${delimiter}00`;\n      splitTime = time.split(delimiter);\n      // due to only the input including seconds when includeSeconds=true, we need to build a temporary time here without those seconds so that an exact or close match can be scrolled to within the menu (which does not include seconds in any of the options)\n    } else if (splitTime.length > 2) {\n      time = parseTime(time, this.state.timeRegex, delimiter, !is24Hour, false);\n      splitTime = time.split(delimiter);\n    }\n\n    // for 12hr variant, autoscroll to pm if it's currently the afternoon, otherwise autoscroll to am\n    if (!is24Hour && splitTime.length > 1 && splitTime[1].length < 2) {\n      const minutes = splitTime[1].length === 0 ? '00' : splitTime[1] + '0';\n      time = `${splitTime[0]}${delimiter}${minutes}${new Date().getHours() > 11 ? pmSuffix : amSuffix}`;\n    } else if (\n      !is24Hour &&\n      splitTime.length > 1 &&\n      splitTime[1].length === 2 &&\n      !time.toUpperCase().includes(amSuffix.toUpperCase().trim()) &&\n      !time.toUpperCase().includes(pmSuffix.toUpperCase().trim())\n    ) {\n      time = `${time}${new Date().getHours() > 11 ? pmSuffix : amSuffix}`;\n    }\n    let scrollIndex = this.getOptions().findIndex(option => option.textContent === time);\n\n    // if we found an exact match, scroll to match and return index of match for focus\n    if (scrollIndex !== -1) {\n      this.scrollToIndex(scrollIndex);\n      focusedIndex = scrollIndex;\n    } else if (splitTime.length === 2) {\n      // no exact match, scroll to closest hour but don't return index for focus\n      let amPm = '';\n      if (!is24Hour) {\n        if (splitTime[1].toUpperCase().includes('P')) {\n          amPm = pmSuffix;\n        } else if (splitTime[1].toUpperCase().includes('A')) {\n          amPm = amSuffix;\n        }\n      }\n      time = `${splitTime[0]}${delimiter}00${amPm}`;\n      scrollIndex = this.getOptions().findIndex(option => option.textContent === time);\n      if (scrollIndex !== -1) {\n        this.scrollToIndex(scrollIndex);\n      }\n    }\n    this.setState({\n      focusedIndex,\n      scrollIndex\n    });\n  };\n\n  getRegExp = (includeSeconds: boolean = true) => {\n    const { is24Hour, delimiter } = this.props;\n    let baseRegex = `\\\\s*(\\\\d\\\\d?)${delimiter}([0-5]\\\\d)`;\n\n    if (includeSeconds) {\n      baseRegex += `${delimiter}?([0-5]\\\\d)?`;\n    }\n\n    return new RegExp(`^${baseRegex}${is24Hour ? '' : '\\\\s*([AaPp][Mm])?'}\\\\s*$`);\n  };\n\n  getOptions = () =>\n    (this.menuRef?.current\n      ? Array.from(this.menuRef.current.querySelectorAll(`.${menuStyles.menuListItem}`))\n      : []) as HTMLElement[];\n\n  isValidFormat = (time: string) => {\n    if (this.props.validateTime) {\n      return this.props.validateTime(time);\n    }\n\n    const { delimiter, is24Hour, includeSeconds } = this.props;\n    return validateTime(time, this.getRegExp(includeSeconds), delimiter, !is24Hour);\n  };\n\n  isValidTime = (time: string) => {\n    const { delimiter, includeSeconds } = this.props;\n    const { minTimeState, maxTimeState } = this.state;\n\n    return isWithinMinMax(minTimeState, maxTimeState, time, delimiter, includeSeconds);\n  };\n\n  isValid = (time: string) => this.isValidFormat(time) && this.isValidTime(time);\n\n  onToggle = (isOpen: boolean) => {\n    // on close, parse and validate input\n    this.setState(prevState => {\n      const { timeRegex, isInvalid, timeState } = prevState;\n      const { delimiter, is24Hour, includeSeconds, onChange } = this.props;\n      const time = parseTime(timeState, timeRegex, delimiter, !is24Hour, includeSeconds);\n\n      // Call onChange when Enter is pressed in input and timeoption does not exist in menu\n      if (onChange && !isOpen && time !== timeState) {\n        onChange(\n          null,\n          time,\n          getHours(time, timeRegex),\n          getMinutes(time, timeRegex),\n          getSeconds(time, timeRegex),\n          this.isValid(time)\n        );\n      }\n\n      return {\n        isTimeOptionsOpen: isOpen,\n        timeState: time,\n        isInvalid: isOpen ? isInvalid : !this.isValid(time)\n      };\n    });\n    this.props.setIsOpen(isOpen);\n    if (!isOpen) {\n      this.inputRef.current.focus();\n    }\n  };\n\n  onSelect = (e: any) => {\n    const { timeRegex, timeState } = this.state;\n    const { delimiter, is24Hour, includeSeconds, setIsOpen } = this.props;\n    const time = parseTime(e.target.textContent, timeRegex, delimiter, !is24Hour, includeSeconds);\n    if (time !== timeState) {\n      this.onInputChange(time, e);\n    }\n\n    this.inputRef.current.focus();\n    this.setState({\n      isTimeOptionsOpen: false,\n      isInvalid: false\n    });\n    setIsOpen(false);\n  };\n\n  onInputClick = (e: any) => {\n    if (!this.state.isTimeOptionsOpen) {\n      this.onToggle(true);\n    }\n    e.stopPropagation();\n  };\n\n  onInputChange = (newTime: string, event: React.FormEvent<HTMLInputElement>) => {\n    const { onChange } = this.props;\n    const { timeRegex } = this.state;\n    if (onChange) {\n      onChange(\n        event,\n        newTime,\n        getHours(newTime, timeRegex),\n        getMinutes(newTime, timeRegex),\n        getSeconds(newTime, timeRegex),\n        this.isValid(newTime)\n      );\n    }\n    this.scrollToSelection(newTime);\n    this.setState({\n      timeState: newTime\n    });\n  };\n\n  render() {\n    const {\n      'aria-label': ariaLabel,\n      isDisabled,\n      className,\n      placeholder,\n      id,\n      menuAppendTo,\n      is24Hour,\n      invalidFormatErrorMessage,\n      invalidMinMaxErrorMessage,\n      stepMinutes,\n      width,\n      delimiter,\n      inputProps,\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      onChange,\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      setIsOpen,\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      isOpen,\n      time,\n      validateTime,\n      minTime,\n      maxTime,\n      includeSeconds,\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      removeFindDomNode,\n      zIndex,\n      ...props\n    } = this.props;\n    const { timeState, isTimeOptionsOpen, isInvalid, minTimeState, maxTimeState } = this.state;\n    const style = { '--pf-c-date-picker__input--c-form-control--Width': width } as React.CSSProperties;\n    const options = makeTimeOptions(stepMinutes, !is24Hour, delimiter, minTimeState, maxTimeState, includeSeconds);\n    const isValidFormat = this.isValidFormat(timeState);\n    const randomId = id || getUniqueId('time-picker');\n\n    const getParentElement = () => {\n      if (this.baseComponentRef && this.baseComponentRef.current) {\n        return this.baseComponentRef.current.parentElement;\n      }\n      return null;\n    };\n\n    const menuContainer = (\n      <Menu ref={this.menuRef} isScrollable>\n        <MenuContent maxMenuHeight=\"200px\">\n          <MenuList aria-label={ariaLabel}>\n            {options.map((option, index) => (\n              <MenuItem onClick={this.onSelect} key={option} id={`${randomId}-option-${index}`}>\n                {option}\n              </MenuItem>\n            ))}\n          </MenuList>\n        </MenuContent>\n      </Menu>\n    );\n\n    const textInput = (\n      <TextInput\n        aria-haspopup=\"menu\"\n        className={css(formStyles.formControl)}\n        id={`${randomId}-input`}\n        aria-label={ariaLabel}\n        validated={isInvalid ? 'error' : 'default'}\n        placeholder={placeholder}\n        value={timeState || ''}\n        type=\"text\"\n        iconVariant=\"clock\"\n        onClick={this.onInputClick}\n        onChange={this.onInputChange}\n        autoComplete=\"off\"\n        isDisabled={isDisabled}\n        ref={this.inputRef}\n        {...inputProps}\n      />\n    );\n\n    let calculatedAppendTo;\n    switch (menuAppendTo) {\n      case 'inline':\n        calculatedAppendTo = () => this.toggleRef.current;\n        break;\n      case 'parent':\n        calculatedAppendTo = getParentElement;\n        break;\n      default:\n        calculatedAppendTo = menuAppendTo as HTMLElement;\n    }\n\n    return (\n      <div ref={this.baseComponentRef} className={css(datePickerStyles.datePicker, className)}>\n        <div className={css(datePickerStyles.datePickerInput)} style={style} {...props}>\n          <InputGroup>\n            <div id={randomId}>\n              <div ref={this.toggleRef} style={{ paddingLeft: '0' }}>\n                <Popper\n                  appendTo={calculatedAppendTo}\n                  trigger={textInput}\n                  popper={menuContainer}\n                  isVisible={isTimeOptionsOpen}\n                  removeFindDomNode={removeFindDomNode}\n                  zIndex={zIndex}\n                />\n              </div>\n            </div>\n          </InputGroup>\n          {isInvalid && (\n            <div className={css(datePickerStyles.datePickerHelperText, datePickerStyles.modifiers.error)}>\n              {!isValidFormat ? invalidFormatErrorMessage : invalidMinMaxErrorMessage}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}