{"ast":null,"code":"import _slicedToArray from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport * as React from 'react';\nvar globalId = 0;\nfunction useGlobalId(idOverride) {\n  var _React$useState = React.useState(idOverride),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    defaultId = _React$useState2[0],\n    setDefaultId = _React$useState2[1];\n  var id = idOverride || defaultId;\n  React.useEffect(function () {\n    if (defaultId == null) {\n      // Fallback to this default id when possible.\n      // Use the incrementing value for client-side rendering only.\n      // We can't use it server-side.\n      // If you want to use random values please consider the Birthday Problem: https://en.wikipedia.org/wiki/Birthday_problem\n      globalId += 1;\n      setDefaultId(\"mui-\".concat(globalId));\n    }\n  }, [defaultId]);\n  return id;\n}\n\n// downstream bundlers may remove unnecessary concatenation, but won't remove toString call -- Workaround for https://github.com/webpack/webpack/issues/14814\nvar maybeReactUseId = React['useId'.toString()];\n/**\n *\n * @example <div id={useId()} />\n * @param idOverride\n * @returns {string}\n */\nexport default function useId(idOverride) {\n  if (maybeReactUseId !== undefined) {\n    var reactId = maybeReactUseId();\n    return idOverride != null ? idOverride : reactId;\n  }\n  // eslint-disable-next-line react-hooks/rules-of-hooks -- `React.useId` is invariant at runtime.\n  return useGlobalId(idOverride);\n}","map":{"version":3,"names":["React","globalId","useGlobalId","idOverride","_React$useState","useState","_React$useState2","_slicedToArray","defaultId","setDefaultId","id","useEffect","concat","maybeReactUseId","toString","useId","undefined","reactId"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@mui/utils/esm/useId.js"],"sourcesContent":["import * as React from 'react';\nlet globalId = 0;\nfunction useGlobalId(idOverride) {\n  const [defaultId, setDefaultId] = React.useState(idOverride);\n  const id = idOverride || defaultId;\n  React.useEffect(() => {\n    if (defaultId == null) {\n      // Fallback to this default id when possible.\n      // Use the incrementing value for client-side rendering only.\n      // We can't use it server-side.\n      // If you want to use random values please consider the Birthday Problem: https://en.wikipedia.org/wiki/Birthday_problem\n      globalId += 1;\n      setDefaultId(`mui-${globalId}`);\n    }\n  }, [defaultId]);\n  return id;\n}\n\n// downstream bundlers may remove unnecessary concatenation, but won't remove toString call -- Workaround for https://github.com/webpack/webpack/issues/14814\nconst maybeReactUseId = React['useId'.toString()];\n/**\n *\n * @example <div id={useId()} />\n * @param idOverride\n * @returns {string}\n */\nexport default function useId(idOverride) {\n  if (maybeReactUseId !== undefined) {\n    const reactId = maybeReactUseId();\n    return idOverride != null ? idOverride : reactId;\n  }\n  // eslint-disable-next-line react-hooks/rules-of-hooks -- `React.useId` is invariant at runtime.\n  return useGlobalId(idOverride);\n}"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,IAAIC,QAAQ,GAAG,CAAC;AAChB,SAASC,WAAWA,CAACC,UAAU,EAAE;EAC/B,IAAAC,eAAA,GAAkCJ,KAAK,CAACK,QAAQ,CAACF,UAAU,CAAC;IAAAG,gBAAA,GAAAC,cAAA,CAAAH,eAAA;IAArDI,SAAS,GAAAF,gBAAA;IAAEG,YAAY,GAAAH,gBAAA;EAC9B,IAAMI,EAAE,GAAGP,UAAU,IAAIK,SAAS;EAClCR,KAAK,CAACW,SAAS,CAAC,YAAM;IACpB,IAAIH,SAAS,IAAI,IAAI,EAAE;MACrB;MACA;MACA;MACA;MACAP,QAAQ,IAAI,CAAC;MACbQ,YAAY,QAAAG,MAAA,CAAQX,QAAQ,CAAE,CAAC;IACjC;EACF,CAAC,EAAE,CAACO,SAAS,CAAC,CAAC;EACf,OAAOE,EAAE;AACX;;AAEA;AACA,IAAMG,eAAe,GAAGb,KAAK,CAAC,OAAO,CAACc,QAAQ,CAAC,CAAC,CAAC;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,KAAKA,CAACZ,UAAU,EAAE;EACxC,IAAIU,eAAe,KAAKG,SAAS,EAAE;IACjC,IAAMC,OAAO,GAAGJ,eAAe,CAAC,CAAC;IACjC,OAAOV,UAAU,IAAI,IAAI,GAAGA,UAAU,GAAGc,OAAO;EAClD;EACA;EACA,OAAOf,WAAW,CAACC,UAAU,CAAC;AAChC"},"metadata":{},"sourceType":"module","externalDependencies":[]}