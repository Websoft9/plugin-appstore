{"ast":null,"code":"import PropTypes from 'prop-types';\nimport chainPropTypes from './chainPropTypes';\nfunction isClassComponent(elementType) {\n  // elementType.prototype?.isReactComponent\n  var _elementType$prototyp = elementType.prototype,\n    prototype = _elementType$prototyp === void 0 ? {} : _elementType$prototyp;\n  return Boolean(prototype.isReactComponent);\n}\nfunction acceptingRef(props, propName, componentName, location, propFullName) {\n  var element = props[propName];\n  var safePropName = propFullName || propName;\n  if (element == null ||\n  // When server-side rendering React doesn't warn either.\n  // This is not an accurate check for SSR.\n  // This is only in place for Emotion compat.\n  // TODO: Revisit once https://github.com/facebook/react/issues/20047 is resolved.\n  typeof window === 'undefined') {\n    return null;\n  }\n  var warningHint;\n  var elementType = element.type;\n  /**\n   * Blacklisting instead of whitelisting\n   *\n   * Blacklisting will miss some components, such as React.Fragment. Those will at least\n   * trigger a warning in React.\n   * We can't whitelist because there is no safe way to detect React.forwardRef\n   * or class components. \"Safe\" means there's no public API.\n   *\n   */\n  if (typeof elementType === 'function' && !isClassComponent(elementType)) {\n    warningHint = 'Did you accidentally use a plain function component for an element instead?';\n  }\n  if (warningHint !== undefined) {\n    return new Error(\"Invalid \".concat(location, \" `\").concat(safePropName, \"` supplied to `\").concat(componentName, \"`. \") + \"Expected an element that can hold a ref. \".concat(warningHint, \" \") + 'For more information see https://mui.com/r/caveat-with-refs-guide');\n  }\n  return null;\n}\nvar elementAcceptingRef = chainPropTypes(PropTypes.element, acceptingRef);\nelementAcceptingRef.isRequired = chainPropTypes(PropTypes.element.isRequired, acceptingRef);\nexport default elementAcceptingRef;","map":{"version":3,"names":["PropTypes","chainPropTypes","isClassComponent","elementType","_elementType$prototyp","prototype","Boolean","isReactComponent","acceptingRef","props","propName","componentName","location","propFullName","element","safePropName","window","warningHint","type","undefined","Error","concat","elementAcceptingRef","isRequired"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@mui/utils/esm/elementAcceptingRef.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport chainPropTypes from './chainPropTypes';\nfunction isClassComponent(elementType) {\n  // elementType.prototype?.isReactComponent\n  const {\n    prototype = {}\n  } = elementType;\n  return Boolean(prototype.isReactComponent);\n}\nfunction acceptingRef(props, propName, componentName, location, propFullName) {\n  const element = props[propName];\n  const safePropName = propFullName || propName;\n  if (element == null ||\n  // When server-side rendering React doesn't warn either.\n  // This is not an accurate check for SSR.\n  // This is only in place for Emotion compat.\n  // TODO: Revisit once https://github.com/facebook/react/issues/20047 is resolved.\n  typeof window === 'undefined') {\n    return null;\n  }\n  let warningHint;\n  const elementType = element.type;\n  /**\n   * Blacklisting instead of whitelisting\n   *\n   * Blacklisting will miss some components, such as React.Fragment. Those will at least\n   * trigger a warning in React.\n   * We can't whitelist because there is no safe way to detect React.forwardRef\n   * or class components. \"Safe\" means there's no public API.\n   *\n   */\n  if (typeof elementType === 'function' && !isClassComponent(elementType)) {\n    warningHint = 'Did you accidentally use a plain function component for an element instead?';\n  }\n  if (warningHint !== undefined) {\n    return new Error(`Invalid ${location} \\`${safePropName}\\` supplied to \\`${componentName}\\`. ` + `Expected an element that can hold a ref. ${warningHint} ` + 'For more information see https://mui.com/r/caveat-with-refs-guide');\n  }\n  return null;\n}\nconst elementAcceptingRef = chainPropTypes(PropTypes.element, acceptingRef);\nelementAcceptingRef.isRequired = chainPropTypes(PropTypes.element.isRequired, acceptingRef);\nexport default elementAcceptingRef;"],"mappings":"AAAA,OAAOA,SAAS,MAAM,YAAY;AAClC,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,SAASC,gBAAgBA,CAACC,WAAW,EAAE;EACrC;EACA,IAAAC,qBAAA,GAEID,WAAW,CADbE,SAAS;IAATA,SAAS,GAAAD,qBAAA,cAAG,CAAC,CAAC,GAAAA,qBAAA;EAEhB,OAAOE,OAAO,CAACD,SAAS,CAACE,gBAAgB,CAAC;AAC5C;AACA,SAASC,YAAYA,CAACC,KAAK,EAAEC,QAAQ,EAAEC,aAAa,EAAEC,QAAQ,EAAEC,YAAY,EAAE;EAC5E,IAAMC,OAAO,GAAGL,KAAK,CAACC,QAAQ,CAAC;EAC/B,IAAMK,YAAY,GAAGF,YAAY,IAAIH,QAAQ;EAC7C,IAAII,OAAO,IAAI,IAAI;EACnB;EACA;EACA;EACA;EACA,OAAOE,MAAM,KAAK,WAAW,EAAE;IAC7B,OAAO,IAAI;EACb;EACA,IAAIC,WAAW;EACf,IAAMd,WAAW,GAAGW,OAAO,CAACI,IAAI;EAChC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,OAAOf,WAAW,KAAK,UAAU,IAAI,CAACD,gBAAgB,CAACC,WAAW,CAAC,EAAE;IACvEc,WAAW,GAAG,6EAA6E;EAC7F;EACA,IAAIA,WAAW,KAAKE,SAAS,EAAE;IAC7B,OAAO,IAAIC,KAAK,CAAC,WAAAC,MAAA,CAAWT,QAAQ,QAAAS,MAAA,CAAMN,YAAY,qBAAAM,MAAA,CAAoBV,aAAa,uDAAAU,MAAA,CAAqDJ,WAAW,MAAG,GAAG,mEAAmE,CAAC;EACnO;EACA,OAAO,IAAI;AACb;AACA,IAAMK,mBAAmB,GAAGrB,cAAc,CAACD,SAAS,CAACc,OAAO,EAAEN,YAAY,CAAC;AAC3Ec,mBAAmB,CAACC,UAAU,GAAGtB,cAAc,CAACD,SAAS,CAACc,OAAO,CAACS,UAAU,EAAEf,YAAY,CAAC;AAC3F,eAAec,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}