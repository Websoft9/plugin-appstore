{"ast":null,"code":"import objectValues from \"../../polyfills/objectValues.mjs\";\nimport keyMap from \"../../jsutils/keyMap.mjs\";\nimport inspect from \"../../jsutils/inspect.mjs\";\nimport didYouMean from \"../../jsutils/didYouMean.mjs\";\nimport suggestionList from \"../../jsutils/suggestionList.mjs\";\nimport { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { print } from \"../../language/printer.mjs\";\nimport { isLeafType, isInputObjectType, isListType, isNonNullType, isRequiredInputField, getNullableType, getNamedType } from \"../../type/definition.mjs\";\n\n/**\n * Value literals of correct type\n *\n * A GraphQL document is only valid if all value literals are of the type\n * expected at their position.\n */\nexport function ValuesOfCorrectTypeRule(context) {\n  return {\n    ListValue: function ListValue(node) {\n      // Note: TypeInfo will traverse into a list's item type, so look to the\n      // parent input type to check if it is a list.\n      var type = getNullableType(context.getParentInputType());\n      if (!isListType(type)) {\n        isValidValueNode(context, node);\n        return false; // Don't traverse further.\n      }\n    },\n\n    ObjectValue: function ObjectValue(node) {\n      var type = getNamedType(context.getInputType());\n      if (!isInputObjectType(type)) {\n        isValidValueNode(context, node);\n        return false; // Don't traverse further.\n      } // Ensure every required field exists.\n\n      var fieldNodeMap = keyMap(node.fields, function (field) {\n        return field.name.value;\n      });\n      for (var _i2 = 0, _objectValues2 = objectValues(type.getFields()); _i2 < _objectValues2.length; _i2++) {\n        var fieldDef = _objectValues2[_i2];\n        var fieldNode = fieldNodeMap[fieldDef.name];\n        if (!fieldNode && isRequiredInputField(fieldDef)) {\n          var typeStr = inspect(fieldDef.type);\n          context.reportError(new GraphQLError(\"Field \\\"\".concat(type.name, \".\").concat(fieldDef.name, \"\\\" of required type \\\"\").concat(typeStr, \"\\\" was not provided.\"), node));\n        }\n      }\n    },\n    ObjectField: function ObjectField(node) {\n      var parentType = getNamedType(context.getParentInputType());\n      var fieldType = context.getInputType();\n      if (!fieldType && isInputObjectType(parentType)) {\n        var suggestions = suggestionList(node.name.value, Object.keys(parentType.getFields()));\n        context.reportError(new GraphQLError(\"Field \\\"\".concat(node.name.value, \"\\\" is not defined by type \\\"\").concat(parentType.name, \"\\\".\") + didYouMean(suggestions), node));\n      }\n    },\n    NullValue: function NullValue(node) {\n      var type = context.getInputType();\n      if (isNonNullType(type)) {\n        context.reportError(new GraphQLError(\"Expected value of type \\\"\".concat(inspect(type), \"\\\", found \").concat(print(node), \".\"), node));\n      }\n    },\n    EnumValue: function EnumValue(node) {\n      return isValidValueNode(context, node);\n    },\n    IntValue: function IntValue(node) {\n      return isValidValueNode(context, node);\n    },\n    FloatValue: function FloatValue(node) {\n      return isValidValueNode(context, node);\n    },\n    StringValue: function StringValue(node) {\n      return isValidValueNode(context, node);\n    },\n    BooleanValue: function BooleanValue(node) {\n      return isValidValueNode(context, node);\n    }\n  };\n}\n/**\n * Any value literal may be a valid representation of a Scalar, depending on\n * that scalar type.\n */\n\nfunction isValidValueNode(context, node) {\n  // Report any error at the full type expected by the location.\n  var locationType = context.getInputType();\n  if (!locationType) {\n    return;\n  }\n  var type = getNamedType(locationType);\n  if (!isLeafType(type)) {\n    var typeStr = inspect(locationType);\n    context.reportError(new GraphQLError(\"Expected value of type \\\"\".concat(typeStr, \"\\\", found \").concat(print(node), \".\"), node));\n    return;\n  } // Scalars and Enums determine if a literal value is valid via parseLiteral(),\n  // which may throw or return an invalid value to indicate failure.\n\n  try {\n    var parseResult = type.parseLiteral(node, undefined\n    /* variables */);\n\n    if (parseResult === undefined) {\n      var _typeStr = inspect(locationType);\n      context.reportError(new GraphQLError(\"Expected value of type \\\"\".concat(_typeStr, \"\\\", found \").concat(print(node), \".\"), node));\n    }\n  } catch (error) {\n    var _typeStr2 = inspect(locationType);\n    if (error instanceof GraphQLError) {\n      context.reportError(error);\n    } else {\n      context.reportError(new GraphQLError(\"Expected value of type \\\"\".concat(_typeStr2, \"\\\", found \").concat(print(node), \"; \") + error.message, node, undefined, undefined, undefined, error));\n    }\n  }\n}","map":{"version":3,"names":["objectValues","keyMap","inspect","didYouMean","suggestionList","GraphQLError","print","isLeafType","isInputObjectType","isListType","isNonNullType","isRequiredInputField","getNullableType","getNamedType","ValuesOfCorrectTypeRule","context","ListValue","node","type","getParentInputType","isValidValueNode","ObjectValue","getInputType","fieldNodeMap","fields","field","name","value","_i2","_objectValues2","getFields","length","fieldDef","fieldNode","typeStr","reportError","concat","ObjectField","parentType","fieldType","suggestions","Object","keys","NullValue","EnumValue","IntValue","FloatValue","StringValue","BooleanValue","locationType","parseResult","parseLiteral","undefined","_typeStr","error","_typeStr2","message"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/graphql/validation/rules/ValuesOfCorrectTypeRule.mjs"],"sourcesContent":["import objectValues from \"../../polyfills/objectValues.mjs\";\nimport keyMap from \"../../jsutils/keyMap.mjs\";\nimport inspect from \"../../jsutils/inspect.mjs\";\nimport didYouMean from \"../../jsutils/didYouMean.mjs\";\nimport suggestionList from \"../../jsutils/suggestionList.mjs\";\nimport { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { print } from \"../../language/printer.mjs\";\nimport { isLeafType, isInputObjectType, isListType, isNonNullType, isRequiredInputField, getNullableType, getNamedType } from \"../../type/definition.mjs\";\n\n/**\n * Value literals of correct type\n *\n * A GraphQL document is only valid if all value literals are of the type\n * expected at their position.\n */\nexport function ValuesOfCorrectTypeRule(context) {\n  return {\n    ListValue: function ListValue(node) {\n      // Note: TypeInfo will traverse into a list's item type, so look to the\n      // parent input type to check if it is a list.\n      var type = getNullableType(context.getParentInputType());\n\n      if (!isListType(type)) {\n        isValidValueNode(context, node);\n        return false; // Don't traverse further.\n      }\n    },\n    ObjectValue: function ObjectValue(node) {\n      var type = getNamedType(context.getInputType());\n\n      if (!isInputObjectType(type)) {\n        isValidValueNode(context, node);\n        return false; // Don't traverse further.\n      } // Ensure every required field exists.\n\n\n      var fieldNodeMap = keyMap(node.fields, function (field) {\n        return field.name.value;\n      });\n\n      for (var _i2 = 0, _objectValues2 = objectValues(type.getFields()); _i2 < _objectValues2.length; _i2++) {\n        var fieldDef = _objectValues2[_i2];\n        var fieldNode = fieldNodeMap[fieldDef.name];\n\n        if (!fieldNode && isRequiredInputField(fieldDef)) {\n          var typeStr = inspect(fieldDef.type);\n          context.reportError(new GraphQLError(\"Field \\\"\".concat(type.name, \".\").concat(fieldDef.name, \"\\\" of required type \\\"\").concat(typeStr, \"\\\" was not provided.\"), node));\n        }\n      }\n    },\n    ObjectField: function ObjectField(node) {\n      var parentType = getNamedType(context.getParentInputType());\n      var fieldType = context.getInputType();\n\n      if (!fieldType && isInputObjectType(parentType)) {\n        var suggestions = suggestionList(node.name.value, Object.keys(parentType.getFields()));\n        context.reportError(new GraphQLError(\"Field \\\"\".concat(node.name.value, \"\\\" is not defined by type \\\"\").concat(parentType.name, \"\\\".\") + didYouMean(suggestions), node));\n      }\n    },\n    NullValue: function NullValue(node) {\n      var type = context.getInputType();\n\n      if (isNonNullType(type)) {\n        context.reportError(new GraphQLError(\"Expected value of type \\\"\".concat(inspect(type), \"\\\", found \").concat(print(node), \".\"), node));\n      }\n    },\n    EnumValue: function EnumValue(node) {\n      return isValidValueNode(context, node);\n    },\n    IntValue: function IntValue(node) {\n      return isValidValueNode(context, node);\n    },\n    FloatValue: function FloatValue(node) {\n      return isValidValueNode(context, node);\n    },\n    StringValue: function StringValue(node) {\n      return isValidValueNode(context, node);\n    },\n    BooleanValue: function BooleanValue(node) {\n      return isValidValueNode(context, node);\n    }\n  };\n}\n/**\n * Any value literal may be a valid representation of a Scalar, depending on\n * that scalar type.\n */\n\nfunction isValidValueNode(context, node) {\n  // Report any error at the full type expected by the location.\n  var locationType = context.getInputType();\n\n  if (!locationType) {\n    return;\n  }\n\n  var type = getNamedType(locationType);\n\n  if (!isLeafType(type)) {\n    var typeStr = inspect(locationType);\n    context.reportError(new GraphQLError(\"Expected value of type \\\"\".concat(typeStr, \"\\\", found \").concat(print(node), \".\"), node));\n    return;\n  } // Scalars and Enums determine if a literal value is valid via parseLiteral(),\n  // which may throw or return an invalid value to indicate failure.\n\n\n  try {\n    var parseResult = type.parseLiteral(node, undefined\n    /* variables */\n    );\n\n    if (parseResult === undefined) {\n      var _typeStr = inspect(locationType);\n\n      context.reportError(new GraphQLError(\"Expected value of type \\\"\".concat(_typeStr, \"\\\", found \").concat(print(node), \".\"), node));\n    }\n  } catch (error) {\n    var _typeStr2 = inspect(locationType);\n\n    if (error instanceof GraphQLError) {\n      context.reportError(error);\n    } else {\n      context.reportError(new GraphQLError(\"Expected value of type \\\"\".concat(_typeStr2, \"\\\", found \").concat(print(node), \"; \") + error.message, node, undefined, undefined, undefined, error));\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}