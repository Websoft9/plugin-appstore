{"ast":null,"code":"import _slicedToArray from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport BellIcon from '@patternfly/react-icons/dist/esm/icons/bell-icon';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon';\nimport InfoCircleIcon from '@patternfly/react-icons/dist/esm/icons/info-circle-icon';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/NotificationDrawer/notification-drawer';\nimport a11yStyles from '@patternfly/react-styles/css/utilities/Accessibility/accessibility';\nimport maxLines from '@patternfly/react-tokens/dist/esm/c_notification_drawer__list_item_header_title_max_lines';\nimport { Tooltip } from '../Tooltip';\nexport var variantIcons = {\n  success: CheckCircleIcon,\n  danger: ExclamationCircleIcon,\n  warning: ExclamationTriangleIcon,\n  info: InfoCircleIcon,\n  default: BellIcon\n};\nexport var NotificationDrawerListItemHeader = function NotificationDrawerListItemHeader(_a) {\n  var children = _a.children,\n    _a$className = _a.className,\n    className = _a$className === void 0 ? '' : _a$className,\n    _a$icon = _a.icon,\n    icon = _a$icon === void 0 ? null : _a$icon,\n    srTitle = _a.srTitle,\n    title = _a.title,\n    _a$variant = _a.variant,\n    variant = _a$variant === void 0 ? 'default' : _a$variant,\n    _a$truncateTitle = _a.truncateTitle,\n    truncateTitle = _a$truncateTitle === void 0 ? 0 : _a$truncateTitle,\n    tooltipPosition = _a.tooltipPosition,\n    _a$headingLevel = _a.headingLevel,\n    HeadingLevel = _a$headingLevel === void 0 ? 'h2' : _a$headingLevel,\n    props = __rest(_a, [\"children\", \"className\", \"icon\", \"srTitle\", \"title\", \"variant\", \"truncateTitle\", \"tooltipPosition\", \"headingLevel\"]);\n  var titleRef = React.useRef(null);\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    isTooltipVisible = _React$useState2[0],\n    setIsTooltipVisible = _React$useState2[1];\n  React.useEffect(function () {\n    if (!titleRef.current || !truncateTitle) {\n      return;\n    }\n    titleRef.current.style.setProperty(maxLines.name, truncateTitle.toString());\n    var showTooltip = titleRef.current && titleRef.current.offsetHeight < titleRef.current.scrollHeight;\n    if (isTooltipVisible !== showTooltip) {\n      setIsTooltipVisible(showTooltip);\n    }\n  }, [titleRef, truncateTitle, isTooltipVisible]);\n  var Icon = variantIcons[variant];\n  var Title = React.createElement(HeadingLevel, Object.assign({}, isTooltipVisible && {\n    tabIndex: 0\n  }, {\n    ref: titleRef,\n    className: css(styles.notificationDrawerListItemHeaderTitle, truncateTitle && styles.modifiers.truncate)\n  }), srTitle && React.createElement(\"span\", {\n    className: css(a11yStyles.screenReader)\n  }, srTitle), title);\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", Object.assign({}, props, {\n    className: css(styles.notificationDrawerListItemHeader, className)\n  }), React.createElement(\"span\", {\n    className: css(styles.notificationDrawerListItemHeaderIcon)\n  }, icon ? icon : React.createElement(Icon, null)), isTooltipVisible ? React.createElement(Tooltip, {\n    content: title,\n    position: tooltipPosition\n  }, Title) : Title), children && React.createElement(\"div\", {\n    className: css(styles.notificationDrawerListItemAction)\n  }, children));\n};\nNotificationDrawerListItemHeader.displayName = 'NotificationDrawerListItemHeader';","map":{"version":3,"names":["React","BellIcon","CheckCircleIcon","ExclamationCircleIcon","ExclamationTriangleIcon","InfoCircleIcon","css","styles","a11yStyles","maxLines","Tooltip","variantIcons","success","danger","warning","info","default","NotificationDrawerListItemHeader","_a","children","_a$className","className","_a$icon","icon","srTitle","title","_a$variant","variant","_a$truncateTitle","truncateTitle","tooltipPosition","_a$headingLevel","headingLevel","HeadingLevel","props","__rest","titleRef","useRef","_React$useState","useState","_React$useState2","_slicedToArray","isTooltipVisible","setIsTooltipVisible","useEffect","current","style","setProperty","name","toString","showTooltip","offsetHeight","scrollHeight","Icon","Title","createElement","Object","assign","tabIndex","ref","notificationDrawerListItemHeaderTitle","modifiers","truncate","screenReader","Fragment","notificationDrawerListItemHeader","notificationDrawerListItemHeaderIcon","content","position","notificationDrawerListItemAction","displayName"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@patternfly/react-core/src/components/NotificationDrawer/NotificationDrawerListItemHeader.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport BellIcon from '@patternfly/react-icons/dist/esm/icons/bell-icon';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon';\nimport InfoCircleIcon from '@patternfly/react-icons/dist/esm/icons/info-circle-icon';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/NotificationDrawer/notification-drawer';\nimport a11yStyles from '@patternfly/react-styles/css/utilities/Accessibility/accessibility';\n\nimport maxLines from '@patternfly/react-tokens/dist/esm/c_notification_drawer__list_item_header_title_max_lines';\n\nimport { Tooltip, TooltipPosition } from '../Tooltip';\n\nexport const variantIcons = {\n  success: CheckCircleIcon,\n  danger: ExclamationCircleIcon,\n  warning: ExclamationTriangleIcon,\n  info: InfoCircleIcon,\n  default: BellIcon\n};\n\nexport interface NotificationDrawerListItemHeaderProps extends React.HTMLProps<HTMLDivElement> {\n  /**  Actions rendered inside the notification drawer list item header */\n  children?: React.ReactNode;\n  /**  Additional classes for notification drawer list item header. */\n  className?: string;\n  /**  Add custom icon for notification drawer list item header */\n  icon?: React.ReactNode;\n  /**  Notification drawer list item header screen reader title */\n  srTitle?: string;\n  /**  Notification drawer list item title */\n  title: string;\n  /**  Variant indicates the severity level */\n  variant?: 'success' | 'danger' | 'warning' | 'info' | 'default';\n  /** Truncate title to number of lines */\n  truncateTitle?: number;\n  /** Position of the tooltip which is displayed if text is truncated */\n  tooltipPosition?:\n    | TooltipPosition\n    | 'auto'\n    | 'top'\n    | 'bottom'\n    | 'left'\n    | 'right'\n    | 'top-start'\n    | 'top-end'\n    | 'bottom-start'\n    | 'bottom-end'\n    | 'left-start'\n    | 'left-end'\n    | 'right-start'\n    | 'right-end';\n  /** Sets the heading level to use for the list item header title. Default is h2. */\n  headingLevel?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';\n}\n\nexport const NotificationDrawerListItemHeader: React.FunctionComponent<NotificationDrawerListItemHeaderProps> = ({\n  children,\n  className = '',\n  icon = null,\n  srTitle,\n  title,\n  variant = 'default',\n  truncateTitle = 0,\n  tooltipPosition,\n  headingLevel: HeadingLevel = 'h2',\n  ...props\n}: NotificationDrawerListItemHeaderProps) => {\n  const titleRef = React.useRef(null);\n  const [isTooltipVisible, setIsTooltipVisible] = React.useState(false);\n  React.useEffect(() => {\n    if (!titleRef.current || !truncateTitle) {\n      return;\n    }\n    titleRef.current.style.setProperty(maxLines.name, truncateTitle.toString());\n    const showTooltip = titleRef.current && titleRef.current.offsetHeight < titleRef.current.scrollHeight;\n    if (isTooltipVisible !== showTooltip) {\n      setIsTooltipVisible(showTooltip);\n    }\n  }, [titleRef, truncateTitle, isTooltipVisible]);\n  const Icon = variantIcons[variant];\n  const Title = (\n    <HeadingLevel\n      {...(isTooltipVisible && { tabIndex: 0 })}\n      ref={titleRef}\n      className={css(styles.notificationDrawerListItemHeaderTitle, truncateTitle && styles.modifiers.truncate)}\n    >\n      {srTitle && <span className={css(a11yStyles.screenReader)}>{srTitle}</span>}\n      {title}\n    </HeadingLevel>\n  );\n\n  return (\n    <React.Fragment>\n      <div {...props} className={css(styles.notificationDrawerListItemHeader, className)}>\n        <span className={css(styles.notificationDrawerListItemHeaderIcon)}>{icon ? icon : <Icon />}</span>\n        {isTooltipVisible ? (\n          <Tooltip content={title} position={tooltipPosition}>\n            {Title}\n          </Tooltip>\n        ) : (\n          Title\n        )}\n      </div>\n      {children && <div className={css(styles.notificationDrawerListItemAction)}>{children}</div>}\n    </React.Fragment>\n  );\n};\nNotificationDrawerListItemHeader.displayName = 'NotificationDrawerListItemHeader';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}