{"ast":null,"code":"import { invariant } from \"../../utilities/globals/index.js\";\nimport * as React from 'react';\nimport { canUseLayoutEffect } from \"../../utilities/index.js\";\nvar didWarnUncachedGetSnapshot = false;\nvar uSESKey = \"useSyncExternalStore\";\nvar realHook = React[uSESKey];\nexport var useSyncExternalStore = realHook || function (subscribe, getSnapshot, getServerSnapshot) {\n  var value = getSnapshot();\n  if (__DEV__ && !didWarnUncachedGetSnapshot && value !== getSnapshot()) {\n    didWarnUncachedGetSnapshot = true;\n    __DEV__ && invariant.error('The result of getSnapshot should be cached to avoid an infinite loop');\n  }\n  var _a = React.useState({\n      inst: {\n        value: value,\n        getSnapshot: getSnapshot\n      }\n    }),\n    inst = _a[0].inst,\n    forceUpdate = _a[1];\n  if (canUseLayoutEffect) {\n    React.useLayoutEffect(function () {\n      Object.assign(inst, {\n        value: value,\n        getSnapshot: getSnapshot\n      });\n      if (checkIfSnapshotChanged(inst)) {\n        forceUpdate({\n          inst: inst\n        });\n      }\n    }, [subscribe, value, getSnapshot]);\n  } else {\n    Object.assign(inst, {\n      value: value,\n      getSnapshot: getSnapshot\n    });\n  }\n  React.useEffect(function () {\n    if (checkIfSnapshotChanged(inst)) {\n      forceUpdate({\n        inst: inst\n      });\n    }\n    return subscribe(function handleStoreChange() {\n      if (checkIfSnapshotChanged(inst)) {\n        forceUpdate({\n          inst: inst\n        });\n      }\n    });\n  }, [subscribe]);\n  return value;\n};\nfunction checkIfSnapshotChanged(_a) {\n  var value = _a.value,\n    getSnapshot = _a.getSnapshot;\n  try {\n    return value !== getSnapshot();\n  } catch (_b) {\n    return true;\n  }\n}","map":{"version":3,"names":["invariant","React","canUseLayoutEffect","didWarnUncachedGetSnapshot","uSESKey","realHook","useSyncExternalStore","subscribe","getSnapshot","getServerSnapshot","value","__DEV__","error","_a","useState","inst","forceUpdate","useLayoutEffect","Object","assign","checkIfSnapshotChanged","useEffect","handleStoreChange","_b"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@apollo/src/react/hooks/useSyncExternalStore.ts"],"sourcesContent":["import { invariant } from '../../utilities/globals';\nimport * as React from 'react';\n\nimport { canUseLayoutEffect } from '../../utilities';\n\nlet didWarnUncachedGetSnapshot = false;\n\ntype RealUseSESHookType =\n  // This import depends only on the @types/use-sync-external-store package, not\n  // the actual use-sync-external-store package, which is not installed. It\n  // might be nice to get this type from React 18, but it still needs to work\n  // when only React 17 or earlier is installed.\n  typeof import(\"use-sync-external-store\").useSyncExternalStore;\n\n// Prevent webpack from complaining about our feature detection of the\n// useSyncExternalStore property of the React namespace, which is expected not\n// to exist when using React 17 and earlier, and that's fine.\nconst uSESKey = \"useSyncExternalStore\" as keyof typeof React;\nconst realHook = React[uSESKey] as RealUseSESHookType | undefined;\n\n// Adapted from https://www.npmjs.com/package/use-sync-external-store, with\n// Apollo Client deviations called out by \"// DEVIATION ...\" comments.\n\n// When/if React.useSyncExternalStore is defined, delegate fully to it.\nexport const useSyncExternalStore: RealUseSESHookType = realHook || ((\n  subscribe,\n  getSnapshot,\n  getServerSnapshot,\n) => {\n  // Read the current snapshot from the store on every render. Again, this\n  // breaks the rules of React, and only works here because of specific\n  // implementation details, most importantly that updates are\n  // always synchronous.\n  const value = getSnapshot();\n  if (\n    // DEVIATION: Using our own __DEV__ polyfill (from ../../utilities/globals).\n    __DEV__ &&\n    !didWarnUncachedGetSnapshot &&\n    // DEVIATION: Not using Object.is because we know our snapshots will never\n    // be exotic primitive values like NaN, which is !== itself.\n    value !== getSnapshot()\n  ) {\n    didWarnUncachedGetSnapshot = true;\n    // DEVIATION: Using invariant.error instead of console.error directly.\n    invariant.error(\n      'The result of getSnapshot should be cached to avoid an infinite loop',\n    );\n  }\n\n  // Because updates are synchronous, we don't queue them. Instead we force a\n  // re-render whenever the subscribed state changes by updating an some\n  // arbitrary useState hook. Then, during render, we call getSnapshot to read\n  // the current value.\n  //\n  // Because we don't actually use the state returned by the useState hook, we\n  // can save a bit of memory by storing other stuff in that slot.\n  //\n  // To implement the early bailout, we need to track some things on a mutable\n  // object. Usually, we would put that in a useRef hook, but we can stash it in\n  // our useState hook instead.\n  //\n  // To force a re-render, we call forceUpdate({inst}). That works because the\n  // new object always fails an equality check.\n  const [{inst}, forceUpdate] = React.useState({inst: {value, getSnapshot}});\n\n  // Track the latest getSnapshot function with a ref. This needs to be updated\n  // in the layout phase so we can access it during the tearing check that\n  // happens on subscribe.\n  if (canUseLayoutEffect) {\n    // DEVIATION: We avoid calling useLayoutEffect when !canUseLayoutEffect,\n    // which may seem like a conditional hook, but this code ends up behaving\n    // unconditionally (one way or the other) because canUseLayoutEffect is\n    // constant.\n    React.useLayoutEffect(() => {\n      Object.assign(inst, { value, getSnapshot });\n      // Whenever getSnapshot or subscribe changes, we need to check in the\n      // commit phase if there was an interleaved mutation. In concurrent mode\n      // this can happen all the time, but even in synchronous mode, an earlier\n      // effect may have mutated the store.\n      if (checkIfSnapshotChanged(inst)) {\n        // Force a re-render.\n        forceUpdate({inst});\n      }\n    }, [subscribe, value, getSnapshot]);\n  } else {\n    Object.assign(inst, { value, getSnapshot });\n  }\n\n  React.useEffect(() => {\n    // Check for changes right before subscribing. Subsequent changes will be\n    // detected in the subscription handler.\n    if (checkIfSnapshotChanged(inst)) {\n      // Force a re-render.\n      forceUpdate({inst});\n    }\n\n    // Subscribe to the store and return a clean-up function.\n    return subscribe(function handleStoreChange() {\n      // TODO: Because there is no cross-renderer API for batching updates, it's\n      // up to the consumer of this library to wrap their subscription event\n      // with unstable_batchedUpdates. Should we try to detect when this isn't\n      // the case and print a warning in development?\n\n      // The store changed. Check if the snapshot changed since the last time we\n      // read from the store.\n      if (checkIfSnapshotChanged(inst)) {\n        // Force a re-render.\n        forceUpdate({inst});\n      }\n    });\n  }, [subscribe]);\n\n  return value;\n});\n\nfunction checkIfSnapshotChanged<Snapshot>({\n  value,\n  getSnapshot,\n}: {\n  value: Snapshot;\n  getSnapshot: () => Snapshot;\n}): boolean {\n  try {\n    return value !== getSnapshot();\n  } catch {\n    return true;\n  }\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,kCAA0B;AACpD,OAAO,KAAKC,KAAK,MAAM,OAAO;AAE9B,SAASC,kBAAkB,QAAQ,0BAAkB;AAErD,IAAIC,0BAA0B,GAAG,KAAK;AAYtC,IAAMC,OAAO,GAAG,sBAA4C;AAC5D,IAAMC,QAAQ,GAAGJ,KAAK,CAACG,OAAO,CAAmC;AAMjE,OAAO,IAAME,oBAAoB,GAAuBD,QAAQ,IAAK,UACnEE,SAAS,EACTC,WAAW,EACXC,iBAAiB;EAMjB,IAAMC,KAAK,GAAGF,WAAW,EAAE;EAC3B,IAEEG,OAAO,IACP,CAACR,0BAA0B,IAG3BO,KAAK,KAAKF,WAAW,EAAE,EACvB;IACAL,0BAA0B,GAAG,IAAI;IAEjCQ,OAAA,IAAUX,SACR,CAAAY,KAAA,uEACA;;EAiBE,IAAAC,EAAA,GAAwBZ,KAAK,CAACa,QAAQ,CAAC;MAACC,IAAI,EAAE;QAACL,KAAK,EAAAA,KAAA;QAAEF,WAAW,EAAAA;MAAA;IAAC,CAAC,CAAC;IAAlEO,IAAI,GAAAF,EAAA,IAAAE,IAAA;IAAGC,WAAW,GAAAH,EAAA,GAAgD;EAK1E,IAAIX,kBAAkB,EAAE;IAKtBD,KAAK,CAACgB,eAAe,CAAC;MACpBC,MAAM,CAACC,MAAM,CAACJ,IAAI,EAAE;QAAEL,KAAK,EAAAA,KAAA;QAAEF,WAAW,EAAAA;MAAA,CAAE,CAAC;MAK3C,IAAIY,sBAAsB,CAACL,IAAI,CAAC,EAAE;QAEhCC,WAAW,CAAC;UAACD,IAAI,EAAAA;QAAA,CAAC,CAAC;;IAEvB,CAAC,EAAE,CAACR,SAAS,EAAEG,KAAK,EAAEF,WAAW,CAAC,CAAC;GACpC,MAAM;IACLU,MAAM,CAACC,MAAM,CAACJ,IAAI,EAAE;MAAEL,KAAK,EAAAA,KAAA;MAAEF,WAAW,EAAAA;IAAA,CAAE,CAAC;;EAG7CP,KAAK,CAACoB,SAAS,CAAC;IAGd,IAAID,sBAAsB,CAACL,IAAI,CAAC,EAAE;MAEhCC,WAAW,CAAC;QAACD,IAAI,EAAAA;MAAA,CAAC,CAAC;;IAIrB,OAAOR,SAAS,CAAC,SAASe,iBAAiBA,CAAA;MAQzC,IAAIF,sBAAsB,CAACL,IAAI,CAAC,EAAE;QAEhCC,WAAW,CAAC;UAACD,IAAI,EAAAA;QAAA,CAAC,CAAC;;IAEvB,CAAC,CAAC;EACJ,CAAC,EAAE,CAACR,SAAS,CAAC,CAAC;EAEf,OAAOG,KAAK;AACd,CAAE;AAEF,SAASU,sBAAsBA,CAAWP,EAMzC;MALCH,KAAK,GAAAG,EAAA,CAAAH,KAAA;IACLF,WAAW,GAAAK,EAAA,CAAAL,WAAA;EAKX,IAAI;IACF,OAAOE,KAAK,KAAKF,WAAW,EAAE;GAC/B,CAAC,OAAAe,EAAA,EAAM;IACN,OAAO,IAAI;;AAEf"},"metadata":{},"sourceType":"module","externalDependencies":[]}