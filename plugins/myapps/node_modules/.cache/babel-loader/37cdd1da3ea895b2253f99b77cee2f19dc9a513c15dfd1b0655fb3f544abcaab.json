{"ast":null,"code":"import _classCallCheck from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/OverflowMenu/overflow-menu';\nimport { css } from '@patternfly/react-styles';\nimport { OverflowMenuContext } from './OverflowMenuContext';\nimport { debounce } from '../../helpers/util';\nimport { globalWidthBreakpoints } from '../../helpers/constants';\nimport { getResizeObserver } from '../../helpers/resizeObserver';\nexport var OverflowMenu = /*#__PURE__*/function (_React$Component) {\n  _inherits(OverflowMenu, _React$Component);\n  var _super = _createSuper(OverflowMenu);\n  function OverflowMenu(props) {\n    var _this;\n    _classCallCheck(this, OverflowMenu);\n    _this = _super.call(this, props);\n    _this.observer = function () {};\n    _this.handleResize = function () {\n      var breakpointWidth = globalWidthBreakpoints[_this.props.breakpoint];\n      if (!breakpointWidth) {\n        // eslint-disable-next-line no-console\n        console.error('OverflowMenu will not be visible without a valid breakpoint.');\n        return;\n      }\n      var relativeWidth = _this.state.breakpointRef ? _this.state.breakpointRef.clientWidth : window.innerWidth;\n      var isBelowBreakpoint = relativeWidth < breakpointWidth;\n      if (_this.state.isBelowBreakpoint !== isBelowBreakpoint) {\n        _this.setState({\n          isBelowBreakpoint: isBelowBreakpoint\n        });\n      }\n    };\n    _this.handleResizeWithDelay = debounce(_this.handleResize, 250);\n    _this.state = {\n      isBelowBreakpoint: false,\n      breakpointRef: undefined\n    };\n    return _this;\n  }\n  _createClass(OverflowMenu, [{\n    key: \"getBreakpointRef\",\n    value: function getBreakpointRef() {\n      var breakpointReference = this.props.breakpointReference;\n      if (breakpointReference.current) {\n        return breakpointReference.current;\n      } else if (typeof breakpointReference === 'function') {\n        return breakpointReference();\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var reference = this.props.breakpointReference ? this.getBreakpointRef() : undefined;\n      this.setState({\n        breakpointRef: reference\n      });\n      this.observer = getResizeObserver(reference, this.handleResizeWithDelay);\n      this.handleResize();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var reference = this.props.breakpointReference ? this.getBreakpointRef() : undefined;\n      if (prevState.breakpointRef !== reference) {\n        // To remove any previous observer/event listener from componentDidMount before adding a new one\n        this.observer();\n        this.setState({\n          breakpointRef: reference\n        });\n        this.observer = getResizeObserver(reference, this.handleResizeWithDelay);\n        this.handleResize();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.observer();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      var _a = this.props,\n        className = _a.className,\n        breakpoint = _a.breakpoint,\n        children = _a.children,\n        breakpointReference = _a.breakpointReference,\n        props = __rest(_a, [\"className\", \"breakpoint\", \"children\", \"breakpointReference\"]);\n      return React.createElement(\"div\", Object.assign({}, props, {\n        className: css(styles.overflowMenu, className)\n      }), React.createElement(OverflowMenuContext.Provider, {\n        value: {\n          isBelowBreakpoint: this.state.isBelowBreakpoint\n        }\n      }, children));\n    }\n  }]);\n  return OverflowMenu;\n}(React.Component);\nOverflowMenu.displayName = 'OverflowMenu';\nOverflowMenu.contextType = OverflowMenuContext;","map":{"version":3,"names":["React","styles","css","OverflowMenuContext","debounce","globalWidthBreakpoints","getResizeObserver","OverflowMenu","_React$Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","observer","handleResize","breakpointWidth","breakpoint","console","error","relativeWidth","state","breakpointRef","clientWidth","window","innerWidth","isBelowBreakpoint","setState","handleResizeWithDelay","undefined","_createClass","key","value","getBreakpointRef","breakpointReference","current","componentDidMount","reference","componentDidUpdate","prevProps","prevState","componentWillUnmount","render","_a","className","children","__rest","createElement","Object","assign","overflowMenu","Provider","Component","displayName","contextType"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@patternfly/react-core/src/components/OverflowMenu/OverflowMenu.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/OverflowMenu/overflow-menu';\nimport { css } from '@patternfly/react-styles';\nimport { OverflowMenuContext } from './OverflowMenuContext';\nimport { debounce } from '../../helpers/util';\nimport { globalWidthBreakpoints } from '../../helpers/constants';\nimport { getResizeObserver } from '../../helpers/resizeObserver';\n\nexport interface OverflowMenuProps extends React.HTMLProps<HTMLDivElement> {\n  /** Any elements that can be rendered in the menu */\n  children?: any;\n  /** Additional classes added to the OverflowMenu. */\n  className?: string;\n  /** Indicates breakpoint at which to switch between horizontal menu and vertical dropdown */\n  breakpoint: 'sm' | 'md' | 'lg' | 'xl' | '2xl';\n  /** A container reference to base the specified breakpoint on instead of the viewport width. */\n  breakpointReference?: HTMLElement | (() => HTMLElement) | React.RefObject<any>;\n}\n\nexport interface OverflowMenuState extends React.HTMLProps<HTMLDivElement> {\n  isBelowBreakpoint: boolean;\n  breakpointRef: HTMLElement;\n}\n\nexport class OverflowMenu extends React.Component<OverflowMenuProps, OverflowMenuState> {\n  static displayName = 'OverflowMenu';\n  constructor(props: OverflowMenuProps) {\n    super(props);\n    this.state = {\n      isBelowBreakpoint: false,\n      breakpointRef: undefined\n    };\n  }\n\n  observer: any = () => {};\n\n  getBreakpointRef() {\n    const { breakpointReference } = this.props;\n\n    if ((breakpointReference as React.RefObject<any>).current) {\n      return (breakpointReference as React.RefObject<any>).current;\n    } else if (typeof breakpointReference === 'function') {\n      return breakpointReference();\n    }\n  }\n\n  componentDidMount() {\n    const reference = this.props.breakpointReference ? this.getBreakpointRef() : undefined;\n\n    this.setState({ breakpointRef: reference });\n    this.observer = getResizeObserver(reference, this.handleResizeWithDelay);\n    this.handleResize();\n  }\n\n  componentDidUpdate(prevProps: Readonly<OverflowMenuProps>, prevState: Readonly<OverflowMenuState>): void {\n    const reference = this.props.breakpointReference ? this.getBreakpointRef() : undefined;\n\n    if (prevState.breakpointRef !== reference) {\n      // To remove any previous observer/event listener from componentDidMount before adding a new one\n      this.observer();\n      this.setState({ breakpointRef: reference });\n      this.observer = getResizeObserver(reference, this.handleResizeWithDelay);\n      this.handleResize();\n    }\n  }\n\n  componentWillUnmount() {\n    this.observer();\n  }\n\n  handleResize = () => {\n    const breakpointWidth = globalWidthBreakpoints[this.props.breakpoint];\n    if (!breakpointWidth) {\n      // eslint-disable-next-line no-console\n      console.error('OverflowMenu will not be visible without a valid breakpoint.');\n      return;\n    }\n\n    const relativeWidth = this.state.breakpointRef ? this.state.breakpointRef.clientWidth : window.innerWidth;\n    const isBelowBreakpoint = relativeWidth < breakpointWidth;\n    if (this.state.isBelowBreakpoint !== isBelowBreakpoint) {\n      this.setState({ isBelowBreakpoint });\n    }\n  };\n\n  handleResizeWithDelay = debounce(this.handleResize, 250);\n\n  render() {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { className, breakpoint, children, breakpointReference, ...props } = this.props;\n\n    return (\n      <div {...props} className={css(styles.overflowMenu, className)}>\n        <OverflowMenuContext.Provider value={{ isBelowBreakpoint: this.state.isBelowBreakpoint }}>\n          {children}\n        </OverflowMenuContext.Provider>\n      </div>\n    );\n  }\n}\n\nOverflowMenu.contextType = OverflowMenuContext;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}