{"ast":null,"code":"/*!\n* focus-trap 6.9.2\n* @license MIT, https://github.com/focus-trap/focus-trap/blob/master/LICENSE\n*/\nimport { tabbable, focusable, isTabbable, isFocusable } from 'tabbable';\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nvar activeFocusTraps = function () {\n  var trapQueue = [];\n  return {\n    activateTrap: function activateTrap(trap) {\n      if (trapQueue.length > 0) {\n        var activeTrap = trapQueue[trapQueue.length - 1];\n        if (activeTrap !== trap) {\n          activeTrap.pause();\n        }\n      }\n      var trapIndex = trapQueue.indexOf(trap);\n      if (trapIndex === -1) {\n        trapQueue.push(trap);\n      } else {\n        // move this existing trap to the front of the queue\n        trapQueue.splice(trapIndex, 1);\n        trapQueue.push(trap);\n      }\n    },\n    deactivateTrap: function deactivateTrap(trap) {\n      var trapIndex = trapQueue.indexOf(trap);\n      if (trapIndex !== -1) {\n        trapQueue.splice(trapIndex, 1);\n      }\n      if (trapQueue.length > 0) {\n        trapQueue[trapQueue.length - 1].unpause();\n      }\n    }\n  };\n}();\nvar isSelectableInput = function isSelectableInput(node) {\n  return node.tagName && node.tagName.toLowerCase() === 'input' && typeof node.select === 'function';\n};\nvar isEscapeEvent = function isEscapeEvent(e) {\n  return e.key === 'Escape' || e.key === 'Esc' || e.keyCode === 27;\n};\nvar isTabEvent = function isTabEvent(e) {\n  return e.key === 'Tab' || e.keyCode === 9;\n};\nvar delay = function delay(fn) {\n  return setTimeout(fn, 0);\n}; // Array.find/findIndex() are not supported on IE; this replicates enough\n//  of Array.findIndex() for our needs\n\nvar findIndex = function findIndex(arr, fn) {\n  var idx = -1;\n  arr.every(function (value, i) {\n    if (fn(value)) {\n      idx = i;\n      return false; // break\n    }\n\n    return true; // next\n  });\n\n  return idx;\n};\n/**\n * Get an option's value when it could be a plain value, or a handler that provides\n *  the value.\n * @param {*} value Option's value to check.\n * @param {...*} [params] Any parameters to pass to the handler, if `value` is a function.\n * @returns {*} The `value`, or the handler's returned value.\n */\n\nvar valueOrHandler = function valueOrHandler(value) {\n  for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    params[_key - 1] = arguments[_key];\n  }\n  return typeof value === 'function' ? value.apply(void 0, params) : value;\n};\nvar getActualTarget = function getActualTarget(event) {\n  // NOTE: If the trap is _inside_ a shadow DOM, event.target will always be the\n  //  shadow host. However, event.target.composedPath() will be an array of\n  //  nodes \"clicked\" from inner-most (the actual element inside the shadow) to\n  //  outer-most (the host HTML document). If we have access to composedPath(),\n  //  then use its first element; otherwise, fall back to event.target (and\n  //  this only works for an _open_ shadow DOM; otherwise,\n  //  composedPath()[0] === event.target always).\n  return event.target.shadowRoot && typeof event.composedPath === 'function' ? event.composedPath()[0] : event.target;\n};\nvar createFocusTrap = function createFocusTrap(elements, userOptions) {\n  // SSR: a live trap shouldn't be created in this type of environment so this\n  //  should be safe code to execute if the `document` option isn't specified\n  var doc = (userOptions === null || userOptions === void 0 ? void 0 : userOptions.document) || document;\n  var config = _objectSpread2({\n    returnFocusOnDeactivate: true,\n    escapeDeactivates: true,\n    delayInitialFocus: true\n  }, userOptions);\n  var state = {\n    // containers given to createFocusTrap()\n    // @type {Array<HTMLElement>}\n    containers: [],\n    // list of objects identifying tabbable nodes in `containers` in the trap\n    // NOTE: it's possible that a group has no tabbable nodes if nodes get removed while the trap\n    //  is active, but the trap should never get to a state where there isn't at least one group\n    //  with at least one tabbable node in it (that would lead to an error condition that would\n    //  result in an error being thrown)\n    // @type {Array<{\n    //   container: HTMLElement,\n    //   tabbableNodes: Array<HTMLElement>, // empty if none\n    //   focusableNodes: Array<HTMLElement>, // empty if none\n    //   firstTabbableNode: HTMLElement|null,\n    //   lastTabbableNode: HTMLElement|null,\n    //   nextTabbableNode: (node: HTMLElement, forward: boolean) => HTMLElement|undefined\n    // }>}\n    containerGroups: [],\n    // same order/length as `containers` list\n    // references to objects in `containerGroups`, but only those that actually have\n    //  tabbable nodes in them\n    // NOTE: same order as `containers` and `containerGroups`, but __not necessarily__\n    //  the same length\n    tabbableGroups: [],\n    nodeFocusedBeforeActivation: null,\n    mostRecentlyFocusedNode: null,\n    active: false,\n    paused: false,\n    // timer ID for when delayInitialFocus is true and initial focus in this trap\n    //  has been delayed during activation\n    delayInitialFocusTimer: undefined\n  };\n  var trap; // eslint-disable-line prefer-const -- some private functions reference it, and its methods reference private functions, so we must declare here and define later\n\n  /**\n   * Gets a configuration option value.\n   * @param {Object|undefined} configOverrideOptions If true, and option is defined in this set,\n   *  value will be taken from this object. Otherwise, value will be taken from base configuration.\n   * @param {string} optionName Name of the option whose value is sought.\n   * @param {string|undefined} [configOptionName] Name of option to use __instead of__ `optionName`\n   *  IIF `configOverrideOptions` is not defined. Otherwise, `optionName` is used.\n   */\n\n  var getOption = function getOption(configOverrideOptions, optionName, configOptionName) {\n    return configOverrideOptions && configOverrideOptions[optionName] !== undefined ? configOverrideOptions[optionName] : config[configOptionName || optionName];\n  };\n  /**\n   * Finds the index of the container that contains the element.\n   * @param {HTMLElement} element\n   * @returns {number} Index of the container in either `state.containers` or\n   *  `state.containerGroups` (the order/length of these lists are the same); -1\n   *  if the element isn't found.\n   */\n\n  var findContainerIndex = function findContainerIndex(element) {\n    // NOTE: search `containerGroups` because it's possible a group contains no tabbable\n    //  nodes, but still contains focusable nodes (e.g. if they all have `tabindex=-1`)\n    //  and we still need to find the element in there\n    return state.containerGroups.findIndex(function (_ref) {\n      var container = _ref.container,\n        tabbableNodes = _ref.tabbableNodes;\n      return container.contains(element) ||\n      // fall back to explicit tabbable search which will take into consideration any\n      //  web components if the `tabbableOptions.getShadowRoot` option was used for\n      //  the trap, enabling shadow DOM support in tabbable (`Node.contains()` doesn't\n      //  look inside web components even if open)\n      tabbableNodes.find(function (node) {\n        return node === element;\n      });\n    });\n  };\n  /**\n   * Gets the node for the given option, which is expected to be an option that\n   *  can be either a DOM node, a string that is a selector to get a node, `false`\n   *  (if a node is explicitly NOT given), or a function that returns any of these\n   *  values.\n   * @param {string} optionName\n   * @returns {undefined | false | HTMLElement | SVGElement} Returns\n   *  `undefined` if the option is not specified; `false` if the option\n   *  resolved to `false` (node explicitly not given); otherwise, the resolved\n   *  DOM node.\n   * @throws {Error} If the option is set, not `false`, and is not, or does not\n   *  resolve to a node.\n   */\n\n  var getNodeForOption = function getNodeForOption(optionName) {\n    var optionValue = config[optionName];\n    if (typeof optionValue === 'function') {\n      for (var _len2 = arguments.length, params = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        params[_key2 - 1] = arguments[_key2];\n      }\n      optionValue = optionValue.apply(void 0, params);\n    }\n    if (optionValue === true) {\n      optionValue = undefined; // use default value\n    }\n\n    if (!optionValue) {\n      if (optionValue === undefined || optionValue === false) {\n        return optionValue;\n      } // else, empty string (invalid), null (invalid), 0 (invalid)\n\n      throw new Error(\"`\".concat(optionName, \"` was specified but was not a node, or did not return a node\"));\n    }\n    var node = optionValue; // could be HTMLElement, SVGElement, or non-empty string at this point\n\n    if (typeof optionValue === 'string') {\n      node = doc.querySelector(optionValue); // resolve to node, or null if fails\n\n      if (!node) {\n        throw new Error(\"`\".concat(optionName, \"` as selector refers to no known node\"));\n      }\n    }\n    return node;\n  };\n  var getInitialFocusNode = function getInitialFocusNode() {\n    var node = getNodeForOption('initialFocus'); // false explicitly indicates we want no initialFocus at all\n\n    if (node === false) {\n      return false;\n    }\n    if (node === undefined) {\n      // option not specified: use fallback options\n      if (findContainerIndex(doc.activeElement) >= 0) {\n        node = doc.activeElement;\n      } else {\n        var firstTabbableGroup = state.tabbableGroups[0];\n        var firstTabbableNode = firstTabbableGroup && firstTabbableGroup.firstTabbableNode; // NOTE: `fallbackFocus` option function cannot return `false` (not supported)\n\n        node = firstTabbableNode || getNodeForOption('fallbackFocus');\n      }\n    }\n    if (!node) {\n      throw new Error('Your focus-trap needs to have at least one focusable element');\n    }\n    return node;\n  };\n  var updateTabbableNodes = function updateTabbableNodes() {\n    state.containerGroups = state.containers.map(function (container) {\n      var tabbableNodes = tabbable(container, config.tabbableOptions); // NOTE: if we have tabbable nodes, we must have focusable nodes; focusable nodes\n      //  are a superset of tabbable nodes\n\n      var focusableNodes = focusable(container, config.tabbableOptions);\n      return {\n        container: container,\n        tabbableNodes: tabbableNodes,\n        focusableNodes: focusableNodes,\n        firstTabbableNode: tabbableNodes.length > 0 ? tabbableNodes[0] : null,\n        lastTabbableNode: tabbableNodes.length > 0 ? tabbableNodes[tabbableNodes.length - 1] : null,\n        /**\n         * Finds the __tabbable__ node that follows the given node in the specified direction,\n         *  in this container, if any.\n         * @param {HTMLElement} node\n         * @param {boolean} [forward] True if going in forward tab order; false if going\n         *  in reverse.\n         * @returns {HTMLElement|undefined} The next tabbable node, if any.\n         */\n        nextTabbableNode: function nextTabbableNode(node) {\n          var forward = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n          // NOTE: If tabindex is positive (in order to manipulate the tab order separate\n          //  from the DOM order), this __will not work__ because the list of focusableNodes,\n          //  while it contains tabbable nodes, does not sort its nodes in any order other\n          //  than DOM order, because it can't: Where would you place focusable (but not\n          //  tabbable) nodes in that order? They have no order, because they aren't tabbale...\n          // Support for positive tabindex is already broken and hard to manage (possibly\n          //  not supportable, TBD), so this isn't going to make things worse than they\n          //  already are, and at least makes things better for the majority of cases where\n          //  tabindex is either 0/unset or negative.\n          // FYI, positive tabindex issue: https://github.com/focus-trap/focus-trap/issues/375\n          var nodeIdx = focusableNodes.findIndex(function (n) {\n            return n === node;\n          });\n          if (nodeIdx < 0) {\n            return undefined;\n          }\n          if (forward) {\n            return focusableNodes.slice(nodeIdx + 1).find(function (n) {\n              return isTabbable(n, config.tabbableOptions);\n            });\n          }\n          return focusableNodes.slice(0, nodeIdx).reverse().find(function (n) {\n            return isTabbable(n, config.tabbableOptions);\n          });\n        }\n      };\n    });\n    state.tabbableGroups = state.containerGroups.filter(function (group) {\n      return group.tabbableNodes.length > 0;\n    }); // throw if no groups have tabbable nodes and we don't have a fallback focus node either\n\n    if (state.tabbableGroups.length <= 0 && !getNodeForOption('fallbackFocus') // returning false not supported for this option\n    ) {\n      throw new Error('Your focus-trap must have at least one container with at least one tabbable node in it at all times');\n    }\n  };\n  var tryFocus = function tryFocus(node) {\n    if (node === false) {\n      return;\n    }\n    if (node === doc.activeElement) {\n      return;\n    }\n    if (!node || !node.focus) {\n      tryFocus(getInitialFocusNode());\n      return;\n    }\n    node.focus({\n      preventScroll: !!config.preventScroll\n    });\n    state.mostRecentlyFocusedNode = node;\n    if (isSelectableInput(node)) {\n      node.select();\n    }\n  };\n  var getReturnFocusNode = function getReturnFocusNode(previousActiveElement) {\n    var node = getNodeForOption('setReturnFocus', previousActiveElement);\n    return node ? node : node === false ? false : previousActiveElement;\n  }; // This needs to be done on mousedown and touchstart instead of click\n  // so that it precedes the focus event.\n\n  var checkPointerDown = function checkPointerDown(e) {\n    var target = getActualTarget(e);\n    if (findContainerIndex(target) >= 0) {\n      // allow the click since it ocurred inside the trap\n      return;\n    }\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      // immediately deactivate the trap\n      trap.deactivate({\n        // if, on deactivation, we should return focus to the node originally-focused\n        //  when the trap was activated (or the configured `setReturnFocus` node),\n        //  then assume it's also OK to return focus to the outside node that was\n        //  just clicked, causing deactivation, as long as that node is focusable;\n        //  if it isn't focusable, then return focus to the original node focused\n        //  on activation (or the configured `setReturnFocus` node)\n        // NOTE: by setting `returnFocus: false`, deactivate() will do nothing,\n        //  which will result in the outside click setting focus to the node\n        //  that was clicked, whether it's focusable or not; by setting\n        //  `returnFocus: true`, we'll attempt to re-focus the node originally-focused\n        //  on activation (or the configured `setReturnFocus` node)\n        returnFocus: config.returnFocusOnDeactivate && !isFocusable(target, config.tabbableOptions)\n      });\n      return;\n    } // This is needed for mobile devices.\n    // (If we'll only let `click` events through,\n    // then on mobile they will be blocked anyways if `touchstart` is blocked.)\n\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      // allow the click outside the trap to take place\n      return;\n    } // otherwise, prevent the click\n\n    e.preventDefault();\n  }; // In case focus escapes the trap for some strange reason, pull it back in.\n\n  var checkFocusIn = function checkFocusIn(e) {\n    var target = getActualTarget(e);\n    var targetContained = findContainerIndex(target) >= 0; // In Firefox when you Tab out of an iframe the Document is briefly focused.\n\n    if (targetContained || target instanceof Document) {\n      if (targetContained) {\n        state.mostRecentlyFocusedNode = target;\n      }\n    } else {\n      // escaped! pull it back in to where it just left\n      e.stopImmediatePropagation();\n      tryFocus(state.mostRecentlyFocusedNode || getInitialFocusNode());\n    }\n  }; // Hijack Tab events on the first and last focusable nodes of the trap,\n  // in order to prevent focus from escaping. If it escapes for even a\n  // moment it can end up scrolling the page and causing confusion so we\n  // kind of need to capture the action at the keydown phase.\n\n  var checkTab = function checkTab(e) {\n    var target = getActualTarget(e);\n    updateTabbableNodes();\n    var destinationNode = null;\n    if (state.tabbableGroups.length > 0) {\n      // make sure the target is actually contained in a group\n      // NOTE: the target may also be the container itself if it's focusable\n      //  with tabIndex='-1' and was given initial focus\n      var containerIndex = findContainerIndex(target);\n      var containerGroup = containerIndex >= 0 ? state.containerGroups[containerIndex] : undefined;\n      if (containerIndex < 0) {\n        // target not found in any group: quite possible focus has escaped the trap,\n        //  so bring it back in to...\n        if (e.shiftKey) {\n          // ...the last node in the last group\n          destinationNode = state.tabbableGroups[state.tabbableGroups.length - 1].lastTabbableNode;\n        } else {\n          // ...the first node in the first group\n          destinationNode = state.tabbableGroups[0].firstTabbableNode;\n        }\n      } else if (e.shiftKey) {\n        // REVERSE\n        // is the target the first tabbable node in a group?\n        var startOfGroupIndex = findIndex(state.tabbableGroups, function (_ref2) {\n          var firstTabbableNode = _ref2.firstTabbableNode;\n          return target === firstTabbableNode;\n        });\n        if (startOfGroupIndex < 0 && (containerGroup.container === target || isFocusable(target, config.tabbableOptions) && !isTabbable(target, config.tabbableOptions) && !containerGroup.nextTabbableNode(target, false))) {\n          // an exception case where the target is either the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle shift+tab as if focus were on the container's\n          //  first tabbable node, and go to the last tabbable node of the LAST group\n          startOfGroupIndex = containerIndex;\n        }\n        if (startOfGroupIndex >= 0) {\n          // YES: then shift+tab should go to the last tabbable node in the\n          //  previous group (and wrap around to the last tabbable node of\n          //  the LAST group if it's the first tabbable node of the FIRST group)\n          var destinationGroupIndex = startOfGroupIndex === 0 ? state.tabbableGroups.length - 1 : startOfGroupIndex - 1;\n          var destinationGroup = state.tabbableGroups[destinationGroupIndex];\n          destinationNode = destinationGroup.lastTabbableNode;\n        }\n      } else {\n        // FORWARD\n        // is the target the last tabbable node in a group?\n        var lastOfGroupIndex = findIndex(state.tabbableGroups, function (_ref3) {\n          var lastTabbableNode = _ref3.lastTabbableNode;\n          return target === lastTabbableNode;\n        });\n        if (lastOfGroupIndex < 0 && (containerGroup.container === target || isFocusable(target, config.tabbableOptions) && !isTabbable(target, config.tabbableOptions) && !containerGroup.nextTabbableNode(target))) {\n          // an exception case where the target is the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle tab as if focus were on the container's\n          //  last tabbable node, and go to the first tabbable node of the FIRST group\n          lastOfGroupIndex = containerIndex;\n        }\n        if (lastOfGroupIndex >= 0) {\n          // YES: then tab should go to the first tabbable node in the next\n          //  group (and wrap around to the first tabbable node of the FIRST\n          //  group if it's the last tabbable node of the LAST group)\n          var _destinationGroupIndex = lastOfGroupIndex === state.tabbableGroups.length - 1 ? 0 : lastOfGroupIndex + 1;\n          var _destinationGroup = state.tabbableGroups[_destinationGroupIndex];\n          destinationNode = _destinationGroup.firstTabbableNode;\n        }\n      }\n    } else {\n      // NOTE: the fallbackFocus option does not support returning false to opt-out\n      destinationNode = getNodeForOption('fallbackFocus');\n    }\n    if (destinationNode) {\n      e.preventDefault();\n      tryFocus(destinationNode);\n    } // else, let the browser take care of [shift+]tab and move the focus\n  };\n\n  var checkKey = function checkKey(e) {\n    if (isEscapeEvent(e) && valueOrHandler(config.escapeDeactivates, e) !== false) {\n      e.preventDefault();\n      trap.deactivate();\n      return;\n    }\n    if (isTabEvent(e)) {\n      checkTab(e);\n      return;\n    }\n  };\n  var checkClick = function checkClick(e) {\n    var target = getActualTarget(e);\n    if (findContainerIndex(target) >= 0) {\n      return;\n    }\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      return;\n    }\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      return;\n    }\n    e.preventDefault();\n    e.stopImmediatePropagation();\n  }; //\n  // EVENT LISTENERS\n  //\n\n  var addListeners = function addListeners() {\n    if (!state.active) {\n      return;\n    } // There can be only one listening focus trap at a time\n\n    activeFocusTraps.activateTrap(trap); // Delay ensures that the focused element doesn't capture the event\n    // that caused the focus trap activation.\n\n    state.delayInitialFocusTimer = config.delayInitialFocus ? delay(function () {\n      tryFocus(getInitialFocusNode());\n    }) : tryFocus(getInitialFocusNode());\n    doc.addEventListener('focusin', checkFocusIn, true);\n    doc.addEventListener('mousedown', checkPointerDown, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('touchstart', checkPointerDown, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('click', checkClick, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('keydown', checkKey, {\n      capture: true,\n      passive: false\n    });\n    return trap;\n  };\n  var removeListeners = function removeListeners() {\n    if (!state.active) {\n      return;\n    }\n    doc.removeEventListener('focusin', checkFocusIn, true);\n    doc.removeEventListener('mousedown', checkPointerDown, true);\n    doc.removeEventListener('touchstart', checkPointerDown, true);\n    doc.removeEventListener('click', checkClick, true);\n    doc.removeEventListener('keydown', checkKey, true);\n    return trap;\n  }; //\n  // TRAP DEFINITION\n  //\n\n  trap = {\n    get active() {\n      return state.active;\n    },\n    get paused() {\n      return state.paused;\n    },\n    activate: function activate(activateOptions) {\n      if (state.active) {\n        return this;\n      }\n      var onActivate = getOption(activateOptions, 'onActivate');\n      var onPostActivate = getOption(activateOptions, 'onPostActivate');\n      var checkCanFocusTrap = getOption(activateOptions, 'checkCanFocusTrap');\n      if (!checkCanFocusTrap) {\n        updateTabbableNodes();\n      }\n      state.active = true;\n      state.paused = false;\n      state.nodeFocusedBeforeActivation = doc.activeElement;\n      if (onActivate) {\n        onActivate();\n      }\n      var finishActivation = function finishActivation() {\n        if (checkCanFocusTrap) {\n          updateTabbableNodes();\n        }\n        addListeners();\n        if (onPostActivate) {\n          onPostActivate();\n        }\n      };\n      if (checkCanFocusTrap) {\n        checkCanFocusTrap(state.containers.concat()).then(finishActivation, finishActivation);\n        return this;\n      }\n      finishActivation();\n      return this;\n    },\n    deactivate: function deactivate(deactivateOptions) {\n      if (!state.active) {\n        return this;\n      }\n      var options = _objectSpread2({\n        onDeactivate: config.onDeactivate,\n        onPostDeactivate: config.onPostDeactivate,\n        checkCanReturnFocus: config.checkCanReturnFocus\n      }, deactivateOptions);\n      clearTimeout(state.delayInitialFocusTimer); // noop if undefined\n\n      state.delayInitialFocusTimer = undefined;\n      removeListeners();\n      state.active = false;\n      state.paused = false;\n      activeFocusTraps.deactivateTrap(trap);\n      var onDeactivate = getOption(options, 'onDeactivate');\n      var onPostDeactivate = getOption(options, 'onPostDeactivate');\n      var checkCanReturnFocus = getOption(options, 'checkCanReturnFocus');\n      var returnFocus = getOption(options, 'returnFocus', 'returnFocusOnDeactivate');\n      if (onDeactivate) {\n        onDeactivate();\n      }\n      var finishDeactivation = function finishDeactivation() {\n        delay(function () {\n          if (returnFocus) {\n            tryFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation));\n          }\n          if (onPostDeactivate) {\n            onPostDeactivate();\n          }\n        });\n      };\n      if (returnFocus && checkCanReturnFocus) {\n        checkCanReturnFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation)).then(finishDeactivation, finishDeactivation);\n        return this;\n      }\n      finishDeactivation();\n      return this;\n    },\n    pause: function pause() {\n      if (state.paused || !state.active) {\n        return this;\n      }\n      state.paused = true;\n      removeListeners();\n      return this;\n    },\n    unpause: function unpause() {\n      if (!state.paused || !state.active) {\n        return this;\n      }\n      state.paused = false;\n      updateTabbableNodes();\n      addListeners();\n      return this;\n    },\n    updateContainerElements: function updateContainerElements(containerElements) {\n      var elementsAsArray = [].concat(containerElements).filter(Boolean);\n      state.containers = elementsAsArray.map(function (element) {\n        return typeof element === 'string' ? doc.querySelector(element) : element;\n      });\n      if (state.active) {\n        updateTabbableNodes();\n      }\n      return this;\n    }\n  }; // initialize container elements\n\n  trap.updateContainerElements(elements);\n  return trap;\n};\nexport { createFocusTrap };","map":{"version":3,"names":["activeFocusTraps","trapQueue","activateTrap","trap","length","activeTrap","pause","trapIndex","indexOf","push","splice","deactivateTrap","unpause","isSelectableInput","node","tagName","toLowerCase","select","isEscapeEvent","e","key","keyCode","isTabEvent","delay","fn","setTimeout","findIndex","arr","idx","every","value","i","valueOrHandler","_len","arguments","params","Array","_key","apply","getActualTarget","event","target","shadowRoot","composedPath","createFocusTrap","elements","userOptions","doc","document","config","_objectSpread2","returnFocusOnDeactivate","escapeDeactivates","delayInitialFocus","state","containers","containerGroups","tabbableGroups","nodeFocusedBeforeActivation","mostRecentlyFocusedNode","active","paused","delayInitialFocusTimer","undefined","getOption","configOverrideOptions","optionName","configOptionName","findContainerIndex","element","_ref","container","tabbableNodes","contains","find","getNodeForOption","optionValue","_len2","_key2","Error","concat","querySelector","getInitialFocusNode","activeElement","firstTabbableGroup","firstTabbableNode","updateTabbableNodes","map","tabbable","tabbableOptions","focusableNodes","focusable","lastTabbableNode","nextTabbableNode","forward","nodeIdx","n","slice","isTabbable","reverse","filter","group","tryFocus","focus","preventScroll","getReturnFocusNode","previousActiveElement","checkPointerDown","clickOutsideDeactivates","deactivate","returnFocus","isFocusable","allowOutsideClick","preventDefault","checkFocusIn","targetContained","Document","stopImmediatePropagation","checkTab","destinationNode","containerIndex","containerGroup","shiftKey","startOfGroupIndex","_ref2","destinationGroupIndex","destinationGroup","lastOfGroupIndex","_ref3","_destinationGroupIndex","_destinationGroup","checkKey","checkClick","addListeners","addEventListener","capture","passive","removeListeners","removeEventListener","activate","activateOptions","onActivate","onPostActivate","checkCanFocusTrap","finishActivation","then","deactivateOptions","options","onDeactivate","onPostDeactivate","checkCanReturnFocus","clearTimeout","finishDeactivation","updateContainerElements","containerElements","elementsAsArray","Boolean"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/focus-trap/index.js"],"sourcesContent":["import { tabbable, focusable, isFocusable, isTabbable } from 'tabbable';\n\nconst activeFocusTraps = (function () {\n  const trapQueue = [];\n  return {\n    activateTrap(trap) {\n      if (trapQueue.length > 0) {\n        const activeTrap = trapQueue[trapQueue.length - 1];\n        if (activeTrap !== trap) {\n          activeTrap.pause();\n        }\n      }\n\n      const trapIndex = trapQueue.indexOf(trap);\n      if (trapIndex === -1) {\n        trapQueue.push(trap);\n      } else {\n        // move this existing trap to the front of the queue\n        trapQueue.splice(trapIndex, 1);\n        trapQueue.push(trap);\n      }\n    },\n\n    deactivateTrap(trap) {\n      const trapIndex = trapQueue.indexOf(trap);\n      if (trapIndex !== -1) {\n        trapQueue.splice(trapIndex, 1);\n      }\n\n      if (trapQueue.length > 0) {\n        trapQueue[trapQueue.length - 1].unpause();\n      }\n    },\n  };\n})();\n\nconst isSelectableInput = function (node) {\n  return (\n    node.tagName &&\n    node.tagName.toLowerCase() === 'input' &&\n    typeof node.select === 'function'\n  );\n};\n\nconst isEscapeEvent = function (e) {\n  return e.key === 'Escape' || e.key === 'Esc' || e.keyCode === 27;\n};\n\nconst isTabEvent = function (e) {\n  return e.key === 'Tab' || e.keyCode === 9;\n};\n\nconst delay = function (fn) {\n  return setTimeout(fn, 0);\n};\n\n// Array.find/findIndex() are not supported on IE; this replicates enough\n//  of Array.findIndex() for our needs\nconst findIndex = function (arr, fn) {\n  let idx = -1;\n\n  arr.every(function (value, i) {\n    if (fn(value)) {\n      idx = i;\n      return false; // break\n    }\n\n    return true; // next\n  });\n\n  return idx;\n};\n\n/**\n * Get an option's value when it could be a plain value, or a handler that provides\n *  the value.\n * @param {*} value Option's value to check.\n * @param {...*} [params] Any parameters to pass to the handler, if `value` is a function.\n * @returns {*} The `value`, or the handler's returned value.\n */\nconst valueOrHandler = function (value, ...params) {\n  return typeof value === 'function' ? value(...params) : value;\n};\n\nconst getActualTarget = function (event) {\n  // NOTE: If the trap is _inside_ a shadow DOM, event.target will always be the\n  //  shadow host. However, event.target.composedPath() will be an array of\n  //  nodes \"clicked\" from inner-most (the actual element inside the shadow) to\n  //  outer-most (the host HTML document). If we have access to composedPath(),\n  //  then use its first element; otherwise, fall back to event.target (and\n  //  this only works for an _open_ shadow DOM; otherwise,\n  //  composedPath()[0] === event.target always).\n  return event.target.shadowRoot && typeof event.composedPath === 'function'\n    ? event.composedPath()[0]\n    : event.target;\n};\n\nconst createFocusTrap = function (elements, userOptions) {\n  // SSR: a live trap shouldn't be created in this type of environment so this\n  //  should be safe code to execute if the `document` option isn't specified\n  const doc = userOptions?.document || document;\n\n  const config = {\n    returnFocusOnDeactivate: true,\n    escapeDeactivates: true,\n    delayInitialFocus: true,\n    ...userOptions,\n  };\n\n  const state = {\n    // containers given to createFocusTrap()\n    // @type {Array<HTMLElement>}\n    containers: [],\n\n    // list of objects identifying tabbable nodes in `containers` in the trap\n    // NOTE: it's possible that a group has no tabbable nodes if nodes get removed while the trap\n    //  is active, but the trap should never get to a state where there isn't at least one group\n    //  with at least one tabbable node in it (that would lead to an error condition that would\n    //  result in an error being thrown)\n    // @type {Array<{\n    //   container: HTMLElement,\n    //   tabbableNodes: Array<HTMLElement>, // empty if none\n    //   focusableNodes: Array<HTMLElement>, // empty if none\n    //   firstTabbableNode: HTMLElement|null,\n    //   lastTabbableNode: HTMLElement|null,\n    //   nextTabbableNode: (node: HTMLElement, forward: boolean) => HTMLElement|undefined\n    // }>}\n    containerGroups: [], // same order/length as `containers` list\n\n    // references to objects in `containerGroups`, but only those that actually have\n    //  tabbable nodes in them\n    // NOTE: same order as `containers` and `containerGroups`, but __not necessarily__\n    //  the same length\n    tabbableGroups: [],\n\n    nodeFocusedBeforeActivation: null,\n    mostRecentlyFocusedNode: null,\n    active: false,\n    paused: false,\n\n    // timer ID for when delayInitialFocus is true and initial focus in this trap\n    //  has been delayed during activation\n    delayInitialFocusTimer: undefined,\n  };\n\n  let trap; // eslint-disable-line prefer-const -- some private functions reference it, and its methods reference private functions, so we must declare here and define later\n\n  /**\n   * Gets a configuration option value.\n   * @param {Object|undefined} configOverrideOptions If true, and option is defined in this set,\n   *  value will be taken from this object. Otherwise, value will be taken from base configuration.\n   * @param {string} optionName Name of the option whose value is sought.\n   * @param {string|undefined} [configOptionName] Name of option to use __instead of__ `optionName`\n   *  IIF `configOverrideOptions` is not defined. Otherwise, `optionName` is used.\n   */\n  const getOption = (configOverrideOptions, optionName, configOptionName) => {\n    return configOverrideOptions &&\n      configOverrideOptions[optionName] !== undefined\n      ? configOverrideOptions[optionName]\n      : config[configOptionName || optionName];\n  };\n\n  /**\n   * Finds the index of the container that contains the element.\n   * @param {HTMLElement} element\n   * @returns {number} Index of the container in either `state.containers` or\n   *  `state.containerGroups` (the order/length of these lists are the same); -1\n   *  if the element isn't found.\n   */\n  const findContainerIndex = function (element) {\n    // NOTE: search `containerGroups` because it's possible a group contains no tabbable\n    //  nodes, but still contains focusable nodes (e.g. if they all have `tabindex=-1`)\n    //  and we still need to find the element in there\n    return state.containerGroups.findIndex(\n      ({ container, tabbableNodes }) =>\n        container.contains(element) ||\n        // fall back to explicit tabbable search which will take into consideration any\n        //  web components if the `tabbableOptions.getShadowRoot` option was used for\n        //  the trap, enabling shadow DOM support in tabbable (`Node.contains()` doesn't\n        //  look inside web components even if open)\n        tabbableNodes.find((node) => node === element)\n    );\n  };\n\n  /**\n   * Gets the node for the given option, which is expected to be an option that\n   *  can be either a DOM node, a string that is a selector to get a node, `false`\n   *  (if a node is explicitly NOT given), or a function that returns any of these\n   *  values.\n   * @param {string} optionName\n   * @returns {undefined | false | HTMLElement | SVGElement} Returns\n   *  `undefined` if the option is not specified; `false` if the option\n   *  resolved to `false` (node explicitly not given); otherwise, the resolved\n   *  DOM node.\n   * @throws {Error} If the option is set, not `false`, and is not, or does not\n   *  resolve to a node.\n   */\n  const getNodeForOption = function (optionName, ...params) {\n    let optionValue = config[optionName];\n\n    if (typeof optionValue === 'function') {\n      optionValue = optionValue(...params);\n    }\n\n    if (optionValue === true) {\n      optionValue = undefined; // use default value\n    }\n\n    if (!optionValue) {\n      if (optionValue === undefined || optionValue === false) {\n        return optionValue;\n      }\n      // else, empty string (invalid), null (invalid), 0 (invalid)\n\n      throw new Error(\n        `\\`${optionName}\\` was specified but was not a node, or did not return a node`\n      );\n    }\n\n    let node = optionValue; // could be HTMLElement, SVGElement, or non-empty string at this point\n\n    if (typeof optionValue === 'string') {\n      node = doc.querySelector(optionValue); // resolve to node, or null if fails\n      if (!node) {\n        throw new Error(\n          `\\`${optionName}\\` as selector refers to no known node`\n        );\n      }\n    }\n\n    return node;\n  };\n\n  const getInitialFocusNode = function () {\n    let node = getNodeForOption('initialFocus');\n\n    // false explicitly indicates we want no initialFocus at all\n    if (node === false) {\n      return false;\n    }\n\n    if (node === undefined) {\n      // option not specified: use fallback options\n      if (findContainerIndex(doc.activeElement) >= 0) {\n        node = doc.activeElement;\n      } else {\n        const firstTabbableGroup = state.tabbableGroups[0];\n        const firstTabbableNode =\n          firstTabbableGroup && firstTabbableGroup.firstTabbableNode;\n\n        // NOTE: `fallbackFocus` option function cannot return `false` (not supported)\n        node = firstTabbableNode || getNodeForOption('fallbackFocus');\n      }\n    }\n\n    if (!node) {\n      throw new Error(\n        'Your focus-trap needs to have at least one focusable element'\n      );\n    }\n\n    return node;\n  };\n\n  const updateTabbableNodes = function () {\n    state.containerGroups = state.containers.map((container) => {\n      const tabbableNodes = tabbable(container, config.tabbableOptions);\n\n      // NOTE: if we have tabbable nodes, we must have focusable nodes; focusable nodes\n      //  are a superset of tabbable nodes\n      const focusableNodes = focusable(container, config.tabbableOptions);\n\n      return {\n        container,\n        tabbableNodes,\n        focusableNodes,\n        firstTabbableNode: tabbableNodes.length > 0 ? tabbableNodes[0] : null,\n        lastTabbableNode:\n          tabbableNodes.length > 0\n            ? tabbableNodes[tabbableNodes.length - 1]\n            : null,\n\n        /**\n         * Finds the __tabbable__ node that follows the given node in the specified direction,\n         *  in this container, if any.\n         * @param {HTMLElement} node\n         * @param {boolean} [forward] True if going in forward tab order; false if going\n         *  in reverse.\n         * @returns {HTMLElement|undefined} The next tabbable node, if any.\n         */\n        nextTabbableNode(node, forward = true) {\n          // NOTE: If tabindex is positive (in order to manipulate the tab order separate\n          //  from the DOM order), this __will not work__ because the list of focusableNodes,\n          //  while it contains tabbable nodes, does not sort its nodes in any order other\n          //  than DOM order, because it can't: Where would you place focusable (but not\n          //  tabbable) nodes in that order? They have no order, because they aren't tabbale...\n          // Support for positive tabindex is already broken and hard to manage (possibly\n          //  not supportable, TBD), so this isn't going to make things worse than they\n          //  already are, and at least makes things better for the majority of cases where\n          //  tabindex is either 0/unset or negative.\n          // FYI, positive tabindex issue: https://github.com/focus-trap/focus-trap/issues/375\n          const nodeIdx = focusableNodes.findIndex((n) => n === node);\n          if (nodeIdx < 0) {\n            return undefined;\n          }\n\n          if (forward) {\n            return focusableNodes\n              .slice(nodeIdx + 1)\n              .find((n) => isTabbable(n, config.tabbableOptions));\n          }\n\n          return focusableNodes\n            .slice(0, nodeIdx)\n            .reverse()\n            .find((n) => isTabbable(n, config.tabbableOptions));\n        },\n      };\n    });\n\n    state.tabbableGroups = state.containerGroups.filter(\n      (group) => group.tabbableNodes.length > 0\n    );\n\n    // throw if no groups have tabbable nodes and we don't have a fallback focus node either\n    if (\n      state.tabbableGroups.length <= 0 &&\n      !getNodeForOption('fallbackFocus') // returning false not supported for this option\n    ) {\n      throw new Error(\n        'Your focus-trap must have at least one container with at least one tabbable node in it at all times'\n      );\n    }\n  };\n\n  const tryFocus = function (node) {\n    if (node === false) {\n      return;\n    }\n\n    if (node === doc.activeElement) {\n      return;\n    }\n\n    if (!node || !node.focus) {\n      tryFocus(getInitialFocusNode());\n      return;\n    }\n\n    node.focus({ preventScroll: !!config.preventScroll });\n    state.mostRecentlyFocusedNode = node;\n\n    if (isSelectableInput(node)) {\n      node.select();\n    }\n  };\n\n  const getReturnFocusNode = function (previousActiveElement) {\n    const node = getNodeForOption('setReturnFocus', previousActiveElement);\n    return node ? node : node === false ? false : previousActiveElement;\n  };\n\n  // This needs to be done on mousedown and touchstart instead of click\n  // so that it precedes the focus event.\n  const checkPointerDown = function (e) {\n    const target = getActualTarget(e);\n\n    if (findContainerIndex(target) >= 0) {\n      // allow the click since it ocurred inside the trap\n      return;\n    }\n\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      // immediately deactivate the trap\n      trap.deactivate({\n        // if, on deactivation, we should return focus to the node originally-focused\n        //  when the trap was activated (or the configured `setReturnFocus` node),\n        //  then assume it's also OK to return focus to the outside node that was\n        //  just clicked, causing deactivation, as long as that node is focusable;\n        //  if it isn't focusable, then return focus to the original node focused\n        //  on activation (or the configured `setReturnFocus` node)\n        // NOTE: by setting `returnFocus: false`, deactivate() will do nothing,\n        //  which will result in the outside click setting focus to the node\n        //  that was clicked, whether it's focusable or not; by setting\n        //  `returnFocus: true`, we'll attempt to re-focus the node originally-focused\n        //  on activation (or the configured `setReturnFocus` node)\n        returnFocus:\n          config.returnFocusOnDeactivate &&\n          !isFocusable(target, config.tabbableOptions),\n      });\n      return;\n    }\n\n    // This is needed for mobile devices.\n    // (If we'll only let `click` events through,\n    // then on mobile they will be blocked anyways if `touchstart` is blocked.)\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      // allow the click outside the trap to take place\n      return;\n    }\n\n    // otherwise, prevent the click\n    e.preventDefault();\n  };\n\n  // In case focus escapes the trap for some strange reason, pull it back in.\n  const checkFocusIn = function (e) {\n    const target = getActualTarget(e);\n    const targetContained = findContainerIndex(target) >= 0;\n\n    // In Firefox when you Tab out of an iframe the Document is briefly focused.\n    if (targetContained || target instanceof Document) {\n      if (targetContained) {\n        state.mostRecentlyFocusedNode = target;\n      }\n    } else {\n      // escaped! pull it back in to where it just left\n      e.stopImmediatePropagation();\n      tryFocus(state.mostRecentlyFocusedNode || getInitialFocusNode());\n    }\n  };\n\n  // Hijack Tab events on the first and last focusable nodes of the trap,\n  // in order to prevent focus from escaping. If it escapes for even a\n  // moment it can end up scrolling the page and causing confusion so we\n  // kind of need to capture the action at the keydown phase.\n  const checkTab = function (e) {\n    const target = getActualTarget(e);\n    updateTabbableNodes();\n\n    let destinationNode = null;\n\n    if (state.tabbableGroups.length > 0) {\n      // make sure the target is actually contained in a group\n      // NOTE: the target may also be the container itself if it's focusable\n      //  with tabIndex='-1' and was given initial focus\n      const containerIndex = findContainerIndex(target);\n      const containerGroup =\n        containerIndex >= 0 ? state.containerGroups[containerIndex] : undefined;\n\n      if (containerIndex < 0) {\n        // target not found in any group: quite possible focus has escaped the trap,\n        //  so bring it back in to...\n        if (e.shiftKey) {\n          // ...the last node in the last group\n          destinationNode =\n            state.tabbableGroups[state.tabbableGroups.length - 1]\n              .lastTabbableNode;\n        } else {\n          // ...the first node in the first group\n          destinationNode = state.tabbableGroups[0].firstTabbableNode;\n        }\n      } else if (e.shiftKey) {\n        // REVERSE\n\n        // is the target the first tabbable node in a group?\n        let startOfGroupIndex = findIndex(\n          state.tabbableGroups,\n          ({ firstTabbableNode }) => target === firstTabbableNode\n        );\n\n        if (\n          startOfGroupIndex < 0 &&\n          (containerGroup.container === target ||\n            (isFocusable(target, config.tabbableOptions) &&\n              !isTabbable(target, config.tabbableOptions) &&\n              !containerGroup.nextTabbableNode(target, false)))\n        ) {\n          // an exception case where the target is either the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle shift+tab as if focus were on the container's\n          //  first tabbable node, and go to the last tabbable node of the LAST group\n          startOfGroupIndex = containerIndex;\n        }\n\n        if (startOfGroupIndex >= 0) {\n          // YES: then shift+tab should go to the last tabbable node in the\n          //  previous group (and wrap around to the last tabbable node of\n          //  the LAST group if it's the first tabbable node of the FIRST group)\n          const destinationGroupIndex =\n            startOfGroupIndex === 0\n              ? state.tabbableGroups.length - 1\n              : startOfGroupIndex - 1;\n\n          const destinationGroup = state.tabbableGroups[destinationGroupIndex];\n          destinationNode = destinationGroup.lastTabbableNode;\n        }\n      } else {\n        // FORWARD\n\n        // is the target the last tabbable node in a group?\n        let lastOfGroupIndex = findIndex(\n          state.tabbableGroups,\n          ({ lastTabbableNode }) => target === lastTabbableNode\n        );\n\n        if (\n          lastOfGroupIndex < 0 &&\n          (containerGroup.container === target ||\n            (isFocusable(target, config.tabbableOptions) &&\n              !isTabbable(target, config.tabbableOptions) &&\n              !containerGroup.nextTabbableNode(target)))\n        ) {\n          // an exception case where the target is the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle tab as if focus were on the container's\n          //  last tabbable node, and go to the first tabbable node of the FIRST group\n          lastOfGroupIndex = containerIndex;\n        }\n\n        if (lastOfGroupIndex >= 0) {\n          // YES: then tab should go to the first tabbable node in the next\n          //  group (and wrap around to the first tabbable node of the FIRST\n          //  group if it's the last tabbable node of the LAST group)\n          const destinationGroupIndex =\n            lastOfGroupIndex === state.tabbableGroups.length - 1\n              ? 0\n              : lastOfGroupIndex + 1;\n\n          const destinationGroup = state.tabbableGroups[destinationGroupIndex];\n          destinationNode = destinationGroup.firstTabbableNode;\n        }\n      }\n    } else {\n      // NOTE: the fallbackFocus option does not support returning false to opt-out\n      destinationNode = getNodeForOption('fallbackFocus');\n    }\n\n    if (destinationNode) {\n      e.preventDefault();\n      tryFocus(destinationNode);\n    }\n    // else, let the browser take care of [shift+]tab and move the focus\n  };\n\n  const checkKey = function (e) {\n    if (\n      isEscapeEvent(e) &&\n      valueOrHandler(config.escapeDeactivates, e) !== false\n    ) {\n      e.preventDefault();\n      trap.deactivate();\n      return;\n    }\n\n    if (isTabEvent(e)) {\n      checkTab(e);\n      return;\n    }\n  };\n\n  const checkClick = function (e) {\n    const target = getActualTarget(e);\n\n    if (findContainerIndex(target) >= 0) {\n      return;\n    }\n\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      return;\n    }\n\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      return;\n    }\n\n    e.preventDefault();\n    e.stopImmediatePropagation();\n  };\n\n  //\n  // EVENT LISTENERS\n  //\n\n  const addListeners = function () {\n    if (!state.active) {\n      return;\n    }\n\n    // There can be only one listening focus trap at a time\n    activeFocusTraps.activateTrap(trap);\n\n    // Delay ensures that the focused element doesn't capture the event\n    // that caused the focus trap activation.\n    state.delayInitialFocusTimer = config.delayInitialFocus\n      ? delay(function () {\n          tryFocus(getInitialFocusNode());\n        })\n      : tryFocus(getInitialFocusNode());\n\n    doc.addEventListener('focusin', checkFocusIn, true);\n    doc.addEventListener('mousedown', checkPointerDown, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('touchstart', checkPointerDown, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('click', checkClick, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('keydown', checkKey, {\n      capture: true,\n      passive: false,\n    });\n\n    return trap;\n  };\n\n  const removeListeners = function () {\n    if (!state.active) {\n      return;\n    }\n\n    doc.removeEventListener('focusin', checkFocusIn, true);\n    doc.removeEventListener('mousedown', checkPointerDown, true);\n    doc.removeEventListener('touchstart', checkPointerDown, true);\n    doc.removeEventListener('click', checkClick, true);\n    doc.removeEventListener('keydown', checkKey, true);\n\n    return trap;\n  };\n\n  //\n  // TRAP DEFINITION\n  //\n\n  trap = {\n    get active() {\n      return state.active;\n    },\n\n    get paused() {\n      return state.paused;\n    },\n\n    activate(activateOptions) {\n      if (state.active) {\n        return this;\n      }\n\n      const onActivate = getOption(activateOptions, 'onActivate');\n      const onPostActivate = getOption(activateOptions, 'onPostActivate');\n      const checkCanFocusTrap = getOption(activateOptions, 'checkCanFocusTrap');\n\n      if (!checkCanFocusTrap) {\n        updateTabbableNodes();\n      }\n\n      state.active = true;\n      state.paused = false;\n      state.nodeFocusedBeforeActivation = doc.activeElement;\n\n      if (onActivate) {\n        onActivate();\n      }\n\n      const finishActivation = () => {\n        if (checkCanFocusTrap) {\n          updateTabbableNodes();\n        }\n        addListeners();\n        if (onPostActivate) {\n          onPostActivate();\n        }\n      };\n\n      if (checkCanFocusTrap) {\n        checkCanFocusTrap(state.containers.concat()).then(\n          finishActivation,\n          finishActivation\n        );\n        return this;\n      }\n\n      finishActivation();\n      return this;\n    },\n\n    deactivate(deactivateOptions) {\n      if (!state.active) {\n        return this;\n      }\n\n      const options = {\n        onDeactivate: config.onDeactivate,\n        onPostDeactivate: config.onPostDeactivate,\n        checkCanReturnFocus: config.checkCanReturnFocus,\n        ...deactivateOptions,\n      };\n\n      clearTimeout(state.delayInitialFocusTimer); // noop if undefined\n      state.delayInitialFocusTimer = undefined;\n\n      removeListeners();\n      state.active = false;\n      state.paused = false;\n\n      activeFocusTraps.deactivateTrap(trap);\n\n      const onDeactivate = getOption(options, 'onDeactivate');\n      const onPostDeactivate = getOption(options, 'onPostDeactivate');\n      const checkCanReturnFocus = getOption(options, 'checkCanReturnFocus');\n      const returnFocus = getOption(\n        options,\n        'returnFocus',\n        'returnFocusOnDeactivate'\n      );\n\n      if (onDeactivate) {\n        onDeactivate();\n      }\n\n      const finishDeactivation = () => {\n        delay(() => {\n          if (returnFocus) {\n            tryFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation));\n          }\n          if (onPostDeactivate) {\n            onPostDeactivate();\n          }\n        });\n      };\n\n      if (returnFocus && checkCanReturnFocus) {\n        checkCanReturnFocus(\n          getReturnFocusNode(state.nodeFocusedBeforeActivation)\n        ).then(finishDeactivation, finishDeactivation);\n        return this;\n      }\n\n      finishDeactivation();\n      return this;\n    },\n\n    pause() {\n      if (state.paused || !state.active) {\n        return this;\n      }\n\n      state.paused = true;\n      removeListeners();\n\n      return this;\n    },\n\n    unpause() {\n      if (!state.paused || !state.active) {\n        return this;\n      }\n\n      state.paused = false;\n      updateTabbableNodes();\n      addListeners();\n\n      return this;\n    },\n\n    updateContainerElements(containerElements) {\n      const elementsAsArray = [].concat(containerElements).filter(Boolean);\n\n      state.containers = elementsAsArray.map((element) =>\n        typeof element === 'string' ? doc.querySelector(element) : element\n      );\n\n      if (state.active) {\n        updateTabbableNodes();\n      }\n\n      return this;\n    },\n  };\n\n  // initialize container elements\n  trap.updateContainerElements(elements);\n\n  return trap;\n};\n\nexport { createFocusTrap };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}