{"ast":null,"code":"import _slicedToArray from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"onChange\", \"maxRows\", \"minRows\", \"style\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport * as ReactDOM from 'react-dom';\nimport { unstable_debounce as debounce, unstable_useForkRef as useForkRef, unstable_useEnhancedEffect as useEnhancedEffect, unstable_ownerWindow as ownerWindow } from '@mui/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction getStyleValue(value) {\n  return parseInt(value, 10) || 0;\n}\nvar styles = {\n  shadow: {\n    // Visibility needed to hide the extra text area on iPads\n    visibility: 'hidden',\n    // Remove from the content flow\n    position: 'absolute',\n    // Ignore the scrollbar width\n    overflow: 'hidden',\n    height: 0,\n    top: 0,\n    left: 0,\n    // Create a new layer, increase the isolation of the computed values\n    transform: 'translateZ(0)'\n  }\n};\nfunction isEmpty(obj) {\n  return obj === undefined || obj === null || Object.keys(obj).length === 0 || obj.outerHeightStyle === 0 && !obj.overflow;\n}\n\n/**\n *\n * Demos:\n *\n * - [Textarea Autosize](https://mui.com/base/react-textarea-autosize/)\n * - [Textarea Autosize](https://mui.com/material-ui/react-textarea-autosize/)\n *\n * API:\n *\n * - [TextareaAutosize API](https://mui.com/base/react-textarea-autosize/components-api/#textarea-autosize)\n */\nvar TextareaAutosize = /*#__PURE__*/React.forwardRef(function TextareaAutosize(props, forwardedRef) {\n  var onChange = props.onChange,\n    maxRows = props.maxRows,\n    _props$minRows = props.minRows,\n    minRows = _props$minRows === void 0 ? 1 : _props$minRows,\n    style = props.style,\n    value = props.value,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  var _React$useRef = React.useRef(value != null),\n    isControlled = _React$useRef.current;\n  var inputRef = React.useRef(null);\n  var handleRef = useForkRef(forwardedRef, inputRef);\n  var shadowRef = React.useRef(null);\n  var renders = React.useRef(0);\n  var _React$useState = React.useState({\n      outerHeightStyle: 0\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    state = _React$useState2[0],\n    setState = _React$useState2[1];\n  var getUpdatedState = React.useCallback(function () {\n    var input = inputRef.current;\n    var containerWindow = ownerWindow(input);\n    var computedStyle = containerWindow.getComputedStyle(input);\n\n    // If input's width is shrunk and it's not visible, don't sync height.\n    if (computedStyle.width === '0px') {\n      return {\n        outerHeightStyle: 0\n      };\n    }\n    var inputShallow = shadowRef.current;\n    inputShallow.style.width = computedStyle.width;\n    inputShallow.value = input.value || props.placeholder || 'x';\n    if (inputShallow.value.slice(-1) === '\\n') {\n      // Certain fonts which overflow the line height will cause the textarea\n      // to report a different scrollHeight depending on whether the last line\n      // is empty. Make it non-empty to avoid this issue.\n      inputShallow.value += ' ';\n    }\n    var boxSizing = computedStyle.boxSizing;\n    var padding = getStyleValue(computedStyle.paddingBottom) + getStyleValue(computedStyle.paddingTop);\n    var border = getStyleValue(computedStyle.borderBottomWidth) + getStyleValue(computedStyle.borderTopWidth);\n\n    // The height of the inner content\n    var innerHeight = inputShallow.scrollHeight;\n\n    // Measure height of a textarea with a single row\n    inputShallow.value = 'x';\n    var singleRowHeight = inputShallow.scrollHeight;\n\n    // The height of the outer content\n    var outerHeight = innerHeight;\n    if (minRows) {\n      outerHeight = Math.max(Number(minRows) * singleRowHeight, outerHeight);\n    }\n    if (maxRows) {\n      outerHeight = Math.min(Number(maxRows) * singleRowHeight, outerHeight);\n    }\n    outerHeight = Math.max(outerHeight, singleRowHeight);\n\n    // Take the box sizing into account for applying this value as a style.\n    var outerHeightStyle = outerHeight + (boxSizing === 'border-box' ? padding + border : 0);\n    var overflow = Math.abs(outerHeight - innerHeight) <= 1;\n    return {\n      outerHeightStyle: outerHeightStyle,\n      overflow: overflow\n    };\n  }, [maxRows, minRows, props.placeholder]);\n  var updateState = function updateState(prevState, newState) {\n    var outerHeightStyle = newState.outerHeightStyle,\n      overflow = newState.overflow;\n    // Need a large enough difference to update the height.\n    // This prevents infinite rendering loop.\n    if (renders.current < 20 && (outerHeightStyle > 0 && Math.abs((prevState.outerHeightStyle || 0) - outerHeightStyle) > 1 || prevState.overflow !== overflow)) {\n      renders.current += 1;\n      return {\n        overflow: overflow,\n        outerHeightStyle: outerHeightStyle\n      };\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      if (renders.current === 20) {\n        console.error(['MUI: Too many re-renders. The layout is unstable.', 'TextareaAutosize limits the number of renders to prevent an infinite loop.'].join('\\n'));\n      }\n    }\n    return prevState;\n  };\n  var syncHeight = React.useCallback(function () {\n    var newState = getUpdatedState();\n    if (isEmpty(newState)) {\n      return;\n    }\n    setState(function (prevState) {\n      return updateState(prevState, newState);\n    });\n  }, [getUpdatedState]);\n  var syncHeightWithFlushSync = function syncHeightWithFlushSync() {\n    var newState = getUpdatedState();\n    if (isEmpty(newState)) {\n      return;\n    }\n\n    // In React 18, state updates in a ResizeObserver's callback are happening after the paint which causes flickering\n    // when doing some visual updates in it. Using flushSync ensures that the dom will be painted after the states updates happen\n    // Related issue - https://github.com/facebook/react/issues/24331\n    ReactDOM.flushSync(function () {\n      setState(function (prevState) {\n        return updateState(prevState, newState);\n      });\n    });\n  };\n  React.useEffect(function () {\n    var handleResize = debounce(function () {\n      renders.current = 0;\n\n      // If the TextareaAutosize component is replaced by Suspense with a fallback, the last\n      // ResizeObserver's handler that runs because of the change in the layout is trying to\n      // access a dom node that is no longer there (as the fallback component is being shown instead).\n      // See https://github.com/mui/material-ui/issues/32640\n      if (inputRef.current) {\n        syncHeightWithFlushSync();\n      }\n    });\n    var resizeObserver;\n    var input = inputRef.current;\n    var containerWindow = ownerWindow(input);\n    containerWindow.addEventListener('resize', handleResize);\n    if (typeof ResizeObserver !== 'undefined') {\n      resizeObserver = new ResizeObserver(handleResize);\n      resizeObserver.observe(input);\n    }\n    return function () {\n      handleResize.clear();\n      containerWindow.removeEventListener('resize', handleResize);\n      if (resizeObserver) {\n        resizeObserver.disconnect();\n      }\n    };\n  });\n  useEnhancedEffect(function () {\n    syncHeight();\n  });\n  React.useEffect(function () {\n    renders.current = 0;\n  }, [value]);\n  var handleChange = function handleChange(event) {\n    renders.current = 0;\n    if (!isControlled) {\n      syncHeight();\n    }\n    if (onChange) {\n      onChange(event);\n    }\n  };\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(\"textarea\", _extends({\n      value: value,\n      onChange: handleChange,\n      ref: handleRef\n      // Apply the rows prop to get a \"correct\" first SSR paint\n      ,\n\n      rows: minRows,\n      style: _extends({\n        height: state.outerHeightStyle,\n        // Need a large enough difference to allow scrolling.\n        // This prevents infinite rendering loop.\n        overflow: state.overflow ? 'hidden' : undefined\n      }, style)\n    }, other)), /*#__PURE__*/_jsx(\"textarea\", {\n      \"aria-hidden\": true,\n      className: props.className,\n      readOnly: true,\n      ref: shadowRef,\n      tabIndex: -1,\n      style: _extends({}, styles.shadow, style, {\n        padding: 0\n      })\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? TextareaAutosize.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * Maximum number of rows to display.\n   */\n  maxRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * Minimum number of rows to display.\n   * @default 1\n   */\n  minRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * @ignore\n   */\n  onChange: PropTypes.func,\n  /**\n   * @ignore\n   */\n  placeholder: PropTypes.string,\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n  /**\n   * @ignore\n   */\n  value: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.number, PropTypes.string])\n} : void 0;\nexport default TextareaAutosize;","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","ReactDOM","unstable_debounce","debounce","unstable_useForkRef","useForkRef","unstable_useEnhancedEffect","useEnhancedEffect","unstable_ownerWindow","ownerWindow","jsx","_jsx","jsxs","_jsxs","getStyleValue","value","parseInt","styles","shadow","visibility","position","overflow","height","top","left","transform","isEmpty","obj","undefined","Object","keys","length","outerHeightStyle","TextareaAutosize","forwardRef","props","forwardedRef","onChange","maxRows","_props$minRows","minRows","style","other","_React$useRef","useRef","isControlled","current","inputRef","handleRef","shadowRef","renders","_React$useState","useState","_React$useState2","_slicedToArray","state","setState","getUpdatedState","useCallback","input","containerWindow","computedStyle","getComputedStyle","width","inputShallow","placeholder","slice","boxSizing","padding","paddingBottom","paddingTop","border","borderBottomWidth","borderTopWidth","innerHeight","scrollHeight","singleRowHeight","outerHeight","Math","max","Number","min","abs","updateState","prevState","newState","process","env","NODE_ENV","console","error","join","syncHeight","syncHeightWithFlushSync","flushSync","useEffect","handleResize","resizeObserver","addEventListener","ResizeObserver","observe","clear","removeEventListener","disconnect","handleChange","event","Fragment","children","ref","rows","className","readOnly","tabIndex","propTypes","string","oneOfType","number","func","object","arrayOf"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@mui/base/TextareaAutosize/TextareaAutosize.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"onChange\", \"maxRows\", \"minRows\", \"style\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport * as ReactDOM from 'react-dom';\nimport { unstable_debounce as debounce, unstable_useForkRef as useForkRef, unstable_useEnhancedEffect as useEnhancedEffect, unstable_ownerWindow as ownerWindow } from '@mui/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction getStyleValue(value) {\n  return parseInt(value, 10) || 0;\n}\nconst styles = {\n  shadow: {\n    // Visibility needed to hide the extra text area on iPads\n    visibility: 'hidden',\n    // Remove from the content flow\n    position: 'absolute',\n    // Ignore the scrollbar width\n    overflow: 'hidden',\n    height: 0,\n    top: 0,\n    left: 0,\n    // Create a new layer, increase the isolation of the computed values\n    transform: 'translateZ(0)'\n  }\n};\nfunction isEmpty(obj) {\n  return obj === undefined || obj === null || Object.keys(obj).length === 0 || obj.outerHeightStyle === 0 && !obj.overflow;\n}\n\n/**\n *\n * Demos:\n *\n * - [Textarea Autosize](https://mui.com/base/react-textarea-autosize/)\n * - [Textarea Autosize](https://mui.com/material-ui/react-textarea-autosize/)\n *\n * API:\n *\n * - [TextareaAutosize API](https://mui.com/base/react-textarea-autosize/components-api/#textarea-autosize)\n */\nconst TextareaAutosize = /*#__PURE__*/React.forwardRef(function TextareaAutosize(props, forwardedRef) {\n  const {\n      onChange,\n      maxRows,\n      minRows = 1,\n      style,\n      value\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const {\n    current: isControlled\n  } = React.useRef(value != null);\n  const inputRef = React.useRef(null);\n  const handleRef = useForkRef(forwardedRef, inputRef);\n  const shadowRef = React.useRef(null);\n  const renders = React.useRef(0);\n  const [state, setState] = React.useState({\n    outerHeightStyle: 0\n  });\n  const getUpdatedState = React.useCallback(() => {\n    const input = inputRef.current;\n    const containerWindow = ownerWindow(input);\n    const computedStyle = containerWindow.getComputedStyle(input);\n\n    // If input's width is shrunk and it's not visible, don't sync height.\n    if (computedStyle.width === '0px') {\n      return {\n        outerHeightStyle: 0\n      };\n    }\n    const inputShallow = shadowRef.current;\n    inputShallow.style.width = computedStyle.width;\n    inputShallow.value = input.value || props.placeholder || 'x';\n    if (inputShallow.value.slice(-1) === '\\n') {\n      // Certain fonts which overflow the line height will cause the textarea\n      // to report a different scrollHeight depending on whether the last line\n      // is empty. Make it non-empty to avoid this issue.\n      inputShallow.value += ' ';\n    }\n    const boxSizing = computedStyle.boxSizing;\n    const padding = getStyleValue(computedStyle.paddingBottom) + getStyleValue(computedStyle.paddingTop);\n    const border = getStyleValue(computedStyle.borderBottomWidth) + getStyleValue(computedStyle.borderTopWidth);\n\n    // The height of the inner content\n    const innerHeight = inputShallow.scrollHeight;\n\n    // Measure height of a textarea with a single row\n    inputShallow.value = 'x';\n    const singleRowHeight = inputShallow.scrollHeight;\n\n    // The height of the outer content\n    let outerHeight = innerHeight;\n    if (minRows) {\n      outerHeight = Math.max(Number(minRows) * singleRowHeight, outerHeight);\n    }\n    if (maxRows) {\n      outerHeight = Math.min(Number(maxRows) * singleRowHeight, outerHeight);\n    }\n    outerHeight = Math.max(outerHeight, singleRowHeight);\n\n    // Take the box sizing into account for applying this value as a style.\n    const outerHeightStyle = outerHeight + (boxSizing === 'border-box' ? padding + border : 0);\n    const overflow = Math.abs(outerHeight - innerHeight) <= 1;\n    return {\n      outerHeightStyle,\n      overflow\n    };\n  }, [maxRows, minRows, props.placeholder]);\n  const updateState = (prevState, newState) => {\n    const {\n      outerHeightStyle,\n      overflow\n    } = newState;\n    // Need a large enough difference to update the height.\n    // This prevents infinite rendering loop.\n    if (renders.current < 20 && (outerHeightStyle > 0 && Math.abs((prevState.outerHeightStyle || 0) - outerHeightStyle) > 1 || prevState.overflow !== overflow)) {\n      renders.current += 1;\n      return {\n        overflow,\n        outerHeightStyle\n      };\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      if (renders.current === 20) {\n        console.error(['MUI: Too many re-renders. The layout is unstable.', 'TextareaAutosize limits the number of renders to prevent an infinite loop.'].join('\\n'));\n      }\n    }\n    return prevState;\n  };\n  const syncHeight = React.useCallback(() => {\n    const newState = getUpdatedState();\n    if (isEmpty(newState)) {\n      return;\n    }\n    setState(prevState => {\n      return updateState(prevState, newState);\n    });\n  }, [getUpdatedState]);\n  const syncHeightWithFlushSync = () => {\n    const newState = getUpdatedState();\n    if (isEmpty(newState)) {\n      return;\n    }\n\n    // In React 18, state updates in a ResizeObserver's callback are happening after the paint which causes flickering\n    // when doing some visual updates in it. Using flushSync ensures that the dom will be painted after the states updates happen\n    // Related issue - https://github.com/facebook/react/issues/24331\n    ReactDOM.flushSync(() => {\n      setState(prevState => {\n        return updateState(prevState, newState);\n      });\n    });\n  };\n  React.useEffect(() => {\n    const handleResize = debounce(() => {\n      renders.current = 0;\n\n      // If the TextareaAutosize component is replaced by Suspense with a fallback, the last\n      // ResizeObserver's handler that runs because of the change in the layout is trying to\n      // access a dom node that is no longer there (as the fallback component is being shown instead).\n      // See https://github.com/mui/material-ui/issues/32640\n      if (inputRef.current) {\n        syncHeightWithFlushSync();\n      }\n    });\n    let resizeObserver;\n    const input = inputRef.current;\n    const containerWindow = ownerWindow(input);\n    containerWindow.addEventListener('resize', handleResize);\n    if (typeof ResizeObserver !== 'undefined') {\n      resizeObserver = new ResizeObserver(handleResize);\n      resizeObserver.observe(input);\n    }\n    return () => {\n      handleResize.clear();\n      containerWindow.removeEventListener('resize', handleResize);\n      if (resizeObserver) {\n        resizeObserver.disconnect();\n      }\n    };\n  });\n  useEnhancedEffect(() => {\n    syncHeight();\n  });\n  React.useEffect(() => {\n    renders.current = 0;\n  }, [value]);\n  const handleChange = event => {\n    renders.current = 0;\n    if (!isControlled) {\n      syncHeight();\n    }\n    if (onChange) {\n      onChange(event);\n    }\n  };\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(\"textarea\", _extends({\n      value: value,\n      onChange: handleChange,\n      ref: handleRef\n      // Apply the rows prop to get a \"correct\" first SSR paint\n      ,\n      rows: minRows,\n      style: _extends({\n        height: state.outerHeightStyle,\n        // Need a large enough difference to allow scrolling.\n        // This prevents infinite rendering loop.\n        overflow: state.overflow ? 'hidden' : undefined\n      }, style)\n    }, other)), /*#__PURE__*/_jsx(\"textarea\", {\n      \"aria-hidden\": true,\n      className: props.className,\n      readOnly: true,\n      ref: shadowRef,\n      tabIndex: -1,\n      style: _extends({}, styles.shadow, style, {\n        padding: 0\n      })\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? TextareaAutosize.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * Maximum number of rows to display.\n   */\n  maxRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * Minimum number of rows to display.\n   * @default 1\n   */\n  minRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * @ignore\n   */\n  onChange: PropTypes.func,\n  /**\n   * @ignore\n   */\n  placeholder: PropTypes.string,\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n  /**\n   * @ignore\n   */\n  value: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.number, PropTypes.string])\n} : void 0;\nexport default TextareaAutosize;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}