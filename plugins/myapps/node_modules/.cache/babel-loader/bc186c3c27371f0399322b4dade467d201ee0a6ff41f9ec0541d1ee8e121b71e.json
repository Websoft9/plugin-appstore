{"ast":null,"code":"import { GraphQLError } from \"../error/GraphQLError.mjs\";\n\n/**\n * Extracts the root type of the operation from the schema.\n */\nexport function getOperationRootType(schema, operation) {\n  if (operation.operation === 'query') {\n    var queryType = schema.getQueryType();\n    if (!queryType) {\n      throw new GraphQLError('Schema does not define the required query root type.', operation);\n    }\n    return queryType;\n  }\n  if (operation.operation === 'mutation') {\n    var mutationType = schema.getMutationType();\n    if (!mutationType) {\n      throw new GraphQLError('Schema is not configured for mutations.', operation);\n    }\n    return mutationType;\n  }\n  if (operation.operation === 'subscription') {\n    var subscriptionType = schema.getSubscriptionType();\n    if (!subscriptionType) {\n      throw new GraphQLError('Schema is not configured for subscriptions.', operation);\n    }\n    return subscriptionType;\n  }\n  throw new GraphQLError('Can only have query, mutation and subscription operations.', operation);\n}","map":{"version":3,"names":["GraphQLError","getOperationRootType","schema","operation","queryType","getQueryType","mutationType","getMutationType","subscriptionType","getSubscriptionType"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/graphql/utilities/getOperationRootType.mjs"],"sourcesContent":["import { GraphQLError } from \"../error/GraphQLError.mjs\";\n\n/**\n * Extracts the root type of the operation from the schema.\n */\nexport function getOperationRootType(schema, operation) {\n  if (operation.operation === 'query') {\n    var queryType = schema.getQueryType();\n\n    if (!queryType) {\n      throw new GraphQLError('Schema does not define the required query root type.', operation);\n    }\n\n    return queryType;\n  }\n\n  if (operation.operation === 'mutation') {\n    var mutationType = schema.getMutationType();\n\n    if (!mutationType) {\n      throw new GraphQLError('Schema is not configured for mutations.', operation);\n    }\n\n    return mutationType;\n  }\n\n  if (operation.operation === 'subscription') {\n    var subscriptionType = schema.getSubscriptionType();\n\n    if (!subscriptionType) {\n      throw new GraphQLError('Schema is not configured for subscriptions.', operation);\n    }\n\n    return subscriptionType;\n  }\n\n  throw new GraphQLError('Can only have query, mutation and subscription operations.', operation);\n}\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,2BAA2B;;AAExD;AACA;AACA;AACA,OAAO,SAASC,oBAAoBA,CAACC,MAAM,EAAEC,SAAS,EAAE;EACtD,IAAIA,SAAS,CAACA,SAAS,KAAK,OAAO,EAAE;IACnC,IAAIC,SAAS,GAAGF,MAAM,CAACG,YAAY,CAAC,CAAC;IAErC,IAAI,CAACD,SAAS,EAAE;MACd,MAAM,IAAIJ,YAAY,CAAC,sDAAsD,EAAEG,SAAS,CAAC;IAC3F;IAEA,OAAOC,SAAS;EAClB;EAEA,IAAID,SAAS,CAACA,SAAS,KAAK,UAAU,EAAE;IACtC,IAAIG,YAAY,GAAGJ,MAAM,CAACK,eAAe,CAAC,CAAC;IAE3C,IAAI,CAACD,YAAY,EAAE;MACjB,MAAM,IAAIN,YAAY,CAAC,yCAAyC,EAAEG,SAAS,CAAC;IAC9E;IAEA,OAAOG,YAAY;EACrB;EAEA,IAAIH,SAAS,CAACA,SAAS,KAAK,cAAc,EAAE;IAC1C,IAAIK,gBAAgB,GAAGN,MAAM,CAACO,mBAAmB,CAAC,CAAC;IAEnD,IAAI,CAACD,gBAAgB,EAAE;MACrB,MAAM,IAAIR,YAAY,CAAC,6CAA6C,EAAEG,SAAS,CAAC;IAClF;IAEA,OAAOK,gBAAgB;EACzB;EAEA,MAAM,IAAIR,YAAY,CAAC,4DAA4D,EAAEG,SAAS,CAAC;AACjG"},"metadata":{},"sourceType":"module","externalDependencies":[]}