{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/HelperText/helper-text';\nimport { css } from '@patternfly/react-styles';\nexport var HelperText = function HelperText(_a) {\n  var children = _a.children,\n    className = _a.className,\n    _a$component = _a.component,\n    component = _a$component === void 0 ? 'div' : _a$component,\n    id = _a.id,\n    _a$isLiveRegion = _a.isLiveRegion,\n    isLiveRegion = _a$isLiveRegion === void 0 ? false : _a$isLiveRegion,\n    props = __rest(_a, [\"children\", \"className\", \"component\", \"id\", \"isLiveRegion\"]);\n  var Component = component;\n  return React.createElement(Component, Object.assign({\n    id: id,\n    className: css(styles.helperText, className)\n  }, isLiveRegion && {\n    'aria-live': 'polite'\n  }, props), children);\n};\nHelperText.displayName = 'HelperText';","map":{"version":3,"names":["React","styles","css","HelperText","_a","children","className","_a$component","component","id","_a$isLiveRegion","isLiveRegion","props","__rest","Component","createElement","Object","assign","helperText","displayName"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@patternfly/react-core/src/components/HelperText/HelperText.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/HelperText/helper-text';\nimport { css } from '@patternfly/react-styles';\n\nexport interface HelperTextProps extends React.HTMLProps<HTMLDivElement | HTMLUListElement> {\n  /** Content rendered inside the helper text container. */\n  children?: React.ReactNode;\n  /** Additional classes applied to the helper text container. */\n  className?: string;\n  /** Component type of the helper text container */\n  component?: 'div' | 'ul';\n  /** ID for the helper text container. The value of this prop can be passed into a form component's\n   * aria-describedby prop when you intend for all helper text items to be announced to\n   * assistive technologies.\n   */\n  id?: string;\n  /** Flag for indicating whether the helper text container is a live region. Use this prop when you\n   * expect or intend for any helper text items within the container to be dynamically updated.\n   */\n  isLiveRegion?: boolean;\n}\n\nexport const HelperText: React.FunctionComponent<HelperTextProps> = ({\n  children,\n  className,\n  component = 'div',\n  id,\n  isLiveRegion = false,\n  ...props\n}: HelperTextProps) => {\n  const Component = component as any;\n  return (\n    <Component\n      id={id}\n      className={css(styles.helperText, className)}\n      {...(isLiveRegion && { 'aria-live': 'polite' })}\n      {...props}\n    >\n      {children}\n    </Component>\n  );\n};\nHelperText.displayName = 'HelperText';\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,MAAM,MAAM,gEAAgE;AACnF,SAASC,GAAG,QAAQ,0BAA0B;AAoB9C,OAAO,IAAMC,UAAU,GAA6C,SAAvDA,UAAUA,CAA8CC,EAOnD,EAAI;MANpBC,QAAQ,GAIYD,EAEJ,CANhBC,QAAQ;IACRC,SAAS,GAGWF,EAEJ,CALhBE,SAAS;IAAAC,YAAA,GAGWH,EAEJ,CAJhBI,SAAS;IAATA,SAAS,GAAAD,YAAA,cAAG,KAAK,GAAAA,YAAA;IACjBE,EAAE,GACkBL,EAEJ,CAHhBK,EAAE;IAAAC,eAAA,GACkBN,EAEJ,CAFhBO,YAAY;IAAZA,YAAY,GAAAD,eAAA,cAAG,KAAK,GAAAA,eAAA;IACjBE,KAAK,GAAAC,MAAA,CAAAT,EAAA,EAN2D,4DAOpE,CADS;EAER,IAAMU,SAAS,GAAGN,SAAgB;EAClC,OACER,KAAA,CAAAe,aAAA,CAACD,SAAS,EAAAE,MAAA,CAAAC,MAAA;IACRR,EAAE,EAAEA,EAAE;IACNH,SAAS,EAAEJ,GAAG,CAACD,MAAM,CAACiB,UAAU,EAAEZ,SAAS;EAAC,GACvCK,YAAY,IAAI;IAAE,WAAW,EAAE;EAAQ,CAAE,EAC1CC,KAAK,GAERP,QAAQ,CACC;AAEhB,CAAC;AACDF,UAAU,CAACgB,WAAW,GAAG,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}