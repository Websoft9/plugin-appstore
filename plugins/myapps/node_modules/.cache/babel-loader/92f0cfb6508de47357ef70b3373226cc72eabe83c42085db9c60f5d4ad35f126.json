{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Observable } from \"./Observable.js\";\nimport { iterateObserversSafely } from \"./iteration.js\";\nimport { fixObservableSubclass } from \"./subclassing.js\";\nfunction isPromiseLike(value) {\n  return value && typeof value.then === \"function\";\n}\nvar Concast = function (_super) {\n  __extends(Concast, _super);\n  function Concast(sources) {\n    var _this = _super.call(this, function (observer) {\n      _this.addObserver(observer);\n      return function () {\n        return _this.removeObserver(observer);\n      };\n    }) || this;\n    _this.observers = new Set();\n    _this.promise = new Promise(function (resolve, reject) {\n      _this.resolve = resolve;\n      _this.reject = reject;\n    });\n    _this.handlers = {\n      next: function next(result) {\n        if (_this.sub !== null) {\n          _this.latest = [\"next\", result];\n          _this.notify(\"next\", result);\n          iterateObserversSafely(_this.observers, \"next\", result);\n        }\n      },\n      error: function error(_error) {\n        var sub = _this.sub;\n        if (sub !== null) {\n          if (sub) setTimeout(function () {\n            return sub.unsubscribe();\n          });\n          _this.sub = null;\n          _this.latest = [\"error\", _error];\n          _this.reject(_error);\n          _this.notify(\"error\", _error);\n          iterateObserversSafely(_this.observers, \"error\", _error);\n        }\n      },\n      complete: function complete() {\n        var _a = _this,\n          sub = _a.sub,\n          _b = _a.sources,\n          sources = _b === void 0 ? [] : _b;\n        if (sub !== null) {\n          var value = sources.shift();\n          if (!value) {\n            if (sub) setTimeout(function () {\n              return sub.unsubscribe();\n            });\n            _this.sub = null;\n            if (_this.latest && _this.latest[0] === \"next\") {\n              _this.resolve(_this.latest[1]);\n            } else {\n              _this.resolve();\n            }\n            _this.notify(\"complete\");\n            iterateObserversSafely(_this.observers, \"complete\");\n          } else if (isPromiseLike(value)) {\n            value.then(function (obs) {\n              return _this.sub = obs.subscribe(_this.handlers);\n            });\n          } else {\n            _this.sub = value.subscribe(_this.handlers);\n          }\n        }\n      }\n    };\n    _this.nextResultListeners = new Set();\n    _this.cancel = function (reason) {\n      _this.reject(reason);\n      _this.sources = [];\n      _this.handlers.complete();\n    };\n    _this.promise.catch(function (_) {});\n    if (typeof sources === \"function\") {\n      sources = [new Observable(sources)];\n    }\n    if (isPromiseLike(sources)) {\n      sources.then(function (iterable) {\n        return _this.start(iterable);\n      }, _this.handlers.error);\n    } else {\n      _this.start(sources);\n    }\n    return _this;\n  }\n  Concast.prototype.start = function (sources) {\n    if (this.sub !== void 0) return;\n    this.sources = Array.from(sources);\n    this.handlers.complete();\n  };\n  Concast.prototype.deliverLastMessage = function (observer) {\n    if (this.latest) {\n      var nextOrError = this.latest[0];\n      var method = observer[nextOrError];\n      if (method) {\n        method.call(observer, this.latest[1]);\n      }\n      if (this.sub === null && nextOrError === \"next\" && observer.complete) {\n        observer.complete();\n      }\n    }\n  };\n  Concast.prototype.addObserver = function (observer) {\n    if (!this.observers.has(observer)) {\n      this.deliverLastMessage(observer);\n      this.observers.add(observer);\n    }\n  };\n  Concast.prototype.removeObserver = function (observer) {\n    if (this.observers.delete(observer) && this.observers.size < 1) {\n      this.handlers.complete();\n    }\n  };\n  Concast.prototype.notify = function (method, arg) {\n    var nextResultListeners = this.nextResultListeners;\n    if (nextResultListeners.size) {\n      this.nextResultListeners = new Set();\n      nextResultListeners.forEach(function (listener) {\n        return listener(method, arg);\n      });\n    }\n  };\n  Concast.prototype.beforeNext = function (callback) {\n    var called = false;\n    this.nextResultListeners.add(function (method, arg) {\n      if (!called) {\n        called = true;\n        callback(method, arg);\n      }\n    });\n  };\n  return Concast;\n}(Observable);\nexport { Concast };\nfixObservableSubclass(Concast);","map":{"version":3,"names":["Observable","iterateObserversSafely","fixObservableSubclass","isPromiseLike","value","then","Concast","_super","__extends","sources","_this","call","observer","addObserver","removeObserver","observers","Set","promise","Promise","resolve","reject","handlers","next","result","sub","latest","notify","error","setTimeout","unsubscribe","complete","_a","_b","shift","obs","subscribe","nextResultListeners","cancel","reason","catch","_","iterable","start","prototype","Array","from","deliverLastMessage","nextOrError","method","has","add","delete","size","arg","forEach","listener","beforeNext","callback","called"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@apollo/src/utilities/observables/Concast.ts"],"sourcesContent":["import { Observable, Observer, ObservableSubscription, Subscriber } from \"./Observable\";\nimport { iterateObserversSafely } from \"./iteration\";\nimport { fixObservableSubclass } from \"./subclassing\";\n\ntype MaybeAsync<T> = T | PromiseLike<T>;\n\nfunction isPromiseLike<T>(value: MaybeAsync<T>): value is PromiseLike<T> {\n  return value && typeof (value as any).then === \"function\";\n}\n\n// Any individual Source<T> can be an Observable<T> or a promise for one.\ntype Source<T> = MaybeAsync<Observable<T>>;\n\nexport type ConcastSourcesIterable<T> = Iterable<Source<T>>;\nexport type ConcastSourcesArray<T> = Array<Source<T>>;\n\n// A Concast<T> observable concatenates the given sources into a single\n// non-overlapping sequence of Ts, automatically unwrapping any promises,\n// and broadcasts the T elements of that sequence to any number of\n// subscribers, all without creating a bunch of intermediary Observable\n// wrapper objects.\n//\n// Even though any number of observers can subscribe to the Concast, each\n// source observable is guaranteed to receive at most one subscribe call,\n// and the results are multicast to all observers.\n//\n// In addition to broadcasting every next/error message to this.observers,\n// the Concast stores the most recent message using this.latest, so any\n// new observers can immediately receive the latest message, even if it\n// was originally delivered in the past. This behavior means we can assume\n// every active observer in this.observers has received the same most\n// recent message.\n//\n// With the exception of this.latest replay, a Concast is a \"hot\"\n// observable in the sense that it does not replay past results from the\n// beginning of time for each new observer.\n//\n// Could we have used some existing RxJS class instead? Concast<T> is\n// similar to a BehaviorSubject<T>, because it is multicast and redelivers\n// the latest next/error message to new subscribers. Unlike Subject<T>,\n// Concast<T> does not expose an Observer<T> interface (this.handlers is\n// intentionally private), since Concast<T> gets its inputs from the\n// concatenated sources. If we ever switch to RxJS, there may be some\n// value in reusing their code, but for now we use zen-observable, which\n// does not contain any Subject implementations.\nexport class Concast<T> extends Observable<T> {\n  // Active observers receiving broadcast messages. Thanks to this.latest,\n  // we can assume all observers in this Set have received the same most\n  // recent message, though possibly at different times in the past.\n  private observers = new Set<Observer<T>>();\n\n  // This property starts off undefined to indicate the initial\n  // subscription has not yet begun, then points to each source\n  // subscription in turn, and finally becomes null after the sources have\n  // been exhausted. After that, it stays null.\n  private sub?: ObservableSubscription | null;\n\n  // Not only can the individual elements of the iterable be promises, but\n  // also the iterable itself can be wrapped in a promise.\n  constructor(sources: MaybeAsync<ConcastSourcesIterable<T>> | Subscriber<T>) {\n    super(observer => {\n      this.addObserver(observer);\n      return () => this.removeObserver(observer);\n    });\n\n    // Suppress rejection warnings for this.promise, since it's perfectly\n    // acceptable to pay no attention to this.promise if you're consuming\n    // the results through the normal observable API.\n    this.promise.catch(_ => {});\n\n    // If someone accidentally tries to create a Concast using a subscriber\n    // function, recover by creating an Observable from that subscriber and\n    // using it as the source.\n    if (typeof sources === \"function\") {\n      sources = [new Observable(sources)];\n    }\n\n    if (isPromiseLike(sources)) {\n      sources.then(\n        iterable => this.start(iterable),\n        this.handlers.error,\n      );\n    } else {\n      this.start(sources);\n    }\n  }\n\n  // A consumable array of source observables, incrementally consumed each time\n  // this.handlers.complete is called. This private field is not initialized\n  // until the concast.start method is called, which can happen asynchronously\n  // if a Promise is passed to the Concast constructor, so undefined is a\n  // possible value for this.sources before concast.start is called.\n  private sources: Source<T>[] | undefined;\n\n  private start(sources: ConcastSourcesIterable<T>) {\n    if (this.sub !== void 0) return;\n\n    // In practice, sources is most often simply an Array of observables.\n    // TODO Consider using sources[Symbol.iterator]() to take advantage\n    // of the laziness of non-Array iterables.\n    this.sources = Array.from(sources);\n\n    // Calling this.handlers.complete() kicks off consumption of the first\n    // source observable. It's tempting to do this step lazily in\n    // addObserver, but this.promise can be accessed without calling\n    // addObserver, so consumption needs to begin eagerly.\n    this.handlers.complete();\n  }\n\n  private deliverLastMessage(observer: Observer<T>) {\n    if (this.latest) {\n      const nextOrError = this.latest[0];\n      const method = observer[nextOrError];\n      if (method) {\n        method.call(observer, this.latest[1]);\n      }\n      // If the subscription is already closed, and the last message was\n      // a 'next' message, simulate delivery of the final 'complete'\n      // message again.\n      if (this.sub === null &&\n          nextOrError === \"next\" &&\n          observer.complete) {\n        observer.complete();\n      }\n    }\n  }\n\n  public addObserver(observer: Observer<T>) {\n    if (!this.observers.has(observer)) {\n      // Immediately deliver the most recent message, so we can always\n      // be sure all observers have the latest information.\n      this.deliverLastMessage(observer);\n      this.observers.add(observer);\n    }\n  }\n\n  public removeObserver(observer: Observer<T>) {\n    if (\n      this.observers.delete(observer) &&\n      this.observers.size < 1\n    ) {\n      // In case there are still any listeners in this.nextResultListeners, and\n      // no error or completion has been broadcast yet, make sure those\n      // observers have a chance to run and then remove themselves from\n      // this.observers.\n      this.handlers.complete();\n    }\n  }\n\n  // Any Concast object can be trivially converted to a Promise, without\n  // having to create a new wrapper Observable. This promise provides an\n  // easy way to observe the final state of the Concast.\n  private resolve: (result?: T | PromiseLike<T>) => void;\n  private reject: (reason: any) => void;\n  public readonly promise = new Promise<T>((resolve, reject) => {\n    this.resolve = resolve;\n    this.reject = reject;\n  });\n\n  // Name and argument of the most recently invoked observer method, used\n  // to deliver latest results immediately to new observers.\n  private latest?: [\"next\", T] | [\"error\", any];\n\n  // Bound handler functions that can be reused for every internal\n  // subscription.\n  private handlers = {\n    next: (result: T) => {\n      if (this.sub !== null) {\n        this.latest = [\"next\", result];\n        this.notify(\"next\", result);\n        iterateObserversSafely(this.observers, \"next\", result);\n      }\n    },\n\n    error: (error: any) => {\n      const { sub } = this;\n      if (sub !== null) {\n        // Delay unsubscribing from the underlying subscription slightly,\n        // so that immediately subscribing another observer can keep the\n        // subscription active.\n        if (sub) setTimeout(() => sub.unsubscribe());\n        this.sub = null;\n        this.latest = [\"error\", error];\n        this.reject(error);\n        this.notify(\"error\", error);\n        iterateObserversSafely(this.observers, \"error\", error);\n      }\n    },\n\n    complete: () => {\n      const { sub, sources = [] } = this;\n      if (sub !== null) {\n        // If complete is called before concast.start, this.sources may be\n        // undefined, so we use a default value of [] for sources. That works\n        // here because it falls into the if (!value) {...} block, which\n        // appropriately terminates the Concast, even if this.sources might\n        // eventually have been initialized to a non-empty array.\n        const value = sources.shift();\n        if (!value) {\n          if (sub) setTimeout(() => sub.unsubscribe());\n          this.sub = null;\n          if (this.latest &&\n              this.latest[0] === \"next\") {\n            this.resolve(this.latest[1]);\n          } else {\n            this.resolve();\n          }\n          this.notify(\"complete\");\n          // We do not store this.latest = [\"complete\"], because doing so\n          // discards useful information about the previous next (or\n          // error) message. Instead, if new observers subscribe after\n          // this Concast has completed, they will receive the final\n          // 'next' message (unless there was an error) immediately\n          // followed by a 'complete' message (see addObserver).\n          iterateObserversSafely(this.observers, \"complete\");\n        } else if (isPromiseLike(value)) {\n          value.then(obs => this.sub = obs.subscribe(this.handlers));\n        } else {\n          this.sub = value.subscribe(this.handlers);\n        }\n      }\n    },\n  };\n\n  private nextResultListeners = new Set<NextResultListener>();\n\n  private notify(\n    method: Parameters<NextResultListener>[0],\n    arg?: Parameters<NextResultListener>[1],\n  ) {\n    const { nextResultListeners } = this;\n    if (nextResultListeners.size) {\n      // Replacing this.nextResultListeners first ensures it does not grow while\n      // we are iterating over it, potentially leading to infinite loops.\n      this.nextResultListeners = new Set;\n      nextResultListeners.forEach(listener => listener(method, arg));\n    }\n  }\n\n  // We need a way to run callbacks just *before* the next result (or error or\n  // completion) is delivered by this Concast, so we can be sure any code that\n  // runs as a result of delivering that result/error observes the effects of\n  // running the callback(s). It was tempting to reuse the Observer type instead\n  // of introducing NextResultListener, but that messes with the sizing and\n  // maintenance of this.observers, and ends up being more code overall.\n  beforeNext(callback: NextResultListener) {\n    let called = false;\n    this.nextResultListeners.add((method, arg) => {\n      if (!called) {\n        called = true;\n        callback(method, arg);\n      }\n    });\n  }\n\n  // A public way to abort observation and broadcast.\n  public cancel = (reason: any) => {\n    this.reject(reason);\n    this.sources = [];\n    this.handlers.complete();\n  }\n}\n\ntype NextResultListener = (\n  method: \"next\" | \"error\" | \"complete\",\n  arg?: any,\n) => any;\n\n// Necessary because the Concast constructor has a different signature\n// than the Observable constructor.\nfixObservableSubclass(Concast);\n"],"mappings":";AAAA,SAASA,UAAU,QAAsD,iBAAe;AACxF,SAASC,sBAAsB,QAAQ,gBAAc;AACrD,SAASC,qBAAqB,QAAQ,kBAAgB;AAItD,SAASC,aAAaA,CAAIC,KAAoB;EAC5C,OAAOA,KAAK,IAAI,OAAQA,KAAa,CAACC,IAAI,KAAK,UAAU;AAC3D;AAqCA,IAAAC,OAAA,aAAAC,MAAA;EAAgCC,SAAA,CAAAF,OAAA,EAAAC,MAAA;EAc9B,SAAAD,QAAYG,OAA8D;IAA1E,IAAAC,KAAA,GACEH,MAAA,CAAAI,IAAA,OAAM,UAAAC,QAAQ;MACZF,KAAI,CAACG,WAAW,CAACD,QAAQ,CAAC;MAC1B,OAAO;QAAM,OAAAF,KAAI,CAACI,cAAc,CAACF,QAAQ,CAAC;MAA7B,CAA6B;IAC5C,CAAC,CAAC;IAdIF,KAAA,CAAAK,SAAS,GAAG,IAAIC,GAAG,EAAe;IAyG1BN,KAAA,CAAAO,OAAO,GAAG,IAAIC,OAAO,CAAI,UAACC,OAAO,EAAEC,MAAM;MACvDV,KAAI,CAACS,OAAO,GAAGA,OAAO;MACtBT,KAAI,CAACU,MAAM,GAAGA,MAAM;IACtB,CAAC,CAAC;IAQMV,KAAA,CAAAW,QAAQ,GAAG;MACjBC,IAAI,EAAE,SAAAA,KAACC,MAAS;QACd,IAAIb,KAAI,CAACc,GAAG,KAAK,IAAI,EAAE;UACrBd,KAAI,CAACe,MAAM,GAAG,CAAC,MAAM,EAAEF,MAAM,CAAC;UAC9Bb,KAAI,CAACgB,MAAM,CAAC,MAAM,EAAEH,MAAM,CAAC;UAC3BtB,sBAAsB,CAACS,KAAI,CAACK,SAAS,EAAE,MAAM,EAAEQ,MAAM,CAAC;;MAE1D,CAAC;MAEDI,KAAK,EAAE,SAAAA,MAACA,MAAU;QACR,IAAAH,GAAG,GAAKd,KAAI,CAAAc,GAAT;QACX,IAAIA,GAAG,KAAK,IAAI,EAAE;UAIhB,IAAIA,GAAG,EAAEI,UAAU,CAAC;YAAM,OAAAJ,GAAG,CAACK,WAAW,EAAE;UAAjB,CAAiB,CAAC;UAC5CnB,KAAI,CAACc,GAAG,GAAG,IAAI;UACfd,KAAI,CAACe,MAAM,GAAG,CAAC,OAAO,EAAEE,MAAK,CAAC;UAC9BjB,KAAI,CAACU,MAAM,CAACO,MAAK,CAAC;UAClBjB,KAAI,CAACgB,MAAM,CAAC,OAAO,EAAEC,MAAK,CAAC;UAC3B1B,sBAAsB,CAACS,KAAI,CAACK,SAAS,EAAE,OAAO,EAAEY,MAAK,CAAC;;MAE1D,CAAC;MAEDG,QAAQ,EAAE,SAAAA,SAAA;QACF,IAAAC,EAAA,GAAwBrB,KAAI;UAA1Bc,GAAG,GAAAO,EAAA,CAAAP,GAAA;UAAEQ,EAAA,GAAAD,EAAA,CAAAtB,OAAY;UAAZA,OAAO,GAAAuB,EAAA,cAAG,EAAE,GAAAA,EAAS;QAClC,IAAIR,GAAG,KAAK,IAAI,EAAE;UAMhB,IAAMpB,KAAK,GAAGK,OAAO,CAACwB,KAAK,EAAE;UAC7B,IAAI,CAAC7B,KAAK,EAAE;YACV,IAAIoB,GAAG,EAAEI,UAAU,CAAC;cAAM,OAAAJ,GAAG,CAACK,WAAW,EAAE;YAAjB,CAAiB,CAAC;YAC5CnB,KAAI,CAACc,GAAG,GAAG,IAAI;YACf,IAAId,KAAI,CAACe,MAAM,IACXf,KAAI,CAACe,MAAM,CAAC,CAAC,CAAC,KAAK,MAAM,EAAE;cAC7Bf,KAAI,CAACS,OAAO,CAACT,KAAI,CAACe,MAAM,CAAC,CAAC,CAAC,CAAC;aAC7B,MAAM;cACLf,KAAI,CAACS,OAAO,EAAE;;YAEhBT,KAAI,CAACgB,MAAM,CAAC,UAAU,CAAC;YAOvBzB,sBAAsB,CAACS,KAAI,CAACK,SAAS,EAAE,UAAU,CAAC;WACnD,MAAM,IAAIZ,aAAa,CAACC,KAAK,CAAC,EAAE;YAC/BA,KAAK,CAACC,IAAI,CAAC,UAAA6B,GAAG;cAAI,OAAAxB,KAAI,CAACc,GAAG,GAAGU,GAAG,CAACC,SAAS,CAACzB,KAAI,CAACW,QAAQ,CAAC;YAAvC,CAAuC,CAAC;WAC3D,MAAM;YACLX,KAAI,CAACc,GAAG,GAAGpB,KAAK,CAAC+B,SAAS,CAACzB,KAAI,CAACW,QAAQ,CAAC;;;MAG/C;KACD;IAEOX,KAAA,CAAA0B,mBAAmB,GAAG,IAAIpB,GAAG,EAAsB;IAgCpDN,KAAA,CAAA2B,MAAM,GAAG,UAACC,MAAW;MAC1B5B,KAAI,CAACU,MAAM,CAACkB,MAAM,CAAC;MACnB5B,KAAI,CAACD,OAAO,GAAG,EAAE;MACjBC,KAAI,CAACW,QAAQ,CAACS,QAAQ,EAAE;IAC1B,CAAC;IAhMCpB,KAAI,CAACO,OAAO,CAACsB,KAAK,CAAC,UAAAC,CAAC,GAAK,CAAC,CAAC;IAK3B,IAAI,OAAO/B,OAAO,KAAK,UAAU,EAAE;MACjCA,OAAO,GAAG,CAAC,IAAIT,UAAU,CAACS,OAAO,CAAC,CAAC;;IAGrC,IAAIN,aAAa,CAACM,OAAO,CAAC,EAAE;MAC1BA,OAAO,CAACJ,IAAI,CACV,UAAAoC,QAAQ;QAAI,OAAA/B,KAAI,CAACgC,KAAK,CAACD,QAAQ,CAAC;MAApB,CAAoB,EAChC/B,KAAI,CAACW,QAAQ,CAACM,KAAK,CACpB;KACF,MAAM;MACLjB,KAAI,CAACgC,KAAK,CAACjC,OAAO,CAAC;;;EAEvB;EASQH,OAAA,CAAAqC,SAAA,CAAAD,KAAK,GAAb,UAAcjC,OAAkC;IAC9C,IAAI,IAAI,CAACe,GAAG,KAAK,KAAK,CAAC,EAAE;IAKzB,IAAI,CAACf,OAAO,GAAGmC,KAAK,CAACC,IAAI,CAACpC,OAAO,CAAC;IAMlC,IAAI,CAACY,QAAQ,CAACS,QAAQ,EAAE;EAC1B,CAAC;EAEOxB,OAAA,CAAAqC,SAAA,CAAAG,kBAAkB,GAA1B,UAA2BlC,QAAqB;IAC9C,IAAI,IAAI,CAACa,MAAM,EAAE;MACf,IAAMsB,WAAW,GAAG,IAAI,CAACtB,MAAM,CAAC,CAAC,CAAC;MAClC,IAAMuB,MAAM,GAAGpC,QAAQ,CAACmC,WAAW,CAAC;MACpC,IAAIC,MAAM,EAAE;QACVA,MAAM,CAACrC,IAAI,CAACC,QAAQ,EAAE,IAAI,CAACa,MAAM,CAAC,CAAC,CAAC,CAAC;;MAKvC,IAAI,IAAI,CAACD,GAAG,KAAK,IAAI,IACjBuB,WAAW,KAAK,MAAM,IACtBnC,QAAQ,CAACkB,QAAQ,EAAE;QACrBlB,QAAQ,CAACkB,QAAQ,EAAE;;;EAGzB,CAAC;EAEMxB,OAAA,CAAAqC,SAAA,CAAA9B,WAAW,GAAlB,UAAmBD,QAAqB;IACtC,IAAI,CAAC,IAAI,CAACG,SAAS,CAACkC,GAAG,CAACrC,QAAQ,CAAC,EAAE;MAGjC,IAAI,CAACkC,kBAAkB,CAAClC,QAAQ,CAAC;MACjC,IAAI,CAACG,SAAS,CAACmC,GAAG,CAACtC,QAAQ,CAAC;;EAEhC,CAAC;EAEMN,OAAA,CAAAqC,SAAA,CAAA7B,cAAc,GAArB,UAAsBF,QAAqB;IACzC,IACE,IAAI,CAACG,SAAS,CAACoC,MAAM,CAACvC,QAAQ,CAAC,IAC/B,IAAI,CAACG,SAAS,CAACqC,IAAI,GAAG,CAAC,EACvB;MAKA,IAAI,CAAC/B,QAAQ,CAACS,QAAQ,EAAE;;EAE5B,CAAC;EA+EOxB,OAAA,CAAAqC,SAAA,CAAAjB,MAAM,GAAd,UACEsB,MAAyC,EACzCK,GAAuC;IAE/B,IAAAjB,mBAAmB,GAAK,IAAI,CAAAA,mBAAT;IAC3B,IAAIA,mBAAmB,CAACgB,IAAI,EAAE;MAG5B,IAAI,CAAChB,mBAAmB,GAAG,IAAIpB,GAAG,CAAH,CAAG;MAClCoB,mBAAmB,CAACkB,OAAO,CAAC,UAAAC,QAAQ;QAAI,OAAAA,QAAQ,CAACP,MAAM,EAAEK,GAAG,CAAC;MAArB,CAAqB,CAAC;;EAElE,CAAC;EAQD/C,OAAA,CAAAqC,SAAA,CAAAa,UAAU,GAAV,UAAWC,QAA4B;IACrC,IAAIC,MAAM,GAAG,KAAK;IAClB,IAAI,CAACtB,mBAAmB,CAACc,GAAG,CAAC,UAACF,MAAM,EAAEK,GAAG;MACvC,IAAI,CAACK,MAAM,EAAE;QACXA,MAAM,GAAG,IAAI;QACbD,QAAQ,CAACT,MAAM,EAAEK,GAAG,CAAC;;IAEzB,CAAC,CAAC;EACJ,CAAC;EAQH,OAAA/C,OAAC;AAAD,CAAC,CAxN+BN,UAAU;;AAiO1CE,qBAAqB,CAACI,OAAO,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}