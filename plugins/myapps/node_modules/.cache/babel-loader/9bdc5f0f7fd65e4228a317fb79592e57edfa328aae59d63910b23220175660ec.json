{"ast":null,"code":"import getDocumentElement from './getDocumentElement';\nimport getComputedStyle from './getComputedStyle';\nimport getWindowScrollBarX from './getWindowScrollBarX';\nimport getWindowScroll from './getWindowScroll';\n// Gets the entire size of the scrollable document area, even extending outside\n// of the `<html>` and `<body>` rect bounds if horizontally scrollable\n/**\n * @param element\n */\nexport default function getDocumentRect(element) {\n  var html = getDocumentElement(element);\n  var winScroll = getWindowScroll(element);\n  var body = element.ownerDocument.body;\n  var width = Math.max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);\n  var height = Math.max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);\n  var x = -winScroll.scrollLeft + getWindowScrollBarX(element);\n  var y = -winScroll.scrollTop;\n  if (getComputedStyle(body || html).direction === 'rtl') {\n    x += Math.max(html.clientWidth, body ? body.clientWidth : 0) - width;\n  }\n  return {\n    width: width,\n    height: height,\n    x: x,\n    y: y\n  };\n}","map":{"version":3,"names":["getDocumentElement","getComputedStyle","getWindowScrollBarX","getWindowScroll","getDocumentRect","element","html","winScroll","body","ownerDocument","width","Math","max","scrollWidth","clientWidth","height","scrollHeight","clientHeight","x","scrollLeft","y","scrollTop","direction"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@patternfly/react-core/src/helpers/Popper/thirdparty/popper-core/dom-utils/getDocumentRect.ts"],"sourcesContent":["// @ts-nocheck\nimport { Rect } from '../types';\nimport getDocumentElement from './getDocumentElement';\nimport getComputedStyle from './getComputedStyle';\nimport getWindowScrollBarX from './getWindowScrollBarX';\nimport getWindowScroll from './getWindowScroll';\n\n// Gets the entire size of the scrollable document area, even extending outside\n// of the `<html>` and `<body>` rect bounds if horizontally scrollable\n/**\n * @param element\n */\nexport default function getDocumentRect(element: HTMLElement): Rect {\n  const html = getDocumentElement(element);\n  const winScroll = getWindowScroll(element);\n  const body = element.ownerDocument.body;\n\n  const width = Math.max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);\n  const height = Math.max(\n    html.scrollHeight,\n    html.clientHeight,\n    body ? body.scrollHeight : 0,\n    body ? body.clientHeight : 0\n  );\n\n  let x = -winScroll.scrollLeft + getWindowScrollBarX(element);\n  const y = -winScroll.scrollTop;\n\n  if (getComputedStyle(body || html).direction === 'rtl') {\n    x += Math.max(html.clientWidth, body ? body.clientWidth : 0) - width;\n  }\n\n  return { width, height, x, y };\n}\n"],"mappings":"AAEA,OAAOA,kBAAkB,MAAM,sBAAsB;AACrD,OAAOC,gBAAgB,MAAM,oBAAoB;AACjD,OAAOC,mBAAmB,MAAM,uBAAuB;AACvD,OAAOC,eAAe,MAAM,mBAAmB;AAE/C;AACA;AACA;;;AAGA,eAAc,SAAUC,eAAeA,CAACC,OAAoB;EAC1D,IAAMC,IAAI,GAAGN,kBAAkB,CAACK,OAAO,CAAC;EACxC,IAAME,SAAS,GAAGJ,eAAe,CAACE,OAAO,CAAC;EAC1C,IAAMG,IAAI,GAAGH,OAAO,CAACI,aAAa,CAACD,IAAI;EAEvC,IAAME,KAAK,GAAGC,IAAI,CAACC,GAAG,CAACN,IAAI,CAACO,WAAW,EAAEP,IAAI,CAACQ,WAAW,EAAEN,IAAI,GAAGA,IAAI,CAACK,WAAW,GAAG,CAAC,EAAEL,IAAI,GAAGA,IAAI,CAACM,WAAW,GAAG,CAAC,CAAC;EACpH,IAAMC,MAAM,GAAGJ,IAAI,CAACC,GAAG,CACrBN,IAAI,CAACU,YAAY,EACjBV,IAAI,CAACW,YAAY,EACjBT,IAAI,GAAGA,IAAI,CAACQ,YAAY,GAAG,CAAC,EAC5BR,IAAI,GAAGA,IAAI,CAACS,YAAY,GAAG,CAAC,CAC7B;EAED,IAAIC,CAAC,GAAG,CAACX,SAAS,CAACY,UAAU,GAAGjB,mBAAmB,CAACG,OAAO,CAAC;EAC5D,IAAMe,CAAC,GAAG,CAACb,SAAS,CAACc,SAAS;EAE9B,IAAIpB,gBAAgB,CAACO,IAAI,IAAIF,IAAI,CAAC,CAACgB,SAAS,KAAK,KAAK,EAAE;IACtDJ,CAAC,IAAIP,IAAI,CAACC,GAAG,CAACN,IAAI,CAACQ,WAAW,EAAEN,IAAI,GAAGA,IAAI,CAACM,WAAW,GAAG,CAAC,CAAC,GAAGJ,KAAK;;EAGtE,OAAO;IAAEA,KAAK,EAALA,KAAK;IAAEK,MAAM,EAANA,MAAM;IAAEG,CAAC,EAADA,CAAC;IAAEE,CAAC,EAADA;EAAC,CAAE;AAChC"},"metadata":{},"sourceType":"module","externalDependencies":[]}