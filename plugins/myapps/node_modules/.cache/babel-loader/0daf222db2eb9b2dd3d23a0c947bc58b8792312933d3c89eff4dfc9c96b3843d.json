{"ast":null,"code":"import _classCallCheck from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/TreeView/tree-view';\nimport { canUseDOM } from '../../helpers/util';\nimport { handleArrows } from '../../helpers';\nimport { KeyTypes } from '../../helpers/constants';\nexport var TreeViewRoot = /*#__PURE__*/function (_React$Component) {\n  _inherits(TreeViewRoot, _React$Component);\n  var _super = _createSuper(TreeViewRoot);\n  function TreeViewRoot() {\n    var _this;\n    _classCallCheck(this, TreeViewRoot);\n    _this = _super.apply(this, arguments);\n    _this.displayName = 'TreeViewRoot';\n    _this.treeRef = React.createRef();\n    _this.handleKeys = function (event) {\n      var _a, _b, _c, _d, _e, _f, _g;\n      if (!_this.treeRef.current.contains(event.target)) {\n        return;\n      }\n      var activeElement = document.activeElement;\n      var key = event.key;\n      var treeItems = Array.from((_a = _this.treeRef.current) === null || _a === void 0 ? void 0 : _a.getElementsByClassName('pf-c-tree-view__node')).filter(function (el) {\n        return !el.classList.contains('pf-m-disabled');\n      });\n      if (key === KeyTypes.Space) {\n        activeElement.click();\n        event.preventDefault();\n      }\n      handleArrows(event, treeItems, function (element) {\n        return activeElement === element;\n      }, undefined, [], undefined, true, true);\n      if (['ArrowLeft', 'ArrowRight'].includes(key)) {\n        var isExpandable = (_c = (_b = activeElement === null || activeElement === void 0 ? void 0 : activeElement.firstElementChild) === null || _b === void 0 ? void 0 : _b.firstElementChild) === null || _c === void 0 ? void 0 : _c.classList.contains('pf-c-tree-view__node-toggle');\n        var isExpanded = (_d = activeElement === null || activeElement === void 0 ? void 0 : activeElement.closest('li')) === null || _d === void 0 ? void 0 : _d.classList.contains('pf-m-expanded');\n        if (key === 'ArrowLeft') {\n          if (isExpandable && isExpanded) {\n            activeElement.click();\n          } else {\n            var parentList = (_e = activeElement === null || activeElement === void 0 ? void 0 : activeElement.closest('ul')) === null || _e === void 0 ? void 0 : _e.parentElement;\n            if ((parentList === null || parentList === void 0 ? void 0 : parentList.tagName) !== 'DIV') {\n              var parentButton = parentList === null || parentList === void 0 ? void 0 : parentList.querySelector('button');\n              activeElement.tabIndex = -1;\n              if (parentButton) {\n                parentButton.tabIndex = 0;\n                parentButton.focus();\n              }\n            }\n          }\n        } else {\n          if (isExpandable && !isExpanded) {\n            activeElement.tabIndex = -1;\n            activeElement.click();\n            var childElement = (_g = (_f = activeElement === null || activeElement === void 0 ? void 0 : activeElement.closest('li')) === null || _f === void 0 ? void 0 : _f.querySelector('ul > li')) === null || _g === void 0 ? void 0 : _g.querySelector('button');\n            if (childElement) {\n              childElement.tabIndex = 0;\n              childElement.focus();\n            }\n          }\n        }\n        event.preventDefault();\n      }\n    };\n    _this.handleKeysCheckbox = function (event) {\n      var _a, _b, _c, _d, _e;\n      if (!_this.treeRef.current.contains(event.target)) {\n        return;\n      }\n      var activeElement = document.activeElement;\n      var key = event.key;\n      if (key === KeyTypes.Space) {\n        activeElement.click();\n        event.preventDefault();\n      }\n      var treeNodes = Array.from((_a = _this.treeRef.current) === null || _a === void 0 ? void 0 : _a.getElementsByClassName('pf-c-tree-view__node'));\n      handleArrows(event, treeNodes, function (element) {\n        return element.contains(activeElement);\n      }, function (element) {\n        return element.querySelector('button,input');\n      }, [], undefined, true, true);\n      if (['ArrowLeft', 'ArrowRight'].includes(key)) {\n        if (key === 'ArrowLeft') {\n          if ((activeElement === null || activeElement === void 0 ? void 0 : activeElement.tagName) === 'INPUT') {\n            ((_b = activeElement === null || activeElement === void 0 ? void 0 : activeElement.parentElement) === null || _b === void 0 ? void 0 : _b.previousSibling) && activeElement.parentElement.previousSibling.focus();\n          } else if (activeElement === null || activeElement === void 0 ? void 0 : activeElement.previousSibling) {\n            if (((_c = activeElement.previousElementSibling) === null || _c === void 0 ? void 0 : _c.tagName) === 'SPAN') {\n              activeElement.previousSibling.firstChild.focus();\n            } else {\n              activeElement.previousSibling.focus();\n            }\n          }\n        } else {\n          if ((activeElement === null || activeElement === void 0 ? void 0 : activeElement.tagName) === 'INPUT') {\n            ((_d = activeElement.parentElement) === null || _d === void 0 ? void 0 : _d.nextSibling) && activeElement.parentElement.nextSibling.focus();\n          } else if (activeElement === null || activeElement === void 0 ? void 0 : activeElement.nextSibling) {\n            if (((_e = activeElement.nextElementSibling) === null || _e === void 0 ? void 0 : _e.tagName) === 'SPAN') {\n              activeElement.nextSibling.firstChild.focus();\n            } else {\n              activeElement.nextSibling.focus();\n            }\n          }\n        }\n        event.preventDefault();\n      }\n    };\n    _this.variantStyleModifiers = {\n      default: '',\n      compact: styles.modifiers.compact,\n      compactNoBackground: [styles.modifiers.compact, styles.modifiers.noBackground]\n    };\n    return _this;\n  }\n  _createClass(TreeViewRoot, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _a;\n      if (canUseDOM) {\n        window.addEventListener('keydown', this.props.hasChecks || this.props.hasSelectableNodes ? this.handleKeysCheckbox : this.handleKeys);\n      }\n      if (this.props.hasChecks || this.props.hasSelectableNodes) {\n        var firstToggle = this.treeRef.current.getElementsByClassName('pf-c-tree-view__node-toggle')[0];\n        if (firstToggle) {\n          firstToggle.tabIndex = 0;\n        }\n        if (this.props.hasChecks) {\n          var firstInput = this.treeRef.current.getElementsByTagName('INPUT')[0];\n          if (firstInput) {\n            firstInput.tabIndex = 0;\n          }\n        }\n        if (this.props.hasSelectableNodes) {\n          var firstTextButton = this.treeRef.current.getElementsByClassName('pf-c-tree-view__node-text')[0];\n          if (firstTextButton) {\n            firstTextButton.tabIndex = 0;\n          }\n        }\n      } else {\n        ((_a = this.treeRef.current) === null || _a === void 0 ? void 0 : _a.getElementsByClassName('pf-c-tree-view__node')[0]).tabIndex = 0;\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (canUseDOM) {\n        window.removeEventListener('keydown', this.props.hasChecks || this.props.hasSelectableNodes ? this.handleKeysCheckbox : this.handleKeys);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      var _a = this.props,\n        children = _a.children,\n        hasChecks = _a.hasChecks,\n        hasGuides = _a.hasGuides,\n        variant = _a.variant,\n        className = _a.className,\n        hasSelectableNodes = _a.hasSelectableNodes,\n        props = __rest(_a, [\"children\", \"hasChecks\", \"hasGuides\", \"variant\", \"className\", \"hasSelectableNodes\"]);\n      return React.createElement(\"div\", Object.assign({\n        className: css(styles.treeView, hasGuides && styles.modifiers.guides, this.variantStyleModifiers[variant], className),\n        ref: this.treeRef\n      }, props), children);\n    }\n  }]);\n  return TreeViewRoot;\n}(React.Component);","map":{"version":3,"names":["React","css","styles","canUseDOM","handleArrows","KeyTypes","TreeViewRoot","_React$Component","_inherits","_super","_createSuper","_this","_classCallCheck","displayName","treeRef","createRef","handleKeys","event","current","contains","target","activeElement","document","key","treeItems","Array","from","_a","getElementsByClassName","filter","el","classList","Space","click","preventDefault","element","undefined","includes","isExpandable","_c","_b","firstElementChild","isExpanded","_d","closest","parentList","_e","parentElement","tagName","parentButton","querySelector","tabIndex","focus","childElement","_g","_f","handleKeysCheckbox","treeNodes","previousSibling","previousElementSibling","firstChild","nextSibling","nextElementSibling","variantStyleModifiers","default","compact","modifiers","compactNoBackground","noBackground","_createClass","value","componentDidMount","window","addEventListener","props","hasChecks","hasSelectableNodes","firstToggle","firstInput","getElementsByTagName","firstTextButton","componentWillUnmount","removeEventListener","render","children","hasGuides","variant","className","__rest","createElement","Object","assign","treeView","guides","ref","Component"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@patternfly/react-core/src/components/TreeView/TreeViewRoot.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/TreeView/tree-view';\nimport { canUseDOM } from '../../helpers/util';\nimport { handleArrows } from '../../helpers';\nimport { KeyTypes } from '../../helpers/constants';\n\nexport interface TreeViewRootProps {\n  /** Child nodes of the tree view */\n  children: React.ReactNode;\n  /** Flag indicating if the tree view has checkboxes. */\n  hasChecks?: boolean;\n  /** Flag indicating if tree view has guide lines. */\n  hasGuides?: boolean;\n  /** Variant presentation styles for the tree view. */\n  variant?: 'default' | 'compact' | 'compactNoBackground';\n  /** Class to add to add if not passed a parentItem */\n  className?: string;\n  /** Flag indicating that tree nodes should be independently selectable, even when having children */\n  hasSelectableNodes?: boolean;\n}\n\nexport class TreeViewRoot extends React.Component<TreeViewRootProps> {\n  displayName = 'TreeViewRoot';\n  private treeRef = React.createRef<HTMLDivElement>();\n\n  componentDidMount() {\n    if (canUseDOM) {\n      window.addEventListener(\n        'keydown',\n        this.props.hasChecks || this.props.hasSelectableNodes ? this.handleKeysCheckbox : this.handleKeys\n      );\n    }\n    if (this.props.hasChecks || this.props.hasSelectableNodes) {\n      const firstToggle = this.treeRef.current.getElementsByClassName('pf-c-tree-view__node-toggle')[0] as HTMLElement;\n      if (firstToggle) {\n        firstToggle.tabIndex = 0;\n      }\n      if (this.props.hasChecks) {\n        const firstInput = this.treeRef.current.getElementsByTagName('INPUT')[0] as HTMLElement;\n        if (firstInput) {\n          firstInput.tabIndex = 0;\n        }\n      }\n      if (this.props.hasSelectableNodes) {\n        const firstTextButton = this.treeRef.current.getElementsByClassName(\n          'pf-c-tree-view__node-text'\n        )[0] as HTMLElement;\n        if (firstTextButton) {\n          firstTextButton.tabIndex = 0;\n        }\n      }\n    } else {\n      (this.treeRef.current?.getElementsByClassName('pf-c-tree-view__node')[0] as HTMLElement).tabIndex = 0;\n    }\n  }\n\n  componentWillUnmount() {\n    if (canUseDOM) {\n      window.removeEventListener(\n        'keydown',\n        this.props.hasChecks || this.props.hasSelectableNodes ? this.handleKeysCheckbox : this.handleKeys\n      );\n    }\n  }\n\n  handleKeys = (event: KeyboardEvent) => {\n    if (!this.treeRef.current.contains(event.target as HTMLElement)) {\n      return;\n    }\n    const activeElement = document.activeElement;\n    const key = event.key;\n    const treeItems = Array.from(this.treeRef.current?.getElementsByClassName('pf-c-tree-view__node')).filter(\n      el => !el.classList.contains('pf-m-disabled')\n    );\n\n    if (key === KeyTypes.Space) {\n      (activeElement as HTMLElement).click();\n      event.preventDefault();\n    }\n\n    handleArrows(\n      event,\n      treeItems,\n      (element: Element) => activeElement === element,\n      undefined,\n      [],\n      undefined,\n      true,\n      true\n    );\n\n    if (['ArrowLeft', 'ArrowRight'].includes(key)) {\n      const isExpandable = activeElement?.firstElementChild?.firstElementChild?.classList.contains(\n        'pf-c-tree-view__node-toggle'\n      );\n      const isExpanded = activeElement?.closest('li')?.classList.contains('pf-m-expanded');\n      if (key === 'ArrowLeft') {\n        if (isExpandable && isExpanded) {\n          (activeElement as HTMLElement).click();\n        } else {\n          const parentList = activeElement?.closest('ul')?.parentElement;\n          if (parentList?.tagName !== 'DIV') {\n            const parentButton = parentList?.querySelector('button');\n            (activeElement as HTMLElement).tabIndex = -1;\n            if (parentButton) {\n              parentButton.tabIndex = 0;\n              parentButton.focus();\n            }\n          }\n        }\n      } else {\n        if (isExpandable && !isExpanded) {\n          (activeElement as HTMLElement).tabIndex = -1;\n          (activeElement as HTMLElement).click();\n          const childElement = activeElement\n            ?.closest('li')\n            ?.querySelector('ul > li')\n            ?.querySelector('button');\n          if (childElement) {\n            childElement.tabIndex = 0;\n            childElement.focus();\n          }\n        }\n      }\n      event.preventDefault();\n    }\n  };\n\n  handleKeysCheckbox = (event: KeyboardEvent) => {\n    if (!this.treeRef.current.contains(event.target as HTMLElement)) {\n      return;\n    }\n\n    const activeElement = document.activeElement;\n    const key = event.key;\n\n    if (key === KeyTypes.Space) {\n      (activeElement as HTMLElement).click();\n      event.preventDefault();\n    }\n\n    const treeNodes = Array.from(this.treeRef.current?.getElementsByClassName('pf-c-tree-view__node'));\n\n    handleArrows(\n      event,\n      treeNodes as HTMLElement[],\n      (element: Element) => element.contains(activeElement),\n      (element: Element) => element.querySelector('button,input'),\n      [],\n      undefined,\n      true,\n      true\n    );\n\n    if (['ArrowLeft', 'ArrowRight'].includes(key)) {\n      if (key === 'ArrowLeft') {\n        if (activeElement?.tagName === 'INPUT') {\n          activeElement?.parentElement?.previousSibling &&\n            (activeElement.parentElement.previousSibling as HTMLElement).focus();\n        } else if (activeElement?.previousSibling) {\n          if (activeElement.previousElementSibling?.tagName === 'SPAN') {\n            (activeElement.previousSibling.firstChild as HTMLElement).focus();\n          } else {\n            (activeElement.previousSibling as HTMLElement).focus();\n          }\n        }\n      } else {\n        if (activeElement?.tagName === 'INPUT') {\n          activeElement.parentElement?.nextSibling && (activeElement.parentElement.nextSibling as HTMLElement).focus();\n        } else if (activeElement?.nextSibling) {\n          if (activeElement.nextElementSibling?.tagName === 'SPAN') {\n            (activeElement.nextSibling.firstChild as HTMLElement).focus();\n          } else {\n            (activeElement.nextSibling as HTMLElement).focus();\n          }\n        }\n      }\n      event.preventDefault();\n    }\n  };\n\n  variantStyleModifiers: { [key in TreeViewRootProps['variant']]: string | string[] } = {\n    default: '',\n    compact: styles.modifiers.compact,\n    compactNoBackground: [styles.modifiers.compact, styles.modifiers.noBackground]\n  };\n\n  render() {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { children, hasChecks, hasGuides, variant, className, hasSelectableNodes, ...props } = this.props;\n    return (\n      <div\n        className={css(\n          styles.treeView,\n          hasGuides && styles.modifiers.guides,\n          this.variantStyleModifiers[variant],\n          className\n        )}\n        ref={this.treeRef}\n        {...props}\n      >\n        {children}\n      </div>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}