{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Accordion/accordion';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { AccordionContext } from './AccordionContext';\nexport var AccordionToggle = function AccordionToggle(_a) {\n  var _a$className = _a.className,\n    className = _a$className === void 0 ? '' : _a$className,\n    id = _a.id,\n    _a$isExpanded = _a.isExpanded,\n    isExpanded = _a$isExpanded === void 0 ? false : _a$isExpanded,\n    _a$children = _a.children,\n    children = _a$children === void 0 ? null : _a$children,\n    component = _a.component,\n    props = __rest(_a, [\"className\", \"id\", \"isExpanded\", \"children\", \"component\"]);\n  return React.createElement(AccordionContext.Consumer, null, function (_ref) {\n    var ToggleContainer = _ref.ToggleContainer;\n    var Container = component || ToggleContainer;\n    return React.createElement(Container, null, React.createElement(\"button\", Object.assign({\n      id: id,\n      className: css(styles.accordionToggle, isExpanded && styles.modifiers.expanded, className),\n      \"aria-expanded\": isExpanded,\n      type: \"button\"\n    }, props), React.createElement(\"span\", {\n      className: css(styles.accordionToggleText)\n    }, children), React.createElement(\"span\", {\n      className: css(styles.accordionToggleIcon)\n    }, React.createElement(AngleRightIcon, null))));\n  });\n};\nAccordionToggle.displayName = 'AccordionToggle';","map":{"version":3,"names":["React","css","styles","AngleRightIcon","AccordionContext","AccordionToggle","_a","className","_a$className","id","_a$isExpanded","isExpanded","_a$children","children","component","props","__rest","createElement","Consumer","_ref","ToggleContainer","Container","Object","assign","accordionToggle","modifiers","expanded","type","accordionToggleText","accordionToggleIcon","displayName"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@patternfly/react-core/src/components/Accordion/AccordionToggle.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Accordion/accordion';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { AccordionContext } from './AccordionContext';\n\nexport interface AccordionToggleProps\n  extends React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement> {\n  /** Content rendered inside the Accordion toggle  */\n  children?: React.ReactNode;\n  /** Additional classes added to the Accordion Toggle  */\n  className?: string;\n  /** Flag to show if the expanded content of the Accordion item is visible  */\n  isExpanded?: boolean;\n  /** Identify the Accordion toggle number  */\n  id: string;\n  /** Container to override the default for toggle */\n  component?: React.ElementType;\n}\n\nexport const AccordionToggle: React.FunctionComponent<AccordionToggleProps> = ({\n  className = '',\n  id,\n  isExpanded = false,\n  children = null,\n  component,\n  ...props\n}: AccordionToggleProps) => (\n  <AccordionContext.Consumer>\n    {({ ToggleContainer }) => {\n      const Container = component || ToggleContainer;\n      return (\n        <Container>\n          <button\n            id={id}\n            className={css(styles.accordionToggle, isExpanded && styles.modifiers.expanded, className)}\n            aria-expanded={isExpanded}\n            type=\"button\"\n            {...props}\n          >\n            <span className={css(styles.accordionToggleText)}>{children}</span>\n            <span className={css(styles.accordionToggleIcon)}>\n              <AngleRightIcon />\n            </span>\n          </button>\n        </Container>\n      );\n    }}\n  </AccordionContext.Consumer>\n);\nAccordionToggle.displayName = 'AccordionToggle';\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,GAAG,QAAQ,0BAA0B;AAC9C,OAAOC,MAAM,MAAM,6DAA6D;AAChF,OAAOC,cAAc,MAAM,yDAAyD;AACpF,SAASC,gBAAgB,QAAQ,oBAAoB;AAgBrD,OAAO,IAAMC,eAAe,GAAkD,SAAjEA,eAAeA,CAAmDC,EAOxD,EAAI;qBAFhBA,EAEY,CANrBC,SAAS;IAATA,SAAS,GAAAC,YAAA,cAAG,EAAE,GAAAA,YAAA;IACdC,EAAE,GAGOH,EAEY,CALrBG,EAAE;IAAAC,aAAA,GAGOJ,EAEY,CAJrBK,UAAU;IAAVA,UAAU,GAAAD,aAAA,cAAG,KAAK,GAAAA,aAAA;IAAAE,WAAA,GAETN,EAEY,CAHrBO,QAAQ;IAARA,QAAQ,GAAAD,WAAA,cAAG,IAAI,GAAAA,WAAA;IACfE,SAAS,GAAAR,EAEY,CAFrBQ,SAAS;IACNC,KAAK,GAAAC,MAAA,CAAAV,EAAA,EANqE,0DAO9E,CADS;EACkB,OAC1BN,KAAA,CAAAiB,aAAA,CAACb,gBAAgB,CAACc,QAAQ,QACvB,UAAAC,IAAA,EAAwB;IAAA,IAArBC,eAAe,GAAAD,IAAA,CAAfC,eAAe;IACjB,IAAMC,SAAS,GAAGP,SAAS,IAAIM,eAAe;IAC9C,OACEpB,KAAA,CAAAiB,aAAA,CAACI,SAAS,QACRrB,KAAA,CAAAiB,aAAA,WAAAK,MAAA,CAAAC,MAAA;MACEd,EAAE,EAAEA,EAAE;MACNF,SAAS,EAAEN,GAAG,CAACC,MAAM,CAACsB,eAAe,EAAEb,UAAU,IAAIT,MAAM,CAACuB,SAAS,CAACC,QAAQ,EAAEnB,SAAS,CAAC;MAAA,iBAC3EI,UAAU;MACzBgB,IAAI,EAAC;IAAQ,GACTZ,KAAK,GAETf,KAAA,CAAAiB,aAAA;MAAMV,SAAS,EAAEN,GAAG,CAACC,MAAM,CAAC0B,mBAAmB;IAAC,GAAGf,QAAQ,CAAQ,EACnEb,KAAA,CAAAiB,aAAA;MAAMV,SAAS,EAAEN,GAAG,CAACC,MAAM,CAAC2B,mBAAmB;IAAC,GAC9C7B,KAAA,CAAAiB,aAAA,CAACd,cAAc,OAAG,CACb,CACA,CACC;EAEhB,CAAC,CACyB;CAC7B;AACDE,eAAe,CAACyB,WAAW,GAAG,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}