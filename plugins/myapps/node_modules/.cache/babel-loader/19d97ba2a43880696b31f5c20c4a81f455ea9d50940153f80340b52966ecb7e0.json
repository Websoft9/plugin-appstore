{"ast":null,"code":"import { isNonNullObject } from \"./objects.js\";\nimport { isNonEmptyArray } from \"./arrays.js\";\nimport { DeepMerger } from \"./mergeDeep.js\";\nexport function isExecutionPatchIncrementalResult(value) {\n  return \"incremental\" in value;\n}\nexport function isExecutionPatchInitialResult(value) {\n  return \"hasNext\" in value && \"data\" in value;\n}\nexport function isExecutionPatchResult(value) {\n  return isExecutionPatchIncrementalResult(value) || isExecutionPatchInitialResult(value);\n}\nexport function isApolloPayloadResult(value) {\n  return isNonNullObject(value) && \"payload\" in value;\n}\nexport function mergeIncrementalData(prevResult, result) {\n  var mergedData = prevResult;\n  var merger = new DeepMerger();\n  if (isExecutionPatchIncrementalResult(result) && isNonEmptyArray(result.incremental)) {\n    result.incremental.forEach(function (_a) {\n      var data = _a.data,\n        path = _a.path;\n      for (var i = path.length - 1; i >= 0; --i) {\n        var key = path[i];\n        var isNumericKey = !isNaN(+key);\n        var parent_1 = isNumericKey ? [] : {};\n        parent_1[key] = data;\n        data = parent_1;\n      }\n      mergedData = merger.merge(mergedData, data);\n    });\n  }\n  return mergedData;\n}","map":{"version":3,"names":["isNonNullObject","isNonEmptyArray","DeepMerger","isExecutionPatchIncrementalResult","value","isExecutionPatchInitialResult","isExecutionPatchResult","isApolloPayloadResult","mergeIncrementalData","prevResult","result","mergedData","merger","incremental","forEach","_a","data","path","i","length","key","isNumericKey","isNaN","parent_1","merge"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@apollo/src/utilities/common/incrementalResult.ts"],"sourcesContent":["import {\n  ExecutionPatchIncrementalResult,\n  ExecutionPatchInitialResult,\n  ExecutionPatchResult,\n  ApolloPayloadResult,\n  FetchResult,\n} from \"../../link/core\";\nimport { isNonNullObject } from \"./objects\";\nimport { isNonEmptyArray } from \"./arrays\";\nimport { DeepMerger } from \"./mergeDeep\";\n\nexport function isExecutionPatchIncrementalResult<T>(\n  value: FetchResult<T>\n): value is ExecutionPatchIncrementalResult {\n  return \"incremental\" in value;\n}\n\nexport function isExecutionPatchInitialResult<T>(\n  value: FetchResult<T>\n): value is ExecutionPatchInitialResult<T> {\n  return \"hasNext\" in value && \"data\" in value;\n}\n\nexport function isExecutionPatchResult<T>(\n  value: FetchResult<T>\n): value is ExecutionPatchResult<T> {\n  return (\n    isExecutionPatchIncrementalResult(value) ||\n    isExecutionPatchInitialResult(value)\n  );\n}\n\n// This function detects an Apollo payload result before it is transformed\n// into a FetchResult via HttpLink; it cannot detect an ApolloPayloadResult\n// once it leaves the link chain.\nexport function isApolloPayloadResult(\n  value: unknown\n): value is ApolloPayloadResult {\n  return isNonNullObject(value) && \"payload\" in value;\n}\n\nexport function mergeIncrementalData<TData extends object>(\n  prevResult: TData,\n  result: ExecutionPatchResult<TData>\n) {\n  let mergedData = prevResult;\n  const merger = new DeepMerger();\n  if (\n    isExecutionPatchIncrementalResult(result) &&\n    isNonEmptyArray(result.incremental)\n  ) {\n    result.incremental.forEach(({ data, path }) => {\n      for (let i = path.length - 1; i >= 0; --i) {\n        const key = path[i];\n        const isNumericKey = !isNaN(+key);\n        const parent: Record<string | number, any> = isNumericKey ? [] : {};\n        parent[key] = data;\n        data = parent as typeof data;\n      }\n      mergedData = merger.merge(mergedData, data);\n    });\n  }\n  return mergedData as TData;\n}\n"],"mappings":"AAOA,SAASA,eAAe,QAAQ,cAAY;AAC5C,SAASC,eAAe,QAAQ,aAAW;AAC3C,SAASC,UAAU,QAAQ,gBAAc;AAEzC,OAAM,SAAUC,iCAAiCA,CAC/CC,KAAqB;EAErB,OAAO,aAAa,IAAIA,KAAK;AAC/B;AAEA,OAAM,SAAUC,6BAA6BA,CAC3CD,KAAqB;EAErB,OAAO,SAAS,IAAIA,KAAK,IAAI,MAAM,IAAIA,KAAK;AAC9C;AAEA,OAAM,SAAUE,sBAAsBA,CACpCF,KAAqB;EAErB,OACED,iCAAiC,CAACC,KAAK,CAAC,IACxCC,6BAA6B,CAACD,KAAK,CAAC;AAExC;AAKA,OAAM,SAAUG,qBAAqBA,CACnCH,KAAc;EAEd,OAAOJ,eAAe,CAACI,KAAK,CAAC,IAAI,SAAS,IAAIA,KAAK;AACrD;AAEA,OAAM,SAAUI,oBAAoBA,CAClCC,UAAiB,EACjBC,MAAmC;EAEnC,IAAIC,UAAU,GAAGF,UAAU;EAC3B,IAAMG,MAAM,GAAG,IAAIV,UAAU,EAAE;EAC/B,IACEC,iCAAiC,CAACO,MAAM,CAAC,IACzCT,eAAe,CAACS,MAAM,CAACG,WAAW,CAAC,EACnC;IACAH,MAAM,CAACG,WAAW,CAACC,OAAO,CAAC,UAACC,EAAc;UAAZC,IAAI,GAAAD,EAAA,CAAAC,IAAA;QAAEC,IAAI,GAAAF,EAAA,CAAAE,IAAA;MACtC,KAAK,IAAIC,CAAC,GAAGD,IAAI,CAACE,MAAM,GAAG,CAAC,EAAED,CAAC,IAAI,CAAC,EAAE,EAAEA,CAAC,EAAE;QACzC,IAAME,GAAG,GAAGH,IAAI,CAACC,CAAC,CAAC;QACnB,IAAMG,YAAY,GAAG,CAACC,KAAK,CAAC,CAACF,GAAG,CAAC;QACjC,IAAMG,QAAM,GAAiCF,YAAY,GAAG,EAAE,GAAG,EAAE;QACnEE,QAAM,CAACH,GAAG,CAAC,GAAGJ,IAAI;QAClBA,IAAI,GAAGO,QAAqB;;MAE9BZ,UAAU,GAAGC,MAAM,CAACY,KAAK,CAACb,UAAU,EAAEK,IAAI,CAAC;IAC7C,CAAC,CAAC;;EAEJ,OAAOL,UAAmB;AAC5B"},"metadata":{},"sourceType":"module","externalDependencies":[]}