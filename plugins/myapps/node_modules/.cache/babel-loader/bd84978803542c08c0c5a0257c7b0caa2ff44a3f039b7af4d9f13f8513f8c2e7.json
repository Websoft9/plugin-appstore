{"ast":null,"code":"import _classCallCheck from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/FormControl/form-control';\nimport heightToken from '@patternfly/react-tokens/dist/esm/c_form_control_textarea_Height';\nimport { css } from '@patternfly/react-styles';\nimport { capitalize, ValidatedOptions, canUseDOM } from '../../helpers';\nexport var TextAreResizeOrientation;\n(function (TextAreResizeOrientation) {\n  TextAreResizeOrientation[\"horizontal\"] = \"horizontal\";\n  TextAreResizeOrientation[\"vertical\"] = \"vertical\";\n  TextAreResizeOrientation[\"both\"] = \"both\";\n})(TextAreResizeOrientation || (TextAreResizeOrientation = {}));\nexport var TextAreaReadOnlyVariant;\n(function (TextAreaReadOnlyVariant) {\n  TextAreaReadOnlyVariant[\"default\"] = \"default\";\n  TextAreaReadOnlyVariant[\"plain\"] = \"plain\";\n})(TextAreaReadOnlyVariant || (TextAreaReadOnlyVariant = {}));\nexport var TextAreaBase = /*#__PURE__*/function (_React$Component) {\n  _inherits(TextAreaBase, _React$Component);\n  var _super = _createSuper(TextAreaBase);\n  function TextAreaBase(props) {\n    var _this;\n    _classCallCheck(this, TextAreaBase);\n    _this = _super.call(this, props);\n    _this.inputRef = React.createRef();\n    _this.setAutoHeight = function (field) {\n      field.style.setProperty(heightToken.name, 'inherit');\n      var computed = window.getComputedStyle(field);\n      // Calculate the height\n      var height = parseInt(computed.getPropertyValue('border-top-width')) + parseInt(computed.getPropertyValue('padding-top')) + field.scrollHeight + parseInt(computed.getPropertyValue('padding-bottom')) + parseInt(computed.getPropertyValue('border-bottom-width'));\n      field.style.setProperty(heightToken.name, \"\".concat(height, \"px\"));\n    };\n    _this.handleChange = function (event) {\n      // https://gomakethings.com/automatically-expand-a-textarea-as-the-user-types-using-vanilla-javascript/\n      var field = event.currentTarget;\n      if (_this.props.autoResize && canUseDOM) {\n        _this.setAutoHeight(field);\n      }\n      if (_this.props.onChange) {\n        _this.props.onChange(field.value, event);\n      }\n    };\n    if (!props.id && !props['aria-label']) {\n      // eslint-disable-next-line no-console\n      console.error('TextArea: TextArea requires either an id or aria-label to be specified');\n    }\n    return _this;\n  }\n  _createClass(TextAreaBase, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var inputRef = this.props.innerRef || this.inputRef;\n      if (this.props.autoResize && canUseDOM) {\n        var field = inputRef.current;\n        this.setAutoHeight(field);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _a = this.props,\n        className = _a.className,\n        value = _a.value,\n        validated = _a.validated,\n        isRequired = _a.isRequired,\n        isDisabled = _a.isDisabled,\n        isIconSprite = _a.isIconSprite,\n        isReadOnly = _a.isReadOnly,\n        readOnlyVariant = _a.readOnlyVariant,\n        resizeOrientation = _a.resizeOrientation,\n        innerRef = _a.innerRef,\n        disabled = _a.disabled,\n        autoResize = _a.autoResize,\n        onChange = _a.onChange,\n        props = __rest(_a, [\"className\", \"value\", \"validated\", \"isRequired\", \"isDisabled\", \"isIconSprite\", \"isReadOnly\", \"readOnlyVariant\", \"resizeOrientation\", \"innerRef\", \"disabled\", \"autoResize\", \"onChange\"]);\n      var orientation = \"resize\".concat(capitalize(resizeOrientation));\n      return React.createElement(\"textarea\", Object.assign({\n        className: css(styles.formControl, isIconSprite && styles.modifiers.iconSprite, readOnlyVariant === 'plain' && styles.modifiers.plain, className, resizeOrientation !== TextAreResizeOrientation.both && styles.modifiers[orientation], validated === ValidatedOptions.success && styles.modifiers.success, validated === ValidatedOptions.warning && styles.modifiers.warning),\n        onChange: this.handleChange\n      }, typeof this.props.defaultValue !== 'string' && {\n        value: value\n      }, {\n        \"aria-invalid\": validated === ValidatedOptions.error,\n        required: isRequired,\n        disabled: isDisabled || disabled,\n        readOnly: !!readOnlyVariant || isReadOnly,\n        ref: innerRef || this.inputRef\n      }, props));\n    }\n  }]);\n  return TextAreaBase;\n}(React.Component);\nTextAreaBase.displayName = 'TextArea';\nTextAreaBase.defaultProps = {\n  innerRef: React.createRef(),\n  className: '',\n  isRequired: false,\n  isDisabled: false,\n  isIconSprite: false,\n  validated: 'default',\n  resizeOrientation: 'both',\n  'aria-label': null\n};\nexport var TextArea = React.forwardRef(function (props, ref) {\n  return React.createElement(TextAreaBase, Object.assign({}, props, {\n    innerRef: ref\n  }));\n});\nTextArea.displayName = 'TextArea';","map":{"version":3,"names":["React","styles","heightToken","css","capitalize","ValidatedOptions","canUseDOM","TextAreResizeOrientation","TextAreaReadOnlyVariant","TextAreaBase","_React$Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","inputRef","createRef","setAutoHeight","field","style","setProperty","name","computed","window","getComputedStyle","height","parseInt","getPropertyValue","scrollHeight","concat","handleChange","event","currentTarget","autoResize","onChange","value","id","console","error","_createClass","key","componentDidMount","innerRef","current","render","_a","className","validated","isRequired","isDisabled","isIconSprite","isReadOnly","readOnlyVariant","resizeOrientation","disabled","__rest","orientation","createElement","Object","assign","formControl","modifiers","iconSprite","plain","both","success","warning","defaultValue","required","readOnly","ref","Component","displayName","defaultProps","TextArea","forwardRef"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@patternfly/react-core/src/components/TextArea/TextArea.tsx"],"sourcesContent":["import * as React from 'react';\nimport { HTMLProps } from 'react';\nimport styles from '@patternfly/react-styles/css/components/FormControl/form-control';\nimport heightToken from '@patternfly/react-tokens/dist/esm/c_form_control_textarea_Height';\nimport { css } from '@patternfly/react-styles';\nimport { capitalize, ValidatedOptions, canUseDOM } from '../../helpers';\n\nexport enum TextAreResizeOrientation {\n  horizontal = 'horizontal',\n  vertical = 'vertical',\n  both = 'both'\n}\n\nexport enum TextAreaReadOnlyVariant {\n  default = 'default',\n  plain = 'plain'\n}\n\nexport interface TextAreaProps extends Omit<HTMLProps<HTMLTextAreaElement>, 'onChange' | 'ref'> {\n  /** Additional classes added to the text area. */\n  className?: string;\n  /** Flag to show if the text area is required. */\n  isRequired?: boolean;\n  /** Flag to show if the text area is disabled. */\n  isDisabled?: boolean;\n  /** @deprecated Use readOnlyVariant instead. Flag to show if the text area is read only. */\n  isReadOnly?: boolean;\n  /** Read only variant. */\n  readOnlyVariant?: 'default' | 'plain';\n  /** Use the external file instead of a data URI */\n  isIconSprite?: boolean;\n  /** Flag to modify height based on contents. */\n  autoResize?: boolean;\n  /** Value to indicate if the text area is modified to show that validation state.\n   * If set to success, text area will be modified to indicate valid state.\n   * If set to error, text area will be modified to indicate error state.\n   */\n  validated?: 'success' | 'warning' | 'error' | 'default';\n  /** Value of the text area. */\n  value?: string | number;\n  /** A callback for when the text area value changes. */\n  onChange?: (value: string, event: React.ChangeEvent<HTMLTextAreaElement>) => void;\n  /** Sets the orientation to limit the resize to */\n  resizeOrientation?: 'horizontal' | 'vertical' | 'both';\n  /** Custom flag to show that the text area requires an associated id or aria-label. */\n  'aria-label'?: string;\n  /** A reference object to attach to the text area. */\n  innerRef?: React.RefObject<any>;\n}\n\nexport class TextAreaBase extends React.Component<TextAreaProps> {\n  static displayName = 'TextArea';\n  static defaultProps: TextAreaProps = {\n    innerRef: React.createRef<HTMLTextAreaElement>(),\n    className: '',\n    isRequired: false,\n    isDisabled: false,\n    isIconSprite: false,\n    validated: 'default',\n    resizeOrientation: 'both',\n    'aria-label': null as string\n  };\n\n  inputRef = React.createRef<HTMLTextAreaElement>();\n\n  private setAutoHeight = (field: HTMLTextAreaElement) => {\n    field.style.setProperty(heightToken.name, 'inherit');\n    const computed = window.getComputedStyle(field);\n    // Calculate the height\n    const height =\n      parseInt(computed.getPropertyValue('border-top-width')) +\n      parseInt(computed.getPropertyValue('padding-top')) +\n      field.scrollHeight +\n      parseInt(computed.getPropertyValue('padding-bottom')) +\n      parseInt(computed.getPropertyValue('border-bottom-width'));\n    field.style.setProperty(heightToken.name, `${height}px`);\n  };\n\n  constructor(props: TextAreaProps) {\n    super(props);\n    if (!props.id && !props['aria-label']) {\n      // eslint-disable-next-line no-console\n      console.error('TextArea: TextArea requires either an id or aria-label to be specified');\n    }\n  }\n\n  componentDidMount(): void {\n    const inputRef = this.props.innerRef || this.inputRef;\n    if (this.props.autoResize && canUseDOM) {\n      const field = inputRef.current;\n      this.setAutoHeight(field);\n    }\n  }\n\n  private handleChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    // https://gomakethings.com/automatically-expand-a-textarea-as-the-user-types-using-vanilla-javascript/\n    const field = event.currentTarget;\n    if (this.props.autoResize && canUseDOM) {\n      this.setAutoHeight(field);\n    }\n    if (this.props.onChange) {\n      this.props.onChange(field.value, event);\n    }\n  };\n\n  render() {\n    const {\n      className,\n      value,\n      validated,\n      isRequired,\n      isDisabled,\n      isIconSprite,\n      isReadOnly,\n      readOnlyVariant,\n      resizeOrientation,\n      innerRef,\n      disabled,\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      autoResize,\n      onChange,\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      ...props\n    } = this.props;\n    const orientation = `resize${capitalize(resizeOrientation)}` as 'resizeVertical' | 'resizeHorizontal';\n    return (\n      <textarea\n        className={css(\n          styles.formControl,\n          isIconSprite && styles.modifiers.iconSprite,\n          readOnlyVariant === 'plain' && styles.modifiers.plain,\n          className,\n          resizeOrientation !== TextAreResizeOrientation.both && styles.modifiers[orientation],\n          validated === ValidatedOptions.success && styles.modifiers.success,\n          validated === ValidatedOptions.warning && styles.modifiers.warning\n        )}\n        onChange={this.handleChange}\n        {...(typeof this.props.defaultValue !== 'string' && { value })}\n        aria-invalid={validated === ValidatedOptions.error}\n        required={isRequired}\n        disabled={isDisabled || disabled}\n        readOnly={!!readOnlyVariant || isReadOnly}\n        ref={innerRef || this.inputRef}\n        {...props}\n      />\n    );\n  }\n}\n\nexport const TextArea = React.forwardRef((props: TextAreaProps, ref: React.Ref<HTMLTextAreaElement>) => (\n  <TextAreaBase {...props} innerRef={ref as React.MutableRefObject<any>} />\n));\nTextArea.displayName = 'TextArea';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}