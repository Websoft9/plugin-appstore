{"ast":null,"code":"import _slicedToArray from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { css } from '@patternfly/react-styles';\nimport { getUniqueId, handleArrows } from '../../helpers';\nimport { DualListSelectorList } from './DualListSelectorList';\nimport { DualListSelectorContext, DualListSelectorListContext } from './DualListSelectorContext';\nexport var DualListSelectorListWrapperBase = function DualListSelectorListWrapperBase(_a) {\n  var className = _a.className,\n    children = _a.children,\n    ariaLabelledBy = _a['aria-labelledby'],\n    innerRef = _a.innerRef,\n    _a$options = _a.options,\n    options = _a$options === void 0 ? [] : _a$options,\n    _a$selectedOptions = _a.selectedOptions,\n    selectedOptions = _a$selectedOptions === void 0 ? [] : _a$selectedOptions,\n    onOptionSelect = _a.onOptionSelect,\n    displayOption = _a.displayOption,\n    _a$id = _a.id,\n    id = _a$id === void 0 ? getUniqueId('dual-list-selector-list') : _a$id,\n    _a$isDisabled = _a.isDisabled,\n    isDisabled = _a$isDisabled === void 0 ? false : _a$isDisabled,\n    props = __rest(_a, [\"className\", \"children\", 'aria-labelledby', \"innerRef\", \"options\", \"selectedOptions\", \"onOptionSelect\", \"displayOption\", \"id\", \"isDisabled\"]);\n  var _React$useState = React.useState(''),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    focusedOption = _React$useState2[0],\n    setFocusedOption = _React$useState2[1];\n  var ref = React.useRef(null);\n  var menuRef = innerRef || ref;\n  var _React$useContext = React.useContext(DualListSelectorContext),\n    isTree = _React$useContext.isTree;\n  // sets up keyboard focus handling for the dual list selector menu child of the pane. This keyboard\n  // handling is applied whether the pane is dynamically built or passed via the children prop.\n  var handleKeys = function handleKeys(event) {\n    if (!menuRef.current || menuRef.current !== event.target.closest('.pf-c-dual-list-selector__menu') && !Array.from(menuRef.current.getElementsByClassName('pf-c-dual-list-selector__menu')).includes(event.target.closest('.pf-c-dual-list-selector__menu'))) {\n      return;\n    }\n    event.stopImmediatePropagation();\n    var validOptions = isTree ? Array.from(menuRef.current.querySelectorAll('.pf-c-dual-list-selector__item-toggle, .pf-c-dual-list-selector__item-check > input')) : Array.from(menuRef.current.getElementsByTagName('LI')).filter(function (el) {\n      return !el.classList.contains('pf-m-disabled');\n    });\n    var activeElement = document.activeElement;\n    handleArrows(event, validOptions, function (element) {\n      return activeElement.contains(element);\n    }, function (element) {\n      if (element.classList.contains('.pf-c-dual-list-selector__list-item')) {\n        setFocusedOption(element.id);\n      } else {\n        setFocusedOption(element.closest('.pf-c-dual-list-selector__list-item').id);\n      }\n      return element;\n    }, ['.pf-c-dual-list-selector__item-toggle', '.pf-c-dual-list-selector__item-check > input'], undefined, false, false, false);\n  };\n  React.useEffect(function () {\n    window.addEventListener('keydown', handleKeys);\n    return function () {\n      window.removeEventListener('keydown', handleKeys);\n    };\n  }, [menuRef.current]);\n  return React.createElement(\"div\", Object.assign({\n    className: css(styles.dualListSelectorMenu, className),\n    ref: menuRef,\n    tabIndex: 0\n  }, props), React.createElement(DualListSelectorListContext.Provider, {\n    value: {\n      setFocusedOption: setFocusedOption,\n      isTree: isTree,\n      focusedOption: focusedOption,\n      ariaLabelledBy: ariaLabelledBy,\n      displayOption: displayOption,\n      selectedOptions: selectedOptions,\n      id: id,\n      options: options,\n      onOptionSelect: onOptionSelect,\n      isDisabled: isDisabled\n    }\n  }, children ? children : React.createElement(DualListSelectorList, null)));\n};\nDualListSelectorListWrapperBase.displayName = 'DualListSelectorListWrapperBase';\nexport var DualListSelectorListWrapper = React.forwardRef(function (props, ref) {\n  return React.createElement(DualListSelectorListWrapperBase, Object.assign({\n    innerRef: ref\n  }, props));\n});\nDualListSelectorListWrapper.displayName = 'DualListSelectorListWrapper';","map":{"version":3,"names":["React","styles","css","getUniqueId","handleArrows","DualListSelectorList","DualListSelectorContext","DualListSelectorListContext","DualListSelectorListWrapperBase","_a","className","children","ariaLabelledBy","innerRef","_a$options","options","_a$selectedOptions","selectedOptions","onOptionSelect","displayOption","_a$id","id","_a$isDisabled","isDisabled","props","__rest","_React$useState","useState","_React$useState2","_slicedToArray","focusedOption","setFocusedOption","ref","useRef","menuRef","_React$useContext","useContext","isTree","handleKeys","event","current","target","closest","Array","from","getElementsByClassName","includes","stopImmediatePropagation","validOptions","querySelectorAll","getElementsByTagName","filter","el","classList","contains","activeElement","document","element","undefined","useEffect","window","addEventListener","removeEventListener","createElement","Object","assign","dualListSelectorMenu","tabIndex","Provider","value","displayName","DualListSelectorListWrapper","forwardRef"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@patternfly/react-core/src/components/DualListSelector/DualListSelectorListWrapper.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { css } from '@patternfly/react-styles';\nimport { getUniqueId, handleArrows } from '../../helpers';\nimport { DualListSelectorList } from './DualListSelectorList';\nimport { DualListSelectorContext, DualListSelectorListContext } from './DualListSelectorContext';\n\nexport interface DualListSelectorListWrapperProps extends React.HTMLProps<HTMLDivElement> {\n  /** Additional classes applied to the dual list selector. */\n  className?: string;\n  /** Anything that can be rendered inside of the list */\n  children?: React.ReactNode;\n  /** Id of the dual list selector list */\n  id?: string;\n  /** Accessibly label for the list */\n  'aria-labelledby': string;\n  /** @hide forwarded ref */\n  innerRef?: React.RefObject<HTMLDivElement>;\n  /** @hide Options to list in the pane. */\n  options?: React.ReactNode[];\n  /** @hide Options currently selected in the pane. */\n  selectedOptions?: string[] | number[];\n  /** @hide Callback for when an option is selected. Optionally used only when options prop is provided. */\n  onOptionSelect?: (e: React.MouseEvent | React.ChangeEvent | React.KeyboardEvent, index: number, id: string) => void;\n  /** @hide Function to determine if an option should be displayed depending on a dynamically built filter value */\n  displayOption?: (option: React.ReactNode) => boolean;\n  /** Flag indicating whether the component is disabled. */\n  isDisabled?: boolean;\n}\n\nexport const DualListSelectorListWrapperBase: React.FunctionComponent<DualListSelectorListWrapperProps> = ({\n  className,\n  children,\n  'aria-labelledby': ariaLabelledBy,\n  innerRef,\n  options = [],\n  selectedOptions = [],\n  onOptionSelect,\n  displayOption,\n  id = getUniqueId('dual-list-selector-list'),\n  isDisabled = false,\n  ...props\n}: DualListSelectorListWrapperProps) => {\n  const [focusedOption, setFocusedOption] = React.useState('');\n  const ref = React.useRef(null);\n  const menuRef = innerRef || ref;\n  const { isTree } = React.useContext(DualListSelectorContext);\n\n  // sets up keyboard focus handling for the dual list selector menu child of the pane. This keyboard\n  // handling is applied whether the pane is dynamically built or passed via the children prop.\n  const handleKeys = (event: KeyboardEvent) => {\n    if (\n      !menuRef.current ||\n      (menuRef.current !== (event.target as HTMLElement).closest('.pf-c-dual-list-selector__menu') &&\n        !Array.from(menuRef.current.getElementsByClassName('pf-c-dual-list-selector__menu')).includes(\n          (event.target as HTMLElement).closest('.pf-c-dual-list-selector__menu')\n        ))\n    ) {\n      return;\n    }\n    event.stopImmediatePropagation();\n    const validOptions = isTree\n      ? (Array.from(\n          menuRef.current.querySelectorAll(\n            '.pf-c-dual-list-selector__item-toggle, .pf-c-dual-list-selector__item-check > input'\n          )\n        ) as Element[])\n      : (Array.from(menuRef.current.getElementsByTagName('LI')) as Element[]).filter(\n          el => !el.classList.contains('pf-m-disabled')\n        );\n    const activeElement = document.activeElement;\n    handleArrows(\n      event,\n      validOptions,\n      (element: Element) => activeElement.contains(element),\n      (element: Element) => {\n        if (element.classList.contains('.pf-c-dual-list-selector__list-item')) {\n          setFocusedOption(element.id);\n        } else {\n          setFocusedOption(element.closest('.pf-c-dual-list-selector__list-item').id);\n        }\n        return element;\n      },\n      ['.pf-c-dual-list-selector__item-toggle', '.pf-c-dual-list-selector__item-check > input'],\n      undefined,\n      false,\n      false,\n      false\n    );\n  };\n\n  React.useEffect(() => {\n    window.addEventListener('keydown', handleKeys);\n    return () => {\n      window.removeEventListener('keydown', handleKeys);\n    };\n  }, [menuRef.current]);\n\n  return (\n    <div className={css(styles.dualListSelectorMenu, className)} ref={menuRef} tabIndex={0} {...props}>\n      <DualListSelectorListContext.Provider\n        value={{\n          setFocusedOption,\n          isTree,\n          focusedOption,\n          ariaLabelledBy,\n          displayOption,\n          selectedOptions,\n          id,\n          options,\n          onOptionSelect,\n          isDisabled\n        }}\n      >\n        {children ? children : <DualListSelectorList />}\n      </DualListSelectorListContext.Provider>\n    </div>\n  );\n};\nDualListSelectorListWrapperBase.displayName = 'DualListSelectorListWrapperBase';\n\nexport const DualListSelectorListWrapper = React.forwardRef(\n  (props: DualListSelectorListWrapperProps, ref: React.Ref<HTMLDivElement>) => (\n    <DualListSelectorListWrapperBase innerRef={ref as React.MutableRefObject<any>} {...props} />\n  )\n);\n\nDualListSelectorListWrapper.displayName = 'DualListSelectorListWrapper';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}