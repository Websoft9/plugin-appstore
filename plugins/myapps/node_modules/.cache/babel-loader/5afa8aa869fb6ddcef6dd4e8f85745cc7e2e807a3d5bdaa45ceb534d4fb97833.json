{"ast":null,"code":"import { invariant, InvariantError } from \"../globals/index.js\";\nimport { valueToObjectRepresentation } from \"./storeUtils.js\";\nexport function checkDocument(doc) {\n  __DEV__ ? invariant(doc && doc.kind === 'Document', \"Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \\\"gql\\\" tag? http://docs.apollostack.com/apollo-client/core.html#gql\") : invariant(doc && doc.kind === 'Document', 47);\n  var operations = doc.definitions.filter(function (d) {\n    return d.kind !== 'FragmentDefinition';\n  }).map(function (definition) {\n    if (definition.kind !== 'OperationDefinition') {\n      throw __DEV__ ? new InvariantError(\"Schema type definitions not allowed in queries. Found: \\\"\".concat(definition.kind, \"\\\"\")) : new InvariantError(48);\n    }\n    return definition;\n  });\n  __DEV__ ? invariant(operations.length <= 1, \"Ambiguous GraphQL document: contains \".concat(operations.length, \" operations\")) : invariant(operations.length <= 1, 49);\n  return doc;\n}\nexport function getOperationDefinition(doc) {\n  checkDocument(doc);\n  return doc.definitions.filter(function (definition) {\n    return definition.kind === 'OperationDefinition';\n  })[0];\n}\nexport function getOperationName(doc) {\n  return doc.definitions.filter(function (definition) {\n    return definition.kind === 'OperationDefinition' && !!definition.name;\n  }).map(function (x) {\n    return x.name.value;\n  })[0] || null;\n}\nexport function getFragmentDefinitions(doc) {\n  return doc.definitions.filter(function (definition) {\n    return definition.kind === 'FragmentDefinition';\n  });\n}\nexport function getQueryDefinition(doc) {\n  var queryDef = getOperationDefinition(doc);\n  __DEV__ ? invariant(queryDef && queryDef.operation === 'query', 'Must contain a query definition.') : invariant(queryDef && queryDef.operation === 'query', 50);\n  return queryDef;\n}\nexport function getFragmentDefinition(doc) {\n  __DEV__ ? invariant(doc.kind === 'Document', \"Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \\\"gql\\\" tag? http://docs.apollostack.com/apollo-client/core.html#gql\") : invariant(doc.kind === 'Document', 51);\n  __DEV__ ? invariant(doc.definitions.length <= 1, 'Fragment must have exactly one definition.') : invariant(doc.definitions.length <= 1, 52);\n  var fragmentDef = doc.definitions[0];\n  __DEV__ ? invariant(fragmentDef.kind === 'FragmentDefinition', 'Must be a fragment definition.') : invariant(fragmentDef.kind === 'FragmentDefinition', 53);\n  return fragmentDef;\n}\nexport function getMainDefinition(queryDoc) {\n  checkDocument(queryDoc);\n  var fragmentDefinition;\n  for (var _i = 0, _a = queryDoc.definitions; _i < _a.length; _i++) {\n    var definition = _a[_i];\n    if (definition.kind === 'OperationDefinition') {\n      var operation = definition.operation;\n      if (operation === 'query' || operation === 'mutation' || operation === 'subscription') {\n        return definition;\n      }\n    }\n    if (definition.kind === 'FragmentDefinition' && !fragmentDefinition) {\n      fragmentDefinition = definition;\n    }\n  }\n  if (fragmentDefinition) {\n    return fragmentDefinition;\n  }\n  throw __DEV__ ? new InvariantError('Expected a parsed GraphQL query with a query, mutation, subscription, or a fragment.') : new InvariantError(54);\n}\nexport function getDefaultValues(definition) {\n  var defaultValues = Object.create(null);\n  var defs = definition && definition.variableDefinitions;\n  if (defs && defs.length) {\n    defs.forEach(function (def) {\n      if (def.defaultValue) {\n        valueToObjectRepresentation(defaultValues, def.variable.name, def.defaultValue);\n      }\n    });\n  }\n  return defaultValues;\n}","map":{"version":3,"names":["invariant","InvariantError","valueToObjectRepresentation","checkDocument","doc","__DEV__","kind","operations","definitions","filter","d","map","definition","concat","length","getOperationDefinition","getOperationName","name","x","value","getFragmentDefinitions","getQueryDefinition","queryDef","operation","getFragmentDefinition","fragmentDef","getMainDefinition","queryDoc","fragmentDefinition","_i","_a","getDefaultValues","defaultValues","Object","create","defs","variableDefinitions","forEach","def","defaultValue","variable"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@apollo/src/utilities/graphql/getFromAST.ts"],"sourcesContent":["import { invariant, InvariantError } from '../globals';\n\nimport {\n  DocumentNode,\n  OperationDefinitionNode,\n  FragmentDefinitionNode,\n  ValueNode,\n} from 'graphql';\n\nimport { valueToObjectRepresentation } from './storeUtils';\n\ntype OperationDefinitionWithName = OperationDefinitionNode & {\n  name: NonNullable<OperationDefinitionNode['name']>;\n};\n\n// Checks the document for errors and throws an exception if there is an error.\nexport function checkDocument(doc: DocumentNode) {\n  invariant(\n    doc && doc.kind === 'Document',\n    `Expecting a parsed GraphQL document. Perhaps you need to wrap the query \\\nstring in a \"gql\" tag? http://docs.apollostack.com/apollo-client/core.html#gql`,\n  );\n\n  const operations = doc.definitions\n    .filter(d => d.kind !== 'FragmentDefinition')\n    .map(definition => {\n      if (definition.kind !== 'OperationDefinition') {\n        throw new InvariantError(\n          `Schema type definitions not allowed in queries. Found: \"${\n            definition.kind\n          }\"`,\n        );\n      }\n      return definition;\n    });\n\n  invariant(\n    operations.length <= 1,\n    `Ambiguous GraphQL document: contains ${operations.length} operations`,\n  );\n\n  return doc;\n}\n\nexport function getOperationDefinition(\n  doc: DocumentNode,\n): OperationDefinitionNode | undefined {\n  checkDocument(doc);\n  return doc.definitions.filter(\n    (definition): definition is OperationDefinitionNode =>\n      definition.kind === 'OperationDefinition',\n  )[0];\n}\n\nexport function getOperationName(doc: DocumentNode): string | null {\n  return (\n    doc.definitions\n      .filter(\n        (definition): definition is OperationDefinitionWithName =>\n          definition.kind === 'OperationDefinition' && !!definition.name,\n      )\n      .map((x) => x.name.value)[0] || null\n  );\n}\n\n// Returns the FragmentDefinitions from a particular document as an array\nexport function getFragmentDefinitions(\n  doc: DocumentNode,\n): FragmentDefinitionNode[] {\n  return doc.definitions.filter(\n    (definition): definition is FragmentDefinitionNode =>\n      definition.kind === 'FragmentDefinition',\n  );\n}\n\nexport function getQueryDefinition(doc: DocumentNode): OperationDefinitionNode {\n  const queryDef = getOperationDefinition(doc)!;\n\n  invariant(\n    queryDef && queryDef.operation === 'query',\n    'Must contain a query definition.',\n  );\n\n  return queryDef;\n}\n\nexport function getFragmentDefinition(\n  doc: DocumentNode,\n): FragmentDefinitionNode {\n  invariant(\n    doc.kind === 'Document',\n    `Expecting a parsed GraphQL document. Perhaps you need to wrap the query \\\nstring in a \"gql\" tag? http://docs.apollostack.com/apollo-client/core.html#gql`,\n  );\n\n  invariant(\n    doc.definitions.length <= 1,\n    'Fragment must have exactly one definition.',\n  );\n\n  const fragmentDef = doc.definitions[0] as FragmentDefinitionNode;\n\n  invariant(\n    fragmentDef.kind === 'FragmentDefinition',\n    'Must be a fragment definition.',\n  );\n\n  return fragmentDef as FragmentDefinitionNode;\n}\n\n/**\n * Returns the first operation definition found in this document.\n * If no operation definition is found, the first fragment definition will be returned.\n * If no definitions are found, an error will be thrown.\n */\nexport function getMainDefinition(\n  queryDoc: DocumentNode,\n): OperationDefinitionNode | FragmentDefinitionNode {\n  checkDocument(queryDoc);\n\n  let fragmentDefinition;\n\n  for (let definition of queryDoc.definitions) {\n    if (definition.kind === 'OperationDefinition') {\n      const operation = (definition as OperationDefinitionNode).operation;\n      if (\n        operation === 'query' ||\n        operation === 'mutation' ||\n        operation === 'subscription'\n      ) {\n        return definition as OperationDefinitionNode;\n      }\n    }\n    if (definition.kind === 'FragmentDefinition' && !fragmentDefinition) {\n      // we do this because we want to allow multiple fragment definitions\n      // to precede an operation definition.\n      fragmentDefinition = definition as FragmentDefinitionNode;\n    }\n  }\n\n  if (fragmentDefinition) {\n    return fragmentDefinition;\n  }\n\n  throw new InvariantError(\n    'Expected a parsed GraphQL query with a query, mutation, subscription, or a fragment.',\n  );\n}\n\nexport function getDefaultValues(\n  definition: OperationDefinitionNode | undefined,\n): Record<string, any> {\n  const defaultValues = Object.create(null);\n  const defs = definition && definition.variableDefinitions;\n  if (defs && defs.length) {\n    defs.forEach(def => {\n      if (def.defaultValue) {\n        valueToObjectRepresentation(\n          defaultValues,\n          def.variable.name,\n          def.defaultValue as ValueNode,\n        );\n      }\n    });\n  }\n  return defaultValues;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}