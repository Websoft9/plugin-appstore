{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Form/form';\nimport { ASTERISK } from '../../helpers/htmlConstants';\nimport { css } from '@patternfly/react-styles';\nimport { ValidatedOptions } from '../../helpers/constants';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nexport var FormGroup = function FormGroup(_a) {\n  var _a$children = _a.children,\n    children = _a$children === void 0 ? null : _a$children,\n    _a$className = _a.className,\n    className = _a$className === void 0 ? '' : _a$className,\n    label = _a.label,\n    labelInfo = _a.labelInfo,\n    labelIcon = _a.labelIcon,\n    _a$isRequired = _a.isRequired,\n    isRequired = _a$isRequired === void 0 ? false : _a$isRequired,\n    _a$validated = _a.validated,\n    validated = _a$validated === void 0 ? 'default' : _a$validated,\n    _a$isInline = _a.isInline,\n    isInline = _a$isInline === void 0 ? false : _a$isInline,\n    _a$hasNoPaddingTop = _a.hasNoPaddingTop,\n    hasNoPaddingTop = _a$hasNoPaddingTop === void 0 ? false : _a$hasNoPaddingTop,\n    _a$isStack = _a.isStack,\n    isStack = _a$isStack === void 0 ? false : _a$isStack,\n    helperText = _a.helperText,\n    _a$isHelperTextBefore = _a.isHelperTextBeforeField,\n    isHelperTextBeforeField = _a$isHelperTextBefore === void 0 ? false : _a$isHelperTextBefore,\n    helperTextInvalid = _a.helperTextInvalid,\n    helperTextIcon = _a.helperTextIcon,\n    helperTextInvalidIcon = _a.helperTextInvalidIcon,\n    fieldId = _a.fieldId,\n    role = _a.role,\n    props = __rest(_a, [\"children\", \"className\", \"label\", \"labelInfo\", \"labelIcon\", \"isRequired\", \"validated\", \"isInline\", \"hasNoPaddingTop\", \"isStack\", \"helperText\", \"isHelperTextBeforeField\", \"helperTextInvalid\", \"helperTextIcon\", \"helperTextInvalidIcon\", \"fieldId\", \"role\"]);\n  var validHelperText = typeof helperText !== 'string' ? helperText : React.createElement(\"div\", {\n    className: css(styles.formHelperText, validated === ValidatedOptions.success && styles.modifiers.success, validated === ValidatedOptions.warning && styles.modifiers.warning),\n    id: \"\".concat(fieldId, \"-helper\"),\n    \"aria-live\": \"polite\"\n  }, helperTextIcon && React.createElement(\"span\", {\n    className: css(styles.formHelperTextIcon)\n  }, helperTextIcon), helperText);\n  var inValidHelperText = typeof helperTextInvalid !== 'string' ? helperTextInvalid : React.createElement(\"div\", {\n    className: css(styles.formHelperText, styles.modifiers.error),\n    id: \"\".concat(fieldId, \"-helper\"),\n    \"aria-live\": \"polite\"\n  }, helperTextInvalidIcon && React.createElement(\"span\", {\n    className: css(styles.formHelperTextIcon)\n  }, helperTextInvalidIcon), helperTextInvalid);\n  var showValidHelperTxt = function showValidHelperTxt(validationType) {\n    return validationType !== ValidatedOptions.error && helperText ? validHelperText : '';\n  };\n  var helperTextToDisplay = validated === ValidatedOptions.error && helperTextInvalid ? inValidHelperText : showValidHelperTxt(validated);\n  var isGroupOrRadioGroup = role === 'group' || role === 'radiogroup';\n  var LabelComponent = isGroupOrRadioGroup ? 'span' : 'label';\n  var labelContent = React.createElement(React.Fragment, null, React.createElement(LabelComponent, Object.assign({\n    className: css(styles.formLabel)\n  }, !isGroupOrRadioGroup && {\n    htmlFor: fieldId\n  }), React.createElement(\"span\", {\n    className: css(styles.formLabelText)\n  }, label), isRequired && React.createElement(\"span\", {\n    className: css(styles.formLabelRequired),\n    \"aria-hidden\": \"true\"\n  }, ' ', ASTERISK)), ' ', React.isValidElement(labelIcon) && labelIcon);\n  return React.createElement(GenerateId, null, function (randomId) {\n    return React.createElement(\"div\", Object.assign({\n      className: css(styles.formGroup, className)\n    }, role && {\n      role: role\n    }, isGroupOrRadioGroup && {\n      'aria-labelledby': \"\".concat(fieldId || randomId, \"-legend\")\n    }, props), label && React.createElement(\"div\", Object.assign({\n      className: css(styles.formGroupLabel, labelInfo && styles.modifiers.info, hasNoPaddingTop && styles.modifiers.noPaddingTop)\n    }, isGroupOrRadioGroup && {\n      id: \"\".concat(fieldId || randomId, \"-legend\")\n    }), labelInfo && React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: css(styles.formGroupLabelMain)\n    }, labelContent), React.createElement(\"div\", {\n      className: css(styles.formGroupLabelInfo)\n    }, labelInfo)), !labelInfo && labelContent), React.createElement(\"div\", {\n      className: css(styles.formGroupControl, isInline && styles.modifiers.inline, isStack && styles.modifiers.stack)\n    }, isHelperTextBeforeField && helperTextToDisplay, children, !isHelperTextBeforeField && helperTextToDisplay));\n  });\n};\nFormGroup.displayName = 'FormGroup';","map":{"version":3,"names":["React","styles","ASTERISK","css","ValidatedOptions","GenerateId","FormGroup","_a","children","_a$children","_a$className","className","label","labelInfo","labelIcon","_a$isRequired","isRequired","_a$validated","validated","_a$isInline","isInline","_a$hasNoPaddingTop","hasNoPaddingTop","_a$isStack","isStack","helperText","_a$isHelperTextBefore","isHelperTextBeforeField","helperTextInvalid","helperTextIcon","helperTextInvalidIcon","fieldId","role","props","__rest","validHelperText","createElement","formHelperText","success","modifiers","warning","id","concat","formHelperTextIcon","inValidHelperText","error","showValidHelperTxt","validationType","helperTextToDisplay","isGroupOrRadioGroup","LabelComponent","labelContent","Fragment","Object","assign","formLabel","htmlFor","formLabelText","formLabelRequired","isValidElement","randomId","formGroup","formGroupLabel","info","noPaddingTop","formGroupLabelMain","formGroupLabelInfo","formGroupControl","inline","stack","displayName"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@patternfly/react-core/src/components/Form/FormGroup.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Form/form';\nimport { ASTERISK } from '../../helpers/htmlConstants';\nimport { css } from '@patternfly/react-styles';\nimport { ValidatedOptions } from '../../helpers/constants';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\n\nexport interface FormGroupProps extends Omit<React.HTMLProps<HTMLDivElement>, 'label'> {\n  /** Anything that can be rendered as FormGroup content. */\n  children?: React.ReactNode;\n  /** Additional classes added to the FormGroup. */\n  className?: string;\n  /** Label text before the field. */\n  label?: React.ReactNode;\n  /** Additional label information displayed after the label. */\n  labelInfo?: React.ReactNode;\n  /** Sets an icon for the label. For providing additional context. Host element for Popover  */\n  labelIcon?: React.ReactElement;\n  /** Sets the FormGroup required. */\n  isRequired?: boolean;\n  /**\n   * Sets the FormGroup validated. If you set to success, text color of helper text will be modified to indicate valid state.\n   * If set to error, text color of helper text will be modified to indicate error state.\n   * If set to warning, text color of helper text will be modified to indicate warning state.\n   */\n  validated?: 'success' | 'warning' | 'error' | 'default';\n  /** Sets the FormGroup isInline. */\n  isInline?: boolean;\n  /** Sets the FormGroupControl to be stacked */\n  isStack?: boolean;\n  /** Removes top spacer from label. */\n  hasNoPaddingTop?: boolean;\n  /** Helper text regarding the field. It can be a simple text or an object. */\n  helperText?: React.ReactNode;\n  /** Flag to position the helper text before the field. False by default */\n  isHelperTextBeforeField?: boolean;\n  /** Helper text after the field when the field is invalid. It can be a simple text or an object. */\n  helperTextInvalid?: React.ReactNode;\n  /** Icon displayed to the left of the helper text. */\n  helperTextIcon?: React.ReactNode;\n  /** Icon displayed to the left of the helper text when the field is invalid. */\n  helperTextInvalidIcon?: React.ReactNode;\n  /** ID of an individual field or a group of multiple fields. Required when a role of \"group\" or \"radiogroup\" is passed in.\n   * If only one field is included, its ID attribute and this prop must be the same.\n   */\n  fieldId?: string;\n  /** Sets the role of the form group. Pass in \"radiogroup\" when the form group contains multiple\n   * radio inputs, or pass in \"group\" when the form group contains multiple of any other input type.\n   */\n  role?: string;\n}\n\nexport const FormGroup: React.FunctionComponent<FormGroupProps> = ({\n  children = null,\n  className = '',\n  label,\n  labelInfo,\n  labelIcon,\n  isRequired = false,\n  validated = 'default',\n  isInline = false,\n  hasNoPaddingTop = false,\n  isStack = false,\n  helperText,\n  isHelperTextBeforeField = false,\n  helperTextInvalid,\n  helperTextIcon,\n  helperTextInvalidIcon,\n  fieldId,\n  role,\n  ...props\n}: FormGroupProps) => {\n  const validHelperText =\n    typeof helperText !== 'string' ? (\n      helperText\n    ) : (\n      <div\n        className={css(\n          styles.formHelperText,\n          validated === ValidatedOptions.success && styles.modifiers.success,\n          validated === ValidatedOptions.warning && styles.modifiers.warning\n        )}\n        id={`${fieldId}-helper`}\n        aria-live=\"polite\"\n      >\n        {helperTextIcon && <span className={css(styles.formHelperTextIcon)}>{helperTextIcon}</span>}\n        {helperText}\n      </div>\n    );\n\n  const inValidHelperText =\n    typeof helperTextInvalid !== 'string' ? (\n      helperTextInvalid\n    ) : (\n      <div className={css(styles.formHelperText, styles.modifiers.error)} id={`${fieldId}-helper`} aria-live=\"polite\">\n        {helperTextInvalidIcon && <span className={css(styles.formHelperTextIcon)}>{helperTextInvalidIcon}</span>}\n        {helperTextInvalid}\n      </div>\n    );\n\n  const showValidHelperTxt = (validationType: 'success' | 'warning' | 'error' | 'default') =>\n    validationType !== ValidatedOptions.error && helperText ? validHelperText : '';\n\n  const helperTextToDisplay =\n    validated === ValidatedOptions.error && helperTextInvalid ? inValidHelperText : showValidHelperTxt(validated);\n\n  const isGroupOrRadioGroup = role === 'group' || role === 'radiogroup';\n  const LabelComponent = isGroupOrRadioGroup ? 'span' : 'label';\n\n  const labelContent = (\n    <React.Fragment>\n      <LabelComponent className={css(styles.formLabel)} {...(!isGroupOrRadioGroup && { htmlFor: fieldId })}>\n        <span className={css(styles.formLabelText)}>{label}</span>\n        {isRequired && (\n          <span className={css(styles.formLabelRequired)} aria-hidden=\"true\">\n            {' '}\n            {ASTERISK}\n          </span>\n        )}\n      </LabelComponent>{' '}\n      {React.isValidElement(labelIcon) && labelIcon}\n    </React.Fragment>\n  );\n\n  return (\n    <GenerateId>\n      {randomId => (\n        <div\n          className={css(styles.formGroup, className)}\n          {...(role && { role })}\n          {...(isGroupOrRadioGroup && { 'aria-labelledby': `${fieldId || randomId}-legend` })}\n          {...props}\n        >\n          {label && (\n            <div\n              className={css(\n                styles.formGroupLabel,\n                labelInfo && styles.modifiers.info,\n                hasNoPaddingTop && styles.modifiers.noPaddingTop\n              )}\n              {...(isGroupOrRadioGroup && { id: `${fieldId || randomId}-legend` })}\n            >\n              {labelInfo && (\n                <React.Fragment>\n                  <div className={css(styles.formGroupLabelMain)}>{labelContent}</div>\n                  <div className={css(styles.formGroupLabelInfo)}>{labelInfo}</div>\n                </React.Fragment>\n              )}\n              {!labelInfo && labelContent}\n            </div>\n          )}\n          <div\n            className={css(\n              styles.formGroupControl,\n              isInline && styles.modifiers.inline,\n              isStack && styles.modifiers.stack\n            )}\n          >\n            {isHelperTextBeforeField && helperTextToDisplay}\n            {children}\n            {!isHelperTextBeforeField && helperTextToDisplay}\n          </div>\n        </div>\n      )}\n    </GenerateId>\n  );\n};\nFormGroup.displayName = 'FormGroup';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}