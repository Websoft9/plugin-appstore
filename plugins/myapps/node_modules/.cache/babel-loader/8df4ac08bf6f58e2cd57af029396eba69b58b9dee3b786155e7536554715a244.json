{"ast":null,"code":"import { isAsyncIterableIterator, isBlob, isNodeResponse, isNodeReadableStream, isReadableStream, isStreamableBlob } from \"../../utilities/common/responseIterator.js\";\nimport asyncIterator from \"./iterators/async.js\";\nimport nodeStreamIterator from \"./iterators/nodeStream.js\";\nimport promiseIterator from \"./iterators/promise.js\";\nimport readerIterator from \"./iterators/reader.js\";\nexport function responseIterator(response) {\n  var body = response;\n  if (isNodeResponse(response)) body = response.body;\n  if (isAsyncIterableIterator(body)) return asyncIterator(body);\n  if (isReadableStream(body)) return readerIterator(body.getReader());\n  if (isStreamableBlob(body)) {\n    return readerIterator(body.stream().getReader());\n  }\n  if (isBlob(body)) return promiseIterator(body.arrayBuffer());\n  if (isNodeReadableStream(body)) return nodeStreamIterator(body);\n  throw new Error(\"Unknown body type for responseIterator. Please pass a streamable response.\");\n}","map":{"version":3,"names":["isAsyncIterableIterator","isBlob","isNodeResponse","isNodeReadableStream","isReadableStream","isStreamableBlob","asyncIterator","nodeStreamIterator","promiseIterator","readerIterator","responseIterator","response","body","getReader","stream","arrayBuffer","Error"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@apollo/src/link/http/responseIterator.ts"],"sourcesContent":["/**\n * Original source:\n * https://github.com/kmalakoff/response-iterator/blob/master/src/index.ts\n */\n\nimport { Response as NodeResponse } from \"node-fetch\";\nimport {\n  isAsyncIterableIterator,\n  isBlob,\n  isNodeResponse,\n  isNodeReadableStream,\n  isReadableStream,\n  isStreamableBlob,\n} from \"../../utilities/common/responseIterator\";\n\nimport asyncIterator from \"./iterators/async\";\nimport nodeStreamIterator from \"./iterators/nodeStream\";\nimport promiseIterator from \"./iterators/promise\";\nimport readerIterator from \"./iterators/reader\";\n\nexport function responseIterator<T>(\n  response: Response | NodeResponse\n): AsyncIterableIterator<T> {\n  let body: unknown = response;\n\n  if (isNodeResponse(response)) body = response.body;\n\n  if (isAsyncIterableIterator(body)) return asyncIterator<T>(body);\n\n  if (isReadableStream(body)) return readerIterator<T>(body.getReader());\n\n  // this errors without casting to ReadableStream<T>\n  // because Blob.stream() returns a NodeJS ReadableStream\n  if (isStreamableBlob(body)) {\n    return readerIterator<T>(\n      (body.stream() as unknown as ReadableStream<T>).getReader()\n    );\n  }\n\n  if (isBlob(body)) return promiseIterator<T>(body.arrayBuffer());\n\n  if (isNodeReadableStream(body)) return nodeStreamIterator<T>(body);\n\n  throw new Error(\n    \"Unknown body type for responseIterator. Please pass a streamable response.\"\n  );\n}\n"],"mappings":"AAMA,SACEA,uBAAuB,EACvBC,MAAM,EACNC,cAAc,EACdC,oBAAoB,EACpBC,gBAAgB,EAChBC,gBAAgB,QACX,4CAA0C;AAEjD,OAAOC,aAAa,MAAM,sBAAoB;AAC9C,OAAOC,kBAAkB,MAAM,2BAAyB;AACxD,OAAOC,eAAe,MAAM,wBAAsB;AAClD,OAAOC,cAAc,MAAM,uBAAqB;AAEhD,OAAM,SAAUC,gBAAgBA,CAC9BC,QAAiC;EAEjC,IAAIC,IAAI,GAAYD,QAAQ;EAE5B,IAAIT,cAAc,CAACS,QAAQ,CAAC,EAAEC,IAAI,GAAGD,QAAQ,CAACC,IAAI;EAElD,IAAIZ,uBAAuB,CAACY,IAAI,CAAC,EAAE,OAAON,aAAa,CAAIM,IAAI,CAAC;EAEhE,IAAIR,gBAAgB,CAACQ,IAAI,CAAC,EAAE,OAAOH,cAAc,CAAIG,IAAI,CAACC,SAAS,EAAE,CAAC;EAItE,IAAIR,gBAAgB,CAACO,IAAI,CAAC,EAAE;IAC1B,OAAOH,cAAc,CAClBG,IAAI,CAACE,MAAM,EAAmC,CAACD,SAAS,EAAE,CAC5D;;EAGH,IAAIZ,MAAM,CAACW,IAAI,CAAC,EAAE,OAAOJ,eAAe,CAAII,IAAI,CAACG,WAAW,EAAE,CAAC;EAE/D,IAAIZ,oBAAoB,CAACS,IAAI,CAAC,EAAE,OAAOL,kBAAkB,CAAIK,IAAI,CAAC;EAElE,MAAM,IAAII,KAAK,CACb,4EAA4E,CAC7E;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}