{"ast":null,"code":"import find from \"../../polyfills/find.mjs\";\nimport objectEntries from \"../../polyfills/objectEntries.mjs\";\nimport inspect from \"../../jsutils/inspect.mjs\";\nimport { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { Kind } from \"../../language/kinds.mjs\";\nimport { print } from \"../../language/printer.mjs\";\nimport { getNamedType, isNonNullType, isLeafType, isObjectType, isListType, isInterfaceType } from \"../../type/definition.mjs\";\nimport { typeFromAST } from \"../../utilities/typeFromAST.mjs\";\nfunction reasonMessage(reason) {\n  if (Array.isArray(reason)) {\n    return reason.map(function (_ref) {\n      var responseName = _ref[0],\n        subReason = _ref[1];\n      return \"subfields \\\"\".concat(responseName, \"\\\" conflict because \") + reasonMessage(subReason);\n    }).join(' and ');\n  }\n  return reason;\n}\n/**\n * Overlapping fields can be merged\n *\n * A selection set is only valid if all fields (including spreading any\n * fragments) either correspond to distinct response names or can be merged\n * without ambiguity.\n */\n\nexport function OverlappingFieldsCanBeMergedRule(context) {\n  // A memoization for when two fragments are compared \"between\" each other for\n  // conflicts. Two fragments may be compared many times, so memoizing this can\n  // dramatically improve the performance of this validator.\n  var comparedFragmentPairs = new PairSet(); // A cache for the \"field map\" and list of fragment names found in any given\n  // selection set. Selection sets may be asked for this information multiple\n  // times, so this improves the performance of this validator.\n\n  var cachedFieldsAndFragmentNames = new Map();\n  return {\n    SelectionSet: function SelectionSet(selectionSet) {\n      var conflicts = findConflictsWithinSelectionSet(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, context.getParentType(), selectionSet);\n      for (var _i2 = 0; _i2 < conflicts.length; _i2++) {\n        var _ref3 = conflicts[_i2];\n        var _ref2$ = _ref3[0];\n        var responseName = _ref2$[0];\n        var reason = _ref2$[1];\n        var fields1 = _ref3[1];\n        var fields2 = _ref3[2];\n        var reasonMsg = reasonMessage(reason);\n        context.reportError(new GraphQLError(\"Fields \\\"\".concat(responseName, \"\\\" conflict because \").concat(reasonMsg, \". Use different aliases on the fields to fetch both if this was intentional.\"), fields1.concat(fields2)));\n      }\n    }\n  };\n}\n\n/**\n * Algorithm:\n *\n * Conflicts occur when two fields exist in a query which will produce the same\n * response name, but represent differing values, thus creating a conflict.\n * The algorithm below finds all conflicts via making a series of comparisons\n * between fields. In order to compare as few fields as possible, this makes\n * a series of comparisons \"within\" sets of fields and \"between\" sets of fields.\n *\n * Given any selection set, a collection produces both a set of fields by\n * also including all inline fragments, as well as a list of fragments\n * referenced by fragment spreads.\n *\n * A) Each selection set represented in the document first compares \"within\" its\n * collected set of fields, finding any conflicts between every pair of\n * overlapping fields.\n * Note: This is the *only time* that a the fields \"within\" a set are compared\n * to each other. After this only fields \"between\" sets are compared.\n *\n * B) Also, if any fragment is referenced in a selection set, then a\n * comparison is made \"between\" the original set of fields and the\n * referenced fragment.\n *\n * C) Also, if multiple fragments are referenced, then comparisons\n * are made \"between\" each referenced fragment.\n *\n * D) When comparing \"between\" a set of fields and a referenced fragment, first\n * a comparison is made between each field in the original set of fields and\n * each field in the the referenced set of fields.\n *\n * E) Also, if any fragment is referenced in the referenced selection set,\n * then a comparison is made \"between\" the original set of fields and the\n * referenced fragment (recursively referring to step D).\n *\n * F) When comparing \"between\" two fragments, first a comparison is made between\n * each field in the first referenced set of fields and each field in the the\n * second referenced set of fields.\n *\n * G) Also, any fragments referenced by the first must be compared to the\n * second, and any fragments referenced by the second must be compared to the\n * first (recursively referring to step F).\n *\n * H) When comparing two fields, if both have selection sets, then a comparison\n * is made \"between\" both selection sets, first comparing the set of fields in\n * the first selection set with the set of fields in the second.\n *\n * I) Also, if any fragment is referenced in either selection set, then a\n * comparison is made \"between\" the other set of fields and the\n * referenced fragment.\n *\n * J) Also, if two fragments are referenced in both selection sets, then a\n * comparison is made \"between\" the two fragments.\n *\n */\n// Find all conflicts found \"within\" a selection set, including those found\n// via spreading in fragments. Called when visiting each SelectionSet in the\n// GraphQL Document.\nfunction findConflictsWithinSelectionSet(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentType, selectionSet) {\n  var conflicts = [];\n  var _getFieldsAndFragment = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType, selectionSet),\n    fieldMap = _getFieldsAndFragment[0],\n    fragmentNames = _getFieldsAndFragment[1]; // (A) Find find all conflicts \"within\" the fields of this selection set.\n  // Note: this is the *only place* `collectConflictsWithin` is called.\n\n  collectConflictsWithin(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, fieldMap);\n  if (fragmentNames.length !== 0) {\n    // (B) Then collect conflicts between these fields and those represented by\n    // each spread fragment name found.\n    for (var i = 0; i < fragmentNames.length; i++) {\n      collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, false, fieldMap, fragmentNames[i]); // (C) Then compare this fragment with all other fragments found in this\n      // selection set to collect conflicts between fragments spread together.\n      // This compares each item in the list of fragment names to every other\n      // item in that same list (except for itself).\n\n      for (var j = i + 1; j < fragmentNames.length; j++) {\n        collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, false, fragmentNames[i], fragmentNames[j]);\n      }\n    }\n  }\n  return conflicts;\n} // Collect all conflicts found between a set of fields and a fragment reference\n// including via spreading in any nested fragments.\n\nfunction collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fragmentName) {\n  var fragment = context.getFragment(fragmentName);\n  if (!fragment) {\n    return;\n  }\n  var _getReferencedFieldsA = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment),\n    fieldMap2 = _getReferencedFieldsA[0],\n    fragmentNames2 = _getReferencedFieldsA[1]; // Do not compare a fragment's fieldMap to itself.\n\n  if (fieldMap === fieldMap2) {\n    return;\n  } // (D) First collect any conflicts between the provided collection of fields\n  // and the collection of fields represented by the given fragment.\n\n  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fieldMap2); // (E) Then collect any conflicts between the provided collection of fields\n  // and any fragment names found in the given fragment.\n\n  for (var i = 0; i < fragmentNames2.length; i++) {\n    collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fragmentNames2[i]);\n  }\n} // Collect all conflicts found between two fragments, including via spreading in\n// any nested fragments.\n\nfunction collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentName1, fragmentName2) {\n  // No need to compare a fragment to itself.\n  if (fragmentName1 === fragmentName2) {\n    return;\n  } // Memoize so two fragments are not compared for conflicts more than once.\n\n  if (comparedFragmentPairs.has(fragmentName1, fragmentName2, areMutuallyExclusive)) {\n    return;\n  }\n  comparedFragmentPairs.add(fragmentName1, fragmentName2, areMutuallyExclusive);\n  var fragment1 = context.getFragment(fragmentName1);\n  var fragment2 = context.getFragment(fragmentName2);\n  if (!fragment1 || !fragment2) {\n    return;\n  }\n  var _getReferencedFieldsA2 = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment1),\n    fieldMap1 = _getReferencedFieldsA2[0],\n    fragmentNames1 = _getReferencedFieldsA2[1];\n  var _getReferencedFieldsA3 = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment2),\n    fieldMap2 = _getReferencedFieldsA3[0],\n    fragmentNames2 = _getReferencedFieldsA3[1]; // (F) First, collect all conflicts between these two collections of fields\n  // (not including any nested fragments).\n\n  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fieldMap2); // (G) Then collect conflicts between the first fragment and any nested\n  // fragments spread in the second fragment.\n\n  for (var j = 0; j < fragmentNames2.length; j++) {\n    collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentName1, fragmentNames2[j]);\n  } // (G) Then collect conflicts between the second fragment and any nested\n  // fragments spread in the first fragment.\n\n  for (var i = 0; i < fragmentNames1.length; i++) {\n    collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentNames1[i], fragmentName2);\n  }\n} // Find all conflicts found between two selection sets, including those found\n// via spreading in fragments. Called when determining if conflicts exist\n// between the sub-fields of two overlapping fields.\n\nfunction findConflictsBetweenSubSelectionSets(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, parentType1, selectionSet1, parentType2, selectionSet2) {\n  var conflicts = [];\n  var _getFieldsAndFragment2 = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType1, selectionSet1),\n    fieldMap1 = _getFieldsAndFragment2[0],\n    fragmentNames1 = _getFieldsAndFragment2[1];\n  var _getFieldsAndFragment3 = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType2, selectionSet2),\n    fieldMap2 = _getFieldsAndFragment3[0],\n    fragmentNames2 = _getFieldsAndFragment3[1]; // (H) First, collect all conflicts between these two collections of field.\n\n  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fieldMap2); // (I) Then collect conflicts between the first collection of fields and\n  // those referenced by each fragment name associated with the second.\n\n  if (fragmentNames2.length !== 0) {\n    for (var j = 0; j < fragmentNames2.length; j++) {\n      collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fragmentNames2[j]);\n    }\n  } // (I) Then collect conflicts between the second collection of fields and\n  // those referenced by each fragment name associated with the first.\n\n  if (fragmentNames1.length !== 0) {\n    for (var i = 0; i < fragmentNames1.length; i++) {\n      collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap2, fragmentNames1[i]);\n    }\n  } // (J) Also collect conflicts between any fragment names by the first and\n  // fragment names by the second. This compares each item in the first set of\n  // names to each item in the second set of names.\n\n  for (var _i3 = 0; _i3 < fragmentNames1.length; _i3++) {\n    for (var _j = 0; _j < fragmentNames2.length; _j++) {\n      collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentNames1[_i3], fragmentNames2[_j]);\n    }\n  }\n  return conflicts;\n} // Collect all Conflicts \"within\" one collection of fields.\n\nfunction collectConflictsWithin(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, fieldMap) {\n  // A field map is a keyed collection, where each key represents a response\n  // name and the value at that key is a list of all fields which provide that\n  // response name. For every response name, if there are multiple fields, they\n  // must be compared to find a potential conflict.\n  for (var _i5 = 0, _objectEntries2 = objectEntries(fieldMap); _i5 < _objectEntries2.length; _i5++) {\n    var _ref5 = _objectEntries2[_i5];\n    var responseName = _ref5[0];\n    var fields = _ref5[1];\n\n    // This compares every field in the list to every other field in this list\n    // (except to itself). If the list only has one item, nothing needs to\n    // be compared.\n    if (fields.length > 1) {\n      for (var i = 0; i < fields.length; i++) {\n        for (var j = i + 1; j < fields.length; j++) {\n          var conflict = findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, false,\n          // within one collection is never mutually exclusive\n          responseName, fields[i], fields[j]);\n          if (conflict) {\n            conflicts.push(conflict);\n          }\n        }\n      }\n    }\n  }\n} // Collect all Conflicts between two collections of fields. This is similar to,\n// but different from the `collectConflictsWithin` function above. This check\n// assumes that `collectConflictsWithin` has already been called on each\n// provided collection of fields. This is true because this validator traverses\n// each individual selection set.\n\nfunction collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, fieldMap1, fieldMap2) {\n  // A field map is a keyed collection, where each key represents a response\n  // name and the value at that key is a list of all fields which provide that\n  // response name. For any response name which appears in both provided field\n  // maps, each field from the first field map must be compared to every field\n  // in the second field map to find potential conflicts.\n  for (var _i7 = 0, _Object$keys2 = Object.keys(fieldMap1); _i7 < _Object$keys2.length; _i7++) {\n    var responseName = _Object$keys2[_i7];\n    var fields2 = fieldMap2[responseName];\n    if (fields2) {\n      var fields1 = fieldMap1[responseName];\n      for (var i = 0; i < fields1.length; i++) {\n        for (var j = 0; j < fields2.length; j++) {\n          var conflict = findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, responseName, fields1[i], fields2[j]);\n          if (conflict) {\n            conflicts.push(conflict);\n          }\n        }\n      }\n    }\n  }\n} // Determines if there is a conflict between two particular fields, including\n// comparing their sub-fields.\n\nfunction findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, responseName, field1, field2) {\n  var parentType1 = field1[0],\n    node1 = field1[1],\n    def1 = field1[2];\n  var parentType2 = field2[0],\n    node2 = field2[1],\n    def2 = field2[2]; // If it is known that two fields could not possibly apply at the same\n  // time, due to the parent types, then it is safe to permit them to diverge\n  // in aliased field or arguments used as they will not present any ambiguity\n  // by differing.\n  // It is known that two parent types could never overlap if they are\n  // different Object types. Interface or Union types might overlap - if not\n  // in the current state of the schema, then perhaps in some future version,\n  // thus may not safely diverge.\n\n  var areMutuallyExclusive = parentFieldsAreMutuallyExclusive || parentType1 !== parentType2 && isObjectType(parentType1) && isObjectType(parentType2);\n  if (!areMutuallyExclusive) {\n    var _node1$arguments, _node2$arguments;\n\n    // Two aliases must refer to the same field.\n    var name1 = node1.name.value;\n    var name2 = node2.name.value;\n    if (name1 !== name2) {\n      return [[responseName, \"\\\"\".concat(name1, \"\\\" and \\\"\").concat(name2, \"\\\" are different fields\")], [node1], [node2]];\n    } // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n\n    var args1 = (_node1$arguments = node1.arguments) !== null && _node1$arguments !== void 0 ? _node1$arguments : []; // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n\n    var args2 = (_node2$arguments = node2.arguments) !== null && _node2$arguments !== void 0 ? _node2$arguments : []; // Two field calls must have the same arguments.\n\n    if (!sameArguments(args1, args2)) {\n      return [[responseName, 'they have differing arguments'], [node1], [node2]];\n    }\n  } // The return type for each field.\n\n  var type1 = def1 === null || def1 === void 0 ? void 0 : def1.type;\n  var type2 = def2 === null || def2 === void 0 ? void 0 : def2.type;\n  if (type1 && type2 && doTypesConflict(type1, type2)) {\n    return [[responseName, \"they return conflicting types \\\"\".concat(inspect(type1), \"\\\" and \\\"\").concat(inspect(type2), \"\\\"\")], [node1], [node2]];\n  } // Collect and compare sub-fields. Use the same \"visited fragment names\" list\n  // for both collections so fields in a fragment reference are never\n  // compared to themselves.\n\n  var selectionSet1 = node1.selectionSet;\n  var selectionSet2 = node2.selectionSet;\n  if (selectionSet1 && selectionSet2) {\n    var conflicts = findConflictsBetweenSubSelectionSets(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, getNamedType(type1), selectionSet1, getNamedType(type2), selectionSet2);\n    return subfieldConflicts(conflicts, responseName, node1, node2);\n  }\n}\nfunction sameArguments(arguments1, arguments2) {\n  if (arguments1.length !== arguments2.length) {\n    return false;\n  }\n  return arguments1.every(function (argument1) {\n    var argument2 = find(arguments2, function (argument) {\n      return argument.name.value === argument1.name.value;\n    });\n    if (!argument2) {\n      return false;\n    }\n    return sameValue(argument1.value, argument2.value);\n  });\n}\nfunction sameValue(value1, value2) {\n  return print(value1) === print(value2);\n} // Two types conflict if both types could not apply to a value simultaneously.\n// Composite types are ignored as their individual field types will be compared\n// later recursively. However List and Non-Null types must match.\n\nfunction doTypesConflict(type1, type2) {\n  if (isListType(type1)) {\n    return isListType(type2) ? doTypesConflict(type1.ofType, type2.ofType) : true;\n  }\n  if (isListType(type2)) {\n    return true;\n  }\n  if (isNonNullType(type1)) {\n    return isNonNullType(type2) ? doTypesConflict(type1.ofType, type2.ofType) : true;\n  }\n  if (isNonNullType(type2)) {\n    return true;\n  }\n  if (isLeafType(type1) || isLeafType(type2)) {\n    return type1 !== type2;\n  }\n  return false;\n} // Given a selection set, return the collection of fields (a mapping of response\n// name to field nodes and definitions) as well as a list of fragment names\n// referenced via fragment spreads.\n\nfunction getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType, selectionSet) {\n  var cached = cachedFieldsAndFragmentNames.get(selectionSet);\n  if (!cached) {\n    var nodeAndDefs = Object.create(null);\n    var fragmentNames = Object.create(null);\n    _collectFieldsAndFragmentNames(context, parentType, selectionSet, nodeAndDefs, fragmentNames);\n    cached = [nodeAndDefs, Object.keys(fragmentNames)];\n    cachedFieldsAndFragmentNames.set(selectionSet, cached);\n  }\n  return cached;\n} // Given a reference to a fragment, return the represented collection of fields\n// as well as a list of nested fragment names referenced via fragment spreads.\n\nfunction getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment) {\n  // Short-circuit building a type from the node if possible.\n  var cached = cachedFieldsAndFragmentNames.get(fragment.selectionSet);\n  if (cached) {\n    return cached;\n  }\n  var fragmentType = typeFromAST(context.getSchema(), fragment.typeCondition);\n  return getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragmentType, fragment.selectionSet);\n}\nfunction _collectFieldsAndFragmentNames(context, parentType, selectionSet, nodeAndDefs, fragmentNames) {\n  for (var _i9 = 0, _selectionSet$selecti2 = selectionSet.selections; _i9 < _selectionSet$selecti2.length; _i9++) {\n    var selection = _selectionSet$selecti2[_i9];\n    switch (selection.kind) {\n      case Kind.FIELD:\n        {\n          var fieldName = selection.name.value;\n          var fieldDef = void 0;\n          if (isObjectType(parentType) || isInterfaceType(parentType)) {\n            fieldDef = parentType.getFields()[fieldName];\n          }\n          var responseName = selection.alias ? selection.alias.value : fieldName;\n          if (!nodeAndDefs[responseName]) {\n            nodeAndDefs[responseName] = [];\n          }\n          nodeAndDefs[responseName].push([parentType, selection, fieldDef]);\n          break;\n        }\n      case Kind.FRAGMENT_SPREAD:\n        fragmentNames[selection.name.value] = true;\n        break;\n      case Kind.INLINE_FRAGMENT:\n        {\n          var typeCondition = selection.typeCondition;\n          var inlineFragmentType = typeCondition ? typeFromAST(context.getSchema(), typeCondition) : parentType;\n          _collectFieldsAndFragmentNames(context, inlineFragmentType, selection.selectionSet, nodeAndDefs, fragmentNames);\n          break;\n        }\n    }\n  }\n} // Given a series of Conflicts which occurred between two sub-fields, generate\n// a single Conflict.\n\nfunction subfieldConflicts(conflicts, responseName, node1, node2) {\n  if (conflicts.length > 0) {\n    return [[responseName, conflicts.map(function (_ref6) {\n      var reason = _ref6[0];\n      return reason;\n    })], conflicts.reduce(function (allFields, _ref7) {\n      var fields1 = _ref7[1];\n      return allFields.concat(fields1);\n    }, [node1]), conflicts.reduce(function (allFields, _ref8) {\n      var fields2 = _ref8[2];\n      return allFields.concat(fields2);\n    }, [node2])];\n  }\n}\n/**\n * A way to keep track of pairs of things when the ordering of the pair does\n * not matter. We do this by maintaining a sort of double adjacency sets.\n */\n\nvar PairSet = /*#__PURE__*/function () {\n  function PairSet() {\n    this._data = Object.create(null);\n  }\n  var _proto = PairSet.prototype;\n  _proto.has = function has(a, b, areMutuallyExclusive) {\n    var first = this._data[a];\n    var result = first && first[b];\n    if (result === undefined) {\n      return false;\n    } // areMutuallyExclusive being false is a superset of being true,\n    // hence if we want to know if this PairSet \"has\" these two with no\n    // exclusivity, we have to ensure it was added as such.\n\n    if (areMutuallyExclusive === false) {\n      return result === false;\n    }\n    return true;\n  };\n  _proto.add = function add(a, b, areMutuallyExclusive) {\n    this._pairSetAdd(a, b, areMutuallyExclusive);\n    this._pairSetAdd(b, a, areMutuallyExclusive);\n  };\n  _proto._pairSetAdd = function _pairSetAdd(a, b, areMutuallyExclusive) {\n    var map = this._data[a];\n    if (!map) {\n      map = Object.create(null);\n      this._data[a] = map;\n    }\n    map[b] = areMutuallyExclusive;\n  };\n  return PairSet;\n}();","map":{"version":3,"names":["find","objectEntries","inspect","GraphQLError","Kind","print","getNamedType","isNonNullType","isLeafType","isObjectType","isListType","isInterfaceType","typeFromAST","reasonMessage","reason","Array","isArray","map","_ref","responseName","subReason","concat","join","OverlappingFieldsCanBeMergedRule","context","comparedFragmentPairs","PairSet","cachedFieldsAndFragmentNames","Map","SelectionSet","selectionSet","conflicts","findConflictsWithinSelectionSet","getParentType","_i2","length","_ref3","_ref2$","fields1","fields2","reasonMsg","reportError","parentType","_getFieldsAndFragment","getFieldsAndFragmentNames","fieldMap","fragmentNames","collectConflictsWithin","i","collectConflictsBetweenFieldsAndFragment","j","collectConflictsBetweenFragments","areMutuallyExclusive","fragmentName","fragment","getFragment","_getReferencedFieldsA","getReferencedFieldsAndFragmentNames","fieldMap2","fragmentNames2","collectConflictsBetween","fragmentName1","fragmentName2","has","add","fragment1","fragment2","_getReferencedFieldsA2","fieldMap1","fragmentNames1","_getReferencedFieldsA3","findConflictsBetweenSubSelectionSets","parentType1","selectionSet1","parentType2","selectionSet2","_getFieldsAndFragment2","_getFieldsAndFragment3","_i3","_j","_i5","_objectEntries2","_ref5","fields","conflict","findConflict","push","parentFieldsAreMutuallyExclusive","_i7","_Object$keys2","Object","keys","field1","field2","node1","def1","node2","def2","_node1$arguments","_node2$arguments","name1","name","value","name2","args1","arguments","args2","sameArguments","type1","type","type2","doTypesConflict","subfieldConflicts","arguments1","arguments2","every","argument1","argument2","argument","sameValue","value1","value2","ofType","cached","get","nodeAndDefs","create","_collectFieldsAndFragmentNames","set","fragmentType","getSchema","typeCondition","_i9","_selectionSet$selecti2","selections","selection","kind","FIELD","fieldName","fieldDef","getFields","alias","FRAGMENT_SPREAD","INLINE_FRAGMENT","inlineFragmentType","_ref6","reduce","allFields","_ref7","_ref8","_data","_proto","prototype","a","b","first","result","undefined","_pairSetAdd"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/graphql/validation/rules/OverlappingFieldsCanBeMergedRule.mjs"],"sourcesContent":["import find from \"../../polyfills/find.mjs\";\nimport objectEntries from \"../../polyfills/objectEntries.mjs\";\nimport inspect from \"../../jsutils/inspect.mjs\";\nimport { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { Kind } from \"../../language/kinds.mjs\";\nimport { print } from \"../../language/printer.mjs\";\nimport { getNamedType, isNonNullType, isLeafType, isObjectType, isListType, isInterfaceType } from \"../../type/definition.mjs\";\nimport { typeFromAST } from \"../../utilities/typeFromAST.mjs\";\n\nfunction reasonMessage(reason) {\n  if (Array.isArray(reason)) {\n    return reason.map(function (_ref) {\n      var responseName = _ref[0],\n          subReason = _ref[1];\n      return \"subfields \\\"\".concat(responseName, \"\\\" conflict because \") + reasonMessage(subReason);\n    }).join(' and ');\n  }\n\n  return reason;\n}\n/**\n * Overlapping fields can be merged\n *\n * A selection set is only valid if all fields (including spreading any\n * fragments) either correspond to distinct response names or can be merged\n * without ambiguity.\n */\n\n\nexport function OverlappingFieldsCanBeMergedRule(context) {\n  // A memoization for when two fragments are compared \"between\" each other for\n  // conflicts. Two fragments may be compared many times, so memoizing this can\n  // dramatically improve the performance of this validator.\n  var comparedFragmentPairs = new PairSet(); // A cache for the \"field map\" and list of fragment names found in any given\n  // selection set. Selection sets may be asked for this information multiple\n  // times, so this improves the performance of this validator.\n\n  var cachedFieldsAndFragmentNames = new Map();\n  return {\n    SelectionSet: function SelectionSet(selectionSet) {\n      var conflicts = findConflictsWithinSelectionSet(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, context.getParentType(), selectionSet);\n\n      for (var _i2 = 0; _i2 < conflicts.length; _i2++) {\n        var _ref3 = conflicts[_i2];\n        var _ref2$ = _ref3[0];\n        var responseName = _ref2$[0];\n        var reason = _ref2$[1];\n        var fields1 = _ref3[1];\n        var fields2 = _ref3[2];\n        var reasonMsg = reasonMessage(reason);\n        context.reportError(new GraphQLError(\"Fields \\\"\".concat(responseName, \"\\\" conflict because \").concat(reasonMsg, \". Use different aliases on the fields to fetch both if this was intentional.\"), fields1.concat(fields2)));\n      }\n    }\n  };\n}\n\n/**\n * Algorithm:\n *\n * Conflicts occur when two fields exist in a query which will produce the same\n * response name, but represent differing values, thus creating a conflict.\n * The algorithm below finds all conflicts via making a series of comparisons\n * between fields. In order to compare as few fields as possible, this makes\n * a series of comparisons \"within\" sets of fields and \"between\" sets of fields.\n *\n * Given any selection set, a collection produces both a set of fields by\n * also including all inline fragments, as well as a list of fragments\n * referenced by fragment spreads.\n *\n * A) Each selection set represented in the document first compares \"within\" its\n * collected set of fields, finding any conflicts between every pair of\n * overlapping fields.\n * Note: This is the *only time* that a the fields \"within\" a set are compared\n * to each other. After this only fields \"between\" sets are compared.\n *\n * B) Also, if any fragment is referenced in a selection set, then a\n * comparison is made \"between\" the original set of fields and the\n * referenced fragment.\n *\n * C) Also, if multiple fragments are referenced, then comparisons\n * are made \"between\" each referenced fragment.\n *\n * D) When comparing \"between\" a set of fields and a referenced fragment, first\n * a comparison is made between each field in the original set of fields and\n * each field in the the referenced set of fields.\n *\n * E) Also, if any fragment is referenced in the referenced selection set,\n * then a comparison is made \"between\" the original set of fields and the\n * referenced fragment (recursively referring to step D).\n *\n * F) When comparing \"between\" two fragments, first a comparison is made between\n * each field in the first referenced set of fields and each field in the the\n * second referenced set of fields.\n *\n * G) Also, any fragments referenced by the first must be compared to the\n * second, and any fragments referenced by the second must be compared to the\n * first (recursively referring to step F).\n *\n * H) When comparing two fields, if both have selection sets, then a comparison\n * is made \"between\" both selection sets, first comparing the set of fields in\n * the first selection set with the set of fields in the second.\n *\n * I) Also, if any fragment is referenced in either selection set, then a\n * comparison is made \"between\" the other set of fields and the\n * referenced fragment.\n *\n * J) Also, if two fragments are referenced in both selection sets, then a\n * comparison is made \"between\" the two fragments.\n *\n */\n// Find all conflicts found \"within\" a selection set, including those found\n// via spreading in fragments. Called when visiting each SelectionSet in the\n// GraphQL Document.\nfunction findConflictsWithinSelectionSet(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentType, selectionSet) {\n  var conflicts = [];\n\n  var _getFieldsAndFragment = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType, selectionSet),\n      fieldMap = _getFieldsAndFragment[0],\n      fragmentNames = _getFieldsAndFragment[1]; // (A) Find find all conflicts \"within\" the fields of this selection set.\n  // Note: this is the *only place* `collectConflictsWithin` is called.\n\n\n  collectConflictsWithin(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, fieldMap);\n\n  if (fragmentNames.length !== 0) {\n    // (B) Then collect conflicts between these fields and those represented by\n    // each spread fragment name found.\n    for (var i = 0; i < fragmentNames.length; i++) {\n      collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, false, fieldMap, fragmentNames[i]); // (C) Then compare this fragment with all other fragments found in this\n      // selection set to collect conflicts between fragments spread together.\n      // This compares each item in the list of fragment names to every other\n      // item in that same list (except for itself).\n\n      for (var j = i + 1; j < fragmentNames.length; j++) {\n        collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, false, fragmentNames[i], fragmentNames[j]);\n      }\n    }\n  }\n\n  return conflicts;\n} // Collect all conflicts found between a set of fields and a fragment reference\n// including via spreading in any nested fragments.\n\n\nfunction collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fragmentName) {\n  var fragment = context.getFragment(fragmentName);\n\n  if (!fragment) {\n    return;\n  }\n\n  var _getReferencedFieldsA = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment),\n      fieldMap2 = _getReferencedFieldsA[0],\n      fragmentNames2 = _getReferencedFieldsA[1]; // Do not compare a fragment's fieldMap to itself.\n\n\n  if (fieldMap === fieldMap2) {\n    return;\n  } // (D) First collect any conflicts between the provided collection of fields\n  // and the collection of fields represented by the given fragment.\n\n\n  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fieldMap2); // (E) Then collect any conflicts between the provided collection of fields\n  // and any fragment names found in the given fragment.\n\n  for (var i = 0; i < fragmentNames2.length; i++) {\n    collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fragmentNames2[i]);\n  }\n} // Collect all conflicts found between two fragments, including via spreading in\n// any nested fragments.\n\n\nfunction collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentName1, fragmentName2) {\n  // No need to compare a fragment to itself.\n  if (fragmentName1 === fragmentName2) {\n    return;\n  } // Memoize so two fragments are not compared for conflicts more than once.\n\n\n  if (comparedFragmentPairs.has(fragmentName1, fragmentName2, areMutuallyExclusive)) {\n    return;\n  }\n\n  comparedFragmentPairs.add(fragmentName1, fragmentName2, areMutuallyExclusive);\n  var fragment1 = context.getFragment(fragmentName1);\n  var fragment2 = context.getFragment(fragmentName2);\n\n  if (!fragment1 || !fragment2) {\n    return;\n  }\n\n  var _getReferencedFieldsA2 = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment1),\n      fieldMap1 = _getReferencedFieldsA2[0],\n      fragmentNames1 = _getReferencedFieldsA2[1];\n\n  var _getReferencedFieldsA3 = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment2),\n      fieldMap2 = _getReferencedFieldsA3[0],\n      fragmentNames2 = _getReferencedFieldsA3[1]; // (F) First, collect all conflicts between these two collections of fields\n  // (not including any nested fragments).\n\n\n  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fieldMap2); // (G) Then collect conflicts between the first fragment and any nested\n  // fragments spread in the second fragment.\n\n  for (var j = 0; j < fragmentNames2.length; j++) {\n    collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentName1, fragmentNames2[j]);\n  } // (G) Then collect conflicts between the second fragment and any nested\n  // fragments spread in the first fragment.\n\n\n  for (var i = 0; i < fragmentNames1.length; i++) {\n    collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentNames1[i], fragmentName2);\n  }\n} // Find all conflicts found between two selection sets, including those found\n// via spreading in fragments. Called when determining if conflicts exist\n// between the sub-fields of two overlapping fields.\n\n\nfunction findConflictsBetweenSubSelectionSets(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, parentType1, selectionSet1, parentType2, selectionSet2) {\n  var conflicts = [];\n\n  var _getFieldsAndFragment2 = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType1, selectionSet1),\n      fieldMap1 = _getFieldsAndFragment2[0],\n      fragmentNames1 = _getFieldsAndFragment2[1];\n\n  var _getFieldsAndFragment3 = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType2, selectionSet2),\n      fieldMap2 = _getFieldsAndFragment3[0],\n      fragmentNames2 = _getFieldsAndFragment3[1]; // (H) First, collect all conflicts between these two collections of field.\n\n\n  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fieldMap2); // (I) Then collect conflicts between the first collection of fields and\n  // those referenced by each fragment name associated with the second.\n\n  if (fragmentNames2.length !== 0) {\n    for (var j = 0; j < fragmentNames2.length; j++) {\n      collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fragmentNames2[j]);\n    }\n  } // (I) Then collect conflicts between the second collection of fields and\n  // those referenced by each fragment name associated with the first.\n\n\n  if (fragmentNames1.length !== 0) {\n    for (var i = 0; i < fragmentNames1.length; i++) {\n      collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap2, fragmentNames1[i]);\n    }\n  } // (J) Also collect conflicts between any fragment names by the first and\n  // fragment names by the second. This compares each item in the first set of\n  // names to each item in the second set of names.\n\n\n  for (var _i3 = 0; _i3 < fragmentNames1.length; _i3++) {\n    for (var _j = 0; _j < fragmentNames2.length; _j++) {\n      collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentNames1[_i3], fragmentNames2[_j]);\n    }\n  }\n\n  return conflicts;\n} // Collect all Conflicts \"within\" one collection of fields.\n\n\nfunction collectConflictsWithin(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, fieldMap) {\n  // A field map is a keyed collection, where each key represents a response\n  // name and the value at that key is a list of all fields which provide that\n  // response name. For every response name, if there are multiple fields, they\n  // must be compared to find a potential conflict.\n  for (var _i5 = 0, _objectEntries2 = objectEntries(fieldMap); _i5 < _objectEntries2.length; _i5++) {\n    var _ref5 = _objectEntries2[_i5];\n    var responseName = _ref5[0];\n    var fields = _ref5[1];\n\n    // This compares every field in the list to every other field in this list\n    // (except to itself). If the list only has one item, nothing needs to\n    // be compared.\n    if (fields.length > 1) {\n      for (var i = 0; i < fields.length; i++) {\n        for (var j = i + 1; j < fields.length; j++) {\n          var conflict = findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, false, // within one collection is never mutually exclusive\n          responseName, fields[i], fields[j]);\n\n          if (conflict) {\n            conflicts.push(conflict);\n          }\n        }\n      }\n    }\n  }\n} // Collect all Conflicts between two collections of fields. This is similar to,\n// but different from the `collectConflictsWithin` function above. This check\n// assumes that `collectConflictsWithin` has already been called on each\n// provided collection of fields. This is true because this validator traverses\n// each individual selection set.\n\n\nfunction collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, fieldMap1, fieldMap2) {\n  // A field map is a keyed collection, where each key represents a response\n  // name and the value at that key is a list of all fields which provide that\n  // response name. For any response name which appears in both provided field\n  // maps, each field from the first field map must be compared to every field\n  // in the second field map to find potential conflicts.\n  for (var _i7 = 0, _Object$keys2 = Object.keys(fieldMap1); _i7 < _Object$keys2.length; _i7++) {\n    var responseName = _Object$keys2[_i7];\n    var fields2 = fieldMap2[responseName];\n\n    if (fields2) {\n      var fields1 = fieldMap1[responseName];\n\n      for (var i = 0; i < fields1.length; i++) {\n        for (var j = 0; j < fields2.length; j++) {\n          var conflict = findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, responseName, fields1[i], fields2[j]);\n\n          if (conflict) {\n            conflicts.push(conflict);\n          }\n        }\n      }\n    }\n  }\n} // Determines if there is a conflict between two particular fields, including\n// comparing their sub-fields.\n\n\nfunction findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, responseName, field1, field2) {\n  var parentType1 = field1[0],\n      node1 = field1[1],\n      def1 = field1[2];\n  var parentType2 = field2[0],\n      node2 = field2[1],\n      def2 = field2[2]; // If it is known that two fields could not possibly apply at the same\n  // time, due to the parent types, then it is safe to permit them to diverge\n  // in aliased field or arguments used as they will not present any ambiguity\n  // by differing.\n  // It is known that two parent types could never overlap if they are\n  // different Object types. Interface or Union types might overlap - if not\n  // in the current state of the schema, then perhaps in some future version,\n  // thus may not safely diverge.\n\n  var areMutuallyExclusive = parentFieldsAreMutuallyExclusive || parentType1 !== parentType2 && isObjectType(parentType1) && isObjectType(parentType2);\n\n  if (!areMutuallyExclusive) {\n    var _node1$arguments, _node2$arguments;\n\n    // Two aliases must refer to the same field.\n    var name1 = node1.name.value;\n    var name2 = node2.name.value;\n\n    if (name1 !== name2) {\n      return [[responseName, \"\\\"\".concat(name1, \"\\\" and \\\"\").concat(name2, \"\\\" are different fields\")], [node1], [node2]];\n    } // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n\n\n    var args1 = (_node1$arguments = node1.arguments) !== null && _node1$arguments !== void 0 ? _node1$arguments : []; // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n\n    var args2 = (_node2$arguments = node2.arguments) !== null && _node2$arguments !== void 0 ? _node2$arguments : []; // Two field calls must have the same arguments.\n\n    if (!sameArguments(args1, args2)) {\n      return [[responseName, 'they have differing arguments'], [node1], [node2]];\n    }\n  } // The return type for each field.\n\n\n  var type1 = def1 === null || def1 === void 0 ? void 0 : def1.type;\n  var type2 = def2 === null || def2 === void 0 ? void 0 : def2.type;\n\n  if (type1 && type2 && doTypesConflict(type1, type2)) {\n    return [[responseName, \"they return conflicting types \\\"\".concat(inspect(type1), \"\\\" and \\\"\").concat(inspect(type2), \"\\\"\")], [node1], [node2]];\n  } // Collect and compare sub-fields. Use the same \"visited fragment names\" list\n  // for both collections so fields in a fragment reference are never\n  // compared to themselves.\n\n\n  var selectionSet1 = node1.selectionSet;\n  var selectionSet2 = node2.selectionSet;\n\n  if (selectionSet1 && selectionSet2) {\n    var conflicts = findConflictsBetweenSubSelectionSets(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, getNamedType(type1), selectionSet1, getNamedType(type2), selectionSet2);\n    return subfieldConflicts(conflicts, responseName, node1, node2);\n  }\n}\n\nfunction sameArguments(arguments1, arguments2) {\n  if (arguments1.length !== arguments2.length) {\n    return false;\n  }\n\n  return arguments1.every(function (argument1) {\n    var argument2 = find(arguments2, function (argument) {\n      return argument.name.value === argument1.name.value;\n    });\n\n    if (!argument2) {\n      return false;\n    }\n\n    return sameValue(argument1.value, argument2.value);\n  });\n}\n\nfunction sameValue(value1, value2) {\n  return print(value1) === print(value2);\n} // Two types conflict if both types could not apply to a value simultaneously.\n// Composite types are ignored as their individual field types will be compared\n// later recursively. However List and Non-Null types must match.\n\n\nfunction doTypesConflict(type1, type2) {\n  if (isListType(type1)) {\n    return isListType(type2) ? doTypesConflict(type1.ofType, type2.ofType) : true;\n  }\n\n  if (isListType(type2)) {\n    return true;\n  }\n\n  if (isNonNullType(type1)) {\n    return isNonNullType(type2) ? doTypesConflict(type1.ofType, type2.ofType) : true;\n  }\n\n  if (isNonNullType(type2)) {\n    return true;\n  }\n\n  if (isLeafType(type1) || isLeafType(type2)) {\n    return type1 !== type2;\n  }\n\n  return false;\n} // Given a selection set, return the collection of fields (a mapping of response\n// name to field nodes and definitions) as well as a list of fragment names\n// referenced via fragment spreads.\n\n\nfunction getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType, selectionSet) {\n  var cached = cachedFieldsAndFragmentNames.get(selectionSet);\n\n  if (!cached) {\n    var nodeAndDefs = Object.create(null);\n    var fragmentNames = Object.create(null);\n\n    _collectFieldsAndFragmentNames(context, parentType, selectionSet, nodeAndDefs, fragmentNames);\n\n    cached = [nodeAndDefs, Object.keys(fragmentNames)];\n    cachedFieldsAndFragmentNames.set(selectionSet, cached);\n  }\n\n  return cached;\n} // Given a reference to a fragment, return the represented collection of fields\n// as well as a list of nested fragment names referenced via fragment spreads.\n\n\nfunction getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment) {\n  // Short-circuit building a type from the node if possible.\n  var cached = cachedFieldsAndFragmentNames.get(fragment.selectionSet);\n\n  if (cached) {\n    return cached;\n  }\n\n  var fragmentType = typeFromAST(context.getSchema(), fragment.typeCondition);\n  return getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragmentType, fragment.selectionSet);\n}\n\nfunction _collectFieldsAndFragmentNames(context, parentType, selectionSet, nodeAndDefs, fragmentNames) {\n  for (var _i9 = 0, _selectionSet$selecti2 = selectionSet.selections; _i9 < _selectionSet$selecti2.length; _i9++) {\n    var selection = _selectionSet$selecti2[_i9];\n\n    switch (selection.kind) {\n      case Kind.FIELD:\n        {\n          var fieldName = selection.name.value;\n          var fieldDef = void 0;\n\n          if (isObjectType(parentType) || isInterfaceType(parentType)) {\n            fieldDef = parentType.getFields()[fieldName];\n          }\n\n          var responseName = selection.alias ? selection.alias.value : fieldName;\n\n          if (!nodeAndDefs[responseName]) {\n            nodeAndDefs[responseName] = [];\n          }\n\n          nodeAndDefs[responseName].push([parentType, selection, fieldDef]);\n          break;\n        }\n\n      case Kind.FRAGMENT_SPREAD:\n        fragmentNames[selection.name.value] = true;\n        break;\n\n      case Kind.INLINE_FRAGMENT:\n        {\n          var typeCondition = selection.typeCondition;\n          var inlineFragmentType = typeCondition ? typeFromAST(context.getSchema(), typeCondition) : parentType;\n\n          _collectFieldsAndFragmentNames(context, inlineFragmentType, selection.selectionSet, nodeAndDefs, fragmentNames);\n\n          break;\n        }\n    }\n  }\n} // Given a series of Conflicts which occurred between two sub-fields, generate\n// a single Conflict.\n\n\nfunction subfieldConflicts(conflicts, responseName, node1, node2) {\n  if (conflicts.length > 0) {\n    return [[responseName, conflicts.map(function (_ref6) {\n      var reason = _ref6[0];\n      return reason;\n    })], conflicts.reduce(function (allFields, _ref7) {\n      var fields1 = _ref7[1];\n      return allFields.concat(fields1);\n    }, [node1]), conflicts.reduce(function (allFields, _ref8) {\n      var fields2 = _ref8[2];\n      return allFields.concat(fields2);\n    }, [node2])];\n  }\n}\n/**\n * A way to keep track of pairs of things when the ordering of the pair does\n * not matter. We do this by maintaining a sort of double adjacency sets.\n */\n\n\nvar PairSet = /*#__PURE__*/function () {\n  function PairSet() {\n    this._data = Object.create(null);\n  }\n\n  var _proto = PairSet.prototype;\n\n  _proto.has = function has(a, b, areMutuallyExclusive) {\n    var first = this._data[a];\n    var result = first && first[b];\n\n    if (result === undefined) {\n      return false;\n    } // areMutuallyExclusive being false is a superset of being true,\n    // hence if we want to know if this PairSet \"has\" these two with no\n    // exclusivity, we have to ensure it was added as such.\n\n\n    if (areMutuallyExclusive === false) {\n      return result === false;\n    }\n\n    return true;\n  };\n\n  _proto.add = function add(a, b, areMutuallyExclusive) {\n    this._pairSetAdd(a, b, areMutuallyExclusive);\n\n    this._pairSetAdd(b, a, areMutuallyExclusive);\n  };\n\n  _proto._pairSetAdd = function _pairSetAdd(a, b, areMutuallyExclusive) {\n    var map = this._data[a];\n\n    if (!map) {\n      map = Object.create(null);\n      this._data[a] = map;\n    }\n\n    map[b] = areMutuallyExclusive;\n  };\n\n  return PairSet;\n}();\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}