{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Divider/divider';\nimport { formatBreakpointMods } from '../../helpers/util';\nexport var DividerVariant;\n(function (DividerVariant) {\n  DividerVariant[\"hr\"] = \"hr\";\n  DividerVariant[\"li\"] = \"li\";\n  DividerVariant[\"div\"] = \"div\";\n})(DividerVariant || (DividerVariant = {}));\nexport var Divider = function Divider(_a) {\n  var className = _a.className,\n    _a$component = _a.component,\n    component = _a$component === void 0 ? DividerVariant.hr : _a$component,\n    _a$isVertical = _a.isVertical,\n    isVertical = _a$isVertical === void 0 ? false : _a$isVertical,\n    inset = _a.inset,\n    orientation = _a.orientation,\n    props = __rest(_a, [\"className\", \"component\", \"isVertical\", \"inset\", \"orientation\"]);\n  var Component = component;\n  return React.createElement(Component, Object.assign({\n    className: css(styles.divider, isVertical && styles.modifiers.vertical, formatBreakpointMods(inset, styles), formatBreakpointMods(orientation, styles), className)\n  }, component !== 'hr' && {\n    role: 'separator'\n  }, props));\n};\nDivider.displayName = 'Divider';","map":{"version":3,"names":["React","css","styles","formatBreakpointMods","DividerVariant","Divider","_a","className","_a$component","component","hr","_a$isVertical","isVertical","inset","orientation","props","__rest","Component","createElement","Object","assign","divider","modifiers","vertical","role","displayName"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@patternfly/react-core/src/components/Divider/Divider.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Divider/divider';\nimport { formatBreakpointMods } from '../../helpers/util';\n\nexport enum DividerVariant {\n  hr = 'hr',\n  li = 'li',\n  div = 'div'\n}\n\nexport interface DividerProps extends React.HTMLProps<HTMLElement> {\n  /** Additional classes added to the divider */\n  className?: string;\n  /** The component type to use */\n  component?: 'hr' | 'li' | 'div';\n  /** @deprecated Use `orientation` instead. Flag to indicate the divider is vertical (must be in a flex layout) */\n  isVertical?: boolean;\n  /** Insets at various breakpoints. */\n  inset?: {\n    default?: 'insetNone' | 'insetXs' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl' | 'inset3xl';\n    sm?: 'insetNone' | 'insetXs' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl' | 'inset3xl';\n    md?: 'insetNone' | 'insetXs' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl' | 'inset3xl';\n    lg?: 'insetNone' | 'insetXs' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl' | 'inset3xl';\n    xl?: 'insetNone' | 'insetXs' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl' | 'inset3xl';\n    '2xl'?: 'insetNone' | 'insetXs' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl' | 'inset3xl';\n  };\n  /** Indicates how the divider will display at various breakpoints. Vertical divider must be in a flex layout. */\n  orientation?: {\n    default?: 'vertical' | 'horizontal';\n    sm?: 'vertical' | 'horizontal';\n    md?: 'vertical' | 'horizontal';\n    lg?: 'vertical' | 'horizontal';\n    xl?: 'vertical' | 'horizontal';\n    '2xl'?: 'vertical' | 'horizontal';\n  };\n}\n\nexport const Divider: React.FunctionComponent<DividerProps> = ({\n  className,\n  component = DividerVariant.hr,\n  isVertical = false,\n  inset,\n  orientation,\n  ...props\n}: DividerProps) => {\n  const Component: any = component;\n\n  return (\n    <Component\n      className={css(\n        styles.divider,\n        isVertical && styles.modifiers.vertical,\n        formatBreakpointMods(inset, styles),\n        formatBreakpointMods(orientation, styles),\n        className\n      )}\n      {...(component !== 'hr' && { role: 'separator' })}\n      {...props}\n    />\n  );\n};\nDivider.displayName = 'Divider';\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,GAAG,QAAQ,0BAA0B;AAC9C,OAAOC,MAAM,MAAM,yDAAyD;AAC5E,SAASC,oBAAoB,QAAQ,oBAAoB;AAEzD,WAAYC,cAIX;AAJD,WAAYA,cAAc;EACxBA,cAAA,aAAS;EACTA,cAAA,aAAS;EACTA,cAAA,eAAW;AACb,CAAC,EAJWA,cAAc,KAAdA,cAAc;AAiC1B,OAAO,IAAMC,OAAO,GAA0C,SAAjDA,OAAOA,CAA2CC,EAOhD,EAAI;MANjBC,SAAS,GAIED,EAEE,CANbC,SAAS;IAAAC,YAAA,GAIEF,EAEE,CALbG,SAAS;IAATA,SAAS,GAAAD,YAAA,cAAGJ,cAAc,CAACM,EAAE,GAAAF,YAAA;IAAAG,aAAA,GAGlBL,EAEE,CAJbM,UAAU;IAAVA,UAAU,GAAAD,aAAA,cAAG,KAAK,GAAAA,aAAA;IAClBE,KAAK,GACMP,EAEE,CAHbO,KAAK;IACLC,WAAW,GAAAR,EAEE,CAFbQ,WAAW;IACRC,KAAK,GAAAC,MAAA,CAAAV,EAAA,EANqD,gEAO9D,CADS;EAER,IAAMW,SAAS,GAAQR,SAAS;EAEhC,OACET,KAAA,CAAAkB,aAAA,CAACD,SAAS,EAAAE,MAAA,CAAAC,MAAA;IACRb,SAAS,EAAEN,GAAG,CACZC,MAAM,CAACmB,OAAO,EACdT,UAAU,IAAIV,MAAM,CAACoB,SAAS,CAACC,QAAQ,EACvCpB,oBAAoB,CAACU,KAAK,EAAEX,MAAM,CAAC,EACnCC,oBAAoB,CAACW,WAAW,EAAEZ,MAAM,CAAC,EACzCK,SAAS;EACV,GACIE,SAAS,KAAK,IAAI,IAAI;IAAEe,IAAI,EAAE;EAAW,CAAE,EAC5CT,KAAK,EACT;AAEN,CAAC;AACDV,OAAO,CAACoB,WAAW,GAAG,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}