{"ast":null,"code":"import { __extends, __spreadArray } from \"tslib\";\nimport \"../utilities/globals/index.js\";\nimport { isNonNullObject } from \"../utilities/index.js\";\nexport var PROTOCOL_ERRORS_SYMBOL = Symbol();\nexport function graphQLResultHasProtocolErrors(result) {\n  if (result.extensions) {\n    return Array.isArray(result.extensions[PROTOCOL_ERRORS_SYMBOL]);\n  }\n  return false;\n}\nexport function isApolloError(err) {\n  return err.hasOwnProperty('graphQLErrors');\n}\nvar generateErrorMessage = function generateErrorMessage(err) {\n  var errors = __spreadArray(__spreadArray(__spreadArray([], err.graphQLErrors, true), err.clientErrors, true), err.protocolErrors, true);\n  if (err.networkError) errors.push(err.networkError);\n  return errors.map(function (err) {\n    return isNonNullObject(err) && err.message || 'Error message not found.';\n  }).join('\\n');\n};\nvar ApolloError = function (_super) {\n  __extends(ApolloError, _super);\n  function ApolloError(_a) {\n    var graphQLErrors = _a.graphQLErrors,\n      protocolErrors = _a.protocolErrors,\n      clientErrors = _a.clientErrors,\n      networkError = _a.networkError,\n      errorMessage = _a.errorMessage,\n      extraInfo = _a.extraInfo;\n    var _this = _super.call(this, errorMessage) || this;\n    _this.name = 'ApolloError';\n    _this.graphQLErrors = graphQLErrors || [];\n    _this.protocolErrors = protocolErrors || [];\n    _this.clientErrors = clientErrors || [];\n    _this.networkError = networkError || null;\n    _this.message = errorMessage || generateErrorMessage(_this);\n    _this.extraInfo = extraInfo;\n    _this.__proto__ = ApolloError.prototype;\n    return _this;\n  }\n  return ApolloError;\n}(Error);\nexport { ApolloError };","map":{"version":3,"names":["isNonNullObject","PROTOCOL_ERRORS_SYMBOL","Symbol","graphQLResultHasProtocolErrors","result","extensions","Array","isArray","isApolloError","err","hasOwnProperty","generateErrorMessage","errors","__spreadArray","graphQLErrors","clientErrors","protocolErrors","networkError","push","map","message","join","ApolloError","_super","__extends","_a","errorMessage","extraInfo","_this","call","name","__proto__","prototype","Error"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@apollo/src/errors/index.ts"],"sourcesContent":["import '../utilities/globals';\n\nimport { GraphQLError, GraphQLErrorExtensions } from 'graphql';\n\nimport { isNonNullObject } from '../utilities';\nimport { ServerParseError } from '../link/http';\nimport { ServerError } from '../link/utils';\nimport { FetchResult } from \"../link/core\";\n\n// This Symbol allows us to pass transport-specific errors from the link chain\n// into QueryManager/client internals without risking a naming collision within\n// extensions (which implementers can use as they see fit).\nexport const PROTOCOL_ERRORS_SYMBOL: unique symbol = Symbol();\n\ntype FetchResultWithSymbolExtensions<T> = FetchResult<T> & {\n  extensions: Record<string | symbol, any>\n};\n\nexport interface ApolloErrorOptions {\n  graphQLErrors?: ReadonlyArray<GraphQLError>;\n  protocolErrors?: ReadonlyArray<{\n    message: string;\n    extensions?: GraphQLErrorExtensions[];\n  }>;\n  clientErrors?: ReadonlyArray<Error>;\n  networkError?: Error | ServerParseError | ServerError | null;\n  errorMessage?: string;\n  extraInfo?: any;\n}\n\nexport function graphQLResultHasProtocolErrors<T>(\n  result: FetchResult<T>\n): result is FetchResultWithSymbolExtensions<T> {\n  if (result.extensions) {\n    return Array.isArray(\n      (result as FetchResultWithSymbolExtensions<T>).extensions[\n        PROTOCOL_ERRORS_SYMBOL\n      ]\n    );\n  }\n  return false;\n}\n\n\nexport function isApolloError(err: Error): err is ApolloError {\n  return err.hasOwnProperty('graphQLErrors');\n}\n\n// Sets the error message on this error according to the\n// the GraphQL and network errors that are present.\n// If the error message has already been set through the\n// constructor or otherwise, this function is a nop.\nconst generateErrorMessage = (err: ApolloError) => {\n  const errors = [\n    ...err.graphQLErrors,\n    ...err.clientErrors,\n    ...err.protocolErrors\n  ];\n  if (err.networkError) errors.push(err.networkError);\n  return errors\n    // The rest of the code sometimes unsafely types non-Error objects as GraphQLErrors\n    .map(err => isNonNullObject(err) && err.message || 'Error message not found.')\n    .join('\\n');\n};\n\nexport type GraphQLErrors = ReadonlyArray<GraphQLError>;\n\nexport type NetworkError = Error | ServerParseError | ServerError | null;\n\nexport class ApolloError extends Error {\n  public name: string;\n  public message: string;\n  public graphQLErrors: GraphQLErrors;\n  public protocolErrors: ReadonlyArray<{\n    message: string;\n    extensions?: GraphQLErrorExtensions[];\n  }>;\n  public clientErrors: ReadonlyArray<Error>;\n  public networkError: Error | ServerParseError | ServerError | null;\n\n  // An object that can be used to provide some additional information\n  // about an error, e.g. specifying the type of error this is. Used\n  // internally within Apollo Client.\n  public extraInfo: any;\n\n  // Constructs an instance of ApolloError given a GraphQLError\n  // or a network error. Note that one of these has to be a valid\n  // value or the constructed error will be meaningless.\n  constructor({\n    graphQLErrors,\n    protocolErrors,\n    clientErrors,\n    networkError,\n    errorMessage,\n    extraInfo,\n  }: ApolloErrorOptions) {\n    super(errorMessage);\n    this.name = 'ApolloError';\n    this.graphQLErrors = graphQLErrors || [];\n    this.protocolErrors = protocolErrors || [];\n    this.clientErrors = clientErrors || [];\n    this.networkError = networkError || null;\n    this.message = errorMessage || generateErrorMessage(this);\n    this.extraInfo = extraInfo;\n\n    // We're not using `Object.setPrototypeOf` here as it isn't fully\n    // supported on Android (see issue #3236).\n    (this as any).__proto__ = ApolloError.prototype;\n  }\n}\n"],"mappings":";AAAA,OAAO,+BAAuB;AAI9B,SAASA,eAAe,QAAQ,uBAAe;AAQ/C,OAAO,IAAMC,sBAAsB,GAAkBC,MAAM,EAAE;AAkB7D,OAAM,SAAUC,8BAA8BA,CAC5CC,MAAsB;EAEtB,IAAIA,MAAM,CAACC,UAAU,EAAE;IACrB,OAAOC,KAAK,CAACC,OAAO,CACjBH,MAA6C,CAACC,UAAU,CACvDJ,sBAAsB,CACvB,CACF;;EAEH,OAAO,KAAK;AACd;AAGA,OAAM,SAAUO,aAAaA,CAACC,GAAU;EACtC,OAAOA,GAAG,CAACC,cAAc,CAAC,eAAe,CAAC;AAC5C;AAMA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAoBA,CAAIF,GAAgB;EAC5C,IAAMG,MAAM,GAAAC,aAAA,CAAAA,aAAA,CAAAA,aAAA,KACPJ,GAAG,CAACK,aAAa,SACjBL,GAAG,CAACM,YAAY,SAChBN,GAAG,CAACO,cAAc,OACtB;EACD,IAAIP,GAAG,CAACQ,YAAY,EAAEL,MAAM,CAACM,IAAI,CAACT,GAAG,CAACQ,YAAY,CAAC;EACnD,OAAOL,MAAM,CAEVO,GAAG,CAAC,UAAAV,GAAG;IAAI,OAAAT,eAAe,CAACS,GAAG,CAAC,IAAIA,GAAG,CAACW,OAAO,IAAI,0BAA0B;EAAjE,CAAiE,CAAC,CAC7EC,IAAI,CAAC,IAAI,CAAC;AACf,CAAC;AAMD,IAAAC,WAAA,aAAAC,MAAA;EAAiCC,SAAA,CAAAF,WAAA,EAAAC,MAAA;EAmB/B,SAAAD,YAAYG,EAOS;QANnBX,aAAa,GAAAW,EAAA,CAAAX,aAAA;MACbE,cAAc,GAAAS,EAAA,CAAAT,cAAA;MACdD,YAAY,GAAAU,EAAA,CAAAV,YAAA;MACZE,YAAY,GAAAQ,EAAA,CAAAR,YAAA;MACZS,YAAY,GAAAD,EAAA,CAAAC,YAAA;MACZC,SAAS,GAAAF,EAAA,CAAAE,SAAA;IANX,IAAAC,KAAA,GAQEL,MAAA,CAAAM,IAAA,OAAMH,YAAY,CAAC;IACnBE,KAAI,CAACE,IAAI,GAAG,aAAa;IACzBF,KAAI,CAACd,aAAa,GAAGA,aAAa,IAAI,EAAE;IACxCc,KAAI,CAACZ,cAAc,GAAGA,cAAc,IAAI,EAAE;IAC1CY,KAAI,CAACb,YAAY,GAAGA,YAAY,IAAI,EAAE;IACtCa,KAAI,CAACX,YAAY,GAAGA,YAAY,IAAI,IAAI;IACxCW,KAAI,CAACR,OAAO,GAAGM,YAAY,IAAIf,oBAAoB,CAACiB,KAAI,CAAC;IACzDA,KAAI,CAACD,SAAS,GAAGA,SAAS;IAIzBC,KAAY,CAACG,SAAS,GAAGT,WAAW,CAACU,SAAS;;EACjD;EACF,OAAAV,WAAC;AAAD,CAAC,CAxCgCW,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}