{"ast":null,"code":"import { __assign, __spreadArray } from \"tslib\";\nimport { isNonNullObject } from \"./objects.js\";\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nexport function mergeDeep() {\n  var sources = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    sources[_i] = arguments[_i];\n  }\n  return mergeDeepArray(sources);\n}\nexport function mergeDeepArray(sources) {\n  var target = sources[0] || {};\n  var count = sources.length;\n  if (count > 1) {\n    var merger = new DeepMerger();\n    for (var i = 1; i < count; ++i) {\n      target = merger.merge(target, sources[i]);\n    }\n  }\n  return target;\n}\nvar defaultReconciler = function defaultReconciler(target, source, property) {\n  return this.merge(target[property], source[property]);\n};\nvar DeepMerger = function () {\n  function DeepMerger(reconciler) {\n    if (reconciler === void 0) {\n      reconciler = defaultReconciler;\n    }\n    this.reconciler = reconciler;\n    this.isObject = isNonNullObject;\n    this.pastCopies = new Set();\n  }\n  DeepMerger.prototype.merge = function (target, source) {\n    var _this = this;\n    var context = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n      context[_i - 2] = arguments[_i];\n    }\n    if (isNonNullObject(source) && isNonNullObject(target)) {\n      Object.keys(source).forEach(function (sourceKey) {\n        if (hasOwnProperty.call(target, sourceKey)) {\n          var targetValue = target[sourceKey];\n          if (source[sourceKey] !== targetValue) {\n            var result = _this.reconciler.apply(_this, __spreadArray([target, source, sourceKey], context, false));\n            if (result !== targetValue) {\n              target = _this.shallowCopyForMerge(target);\n              target[sourceKey] = result;\n            }\n          }\n        } else {\n          target = _this.shallowCopyForMerge(target);\n          target[sourceKey] = source[sourceKey];\n        }\n      });\n      return target;\n    }\n    return source;\n  };\n  DeepMerger.prototype.shallowCopyForMerge = function (value) {\n    if (isNonNullObject(value)) {\n      if (!this.pastCopies.has(value)) {\n        if (Array.isArray(value)) {\n          value = value.slice(0);\n        } else {\n          value = __assign({\n            __proto__: Object.getPrototypeOf(value)\n          }, value);\n        }\n        this.pastCopies.add(value);\n      }\n    }\n    return value;\n  };\n  return DeepMerger;\n}();\nexport { DeepMerger };","map":{"version":3,"names":["isNonNullObject","hasOwnProperty","Object","prototype","mergeDeep","sources","_i","arguments","length","mergeDeepArray","target","count","merger","DeepMerger","i","merge","defaultReconciler","source","property","reconciler","isObject","pastCopies","Set","_this","context","keys","forEach","sourceKey","call","targetValue","result","apply","__spreadArray","shallowCopyForMerge","value","has","Array","isArray","slice","__assign","__proto__","getPrototypeOf","add"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@apollo/src/utilities/common/mergeDeep.ts"],"sourcesContent":["import { isNonNullObject } from \"./objects\";\n\nconst { hasOwnProperty } = Object.prototype;\n\n// These mergeDeep and mergeDeepArray utilities merge any number of objects\n// together, sharing as much memory as possible with the source objects, while\n// remaining careful to avoid modifying any source objects.\n\n// Logically, the return type of mergeDeep should be the intersection of\n// all the argument types. The binary call signature is by far the most\n// common, but we support 0- through 5-ary as well. After that, the\n// resulting type is just the inferred array element type. Note to nerds:\n// there is a more clever way of doing this that converts the tuple type\n// first to a union type (easy enough: T[number]) and then converts the\n// union to an intersection type using distributive conditional type\n// inference, but that approach has several fatal flaws (boolean becomes\n// true & false, and the inferred type ends up as unknown in many cases),\n// in addition to being nearly impossible to explain/understand.\nexport type TupleToIntersection<T extends any[]> =\n  T extends [infer A] ? A :\n  T extends [infer A, infer B] ? A & B :\n  T extends [infer A, infer B, infer C] ? A & B & C :\n  T extends [infer A, infer B, infer C, infer D] ? A & B & C & D :\n  T extends [infer A, infer B, infer C, infer D, infer E] ? A & B & C & D & E :\n  T extends (infer U)[] ? U : any;\n\nexport function mergeDeep<T extends any[]>(\n  ...sources: T\n): TupleToIntersection<T> {\n  return mergeDeepArray(sources);\n}\n\n// In almost any situation where you could succeed in getting the\n// TypeScript compiler to infer a tuple type for the sources array, you\n// could just use mergeDeep instead of mergeDeepArray, so instead of\n// trying to convert T[] to an intersection type we just infer the array\n// element type, which works perfectly when the sources array has a\n// consistent element type.\nexport function mergeDeepArray<T>(sources: T[]): T {\n  let target = sources[0] || ({} as T);\n  const count = sources.length;\n  if (count > 1) {\n    const merger = new DeepMerger();\n    for (let i = 1; i < count; ++i) {\n      target = merger.merge(target, sources[i]);\n    }\n  }\n  return target;\n}\n\nexport type ReconcilerFunction<TContextArgs extends any[]> = (\n  this: DeepMerger<TContextArgs>,\n  target: Record<string | number, any>,\n  source: Record<string | number, any>,\n  property: string | number,\n  ...context: TContextArgs\n) => any;\n\nconst defaultReconciler: ReconcilerFunction<any[]> =\n  function (target, source, property) {\n    return this.merge(target[property], source[property]);\n  };\n\nexport class DeepMerger<TContextArgs extends any[]> {\n  constructor(\n    private reconciler: ReconcilerFunction<TContextArgs> = defaultReconciler,\n  ) {}\n\n  public merge(target: any, source: any, ...context: TContextArgs): any {\n    if (isNonNullObject(source) && isNonNullObject(target)) {\n      Object.keys(source).forEach(sourceKey => {\n        if (hasOwnProperty.call(target, sourceKey)) {\n          const targetValue = target[sourceKey];\n          if (source[sourceKey] !== targetValue) {\n            const result = this.reconciler(target, source, sourceKey, ...context);\n            // A well-implemented reconciler may return targetValue to indicate\n            // the merge changed nothing about the structure of the target.\n            if (result !== targetValue) {\n              target = this.shallowCopyForMerge(target);\n              target[sourceKey] = result;\n            }\n          }\n        } else {\n          // If there is no collision, the target can safely share memory with\n          // the source, and the recursion can terminate here.\n          target = this.shallowCopyForMerge(target);\n          target[sourceKey] = source[sourceKey];\n        }\n      });\n\n      return target;\n    }\n\n    // If source (or target) is not an object, let source replace target.\n    return source;\n  }\n\n  public isObject = isNonNullObject;\n\n  private pastCopies = new Set<any>();\n\n  public shallowCopyForMerge<T>(value: T): T {\n    if (isNonNullObject(value)) {\n      if (!this.pastCopies.has(value)) {\n        if (Array.isArray(value)) {\n          value = (value as any).slice(0);\n        } else {\n          value = {\n            __proto__: Object.getPrototypeOf(value),\n            ...value,\n          };\n        }\n        this.pastCopies.add(value);\n      }\n    }\n    return value;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}