{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport { wrap } from 'optimism';\nimport { getFragmentQueryDocument } from \"../../utilities/index.js\";\nvar ApolloCache = function () {\n  function ApolloCache() {\n    this.getFragmentDoc = wrap(getFragmentQueryDocument);\n  }\n  ApolloCache.prototype.batch = function (options) {\n    var _this = this;\n    var optimisticId = typeof options.optimistic === \"string\" ? options.optimistic : options.optimistic === false ? null : void 0;\n    var updateResult;\n    this.performTransaction(function () {\n      return updateResult = options.update(_this);\n    }, optimisticId);\n    return updateResult;\n  };\n  ApolloCache.prototype.recordOptimisticTransaction = function (transaction, optimisticId) {\n    this.performTransaction(transaction, optimisticId);\n  };\n  ApolloCache.prototype.transformDocument = function (document) {\n    return document;\n  };\n  ApolloCache.prototype.transformForLink = function (document) {\n    return document;\n  };\n  ApolloCache.prototype.identify = function (object) {\n    return;\n  };\n  ApolloCache.prototype.gc = function () {\n    return [];\n  };\n  ApolloCache.prototype.modify = function (options) {\n    return false;\n  };\n  ApolloCache.prototype.readQuery = function (options, optimistic) {\n    if (optimistic === void 0) {\n      optimistic = !!options.optimistic;\n    }\n    return this.read(__assign(__assign({}, options), {\n      rootId: options.id || 'ROOT_QUERY',\n      optimistic: optimistic\n    }));\n  };\n  ApolloCache.prototype.readFragment = function (options, optimistic) {\n    if (optimistic === void 0) {\n      optimistic = !!options.optimistic;\n    }\n    return this.read(__assign(__assign({}, options), {\n      query: this.getFragmentDoc(options.fragment, options.fragmentName),\n      rootId: options.id,\n      optimistic: optimistic\n    }));\n  };\n  ApolloCache.prototype.writeQuery = function (_a) {\n    var id = _a.id,\n      data = _a.data,\n      options = __rest(_a, [\"id\", \"data\"]);\n    return this.write(Object.assign(options, {\n      dataId: id || 'ROOT_QUERY',\n      result: data\n    }));\n  };\n  ApolloCache.prototype.writeFragment = function (_a) {\n    var id = _a.id,\n      data = _a.data,\n      fragment = _a.fragment,\n      fragmentName = _a.fragmentName,\n      options = __rest(_a, [\"id\", \"data\", \"fragment\", \"fragmentName\"]);\n    return this.write(Object.assign(options, {\n      query: this.getFragmentDoc(fragment, fragmentName),\n      dataId: id,\n      result: data\n    }));\n  };\n  ApolloCache.prototype.updateQuery = function (options, _update) {\n    return this.batch({\n      update: function update(cache) {\n        var value = cache.readQuery(options);\n        var data = _update(value);\n        if (data === void 0 || data === null) return value;\n        cache.writeQuery(__assign(__assign({}, options), {\n          data: data\n        }));\n        return data;\n      }\n    });\n  };\n  ApolloCache.prototype.updateFragment = function (options, _update2) {\n    return this.batch({\n      update: function update(cache) {\n        var value = cache.readFragment(options);\n        var data = _update2(value);\n        if (data === void 0 || data === null) return value;\n        cache.writeFragment(__assign(__assign({}, options), {\n          data: data\n        }));\n        return data;\n      }\n    });\n  };\n  return ApolloCache;\n}();\nexport { ApolloCache };","map":{"version":3,"names":["wrap","getFragmentQueryDocument","ApolloCache","getFragmentDoc","prototype","batch","options","_this","optimisticId","optimistic","updateResult","performTransaction","update","recordOptimisticTransaction","transaction","transformDocument","document","transformForLink","identify","object","gc","modify","readQuery","read","__assign","rootId","id","readFragment","query","fragment","fragmentName","writeQuery","_a","data","__rest","write","Object","assign","dataId","result","writeFragment","updateQuery","cache","value","updateFragment"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@apollo/src/cache/core/cache.ts"],"sourcesContent":["import { DocumentNode } from 'graphql';\nimport { wrap } from 'optimism';\n\nimport {\n  StoreObject,\n  Reference,\n  getFragmentQueryDocument,\n} from '../../utilities';\nimport { DataProxy } from './types/DataProxy';\nimport { Cache } from './types/Cache';\n\nexport type Transaction<T> = (c: ApolloCache<T>) => void;\n\nexport abstract class ApolloCache<TSerialized> implements DataProxy {\n  // required to implement\n  // core API\n  public abstract read<TData = any, TVariables = any>(\n    query: Cache.ReadOptions<TVariables, TData>,\n  ): TData | null;\n  public abstract write<TData = any, TVariables = any>(\n    write: Cache.WriteOptions<TData, TVariables>,\n  ): Reference | undefined;\n  public abstract diff<T>(query: Cache.DiffOptions): Cache.DiffResult<T>;\n  public abstract watch<TData = any, TVariables = any>(\n    watch: Cache.WatchOptions<TData, TVariables>,\n  ): () => void;\n\n  // Empty the cache and restart all current watches (unless\n  // options.discardWatches is true).\n  public abstract reset(options?: Cache.ResetOptions): Promise<void>;\n\n  // Remove whole objects from the cache by passing just options.id, or\n  // specific fields by passing options.field and/or options.args. If no\n  // options.args are provided, all fields matching options.field (even\n  // those with arguments) will be removed. Returns true iff any data was\n  // removed from the cache.\n  public abstract evict(options: Cache.EvictOptions): boolean;\n\n  // initializer / offline / ssr API\n  /**\n   * Replaces existing state in the cache (if any) with the values expressed by\n   * `serializedState`.\n   *\n   * Called when hydrating a cache (server side rendering, or offline storage),\n   * and also (potentially) during hot reloads.\n   */\n  public abstract restore(\n    serializedState: TSerialized,\n  ): ApolloCache<TSerialized>;\n\n  /**\n   * Exposes the cache's complete state, in a serializable format for later restoration.\n   */\n  public abstract extract(optimistic?: boolean): TSerialized;\n\n  // Optimistic API\n\n  public abstract removeOptimistic(id: string): void;\n\n  // Transactional API\n\n  // The batch method is intended to replace/subsume both performTransaction\n  // and recordOptimisticTransaction, but performTransaction came first, so we\n  // provide a default batch implementation that's just another way of calling\n  // performTransaction. Subclasses of ApolloCache (such as InMemoryCache) can\n  // override the batch method to do more interesting things with its options.\n  public batch<U>(options: Cache.BatchOptions<this, U>): U {\n    const optimisticId =\n      typeof options.optimistic === \"string\" ? options.optimistic :\n      options.optimistic === false ? null : void 0;\n    let updateResult: U;\n    this.performTransaction(\n      () => updateResult = options.update(this),\n      optimisticId,\n    );\n    return updateResult!;\n  }\n\n  public abstract performTransaction(\n    transaction: Transaction<TSerialized>,\n    // Although subclasses may implement recordOptimisticTransaction\n    // however they choose, the default implementation simply calls\n    // performTransaction with a string as the second argument, allowing\n    // performTransaction to handle both optimistic and non-optimistic\n    // (broadcast-batching) transactions. Passing null for optimisticId is\n    // also allowed, and indicates that performTransaction should apply\n    // the transaction non-optimistically (ignoring optimistic data).\n    optimisticId?: string | null,\n  ): void;\n\n  public recordOptimisticTransaction(\n    transaction: Transaction<TSerialized>,\n    optimisticId: string,\n  ) {\n    this.performTransaction(transaction, optimisticId);\n  }\n\n  // Optional API\n\n  // Called once per input document, allowing the cache to make static changes\n  // to the query, such as adding __typename fields.\n  public transformDocument(document: DocumentNode): DocumentNode {\n    return document;\n  }\n\n  // Called before each ApolloLink request, allowing the cache to make dynamic\n  // changes to the query, such as filling in missing fragment definitions.\n  public transformForLink(document: DocumentNode): DocumentNode {\n    return document;\n  }\n\n  public identify(object: StoreObject | Reference): string | undefined {\n    return;\n  }\n\n  public gc(): string[] {\n    return [];\n  }\n\n  public modify(options: Cache.ModifyOptions): boolean {\n    return false;\n  }\n\n  // DataProxy API\n  /**\n   *\n   * @param options\n   * @param optimistic\n   */\n  public readQuery<QueryType, TVariables = any>(\n    options: Cache.ReadQueryOptions<QueryType, TVariables>,\n    optimistic = !!options.optimistic,\n  ): QueryType | null {\n    return this.read({\n      ...options,\n      rootId: options.id || 'ROOT_QUERY',\n      optimistic,\n    });\n  }\n\n  // Make sure we compute the same (===) fragment query document every\n  // time we receive the same fragment in readFragment.\n  private getFragmentDoc = wrap(getFragmentQueryDocument);\n\n  public readFragment<FragmentType, TVariables = any>(\n    options: Cache.ReadFragmentOptions<FragmentType, TVariables>,\n    optimistic = !!options.optimistic,\n  ): FragmentType | null {\n    return this.read({\n      ...options,\n      query: this.getFragmentDoc(options.fragment, options.fragmentName),\n      rootId: options.id,\n      optimistic,\n    });\n  }\n\n  public writeQuery<TData = any, TVariables = any>({\n    id,\n    data,\n    ...options\n  }: Cache.WriteQueryOptions<TData, TVariables>): Reference | undefined {\n    return this.write(Object.assign(options, {\n      dataId: id || 'ROOT_QUERY',\n      result: data,\n    }));\n  }\n\n  public writeFragment<TData = any, TVariables = any>({\n    id,\n    data,\n    fragment,\n    fragmentName,\n    ...options\n  }: Cache.WriteFragmentOptions<TData, TVariables>): Reference | undefined {\n    return this.write(Object.assign(options, {\n      query: this.getFragmentDoc(fragment, fragmentName),\n      dataId: id,\n      result: data,\n    }));\n  }\n\n  public updateQuery<TData = any, TVariables = any>(\n    options: Cache.UpdateQueryOptions<TData, TVariables>,\n    update: (data: TData | null) => TData | null | void,\n  ): TData | null {\n    return this.batch({\n      update(cache) {\n        const value = cache.readQuery<TData, TVariables>(options);\n        const data = update(value);\n        if (data === void 0 || data === null) return value;\n        cache.writeQuery<TData, TVariables>({ ...options, data });\n        return data;\n      },\n    });\n  }\n\n  public updateFragment<TData = any, TVariables = any>(\n    options: Cache.UpdateFragmentOptions<TData, TVariables>,\n    update: (data: TData | null) => TData | null | void,\n  ): TData | null {\n    return this.batch({\n      update(cache) {\n        const value = cache.readFragment<TData, TVariables>(options);\n        const data = update(value);\n        if (data === void 0 || data === null) return value;\n        cache.writeFragment<TData, TVariables>({ ...options, data });\n        return data;\n      },\n    });\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}