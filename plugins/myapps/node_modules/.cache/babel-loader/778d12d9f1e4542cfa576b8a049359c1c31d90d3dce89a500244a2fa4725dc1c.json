{"ast":null,"code":"import { GraphQLError } from \"../../error/GraphQLError.mjs\";\n\n/**\n * Unique operation types\n *\n * A GraphQL document is only valid if it has only one type per operation.\n */\nexport function UniqueOperationTypesRule(context) {\n  var schema = context.getSchema();\n  var definedOperationTypes = Object.create(null);\n  var existingOperationTypes = schema ? {\n    query: schema.getQueryType(),\n    mutation: schema.getMutationType(),\n    subscription: schema.getSubscriptionType()\n  } : {};\n  return {\n    SchemaDefinition: checkOperationTypes,\n    SchemaExtension: checkOperationTypes\n  };\n  function checkOperationTypes(node) {\n    var _node$operationTypes;\n\n    // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n    var operationTypesNodes = (_node$operationTypes = node.operationTypes) !== null && _node$operationTypes !== void 0 ? _node$operationTypes : [];\n    for (var _i2 = 0; _i2 < operationTypesNodes.length; _i2++) {\n      var operationType = operationTypesNodes[_i2];\n      var operation = operationType.operation;\n      var alreadyDefinedOperationType = definedOperationTypes[operation];\n      if (existingOperationTypes[operation]) {\n        context.reportError(new GraphQLError(\"Type for \".concat(operation, \" already defined in the schema. It cannot be redefined.\"), operationType));\n      } else if (alreadyDefinedOperationType) {\n        context.reportError(new GraphQLError(\"There can be only one \".concat(operation, \" type in schema.\"), [alreadyDefinedOperationType, operationType]));\n      } else {\n        definedOperationTypes[operation] = operationType;\n      }\n    }\n    return false;\n  }\n}","map":{"version":3,"names":["GraphQLError","UniqueOperationTypesRule","context","schema","getSchema","definedOperationTypes","Object","create","existingOperationTypes","query","getQueryType","mutation","getMutationType","subscription","getSubscriptionType","SchemaDefinition","checkOperationTypes","SchemaExtension","node","_node$operationTypes","operationTypesNodes","operationTypes","_i2","length","operationType","operation","alreadyDefinedOperationType","reportError","concat"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/graphql/validation/rules/UniqueOperationTypesRule.mjs"],"sourcesContent":["import { GraphQLError } from \"../../error/GraphQLError.mjs\";\n\n/**\n * Unique operation types\n *\n * A GraphQL document is only valid if it has only one type per operation.\n */\nexport function UniqueOperationTypesRule(context) {\n  var schema = context.getSchema();\n  var definedOperationTypes = Object.create(null);\n  var existingOperationTypes = schema ? {\n    query: schema.getQueryType(),\n    mutation: schema.getMutationType(),\n    subscription: schema.getSubscriptionType()\n  } : {};\n  return {\n    SchemaDefinition: checkOperationTypes,\n    SchemaExtension: checkOperationTypes\n  };\n\n  function checkOperationTypes(node) {\n    var _node$operationTypes;\n\n    // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n    var operationTypesNodes = (_node$operationTypes = node.operationTypes) !== null && _node$operationTypes !== void 0 ? _node$operationTypes : [];\n\n    for (var _i2 = 0; _i2 < operationTypesNodes.length; _i2++) {\n      var operationType = operationTypesNodes[_i2];\n      var operation = operationType.operation;\n      var alreadyDefinedOperationType = definedOperationTypes[operation];\n\n      if (existingOperationTypes[operation]) {\n        context.reportError(new GraphQLError(\"Type for \".concat(operation, \" already defined in the schema. It cannot be redefined.\"), operationType));\n      } else if (alreadyDefinedOperationType) {\n        context.reportError(new GraphQLError(\"There can be only one \".concat(operation, \" type in schema.\"), [alreadyDefinedOperationType, operationType]));\n      } else {\n        definedOperationTypes[operation] = operationType;\n      }\n    }\n\n    return false;\n  }\n}\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,8BAA8B;;AAE3D;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,wBAAwBA,CAACC,OAAO,EAAE;EAChD,IAAIC,MAAM,GAAGD,OAAO,CAACE,SAAS,CAAC,CAAC;EAChC,IAAIC,qBAAqB,GAAGC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;EAC/C,IAAIC,sBAAsB,GAAGL,MAAM,GAAG;IACpCM,KAAK,EAAEN,MAAM,CAACO,YAAY,CAAC,CAAC;IAC5BC,QAAQ,EAAER,MAAM,CAACS,eAAe,CAAC,CAAC;IAClCC,YAAY,EAAEV,MAAM,CAACW,mBAAmB,CAAC;EAC3C,CAAC,GAAG,CAAC,CAAC;EACN,OAAO;IACLC,gBAAgB,EAAEC,mBAAmB;IACrCC,eAAe,EAAED;EACnB,CAAC;EAED,SAASA,mBAAmBA,CAACE,IAAI,EAAE;IACjC,IAAIC,oBAAoB;;IAExB;IACA,IAAIC,mBAAmB,GAAG,CAACD,oBAAoB,GAAGD,IAAI,CAACG,cAAc,MAAM,IAAI,IAAIF,oBAAoB,KAAK,KAAK,CAAC,GAAGA,oBAAoB,GAAG,EAAE;IAE9I,KAAK,IAAIG,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGF,mBAAmB,CAACG,MAAM,EAAED,GAAG,EAAE,EAAE;MACzD,IAAIE,aAAa,GAAGJ,mBAAmB,CAACE,GAAG,CAAC;MAC5C,IAAIG,SAAS,GAAGD,aAAa,CAACC,SAAS;MACvC,IAAIC,2BAA2B,GAAGrB,qBAAqB,CAACoB,SAAS,CAAC;MAElE,IAAIjB,sBAAsB,CAACiB,SAAS,CAAC,EAAE;QACrCvB,OAAO,CAACyB,WAAW,CAAC,IAAI3B,YAAY,CAAC,WAAW,CAAC4B,MAAM,CAACH,SAAS,EAAE,yDAAyD,CAAC,EAAED,aAAa,CAAC,CAAC;MAChJ,CAAC,MAAM,IAAIE,2BAA2B,EAAE;QACtCxB,OAAO,CAACyB,WAAW,CAAC,IAAI3B,YAAY,CAAC,wBAAwB,CAAC4B,MAAM,CAACH,SAAS,EAAE,kBAAkB,CAAC,EAAE,CAACC,2BAA2B,EAAEF,aAAa,CAAC,CAAC,CAAC;MACrJ,CAAC,MAAM;QACLnB,qBAAqB,CAACoB,SAAS,CAAC,GAAGD,aAAa;MAClD;IACF;IAEA,OAAO,KAAK;EACd;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}