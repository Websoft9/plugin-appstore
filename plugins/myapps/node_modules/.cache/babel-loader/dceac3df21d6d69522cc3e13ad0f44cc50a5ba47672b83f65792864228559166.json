{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { invariant } from \"../utilities/globals/index.js\";\nimport { equal } from '@wry/equality';\nimport { NetworkStatus, isNetworkRequestInFlight } from \"./networkStatus.js\";\nimport { cloneDeep, compact, getOperationDefinition, Observable, iterateObserversSafely, isNonEmptyArray, fixObservableSubclass, getQueryDefinition } from \"../utilities/index.js\";\nvar assign = Object.assign,\n  hasOwnProperty = Object.hasOwnProperty;\nvar ObservableQuery = function (_super) {\n  __extends(ObservableQuery, _super);\n  function ObservableQuery(_a) {\n    var queryManager = _a.queryManager,\n      queryInfo = _a.queryInfo,\n      options = _a.options;\n    var _this = _super.call(this, function (observer) {\n      try {\n        var subObserver = observer._subscription._observer;\n        if (subObserver && !subObserver.error) {\n          subObserver.error = defaultSubscriptionObserverErrorCallback;\n        }\n      } catch (_a) {}\n      var first = !_this.observers.size;\n      _this.observers.add(observer);\n      var last = _this.last;\n      if (last && last.error) {\n        observer.error && observer.error(last.error);\n      } else if (last && last.result) {\n        observer.next && observer.next(last.result);\n      }\n      if (first) {\n        _this.reobserve().catch(function () {});\n      }\n      return function () {\n        if (_this.observers.delete(observer) && !_this.observers.size) {\n          _this.tearDownQuery();\n        }\n      };\n    }) || this;\n    _this.observers = new Set();\n    _this.subscriptions = new Set();\n    _this.queryInfo = queryInfo;\n    _this.queryManager = queryManager;\n    _this.isTornDown = false;\n    var _b = queryManager.defaultOptions.watchQuery,\n      _c = _b === void 0 ? {} : _b,\n      _d = _c.fetchPolicy,\n      defaultFetchPolicy = _d === void 0 ? \"cache-first\" : _d;\n    var _e = options.fetchPolicy,\n      fetchPolicy = _e === void 0 ? defaultFetchPolicy : _e,\n      _f = options.initialFetchPolicy,\n      initialFetchPolicy = _f === void 0 ? fetchPolicy === \"standby\" ? defaultFetchPolicy : fetchPolicy : _f;\n    _this.options = __assign(__assign({}, options), {\n      initialFetchPolicy: initialFetchPolicy,\n      fetchPolicy: fetchPolicy\n    });\n    _this.queryId = queryInfo.queryId || queryManager.generateQueryId();\n    var opDef = getOperationDefinition(_this.query);\n    _this.queryName = opDef && opDef.name && opDef.name.value;\n    return _this;\n  }\n  Object.defineProperty(ObservableQuery.prototype, \"query\", {\n    get: function get() {\n      return this.queryManager.transform(this.options.query).document;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ObservableQuery.prototype, \"variables\", {\n    get: function get() {\n      return this.options.variables;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  ObservableQuery.prototype.result = function () {\n    var _this = this;\n    return new Promise(function (resolve, reject) {\n      var observer = {\n        next: function next(result) {\n          resolve(result);\n          _this.observers.delete(observer);\n          if (!_this.observers.size) {\n            _this.queryManager.removeQuery(_this.queryId);\n          }\n          setTimeout(function () {\n            subscription.unsubscribe();\n          }, 0);\n        },\n        error: reject\n      };\n      var subscription = _this.subscribe(observer);\n    });\n  };\n  ObservableQuery.prototype.getCurrentResult = function (saveAsLastResult) {\n    if (saveAsLastResult === void 0) {\n      saveAsLastResult = true;\n    }\n    var lastResult = this.getLastResult(true);\n    var networkStatus = this.queryInfo.networkStatus || lastResult && lastResult.networkStatus || NetworkStatus.ready;\n    var result = __assign(__assign({}, lastResult), {\n      loading: isNetworkRequestInFlight(networkStatus),\n      networkStatus: networkStatus\n    });\n    var _a = this.options.fetchPolicy,\n      fetchPolicy = _a === void 0 ? \"cache-first\" : _a;\n    if (fetchPolicy === 'network-only' || fetchPolicy === 'no-cache' || fetchPolicy === 'standby' || this.queryManager.transform(this.options.query).hasForcedResolvers) {} else {\n      var diff = this.queryInfo.getDiff();\n      if (diff.complete || this.options.returnPartialData) {\n        result.data = diff.result;\n      }\n      if (equal(result.data, {})) {\n        result.data = void 0;\n      }\n      if (diff.complete) {\n        delete result.partial;\n        if (diff.complete && result.networkStatus === NetworkStatus.loading && (fetchPolicy === 'cache-first' || fetchPolicy === 'cache-only')) {\n          result.networkStatus = NetworkStatus.ready;\n          result.loading = false;\n        }\n      } else {\n        result.partial = true;\n      }\n      if (__DEV__ && !diff.complete && !this.options.partialRefetch && !result.loading && !result.data && !result.error) {\n        logMissingFieldErrors(diff.missing);\n      }\n    }\n    if (saveAsLastResult) {\n      this.updateLastResult(result);\n    }\n    return result;\n  };\n  ObservableQuery.prototype.isDifferentFromLastResult = function (newResult, variables) {\n    return !this.last || !equal(this.last.result, newResult) || variables && !equal(this.last.variables, variables);\n  };\n  ObservableQuery.prototype.getLast = function (key, variablesMustMatch) {\n    var last = this.last;\n    if (last && last[key] && (!variablesMustMatch || equal(last.variables, this.variables))) {\n      return last[key];\n    }\n  };\n  ObservableQuery.prototype.getLastResult = function (variablesMustMatch) {\n    return this.getLast(\"result\", variablesMustMatch);\n  };\n  ObservableQuery.prototype.getLastError = function (variablesMustMatch) {\n    return this.getLast(\"error\", variablesMustMatch);\n  };\n  ObservableQuery.prototype.resetLastResults = function () {\n    delete this.last;\n    this.isTornDown = false;\n  };\n  ObservableQuery.prototype.resetQueryStoreErrors = function () {\n    this.queryManager.resetErrors(this.queryId);\n  };\n  ObservableQuery.prototype.refetch = function (variables) {\n    var _a;\n    var reobserveOptions = {\n      pollInterval: 0\n    };\n    var fetchPolicy = this.options.fetchPolicy;\n    if (fetchPolicy === 'cache-and-network') {\n      reobserveOptions.fetchPolicy = fetchPolicy;\n    } else if (fetchPolicy === 'no-cache') {\n      reobserveOptions.fetchPolicy = 'no-cache';\n    } else {\n      reobserveOptions.fetchPolicy = 'network-only';\n    }\n    if (__DEV__ && variables && hasOwnProperty.call(variables, \"variables\")) {\n      var queryDef = getQueryDefinition(this.query);\n      var vars = queryDef.variableDefinitions;\n      if (!vars || !vars.some(function (v) {\n        return v.variable.name.value === \"variables\";\n      })) {\n        __DEV__ && invariant.warn(\"Called refetch(\".concat(JSON.stringify(variables), \") for query \").concat(((_a = queryDef.name) === null || _a === void 0 ? void 0 : _a.value) || JSON.stringify(queryDef), \", which does not declare a $variables variable.\\nDid you mean to call refetch(variables) instead of refetch({ variables })?\"));\n      }\n    }\n    if (variables && !equal(this.options.variables, variables)) {\n      reobserveOptions.variables = this.options.variables = __assign(__assign({}, this.options.variables), variables);\n    }\n    this.queryInfo.resetLastWrite();\n    return this.reobserve(reobserveOptions, NetworkStatus.refetch);\n  };\n  ObservableQuery.prototype.fetchMore = function (fetchMoreOptions) {\n    var _this = this;\n    var combinedOptions = __assign(__assign({}, fetchMoreOptions.query ? fetchMoreOptions : __assign(__assign(__assign(__assign({}, this.options), {\n      query: this.query\n    }), fetchMoreOptions), {\n      variables: __assign(__assign({}, this.options.variables), fetchMoreOptions.variables)\n    })), {\n      fetchPolicy: \"no-cache\"\n    });\n    var qid = this.queryManager.generateQueryId();\n    var queryInfo = this.queryInfo;\n    var originalNetworkStatus = queryInfo.networkStatus;\n    queryInfo.networkStatus = NetworkStatus.fetchMore;\n    if (combinedOptions.notifyOnNetworkStatusChange) {\n      this.observe();\n    }\n    var updatedQuerySet = new Set();\n    return this.queryManager.fetchQuery(qid, combinedOptions, NetworkStatus.fetchMore).then(function (fetchMoreResult) {\n      _this.queryManager.removeQuery(qid);\n      if (queryInfo.networkStatus === NetworkStatus.fetchMore) {\n        queryInfo.networkStatus = originalNetworkStatus;\n      }\n      _this.queryManager.cache.batch({\n        update: function update(cache) {\n          var updateQuery = fetchMoreOptions.updateQuery;\n          if (updateQuery) {\n            cache.updateQuery({\n              query: _this.query,\n              variables: _this.variables,\n              returnPartialData: true,\n              optimistic: false\n            }, function (previous) {\n              return updateQuery(previous, {\n                fetchMoreResult: fetchMoreResult.data,\n                variables: combinedOptions.variables\n              });\n            });\n          } else {\n            cache.writeQuery({\n              query: combinedOptions.query,\n              variables: combinedOptions.variables,\n              data: fetchMoreResult.data\n            });\n          }\n        },\n        onWatchUpdated: function onWatchUpdated(watch) {\n          updatedQuerySet.add(watch.query);\n        }\n      });\n      return fetchMoreResult;\n    }).finally(function () {\n      if (!updatedQuerySet.has(_this.query)) {\n        reobserveCacheFirst(_this);\n      }\n    });\n  };\n  ObservableQuery.prototype.subscribeToMore = function (options) {\n    var _this = this;\n    var subscription = this.queryManager.startGraphQLSubscription({\n      query: options.document,\n      variables: options.variables,\n      context: options.context\n    }).subscribe({\n      next: function next(subscriptionData) {\n        var updateQuery = options.updateQuery;\n        if (updateQuery) {\n          _this.updateQuery(function (previous, _a) {\n            var variables = _a.variables;\n            return updateQuery(previous, {\n              subscriptionData: subscriptionData,\n              variables: variables\n            });\n          });\n        }\n      },\n      error: function error(err) {\n        if (options.onError) {\n          options.onError(err);\n          return;\n        }\n        __DEV__ && invariant.error('Unhandled GraphQL subscription error', err);\n      }\n    });\n    this.subscriptions.add(subscription);\n    return function () {\n      if (_this.subscriptions.delete(subscription)) {\n        subscription.unsubscribe();\n      }\n    };\n  };\n  ObservableQuery.prototype.setOptions = function (newOptions) {\n    return this.reobserve(newOptions);\n  };\n  ObservableQuery.prototype.setVariables = function (variables) {\n    if (equal(this.variables, variables)) {\n      return this.observers.size ? this.result() : Promise.resolve();\n    }\n    this.options.variables = variables;\n    if (!this.observers.size) {\n      return Promise.resolve();\n    }\n    return this.reobserve({\n      fetchPolicy: this.options.initialFetchPolicy,\n      variables: variables\n    }, NetworkStatus.setVariables);\n  };\n  ObservableQuery.prototype.updateQuery = function (mapFn) {\n    var queryManager = this.queryManager;\n    var result = queryManager.cache.diff({\n      query: this.options.query,\n      variables: this.variables,\n      returnPartialData: true,\n      optimistic: false\n    }).result;\n    var newResult = mapFn(result, {\n      variables: this.variables\n    });\n    if (newResult) {\n      queryManager.cache.writeQuery({\n        query: this.options.query,\n        data: newResult,\n        variables: this.variables\n      });\n      queryManager.broadcastQueries();\n    }\n  };\n  ObservableQuery.prototype.startPolling = function (pollInterval) {\n    this.options.pollInterval = pollInterval;\n    this.updatePolling();\n  };\n  ObservableQuery.prototype.stopPolling = function () {\n    this.options.pollInterval = 0;\n    this.updatePolling();\n  };\n  ObservableQuery.prototype.applyNextFetchPolicy = function (reason, options) {\n    if (options.nextFetchPolicy) {\n      var _a = options.fetchPolicy,\n        fetchPolicy = _a === void 0 ? \"cache-first\" : _a,\n        _b = options.initialFetchPolicy,\n        initialFetchPolicy = _b === void 0 ? fetchPolicy : _b;\n      if (fetchPolicy === \"standby\") {} else if (typeof options.nextFetchPolicy === \"function\") {\n        options.fetchPolicy = options.nextFetchPolicy(fetchPolicy, {\n          reason: reason,\n          options: options,\n          observable: this,\n          initialFetchPolicy: initialFetchPolicy\n        });\n      } else if (reason === \"variables-changed\") {\n        options.fetchPolicy = initialFetchPolicy;\n      } else {\n        options.fetchPolicy = options.nextFetchPolicy;\n      }\n    }\n    return options.fetchPolicy;\n  };\n  ObservableQuery.prototype.fetch = function (options, newNetworkStatus) {\n    this.queryManager.setObservableQuery(this);\n    return this.queryManager['fetchConcastWithInfo'](this.queryId, options, newNetworkStatus);\n  };\n  ObservableQuery.prototype.updatePolling = function () {\n    var _this = this;\n    if (this.queryManager.ssrMode) {\n      return;\n    }\n    var _a = this,\n      pollingInfo = _a.pollingInfo,\n      pollInterval = _a.options.pollInterval;\n    if (!pollInterval) {\n      if (pollingInfo) {\n        clearTimeout(pollingInfo.timeout);\n        delete this.pollingInfo;\n      }\n      return;\n    }\n    if (pollingInfo && pollingInfo.interval === pollInterval) {\n      return;\n    }\n    __DEV__ ? invariant(pollInterval, 'Attempted to start a polling query without a polling interval.') : invariant(pollInterval, 13);\n    var info = pollingInfo || (this.pollingInfo = {});\n    info.interval = pollInterval;\n    var maybeFetch = function maybeFetch() {\n      if (_this.pollingInfo) {\n        if (!isNetworkRequestInFlight(_this.queryInfo.networkStatus)) {\n          _this.reobserve({\n            fetchPolicy: _this.options.initialFetchPolicy === 'no-cache' ? 'no-cache' : 'network-only'\n          }, NetworkStatus.poll).then(poll, poll);\n        } else {\n          poll();\n        }\n      }\n      ;\n    };\n    var poll = function poll() {\n      var info = _this.pollingInfo;\n      if (info) {\n        clearTimeout(info.timeout);\n        info.timeout = setTimeout(maybeFetch, info.interval);\n      }\n    };\n    poll();\n  };\n  ObservableQuery.prototype.updateLastResult = function (newResult, variables) {\n    if (variables === void 0) {\n      variables = this.variables;\n    }\n    this.last = __assign(__assign({}, this.last), {\n      result: this.queryManager.assumeImmutableResults ? newResult : cloneDeep(newResult),\n      variables: variables\n    });\n    if (!isNonEmptyArray(newResult.errors)) {\n      delete this.last.error;\n    }\n    return this.last;\n  };\n  ObservableQuery.prototype.reobserveAsConcast = function (newOptions, newNetworkStatus) {\n    var _this = this;\n    this.isTornDown = false;\n    var useDisposableConcast = newNetworkStatus === NetworkStatus.refetch || newNetworkStatus === NetworkStatus.fetchMore || newNetworkStatus === NetworkStatus.poll;\n    var oldVariables = this.options.variables;\n    var oldFetchPolicy = this.options.fetchPolicy;\n    var mergedOptions = compact(this.options, newOptions || {});\n    var options = useDisposableConcast ? mergedOptions : assign(this.options, mergedOptions);\n    if (!useDisposableConcast) {\n      this.updatePolling();\n      if (newOptions && newOptions.variables && !equal(newOptions.variables, oldVariables) && options.fetchPolicy !== \"standby\" && options.fetchPolicy === oldFetchPolicy) {\n        this.applyNextFetchPolicy(\"variables-changed\", options);\n        if (newNetworkStatus === void 0) {\n          newNetworkStatus = NetworkStatus.setVariables;\n        }\n      }\n    }\n    var variables = options.variables && __assign({}, options.variables);\n    var _a = this.fetch(options, newNetworkStatus),\n      concast = _a.concast,\n      fromLink = _a.fromLink;\n    var observer = {\n      next: function next(result) {\n        _this.reportResult(result, variables);\n      },\n      error: function error(_error) {\n        _this.reportError(_error, variables);\n      }\n    };\n    if (!useDisposableConcast && fromLink) {\n      if (this.concast && this.observer) {\n        this.concast.removeObserver(this.observer);\n      }\n      this.concast = concast;\n      this.observer = observer;\n    }\n    concast.addObserver(observer);\n    return concast;\n  };\n  ObservableQuery.prototype.reobserve = function (newOptions, newNetworkStatus) {\n    return this.reobserveAsConcast(newOptions, newNetworkStatus).promise;\n  };\n  ObservableQuery.prototype.observe = function () {\n    this.reportResult(this.getCurrentResult(false), this.variables);\n  };\n  ObservableQuery.prototype.reportResult = function (result, variables) {\n    var lastError = this.getLastError();\n    if (lastError || this.isDifferentFromLastResult(result, variables)) {\n      if (lastError || !result.partial || this.options.returnPartialData) {\n        this.updateLastResult(result, variables);\n      }\n      iterateObserversSafely(this.observers, 'next', result);\n    }\n  };\n  ObservableQuery.prototype.reportError = function (error, variables) {\n    var errorResult = __assign(__assign({}, this.getLastResult()), {\n      error: error,\n      errors: error.graphQLErrors,\n      networkStatus: NetworkStatus.error,\n      loading: false\n    });\n    this.updateLastResult(errorResult, variables);\n    iterateObserversSafely(this.observers, 'error', this.last.error = error);\n  };\n  ObservableQuery.prototype.hasObservers = function () {\n    return this.observers.size > 0;\n  };\n  ObservableQuery.prototype.tearDownQuery = function () {\n    if (this.isTornDown) return;\n    if (this.concast && this.observer) {\n      this.concast.removeObserver(this.observer);\n      delete this.concast;\n      delete this.observer;\n    }\n    this.stopPolling();\n    this.subscriptions.forEach(function (sub) {\n      return sub.unsubscribe();\n    });\n    this.subscriptions.clear();\n    this.queryManager.stopQuery(this.queryId);\n    this.observers.clear();\n    this.isTornDown = true;\n  };\n  return ObservableQuery;\n}(Observable);\nexport { ObservableQuery };\nfixObservableSubclass(ObservableQuery);\nexport function reobserveCacheFirst(obsQuery) {\n  var _a = obsQuery.options,\n    fetchPolicy = _a.fetchPolicy,\n    _nextFetchPolicy = _a.nextFetchPolicy;\n  if (fetchPolicy === \"cache-and-network\" || fetchPolicy === \"network-only\") {\n    return obsQuery.reobserve({\n      fetchPolicy: \"cache-first\",\n      nextFetchPolicy: function nextFetchPolicy() {\n        this.nextFetchPolicy = _nextFetchPolicy;\n        if (typeof _nextFetchPolicy === \"function\") {\n          return _nextFetchPolicy.apply(this, arguments);\n        }\n        return fetchPolicy;\n      }\n    });\n  }\n  return obsQuery.reobserve();\n}\nfunction defaultSubscriptionObserverErrorCallback(error) {\n  __DEV__ && invariant.error('Unhandled error', error.message, error.stack);\n}\nexport function logMissingFieldErrors(missing) {\n  if (__DEV__ && missing) {\n    __DEV__ && invariant.debug(\"Missing cache result fields: \".concat(JSON.stringify(missing)), missing);\n  }\n}","map":{"version":3,"names":["invariant","equal","NetworkStatus","isNetworkRequestInFlight","cloneDeep","compact","getOperationDefinition","Observable","iterateObserversSafely","isNonEmptyArray","fixObservableSubclass","getQueryDefinition","assign","Object","hasOwnProperty","ObservableQuery","_super","__extends","_a","queryManager","queryInfo","options","_this","call","observer","subObserver","_subscription","_observer","error","defaultSubscriptionObserverErrorCallback","first","observers","size","add","last","result","next","reobserve","catch","delete","tearDownQuery","Set","subscriptions","isTornDown","_b","defaultOptions","watchQuery","_c","_d","fetchPolicy","defaultFetchPolicy","_e","_f","initialFetchPolicy","__assign","queryId","generateQueryId","opDef","query","queryName","name","value","defineProperty","prototype","get","transform","document","variables","Promise","resolve","reject","removeQuery","setTimeout","subscription","unsubscribe","subscribe","getCurrentResult","saveAsLastResult","lastResult","getLastResult","networkStatus","ready","loading","hasForcedResolvers","diff","getDiff","complete","returnPartialData","data","partial","__DEV__","partialRefetch","logMissingFieldErrors","missing","updateLastResult","isDifferentFromLastResult","newResult","getLast","key","variablesMustMatch","getLastError","resetLastResults","resetQueryStoreErrors","resetErrors","refetch","reobserveOptions","pollInterval","queryDef","vars","variableDefinitions","some","v","variable","warn","concat","JSON","stringify","resetLastWrite","fetchMore","fetchMoreOptions","combinedOptions","qid","originalNetworkStatus","notifyOnNetworkStatusChange","observe","updatedQuerySet","fetchQuery","then","fetchMoreResult","cache","batch","update","updateQuery","optimistic","previous","writeQuery","onWatchUpdated","watch","finally","has","reobserveCacheFirst","subscribeToMore","startGraphQLSubscription","context","subscriptionData","err","onError","setOptions","newOptions","setVariables","mapFn","broadcastQueries","startPolling","updatePolling","stopPolling","applyNextFetchPolicy","reason","nextFetchPolicy","observable","fetch","newNetworkStatus","setObservableQuery","ssrMode","pollingInfo","clearTimeout","timeout","interval","info","maybeFetch","poll","assumeImmutableResults","errors","reobserveAsConcast","useDisposableConcast","oldVariables","oldFetchPolicy","mergedOptions","concast","fromLink","reportResult","reportError","removeObserver","addObserver","promise","lastError","errorResult","graphQLErrors","hasObservers","forEach","sub","clear","stopQuery","obsQuery","apply","arguments","message","stack","debug"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@apollo/src/core/ObservableQuery.ts"],"sourcesContent":["import { invariant } from '../utilities/globals';\nimport { DocumentNode } from 'graphql';\nimport { equal } from '@wry/equality';\n\nimport { NetworkStatus, isNetworkRequestInFlight } from './networkStatus';\nimport {\n  Concast,\n  cloneDeep,\n  compact,\n  getOperationDefinition,\n  Observable,\n  Observer,\n  ObservableSubscription,\n  iterateObserversSafely,\n  isNonEmptyArray,\n  fixObservableSubclass,\n  getQueryDefinition,\n} from '../utilities';\nimport { ApolloError } from '../errors';\nimport { QueryManager } from './QueryManager';\nimport {\n  ApolloQueryResult,\n  OperationVariables,\n  TypedDocumentNode,\n} from './types';\nimport {\n  WatchQueryOptions,\n  FetchMoreQueryOptions,\n  SubscribeToMoreOptions,\n  NextFetchPolicyContext,\n} from './watchQueryOptions';\nimport { QueryInfo } from './QueryInfo';\nimport { MissingFieldError } from '../cache';\nimport { MissingTree } from '../cache/core/types/common';\n\nconst {\n  assign,\n  hasOwnProperty,\n} = Object;\n\nexport interface FetchMoreOptions<\n  TData = any,\n  TVariables = OperationVariables\n> {\n  updateQuery?: (\n    previousQueryResult: TData,\n    options: {\n      fetchMoreResult?: TData;\n      variables?: TVariables;\n    },\n  ) => TData;\n}\n\nexport interface UpdateQueryOptions<TVariables> {\n  variables?: TVariables;\n}\n\ninterface Last<TData, TVariables> {\n  result: ApolloQueryResult<TData>;\n  variables?: TVariables;\n  error?: ApolloError;\n}\n\nexport class ObservableQuery<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables\n> extends Observable<ApolloQueryResult<TData>> {\n  public readonly options: WatchQueryOptions<TVariables, TData>;\n  public readonly queryId: string;\n  public readonly queryName?: string;\n\n  public get query(): TypedDocumentNode<TData, TVariables> {\n    // This transform is heavily cached, so it should not be expensive to\n    // transform the same this.options.query document repeatedly.\n    return this.queryManager.transform(this.options.query).document;\n  }\n\n  // Computed shorthand for this.options.variables, preserved for\n  // backwards compatibility.\n  public get variables(): TVariables | undefined {\n    return this.options.variables;\n  }\n\n  private isTornDown: boolean;\n  private queryManager: QueryManager<any>;\n  private observers = new Set<Observer<ApolloQueryResult<TData>>>();\n  private subscriptions = new Set<ObservableSubscription>();\n\n  private last?: Last<TData, TVariables>;\n\n  private queryInfo: QueryInfo;\n\n  // When this.concast is defined, this.observer is the Observer currently\n  // subscribed to that Concast.\n  private concast?: Concast<ApolloQueryResult<TData>>;\n  private observer?: Observer<ApolloQueryResult<TData>>;\n\n  private pollingInfo?: {\n    interval: number;\n    timeout: ReturnType<typeof setTimeout>;\n  };\n\n  constructor({\n    queryManager,\n    queryInfo,\n    options,\n  }: {\n    queryManager: QueryManager<any>;\n    queryInfo: QueryInfo;\n    options: WatchQueryOptions<TVariables, TData>;\n  }) {\n    super((observer: Observer<ApolloQueryResult<TData>>) => {\n      // Zen Observable has its own error function, so in order to log correctly\n      // we need to provide a custom error callback.\n      try {\n        var subObserver = (observer as any)._subscription._observer;\n        if (subObserver && !subObserver.error) {\n          subObserver.error = defaultSubscriptionObserverErrorCallback;\n        }\n      } catch {}\n\n      const first = !this.observers.size;\n      this.observers.add(observer);\n\n      // Deliver most recent error or result.\n      const last = this.last;\n      if (last && last.error) {\n        observer.error && observer.error(last.error);\n      } else if (last && last.result) {\n        observer.next && observer.next(last.result);\n      }\n\n      // Initiate observation of this query if it hasn't been reported to\n      // the QueryManager yet.\n      if (first) {\n        // Blindly catching here prevents unhandled promise rejections,\n        // and is safe because the ObservableQuery handles this error with\n        // this.observer.error, so we're not just swallowing the error by\n        // ignoring it here.\n        this.reobserve().catch(() => {});\n      }\n\n      return () => {\n        if (this.observers.delete(observer) && !this.observers.size) {\n          this.tearDownQuery();\n        }\n      };\n    });\n\n    // related classes\n    this.queryInfo = queryInfo;\n    this.queryManager = queryManager;\n\n    // active state\n    this.isTornDown = false;\n\n    const {\n      watchQuery: {\n        fetchPolicy: defaultFetchPolicy = \"cache-first\",\n      } = {},\n    } = queryManager.defaultOptions;\n\n    const {\n      fetchPolicy = defaultFetchPolicy,\n      initialFetchPolicy = (\n        // Make sure we don't store \"standby\" as the initialFetchPolicy.\n        fetchPolicy === \"standby\" ? defaultFetchPolicy : fetchPolicy\n      ),\n    } = options;\n\n    this.options = {\n      ...options,\n\n      // Remember the initial options.fetchPolicy so we can revert back to this\n      // policy when variables change. This information can also be specified\n      // (or overridden) by providing options.initialFetchPolicy explicitly.\n      initialFetchPolicy,\n\n      // This ensures this.options.fetchPolicy always has a string value, in\n      // case options.fetchPolicy was not provided.\n      fetchPolicy,\n    };\n\n    this.queryId = queryInfo.queryId || queryManager.generateQueryId();\n\n    const opDef = getOperationDefinition(this.query);\n    this.queryName = opDef && opDef.name && opDef.name.value;\n  }\n\n  public result(): Promise<ApolloQueryResult<TData>> {\n    return new Promise((resolve, reject) => {\n      // TODO: this code doesn’t actually make sense insofar as the observer\n      // will never exist in this.observers due how zen-observable wraps observables.\n      // https://github.com/zenparsing/zen-observable/blob/master/src/Observable.js#L169\n      const observer: Observer<ApolloQueryResult<TData>> = {\n        next: (result: ApolloQueryResult<TData>) => {\n          resolve(result);\n\n          // Stop the query within the QueryManager if we can before\n          // this function returns.\n          //\n          // We do this in order to prevent observers piling up within\n          // the QueryManager. Notice that we only fully unsubscribe\n          // from the subscription in a setTimeout(..., 0)  call. This call can\n          // actually be handled by the browser at a much later time. If queries\n          // are fired in the meantime, observers that should have been removed\n          // from the QueryManager will continue to fire, causing an unnecessary\n          // performance hit.\n          this.observers.delete(observer);\n          if (!this.observers.size) {\n            this.queryManager.removeQuery(this.queryId);\n          }\n\n          setTimeout(() => {\n            subscription.unsubscribe();\n          }, 0);\n        },\n        error: reject,\n      };\n      const subscription = this.subscribe(observer);\n    });\n  }\n\n  public getCurrentResult(saveAsLastResult = true): ApolloQueryResult<TData> {\n    // Use the last result as long as the variables match this.variables.\n    const lastResult = this.getLastResult(true);\n\n    const networkStatus =\n      this.queryInfo.networkStatus ||\n      (lastResult && lastResult.networkStatus) ||\n      NetworkStatus.ready;\n\n    const result = {\n      ...lastResult,\n      loading: isNetworkRequestInFlight(networkStatus),\n      networkStatus,\n    } as ApolloQueryResult<TData>;\n\n    const { fetchPolicy = \"cache-first\" } = this.options;\n    if (\n      // These fetch policies should never deliver data from the cache, unless\n      // redelivering a previously delivered result.\n      fetchPolicy === 'network-only' ||\n      fetchPolicy === 'no-cache' ||\n      fetchPolicy === 'standby' ||\n      // If this.options.query has @client(always: true) fields, we cannot\n      // trust diff.result, since it was read from the cache without running\n      // local resolvers (and it's too late to run resolvers now, since we must\n      // return a result synchronously).\n      this.queryManager.transform(this.options.query).hasForcedResolvers\n    ) {\n      // Fall through.\n    } else {\n      const diff = this.queryInfo.getDiff();\n\n      if (diff.complete || this.options.returnPartialData) {\n        result.data = diff.result;\n      }\n\n      if (equal(result.data, {})) {\n        result.data = void 0 as any;\n      }\n\n      if (diff.complete) {\n        // Similar to setting result.partial to false, but taking advantage of the\n        // falsiness of missing fields.\n        delete result.partial;\n\n        // If the diff is complete, and we're using a FetchPolicy that\n        // terminates after a complete cache read, we can assume the next result\n        // we receive will have NetworkStatus.ready and !loading.\n        if (\n          diff.complete &&\n          result.networkStatus === NetworkStatus.loading &&\n          (fetchPolicy === 'cache-first' ||\n          fetchPolicy === 'cache-only')\n        ) {\n          result.networkStatus = NetworkStatus.ready;\n          result.loading = false;\n        }\n      } else {\n        result.partial = true;\n      }\n\n      if (\n        __DEV__ &&\n        !diff.complete &&\n        !this.options.partialRefetch &&\n        !result.loading &&\n        !result.data &&\n        !result.error\n      ) {\n        logMissingFieldErrors(diff.missing);\n      }\n    }\n\n    if (saveAsLastResult) {\n      this.updateLastResult(result);\n    }\n\n    return result;\n  }\n\n  // Compares newResult to the snapshot we took of this.lastResult when it was\n  // first received.\n  public isDifferentFromLastResult(\n    newResult: ApolloQueryResult<TData>,\n    variables?: TVariables\n  ) {\n    return (\n      !this.last ||\n      !equal(this.last.result, newResult) ||\n      (variables && !equal(this.last.variables, variables))\n    );\n  }\n\n  private getLast<K extends keyof Last<TData, TVariables>>(\n    key: K,\n    variablesMustMatch?: boolean,\n  ) {\n    const last = this.last;\n    if (\n      last &&\n      last[key] &&\n      (!variablesMustMatch || equal(last.variables, this.variables))\n    ) {\n      return last[key];\n    }\n  }\n\n  public getLastResult(variablesMustMatch?: boolean): ApolloQueryResult<TData> | undefined {\n    return this.getLast(\"result\", variablesMustMatch);\n  }\n\n  public getLastError(variablesMustMatch?: boolean): ApolloError | undefined {\n    return this.getLast(\"error\", variablesMustMatch);\n  }\n\n  public resetLastResults(): void {\n    delete this.last;\n    this.isTornDown = false;\n  }\n\n  public resetQueryStoreErrors() {\n    this.queryManager.resetErrors(this.queryId);\n  }\n\n  /**\n   * Update the variables of this observable query, and fetch the new results.\n   * This method should be preferred over `setVariables` in most use cases.\n   *\n   * @param variables: The new set of variables. If there are missing variables,\n   * the previous values of those variables will be used.\n   */\n  public refetch(variables?: Partial<TVariables>): Promise<ApolloQueryResult<TData>> {\n    const reobserveOptions: Partial<WatchQueryOptions<TVariables, TData>> = {\n      // Always disable polling for refetches.\n      pollInterval: 0,\n    };\n\n    // Unless the provided fetchPolicy always consults the network\n    // (no-cache, network-only, or cache-and-network), override it with\n    // network-only to force the refetch for this fetchQuery call.\n    const { fetchPolicy } = this.options;\n    if (fetchPolicy === 'cache-and-network') {\n      reobserveOptions.fetchPolicy = fetchPolicy;\n    } else if (fetchPolicy === 'no-cache') {\n      reobserveOptions.fetchPolicy = 'no-cache';\n    } else {\n      reobserveOptions.fetchPolicy = 'network-only';\n    }\n\n    if (__DEV__ && variables && hasOwnProperty.call(variables, \"variables\")) {\n      const queryDef = getQueryDefinition(this.query);\n      const vars = queryDef.variableDefinitions;\n      if (!vars || !vars.some(v => v.variable.name.value === \"variables\")) {\n        invariant.warn(`Called refetch(${\n          JSON.stringify(variables)\n        }) for query ${\n          queryDef.name?.value || JSON.stringify(queryDef)\n        }, which does not declare a $variables variable.\nDid you mean to call refetch(variables) instead of refetch({ variables })?`);\n      }\n    }\n\n    if (variables && !equal(this.options.variables, variables)) {\n      // Update the existing options with new variables\n      reobserveOptions.variables = this.options.variables = {\n        ...this.options.variables,\n        ...variables,\n      } as TVariables;\n    }\n\n    this.queryInfo.resetLastWrite();\n    return this.reobserve(reobserveOptions, NetworkStatus.refetch);\n  }\n\n  public fetchMore<\n    TFetchData = TData,\n    TFetchVars extends OperationVariables = TVariables,\n  >(fetchMoreOptions: FetchMoreQueryOptions<TFetchVars, TFetchData> & {\n    updateQuery?: (\n      previousQueryResult: TData,\n      options: {\n        fetchMoreResult: TFetchData;\n        variables: TFetchVars;\n      },\n    ) => TData;\n  }): Promise<ApolloQueryResult<TFetchData>> {\n    const combinedOptions = {\n      ...(fetchMoreOptions.query ? fetchMoreOptions : {\n        ...this.options,\n        query: this.query,\n        ...fetchMoreOptions,\n        variables: {\n          ...this.options.variables,\n          ...fetchMoreOptions.variables,\n        },\n      }),\n      // The fetchMore request goes immediately to the network and does\n      // not automatically write its result to the cache (hence no-cache\n      // instead of network-only), because we allow the caller of\n      // fetchMore to provide an updateQuery callback that determines how\n      // the data gets written to the cache.\n      fetchPolicy: \"no-cache\",\n    } as WatchQueryOptions<TFetchVars, TFetchData>;\n\n    const qid = this.queryManager.generateQueryId();\n\n    // Simulate a loading result for the original query with\n    // result.networkStatus === NetworkStatus.fetchMore.\n    const { queryInfo } = this;\n    const originalNetworkStatus = queryInfo.networkStatus;\n    queryInfo.networkStatus = NetworkStatus.fetchMore;\n    if (combinedOptions.notifyOnNetworkStatusChange) {\n      this.observe();\n    }\n\n    const updatedQuerySet = new Set<DocumentNode>();\n\n    return this.queryManager.fetchQuery(\n      qid,\n      combinedOptions,\n      NetworkStatus.fetchMore,\n    ).then(fetchMoreResult => {\n      this.queryManager.removeQuery(qid);\n\n      if (queryInfo.networkStatus === NetworkStatus.fetchMore) {\n        queryInfo.networkStatus = originalNetworkStatus;\n      }\n\n      // Performing this cache update inside a cache.batch transaction ensures\n      // any affected cache.watch watchers are notified at most once about any\n      // updates. Most watchers will be using the QueryInfo class, which\n      // responds to notifications by calling reobserveCacheFirst to deliver\n      // fetchMore cache results back to this ObservableQuery.\n      this.queryManager.cache.batch({\n        update: cache => {\n          const { updateQuery } = fetchMoreOptions;\n          if (updateQuery) {\n            cache.updateQuery({\n              query: this.query,\n              variables: this.variables,\n              returnPartialData: true,\n              optimistic: false,\n            }, previous => updateQuery(previous!, {\n              fetchMoreResult: fetchMoreResult.data,\n              variables: combinedOptions.variables as TFetchVars,\n            }));\n\n          } else {\n            // If we're using a field policy instead of updateQuery, the only\n            // thing we need to do is write the new data to the cache using\n            // combinedOptions.variables (instead of this.variables, which is\n            // what this.updateQuery uses, because it works by abusing the\n            // original field value, keyed by the original variables).\n            cache.writeQuery({\n              query: combinedOptions.query,\n              variables: combinedOptions.variables,\n              data: fetchMoreResult.data,\n            });\n          }\n        },\n\n        onWatchUpdated: watch => {\n          // Record the DocumentNode associated with any watched query whose\n          // data were updated by the cache writes above.\n          updatedQuerySet.add(watch.query);\n        },\n      });\n\n      return fetchMoreResult;\n\n    }).finally(() => {\n      // In case the cache writes above did not generate a broadcast\n      // notification (which would have been intercepted by onWatchUpdated),\n      // likely because the written data were the same as what was already in\n      // the cache, we still want fetchMore to deliver its final loading:false\n      // result with the unchanged data.\n      if (!updatedQuerySet.has(this.query)) {\n        reobserveCacheFirst(this);\n      }\n    });\n  }\n\n  // XXX the subscription variables are separate from the query variables.\n  // if you want to update subscription variables, right now you have to do that separately,\n  // and you can only do it by stopping the subscription and then subscribing again with new variables.\n  public subscribeToMore<\n    TSubscriptionData = TData,\n    TSubscriptionVariables extends OperationVariables = TVariables\n  >(\n    options: SubscribeToMoreOptions<\n      TData,\n      TSubscriptionVariables,\n      TSubscriptionData\n    >,\n  ) {\n    const subscription = this.queryManager\n      .startGraphQLSubscription({\n        query: options.document,\n        variables: options.variables,\n        context: options.context,\n      })\n      .subscribe({\n        next: (subscriptionData: { data: TSubscriptionData }) => {\n          const { updateQuery } = options;\n          if (updateQuery) {\n            this.updateQuery<TSubscriptionVariables>(\n              (previous, { variables }) =>\n                updateQuery(previous, {\n                  subscriptionData,\n                  variables,\n                }),\n            );\n          }\n        },\n        error: (err: any) => {\n          if (options.onError) {\n            options.onError(err);\n            return;\n          }\n          invariant.error('Unhandled GraphQL subscription error', err);\n        },\n      });\n\n    this.subscriptions.add(subscription);\n\n    return () => {\n      if (this.subscriptions.delete(subscription)) {\n        subscription.unsubscribe();\n      }\n    };\n  }\n\n  public setOptions(\n    newOptions: Partial<WatchQueryOptions<TVariables, TData>>,\n  ): Promise<ApolloQueryResult<TData>> {\n    return this.reobserve(newOptions);\n  }\n\n  /**\n   * Update the variables of this observable query, and fetch the new results\n   * if they've changed. Most users should prefer `refetch` instead of\n   * `setVariables` in order to to be properly notified of results even when\n   * they come from the cache.\n   *\n   * Note: the `next` callback will *not* fire if the variables have not changed\n   * or if the result is coming from cache.\n   *\n   * Note: the promise will return the old results immediately if the variables\n   * have not changed.\n   *\n   * Note: the promise will return null immediately if the query is not active\n   * (there are no subscribers).\n   *\n   * @private\n   *\n   * @param variables: The new set of variables. If there are missing variables,\n   * the previous values of those variables will be used.\n   */\n  public setVariables(\n    variables: TVariables,\n  ): Promise<ApolloQueryResult<TData> | void> {\n    if (equal(this.variables, variables)) {\n      // If we have no observers, then we don't actually want to make a network\n      // request. As soon as someone observes the query, the request will kick\n      // off. For now, we just store any changes. (See #1077)\n      return this.observers.size\n        ? this.result()\n        : Promise.resolve();\n    }\n\n    this.options.variables = variables;\n\n    // See comment above\n    if (!this.observers.size) {\n      return Promise.resolve();\n    }\n\n    return this.reobserve({\n      // Reset options.fetchPolicy to its original value.\n      fetchPolicy: this.options.initialFetchPolicy,\n      variables,\n    }, NetworkStatus.setVariables);\n  }\n\n  public updateQuery<TVars extends OperationVariables = TVariables>(\n    mapFn: (\n      previousQueryResult: TData,\n      options: Pick<WatchQueryOptions<TVars, TData>, \"variables\">,\n    ) => TData,\n  ): void {\n    const { queryManager } = this;\n    const { result } = queryManager.cache.diff<TData>({\n      query: this.options.query,\n      variables: this.variables,\n      returnPartialData: true,\n      optimistic: false,\n    });\n\n    const newResult = mapFn(result!, {\n      variables: (this as any).variables,\n    });\n\n    if (newResult) {\n      queryManager.cache.writeQuery({\n        query: this.options.query,\n        data: newResult,\n        variables: this.variables,\n      });\n\n      queryManager.broadcastQueries();\n    }\n  }\n\n  public startPolling(pollInterval: number) {\n    this.options.pollInterval = pollInterval;\n    this.updatePolling();\n  }\n\n  public stopPolling() {\n    this.options.pollInterval = 0;\n    this.updatePolling();\n  }\n\n  // Update options.fetchPolicy according to options.nextFetchPolicy.\n  private applyNextFetchPolicy(\n    reason: NextFetchPolicyContext<TData, TVariables>[\"reason\"],\n    // It's possible to use this method to apply options.nextFetchPolicy to\n    // options.fetchPolicy even if options !== this.options, though that happens\n    // most often when the options are temporary, used for only one request and\n    // then thrown away, so nextFetchPolicy may not end up mattering.\n    options: WatchQueryOptions<TVariables, TData>,\n  ) {\n    if (options.nextFetchPolicy) {\n      const {\n        fetchPolicy = \"cache-first\",\n        initialFetchPolicy = fetchPolicy,\n      } = options;\n\n      if (fetchPolicy === \"standby\") {\n        // Do nothing, leaving options.fetchPolicy unchanged.\n      } else if (typeof options.nextFetchPolicy === \"function\") {\n        // When someone chooses \"cache-and-network\" or \"network-only\" as their\n        // initial FetchPolicy, they often do not want future cache updates to\n        // trigger unconditional network requests, which is what repeatedly\n        // applying the \"cache-and-network\" or \"network-only\" policies would\n        // seem to imply. Instead, when the cache reports an update after the\n        // initial network request, it may be desirable for subsequent network\n        // requests to be triggered only if the cache result is incomplete. To\n        // that end, the options.nextFetchPolicy option provides an easy way to\n        // update options.fetchPolicy after the initial network request, without\n        // having to call observableQuery.setOptions.\n        options.fetchPolicy = options.nextFetchPolicy(fetchPolicy, {\n          reason,\n          options,\n          observable: this,\n          initialFetchPolicy,\n        });\n      } else if (reason === \"variables-changed\") {\n        options.fetchPolicy = initialFetchPolicy;\n      } else {\n        options.fetchPolicy = options.nextFetchPolicy;\n      }\n    }\n\n    return options.fetchPolicy;\n  }\n\n  private fetch(\n    options: WatchQueryOptions<TVariables, TData>,\n    newNetworkStatus?: NetworkStatus,\n  ) {\n    // TODO Make sure we update the networkStatus (and infer fetchVariables)\n    // before actually committing to the fetch.\n    this.queryManager.setObservableQuery(this);\n    return this.queryManager['fetchConcastWithInfo'](\n      this.queryId,\n      options,\n      newNetworkStatus,\n    );\n  }\n\n  // Turns polling on or off based on this.options.pollInterval.\n  private updatePolling() {\n    // Avoid polling in SSR mode\n    if (this.queryManager.ssrMode) {\n      return;\n    }\n\n    const {\n      pollingInfo,\n      options: {\n        pollInterval,\n      },\n    } = this;\n\n    if (!pollInterval) {\n      if (pollingInfo) {\n        clearTimeout(pollingInfo.timeout);\n        delete this.pollingInfo;\n      }\n      return;\n    }\n\n    if (pollingInfo &&\n        pollingInfo.interval === pollInterval) {\n      return;\n    }\n\n    invariant(\n      pollInterval,\n      'Attempted to start a polling query without a polling interval.',\n    );\n\n    const info = pollingInfo || (this.pollingInfo = {} as any);\n    info.interval = pollInterval;\n\n    const maybeFetch = () => {\n      if (this.pollingInfo) {\n        if (!isNetworkRequestInFlight(this.queryInfo.networkStatus)) {\n          this.reobserve({\n            // Most fetchPolicy options don't make sense to use in a polling context, as\n            // users wouldn't want to be polling the cache directly. However, network-only and\n            // no-cache are both useful for when the user wants to control whether or not the\n            // polled results are written to the cache.\n            fetchPolicy: this.options.initialFetchPolicy === 'no-cache' ? 'no-cache' : 'network-only',\n          }, NetworkStatus.poll).then(poll, poll);\n        } else {\n          poll();\n        }\n      };\n    };\n\n    const poll = () => {\n      const info = this.pollingInfo;\n      if (info) {\n        clearTimeout(info.timeout);\n        info.timeout = setTimeout(maybeFetch, info.interval);\n      }\n    };\n\n    poll();\n  }\n\n  private updateLastResult(\n    newResult: ApolloQueryResult<TData>,\n    variables = this.variables,\n  ) {\n    this.last = {\n      ...this.last,\n      result: this.queryManager.assumeImmutableResults\n        ? newResult\n        : cloneDeep(newResult),\n      variables,\n    };\n    if (!isNonEmptyArray(newResult.errors)) {\n      delete this.last.error;\n    }\n    return this.last;\n  }\n\n  public reobserveAsConcast(\n    newOptions?: Partial<WatchQueryOptions<TVariables, TData>>,\n    newNetworkStatus?: NetworkStatus,\n  ): Concast<ApolloQueryResult<TData>> {\n    this.isTornDown = false;\n\n    const useDisposableConcast =\n      // Refetching uses a disposable Concast to allow refetches using different\n      // options/variables, without permanently altering the options of the\n      // original ObservableQuery.\n      newNetworkStatus === NetworkStatus.refetch ||\n      // The fetchMore method does not actually call the reobserve method, but,\n      // if it did, it would definitely use a disposable Concast.\n      newNetworkStatus === NetworkStatus.fetchMore ||\n      // Polling uses a disposable Concast so the polling options (which force\n      // fetchPolicy to be \"network-only\" or \"no-cache\") won't override the original options.\n      newNetworkStatus === NetworkStatus.poll;\n\n    // Save the old variables, since Object.assign may modify them below.\n    const oldVariables = this.options.variables;\n    const oldFetchPolicy = this.options.fetchPolicy;\n\n    const mergedOptions = compact(this.options, newOptions || {});\n    const options = useDisposableConcast\n      // Disposable Concast fetches receive a shallow copy of this.options\n      // (merged with newOptions), leaving this.options unmodified.\n      ? mergedOptions\n      : assign(this.options, mergedOptions);\n\n    if (!useDisposableConcast) {\n      // We can skip calling updatePolling if we're not changing this.options.\n      this.updatePolling();\n\n      // Reset options.fetchPolicy to its original value when variables change,\n      // unless a new fetchPolicy was provided by newOptions.\n      if (\n        newOptions &&\n        newOptions.variables &&\n        !equal(newOptions.variables, oldVariables) &&\n        // Don't mess with the fetchPolicy if it's currently \"standby\".\n        options.fetchPolicy !== \"standby\" &&\n        // If we're changing the fetchPolicy anyway, don't try to change it here\n        // using applyNextFetchPolicy. The explicit options.fetchPolicy wins.\n        options.fetchPolicy === oldFetchPolicy\n      ) {\n        this.applyNextFetchPolicy(\"variables-changed\", options);\n        if (newNetworkStatus === void 0) {\n          newNetworkStatus = NetworkStatus.setVariables;\n        }\n      }\n    }\n\n    const variables = options.variables && { ...options.variables };\n    const { concast, fromLink } = this.fetch(options, newNetworkStatus);\n    const observer: Observer<ApolloQueryResult<TData>> = {\n      next: result => {\n        this.reportResult(result, variables);\n      },\n      error: error => {\n        this.reportError(error, variables);\n      },\n    };\n\n    if (!useDisposableConcast && fromLink) {\n      // We use the {add,remove}Observer methods directly to avoid wrapping\n      // observer with an unnecessary SubscriptionObserver object.\n      if (this.concast && this.observer) {\n        this.concast.removeObserver(this.observer);\n      }\n\n      this.concast = concast;\n      this.observer = observer;\n    }\n\n    concast.addObserver(observer);\n\n    return concast;\n  }\n\n  public reobserve(\n    newOptions?: Partial<WatchQueryOptions<TVariables, TData>>,\n    newNetworkStatus?: NetworkStatus,\n  ) {\n    return this.reobserveAsConcast(newOptions, newNetworkStatus).promise;\n  }\n\n  // (Re)deliver the current result to this.observers without applying fetch\n  // policies or making network requests.\n  private observe() {\n    this.reportResult(\n      // Passing false is important so that this.getCurrentResult doesn't\n      // save the fetchMore result as this.lastResult, causing it to be\n      // ignored due to the this.isDifferentFromLastResult check in\n      // this.reportResult.\n      this.getCurrentResult(false),\n      this.variables,\n    );\n  }\n\n  private reportResult(\n    result: ApolloQueryResult<TData>,\n    variables: TVariables | undefined,\n  ) {\n    const lastError = this.getLastError();\n    if (lastError || this.isDifferentFromLastResult(result, variables)) {\n      if (lastError || !result.partial || this.options.returnPartialData) {\n        this.updateLastResult(result, variables);\n      }\n\n      iterateObserversSafely(this.observers, 'next', result);\n    }\n  }\n\n  private reportError(\n    error: ApolloError,\n    variables: TVariables | undefined,\n  ) {\n    // Since we don't get the current result on errors, only the error, we\n    // must mirror the updates that occur in QueryStore.markQueryError here\n    const errorResult = {\n      ...this.getLastResult(),\n      error,\n      errors: error.graphQLErrors,\n      networkStatus: NetworkStatus.error,\n      loading: false,\n    } as ApolloQueryResult<TData>;\n\n    this.updateLastResult(errorResult, variables);\n\n    iterateObserversSafely(this.observers, 'error', this.last!.error = error);\n  }\n\n  public hasObservers() {\n    return this.observers.size > 0;\n  }\n\n  private tearDownQuery() {\n    if (this.isTornDown) return;\n    if (this.concast && this.observer) {\n      this.concast.removeObserver(this.observer);\n      delete this.concast;\n      delete this.observer;\n    }\n\n    this.stopPolling();\n    // stop all active GraphQL subscriptions\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n    this.subscriptions.clear();\n    this.queryManager.stopQuery(this.queryId);\n    this.observers.clear();\n    this.isTornDown = true;\n  }\n}\n\n// Necessary because the ObservableQuery constructor has a different\n// signature than the Observable constructor.\nfixObservableSubclass(ObservableQuery);\n\n// Reobserve with fetchPolicy effectively set to \"cache-first\", triggering\n// delivery of any new data from the cache, possibly falling back to the network\n// if any cache data are missing. This allows _complete_ cache results to be\n// delivered without also kicking off unnecessary network requests when\n// this.options.fetchPolicy is \"cache-and-network\" or \"network-only\". When\n// this.options.fetchPolicy is any other policy (\"cache-first\", \"cache-only\",\n// \"standby\", or \"no-cache\"), we call this.reobserve() as usual.\nexport function reobserveCacheFirst<TData, TVars extends OperationVariables>(\n  obsQuery: ObservableQuery<TData, TVars>,\n) {\n  const { fetchPolicy, nextFetchPolicy } = obsQuery.options;\n\n  if (\n    fetchPolicy === \"cache-and-network\" ||\n    fetchPolicy === \"network-only\"\n  ) {\n    return obsQuery.reobserve({\n      fetchPolicy: \"cache-first\",\n      // Use a temporary nextFetchPolicy function that replaces itself with the\n      // previous nextFetchPolicy value and returns the original fetchPolicy.\n      nextFetchPolicy(this: WatchQueryOptions<TVars, TData>) {\n        // Replace this nextFetchPolicy function in the options object with the\n        // original this.options.nextFetchPolicy value.\n        this.nextFetchPolicy = nextFetchPolicy;\n        // If the original nextFetchPolicy value was a function, give it a\n        // chance to decide what happens here.\n        if (typeof nextFetchPolicy === \"function\") {\n          return nextFetchPolicy.apply(this, arguments);\n        }\n        // Otherwise go back to the original this.options.fetchPolicy.\n        return fetchPolicy!;\n      },\n    });\n  }\n\n  return obsQuery.reobserve();\n}\n\nfunction defaultSubscriptionObserverErrorCallback(error: ApolloError) {\n  invariant.error('Unhandled error', error.message, error.stack);\n}\n\nexport function logMissingFieldErrors(\n  missing: MissingFieldError[] | MissingTree | undefined,\n) {\n  if (__DEV__ && missing) {\n    invariant.debug(`Missing cache result fields: ${\n      JSON.stringify(missing)\n    }`, missing);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}