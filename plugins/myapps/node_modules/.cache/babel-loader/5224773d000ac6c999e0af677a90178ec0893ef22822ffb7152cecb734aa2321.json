{"ast":null,"code":"import _classCallCheck from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { ToolbarItem } from './ToolbarItem';\nimport { ChipGroup } from '../ChipGroup';\nimport { Chip } from '../Chip';\nimport { ToolbarContentContext, ToolbarContext } from './ToolbarUtils';\nexport var ToolbarFilter = /*#__PURE__*/function (_React$Component) {\n  _inherits(ToolbarFilter, _React$Component);\n  var _super = _createSuper(ToolbarFilter);\n  function ToolbarFilter(props) {\n    var _this;\n    _classCallCheck(this, ToolbarFilter);\n    _this = _super.call(this, props);\n    _this.state = {\n      isMounted: false\n    };\n    return _this;\n  }\n  _createClass(ToolbarFilter, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props = this.props,\n        categoryName = _this$props.categoryName,\n        chips = _this$props.chips;\n      this.context.updateNumberFilters(typeof categoryName !== 'string' && categoryName.hasOwnProperty('key') ? categoryName.key : categoryName.toString(), chips.length);\n      this.setState({\n        isMounted: true\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var _this$props2 = this.props,\n        categoryName = _this$props2.categoryName,\n        chips = _this$props2.chips;\n      this.context.updateNumberFilters(typeof categoryName !== 'string' && categoryName.hasOwnProperty('key') ? categoryName.key : categoryName.toString(), chips.length);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _a = this.props,\n        children = _a.children,\n        chips = _a.chips,\n        deleteChipGroup = _a.deleteChipGroup,\n        deleteChip = _a.deleteChip,\n        chipGroupExpandedText = _a.chipGroupExpandedText,\n        chipGroupCollapsedText = _a.chipGroupCollapsedText,\n        categoryName = _a.categoryName,\n        showToolbarItem = _a.showToolbarItem,\n        props = __rest(_a, [\"children\", \"chips\", \"deleteChipGroup\", \"deleteChip\", \"chipGroupExpandedText\", \"chipGroupCollapsedText\", \"categoryName\", \"showToolbarItem\"]);\n      var _this$context = this.context,\n        isExpanded = _this$context.isExpanded,\n        chipGroupContentRef = _this$context.chipGroupContentRef;\n      var categoryKey = typeof categoryName !== 'string' && categoryName.hasOwnProperty('key') ? categoryName.key : categoryName.toString();\n      var chipGroup = chips.length ? React.createElement(ToolbarItem, {\n        variant: \"chip-group\"\n      }, React.createElement(ChipGroup, {\n        key: categoryKey,\n        categoryName: typeof categoryName === 'string' ? categoryName : categoryName.name,\n        isClosable: deleteChipGroup !== undefined,\n        onClick: function onClick() {\n          return deleteChipGroup(categoryName);\n        },\n        collapsedText: chipGroupCollapsedText,\n        expandedText: chipGroupExpandedText\n      }, chips.map(function (chip) {\n        return typeof chip === 'string' ? React.createElement(Chip, {\n          key: chip,\n          onClick: function onClick() {\n            return deleteChip(categoryKey, chip);\n          }\n        }, chip) : React.createElement(Chip, {\n          key: chip.key,\n          onClick: function onClick() {\n            return deleteChip(categoryKey, chip);\n          }\n        }, chip.node);\n      }))) : null;\n      if (!isExpanded && this.state.isMounted) {\n        return React.createElement(React.Fragment, null, showToolbarItem && React.createElement(ToolbarItem, Object.assign({}, props), children), ReactDOM.createPortal(chipGroup, chipGroupContentRef.current.firstElementChild));\n      }\n      return React.createElement(ToolbarContentContext.Consumer, null, function (_ref) {\n        var chipContainerRef = _ref.chipContainerRef;\n        return React.createElement(React.Fragment, null, showToolbarItem && React.createElement(ToolbarItem, Object.assign({}, props), children), chipContainerRef.current && ReactDOM.createPortal(chipGroup, chipContainerRef.current));\n      });\n    }\n  }]);\n  return ToolbarFilter;\n}(React.Component);\nToolbarFilter.displayName = 'ToolbarFilter';\nToolbarFilter.contextType = ToolbarContext;\nToolbarFilter.defaultProps = {\n  chips: [],\n  showToolbarItem: true\n};","map":{"version":3,"names":["React","ReactDOM","ToolbarItem","ChipGroup","Chip","ToolbarContentContext","ToolbarContext","ToolbarFilter","_React$Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","state","isMounted","_createClass","key","value","componentDidMount","_this$props","categoryName","chips","context","updateNumberFilters","hasOwnProperty","toString","length","setState","componentDidUpdate","_this$props2","render","_a","children","deleteChipGroup","deleteChip","chipGroupExpandedText","chipGroupCollapsedText","showToolbarItem","__rest","_this$context","isExpanded","chipGroupContentRef","categoryKey","chipGroup","createElement","variant","name","isClosable","undefined","onClick","collapsedText","expandedText","map","chip","node","Fragment","Object","assign","createPortal","current","firstElementChild","Consumer","_ref","chipContainerRef","Component","displayName","contextType","defaultProps"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@patternfly/react-core/src/components/Toolbar/ToolbarFilter.tsx"],"sourcesContent":["import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { ToolbarItem, ToolbarItemProps } from './ToolbarItem';\nimport { ChipGroup } from '../ChipGroup';\nimport { Chip } from '../Chip';\nimport { ToolbarContentContext, ToolbarContext } from './ToolbarUtils';\nimport { PickOptional } from '../../helpers/typeUtils';\n\nexport interface ToolbarChipGroup {\n  /** A unique key to identify this chip group category */\n  key: string;\n  /** The category name to display for the chip group */\n  name: string;\n}\n\nexport interface ToolbarChip {\n  /** A unique key to identify this chip */\n  key: string;\n  /** The ReactNode to display in the chip */\n  node: React.ReactNode;\n}\n\nexport interface ToolbarFilterProps extends ToolbarItemProps {\n  /** An array of strings to be displayed as chips in the expandable content */\n  chips?: (string | ToolbarChip)[];\n  /** Callback passed by consumer used to close the entire chip group */\n  deleteChipGroup?: (category: string | ToolbarChipGroup) => void;\n  /** Callback passed by consumer used to delete a chip from the chips[] */\n  deleteChip?: (category: string | ToolbarChipGroup, chip: ToolbarChip | string) => void;\n  /** Customizable \"Show Less\" text string for the chip group */\n  chipGroupExpandedText?: string;\n  /** Customizeable template string for the chip group. Use variable \"${remaining}\" for the overflow chip count. */\n  chipGroupCollapsedText?: string;\n  /** Content to be rendered inside the data toolbar item associated with the chip group */\n  children: React.ReactNode;\n  /** Unique category name to be used as a label for the chip group */\n  categoryName: string | ToolbarChipGroup;\n  /** Flag to show the toolbar item */\n  showToolbarItem?: boolean;\n}\n\ninterface ToolbarFilterState {\n  isMounted: boolean;\n}\n\nexport class ToolbarFilter extends React.Component<ToolbarFilterProps, ToolbarFilterState> {\n  static displayName = 'ToolbarFilter';\n  static contextType = ToolbarContext;\n  context!: React.ContextType<typeof ToolbarContext>;\n  static defaultProps: PickOptional<ToolbarFilterProps> = {\n    chips: [] as (string | ToolbarChip)[],\n    showToolbarItem: true\n  };\n\n  constructor(props: ToolbarFilterProps) {\n    super(props);\n    this.state = {\n      isMounted: false\n    };\n  }\n\n  componentDidMount() {\n    const { categoryName, chips } = this.props;\n    this.context.updateNumberFilters(\n      typeof categoryName !== 'string' && categoryName.hasOwnProperty('key')\n        ? categoryName.key\n        : categoryName.toString(),\n      chips.length\n    );\n    this.setState({ isMounted: true });\n  }\n\n  componentDidUpdate() {\n    const { categoryName, chips } = this.props;\n    this.context.updateNumberFilters(\n      typeof categoryName !== 'string' && categoryName.hasOwnProperty('key')\n        ? categoryName.key\n        : categoryName.toString(),\n      chips.length\n    );\n  }\n\n  render() {\n    const {\n      children,\n      chips,\n      deleteChipGroup,\n      deleteChip,\n      chipGroupExpandedText,\n      chipGroupCollapsedText,\n      categoryName,\n      showToolbarItem,\n      ...props\n    } = this.props;\n    const { isExpanded, chipGroupContentRef } = this.context;\n    const categoryKey =\n      typeof categoryName !== 'string' && categoryName.hasOwnProperty('key')\n        ? categoryName.key\n        : categoryName.toString();\n\n    const chipGroup = chips.length ? (\n      <ToolbarItem variant=\"chip-group\">\n        <ChipGroup\n          key={categoryKey}\n          categoryName={typeof categoryName === 'string' ? categoryName : categoryName.name}\n          isClosable={deleteChipGroup !== undefined}\n          onClick={() => deleteChipGroup(categoryName)}\n          collapsedText={chipGroupCollapsedText}\n          expandedText={chipGroupExpandedText}\n        >\n          {chips.map(chip =>\n            typeof chip === 'string' ? (\n              <Chip key={chip} onClick={() => deleteChip(categoryKey, chip)}>\n                {chip}\n              </Chip>\n            ) : (\n              <Chip key={chip.key} onClick={() => deleteChip(categoryKey, chip)}>\n                {chip.node}\n              </Chip>\n            )\n          )}\n        </ChipGroup>\n      </ToolbarItem>\n    ) : null;\n\n    if (!isExpanded && this.state.isMounted) {\n      return (\n        <React.Fragment>\n          {showToolbarItem && <ToolbarItem {...props}>{children}</ToolbarItem>}\n          {ReactDOM.createPortal(chipGroup, chipGroupContentRef.current.firstElementChild)}\n        </React.Fragment>\n      );\n    }\n\n    return (\n      <ToolbarContentContext.Consumer>\n        {({ chipContainerRef }) => (\n          <React.Fragment>\n            {showToolbarItem && <ToolbarItem {...props}>{children}</ToolbarItem>}\n            {chipContainerRef.current && ReactDOM.createPortal(chipGroup, chipContainerRef.current)}\n          </React.Fragment>\n        )}\n      </ToolbarContentContext.Consumer>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}