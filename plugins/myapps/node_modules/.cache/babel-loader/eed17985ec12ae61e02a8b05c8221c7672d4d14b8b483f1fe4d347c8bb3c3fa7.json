{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport styles from '@patternfly/react-styles/css/components/DataList/data-list';\nimport { Button, ButtonVariant } from '../Button';\nexport var DataListToggle = function DataListToggle(_a) {\n  var _a$className = _a.className,\n    className = _a$className === void 0 ? '' : _a$className,\n    _a$isExpanded = _a.isExpanded,\n    isExpanded = _a$isExpanded === void 0 ? false : _a$isExpanded,\n    _a$ariaControls = _a['aria-controls'],\n    ariaControls = _a$ariaControls === void 0 ? '' : _a$ariaControls,\n    _a$ariaLabel = _a['aria-label'],\n    ariaLabel = _a$ariaLabel === void 0 ? 'Details' : _a$ariaLabel,\n    _a$rowid = _a.rowid,\n    rowid = _a$rowid === void 0 ? '' : _a$rowid,\n    id = _a.id,\n    buttonProps = _a.buttonProps,\n    props = __rest(_a, [\"className\", \"isExpanded\", 'aria-controls', 'aria-label', \"rowid\", \"id\", \"buttonProps\"]);\n  return React.createElement(\"div\", Object.assign({\n    className: css(styles.dataListItemControl, className)\n  }, props), React.createElement(\"div\", {\n    className: css(styles.dataListToggle)\n  }, React.createElement(Button, Object.assign({\n    id: id,\n    variant: ButtonVariant.plain,\n    \"aria-controls\": ariaControls !== '' && ariaControls,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabel !== 'Details' ? null : \"\".concat(rowid, \" \").concat(id),\n    \"aria-expanded\": isExpanded\n  }, buttonProps), React.createElement(\"div\", {\n    className: css(styles.dataListToggleIcon)\n  }, React.createElement(AngleRightIcon, null)))));\n};\nDataListToggle.displayName = 'DataListToggle';","map":{"version":3,"names":["React","css","AngleRightIcon","styles","Button","ButtonVariant","DataListToggle","_a","className","_a$className","_a$isExpanded","isExpanded","_a$ariaControls","ariaControls","_a$ariaLabel","ariaLabel","_a$rowid","rowid","id","buttonProps","props","__rest","createElement","Object","assign","dataListItemControl","dataListToggle","variant","plain","concat","dataListToggleIcon","displayName"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@patternfly/react-core/src/components/DataList/DataListToggle.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport styles from '@patternfly/react-styles/css/components/DataList/data-list';\nimport { Button, ButtonProps, ButtonVariant } from '../Button';\n\nexport interface DataListToggleProps extends React.HTMLProps<HTMLDivElement> {\n  /** Additional classes added to the DataList cell */\n  className?: string;\n  /** Flag to show if the expanded content of the DataList item is visible */\n  isExpanded?: boolean;\n  /** Identify the DataList toggle number */\n  id: string;\n  /** Id for the row */\n  rowid?: string;\n  /** Adds accessible text to the DataList toggle */\n  'aria-labelledby'?: string;\n  /** Adds accessible text to the DataList toggle */\n  'aria-label'?: string;\n  /** Allows users of some screen readers to shift focus to the controlled element. Should be used when the controlled contents are not adjacent to the toggle that controls them. */\n  'aria-controls'?: string;\n  /** Additional properties spread to the toggle button */\n  buttonProps?: ButtonProps;\n}\n\nexport const DataListToggle: React.FunctionComponent<DataListToggleProps> = ({\n  className = '',\n  isExpanded = false,\n  'aria-controls': ariaControls = '',\n  'aria-label': ariaLabel = 'Details',\n  rowid = '',\n  id,\n  buttonProps,\n  ...props\n}: DataListToggleProps) => (\n  <div className={css(styles.dataListItemControl, className)} {...props}>\n    <div className={css(styles.dataListToggle)}>\n      <Button\n        id={id}\n        variant={ButtonVariant.plain}\n        aria-controls={ariaControls !== '' && ariaControls}\n        aria-label={ariaLabel}\n        aria-labelledby={ariaLabel !== 'Details' ? null : `${rowid} ${id}`}\n        aria-expanded={isExpanded}\n        {...buttonProps}\n      >\n        <div className={css(styles.dataListToggleIcon)}>\n          <AngleRightIcon />\n        </div>\n      </Button>\n    </div>\n  </div>\n);\nDataListToggle.displayName = 'DataListToggle';\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,GAAG,QAAQ,0BAA0B;AAC9C,OAAOC,cAAc,MAAM,yDAAyD;AACpF,OAAOC,MAAM,MAAM,4DAA4D;AAC/E,SAASC,MAAM,EAAeC,aAAa,QAAQ,WAAW;AAqB9D,OAAO,IAAMC,cAAc,GAAiD,SAA/DA,cAAcA,CAAkDC,EASvD,EAAI;qBAFbA,EAES,CARpBC,SAAS;IAATA,SAAS,GAAAC,YAAA,cAAG,EAAE,GAAAA,YAAA;IAAAC,aAAA,GAMHH,EAES,CAPpBI,UAAU;IAAVA,UAAU,GAAAD,aAAA,cAAG,KAAK,GAAAA,aAAA;IAAAE,eAAA,GAKPL,EAES,CANpB,eAAe;IAAEM,YAAY,GAAAD,eAAA,cAAG,EAAE,GAAAA,eAAA;IAAAE,YAAA,GAIvBP,EAES,CALpB,YAAY;IAAEQ,SAAS,GAAAD,YAAA,cAAG,SAAS,GAAAA,YAAA;IAAAE,QAAA,GAGxBT,EAES,CAJpBU,KAAK;IAALA,KAAK,GAAAD,QAAA,cAAG,EAAE,GAAAA,QAAA;IACVE,EAAE,GACSX,EAES,CAHpBW,EAAE;IACFC,WAAW,GAAAZ,EAES,CAFpBY,WAAW;IACRC,KAAK,GAAAC,MAAA,CAAAd,EAAA,EARmE,wFAS5E,CADS;EACiB,OACzBP,KAAA,CAAAsB,aAAA,QAAAC,MAAA,CAAAC,MAAA;IAAKhB,SAAS,EAAEP,GAAG,CAACE,MAAM,CAACsB,mBAAmB,EAAEjB,SAAS;EAAC,GAAMY,KAAK,GACnEpB,KAAA,CAAAsB,aAAA;IAAKd,SAAS,EAAEP,GAAG,CAACE,MAAM,CAACuB,cAAc;EAAC,GACxC1B,KAAA,CAAAsB,aAAA,CAAClB,MAAM,EAAAmB,MAAA,CAAAC,MAAA;IACLN,EAAE,EAAEA,EAAE;IACNS,OAAO,EAAEtB,aAAa,CAACuB,KAAK;IAAA,iBACbf,YAAY,KAAK,EAAE,IAAIA,YAAY;IAAA,cACtCE,SAAS;IAAA,mBACJA,SAAS,KAAK,SAAS,GAAG,IAAI,MAAAc,MAAA,CAAMZ,KAAK,OAAAY,MAAA,CAAIX,EAAE,CAAE;IAAA,iBACnDP;EAAU,GACrBQ,WAAW,GAEfnB,KAAA,CAAAsB,aAAA;IAAKd,SAAS,EAAEP,GAAG,CAACE,MAAM,CAAC2B,kBAAkB;EAAC,GAC5C9B,KAAA,CAAAsB,aAAA,CAACpB,cAAc,OAAG,CACd,CACC,CACL,CACF;CACP;AACDI,cAAc,CAACyB,WAAW,GAAG,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}