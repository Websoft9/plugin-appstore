{"ast":null,"code":"import _createClass from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ClipboardCopy/clipboard-copy';\nimport { css } from '@patternfly/react-styles';\nimport { PopoverPosition } from '../Popover';\nimport { TextInput } from '../TextInput';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nimport { ClipboardCopyButton } from './ClipboardCopyButton';\nimport { ClipboardCopyToggle } from './ClipboardCopyToggle';\nimport { ClipboardCopyExpanded } from './ClipboardCopyExpanded';\nimport { getOUIAProps } from '../../helpers';\nexport var clipboardCopyFunc = function clipboardCopyFunc(event, text) {\n  navigator.clipboard.writeText(text.toString());\n};\nexport var ClipboardCopyVariant;\n(function (ClipboardCopyVariant) {\n  ClipboardCopyVariant[\"inline\"] = \"inline\";\n  ClipboardCopyVariant[\"expansion\"] = \"expansion\";\n  ClipboardCopyVariant[\"inlineCompact\"] = \"inline-compact\";\n})(ClipboardCopyVariant || (ClipboardCopyVariant = {}));\nexport var ClipboardCopy = /*#__PURE__*/function (_React$Component) {\n  _inherits(ClipboardCopy, _React$Component);\n  var _super = _createSuper(ClipboardCopy);\n  function ClipboardCopy(props) {\n    var _this;\n    _classCallCheck(this, ClipboardCopy);\n    _this = _super.call(this, props);\n    _this.timer = null;\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _this.componentDidUpdate = function (prevProps, prevState) {\n      if (prevProps.children !== _this.props.children) {\n        _this.updateText(_this.props.children);\n      }\n    };\n    _this.componentWillUnmount = function () {\n      if (_this.timer) {\n        window.clearTimeout(_this.timer);\n      }\n    };\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _this.expandContent = function (_event) {\n      _this.setState(function (prevState) {\n        return {\n          expanded: !prevState.expanded\n        };\n      });\n    };\n    _this.updateText = function (text) {\n      _this.setState({\n        text: text\n      });\n      _this.props.onChange(text);\n    };\n    _this.render = function () {\n      var _a = _this.props,\n        isExpanded = _a.isExpanded,\n        onChange = _a.onChange,\n        switchDelay = _a.switchDelay,\n        isReadOnly = _a.isReadOnly,\n        isCode = _a.isCode,\n        isBlock = _a.isBlock,\n        exitDelay = _a.exitDelay,\n        maxWidth = _a.maxWidth,\n        entryDelay = _a.entryDelay,\n        onCopy = _a.onCopy,\n        hoverTip = _a.hoverTip,\n        clickTip = _a.clickTip,\n        textAriaLabel = _a.textAriaLabel,\n        toggleAriaLabel = _a.toggleAriaLabel,\n        variant = _a.variant,\n        position = _a.position,\n        className = _a.className,\n        additionalActions = _a.additionalActions,\n        ouiaId = _a.ouiaId,\n        ouiaSafe = _a.ouiaSafe,\n        removeFindDomNode = _a.removeFindDomNode,\n        divProps = __rest(_a, [\"isExpanded\", \"onChange\", \"switchDelay\", \"isReadOnly\", \"isCode\", \"isBlock\", \"exitDelay\", \"maxWidth\", \"entryDelay\", \"onCopy\", \"hoverTip\", \"clickTip\", \"textAriaLabel\", \"toggleAriaLabel\", \"variant\", \"position\", \"className\", \"additionalActions\", \"ouiaId\", \"ouiaSafe\", \"removeFindDomNode\"]);\n      var textIdPrefix = 'text-input-';\n      var toggleIdPrefix = 'toggle-';\n      var contentIdPrefix = 'content-';\n      return React.createElement(\"div\", Object.assign({\n        className: css(styles.clipboardCopy, variant === 'inline-compact' && styles.modifiers.inline, isBlock && styles.modifiers.block, _this.state.expanded && styles.modifiers.expanded, className)\n      }, divProps, getOUIAProps(ClipboardCopy.displayName, ouiaId, ouiaSafe)), variant === 'inline-compact' && React.createElement(GenerateId, {\n        prefix: \"\"\n      }, function (id) {\n        return React.createElement(React.Fragment, null, !isCode && React.createElement(\"span\", {\n          className: css(styles.clipboardCopyText),\n          id: \"\".concat(textIdPrefix).concat(id)\n        }, _this.state.text), isCode && React.createElement(\"code\", {\n          className: css(styles.clipboardCopyText, styles.modifiers.code),\n          id: \"\".concat(textIdPrefix).concat(id)\n        }, _this.state.text), React.createElement(\"span\", {\n          className: css(styles.clipboardCopyActions)\n        }, React.createElement(\"span\", {\n          className: css(styles.clipboardCopyActionsItem)\n        }, React.createElement(ClipboardCopyButton, {\n          variant: \"plain\",\n          exitDelay: exitDelay,\n          entryDelay: entryDelay,\n          maxWidth: maxWidth,\n          position: position,\n          id: \"copy-button-\".concat(id),\n          textId: \"text-input-\".concat(id),\n          \"aria-label\": hoverTip,\n          onClick: function onClick(event) {\n            onCopy(event, _this.state.text);\n            _this.setState({\n              copied: true\n            });\n          },\n          onTooltipHidden: function onTooltipHidden() {\n            return _this.setState({\n              copied: false\n            });\n          }\n        }, _this.state.copied ? clickTip : hoverTip)), additionalActions && additionalActions));\n      }), variant !== 'inline-compact' && React.createElement(GenerateId, {\n        prefix: \"\"\n      }, function (id) {\n        return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n          className: css(styles.clipboardCopyGroup)\n        }, variant === 'expansion' && React.createElement(ClipboardCopyToggle, {\n          isExpanded: _this.state.expanded,\n          onClick: _this.expandContent,\n          id: \"\".concat(toggleIdPrefix).concat(id),\n          textId: \"\".concat(textIdPrefix).concat(id),\n          contentId: \"\".concat(contentIdPrefix).concat(id),\n          \"aria-label\": toggleAriaLabel\n        }), React.createElement(TextInput, {\n          isReadOnly: isReadOnly || _this.state.expanded,\n          onChange: _this.updateText,\n          value: _this.state.text,\n          id: \"text-input-\".concat(id),\n          \"aria-label\": textAriaLabel\n        }), React.createElement(ClipboardCopyButton, {\n          exitDelay: exitDelay,\n          entryDelay: entryDelay,\n          maxWidth: maxWidth,\n          position: position,\n          id: \"copy-button-\".concat(id),\n          textId: \"text-input-\".concat(id),\n          \"aria-label\": hoverTip,\n          onClick: function onClick(event) {\n            onCopy(event, _this.state.text);\n            _this.setState({\n              copied: true\n            });\n          },\n          onTooltipHidden: function onTooltipHidden() {\n            return _this.setState({\n              copied: false\n            });\n          },\n          removeFindDomNode: removeFindDomNode\n        }, _this.state.copied ? clickTip : hoverTip)), _this.state.expanded && React.createElement(ClipboardCopyExpanded, {\n          isReadOnly: isReadOnly,\n          isCode: isCode,\n          id: \"content-\".concat(id),\n          onChange: _this.updateText\n        }, _this.state.text));\n      }));\n    };\n    _this.state = {\n      text: Array.isArray(_this.props.children) ? _this.props.children.join('') : _this.props.children,\n      expanded: _this.props.isExpanded,\n      copied: false\n    };\n    if (_this.props.switchDelay !== undefined) {\n      // eslint-disable-next-line no-console\n      console.warn('ClipboardCopy: switchDelay prop has been deprecated. ' + 'The tooltip message will switch back to the hover tip as soon as the tooltip is hidden.');\n    }\n    return _this;\n  }\n  return _createClass(ClipboardCopy);\n}(React.Component);\nClipboardCopy.displayName = 'ClipboardCopy';\nClipboardCopy.defaultProps = {\n  hoverTip: 'Copy to clipboard',\n  clickTip: 'Successfully copied to clipboard!',\n  isReadOnly: false,\n  isExpanded: false,\n  isCode: false,\n  variant: 'inline',\n  position: PopoverPosition.top,\n  maxWidth: '150px',\n  exitDelay: 1500,\n  entryDelay: 300,\n  onCopy: clipboardCopyFunc,\n  onChange: function onChange() {\n    return undefined;\n  },\n  textAriaLabel: 'Copyable input',\n  toggleAriaLabel: 'Show content',\n  additionalActions: null,\n  ouiaSafe: true,\n  removeFindDomNode: false\n};","map":{"version":3,"names":["React","styles","css","PopoverPosition","TextInput","GenerateId","ClipboardCopyButton","ClipboardCopyToggle","ClipboardCopyExpanded","getOUIAProps","clipboardCopyFunc","event","text","navigator","clipboard","writeText","toString","ClipboardCopyVariant","ClipboardCopy","_React$Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","timer","componentDidUpdate","prevProps","prevState","children","updateText","componentWillUnmount","window","clearTimeout","expandContent","_event","setState","expanded","onChange","render","_a","isExpanded","switchDelay","isReadOnly","isCode","isBlock","exitDelay","maxWidth","entryDelay","onCopy","hoverTip","clickTip","textAriaLabel","toggleAriaLabel","variant","position","className","additionalActions","ouiaId","ouiaSafe","removeFindDomNode","divProps","__rest","textIdPrefix","toggleIdPrefix","contentIdPrefix","createElement","Object","assign","clipboardCopy","modifiers","inline","block","state","displayName","prefix","id","Fragment","clipboardCopyText","concat","code","clipboardCopyActions","clipboardCopyActionsItem","textId","onClick","copied","onTooltipHidden","clipboardCopyGroup","contentId","value","Array","isArray","join","undefined","console","warn","_createClass","Component","defaultProps","top"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@patternfly/react-core/src/components/ClipboardCopy/ClipboardCopy.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ClipboardCopy/clipboard-copy';\nimport { css } from '@patternfly/react-styles';\nimport { PickOptional } from '../../helpers/typeUtils';\nimport { PopoverPosition } from '../Popover';\nimport { TooltipPosition } from '../Tooltip';\nimport { TextInput } from '../TextInput';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nimport { ClipboardCopyButton } from './ClipboardCopyButton';\nimport { ClipboardCopyToggle } from './ClipboardCopyToggle';\nimport { ClipboardCopyExpanded } from './ClipboardCopyExpanded';\nimport { getOUIAProps, OUIAProps } from '../../helpers';\n\nexport const clipboardCopyFunc = (event: React.ClipboardEvent<HTMLDivElement>, text?: React.ReactNode) => {\n  navigator.clipboard.writeText(text.toString());\n};\n\nexport enum ClipboardCopyVariant {\n  inline = 'inline',\n  expansion = 'expansion',\n  inlineCompact = 'inline-compact'\n}\n\nexport interface ClipboardCopyState {\n  text: string | number;\n  expanded: boolean;\n  copied: boolean;\n}\n\nexport interface ClipboardCopyProps extends Omit<React.HTMLProps<HTMLDivElement>, 'onChange'>, OUIAProps {\n  /** Additional classes added to the clipboard copy container. */\n  className?: string;\n  /** Tooltip message to display when hover the copy button */\n  hoverTip?: string;\n  /** Tooltip message to display when clicking the copy button */\n  clickTip?: string;\n  /** Aria-label to use on the TextInput. */\n  textAriaLabel?: string;\n  /** Aria-label to use on the ClipboardCopyToggle. */\n  toggleAriaLabel?: string;\n  /** Flag to show if the input is read only. */\n  isReadOnly?: boolean;\n  /** Flag to determine if clipboard copy is in the expanded state initially */\n  isExpanded?: boolean;\n  /** Flag to determine if clipboard copy content includes code */\n  isCode?: boolean;\n  /** Flag to determine if inline clipboard copy should be block styling */\n  isBlock?: boolean;\n  /** Adds Clipboard Copy variant styles. */\n  variant?: typeof ClipboardCopyVariant | 'inline' | 'expansion' | 'inline-compact';\n  /** Copy button popover position. */\n  position?:\n    | PopoverPosition\n    | TooltipPosition\n    | 'auto'\n    | 'top'\n    | 'bottom'\n    | 'left'\n    | 'right'\n    | 'top-start'\n    | 'top-end'\n    | 'bottom-start'\n    | 'bottom-end'\n    | 'left-start'\n    | 'left-end'\n    | 'right-start'\n    | 'right-end';\n  /** @beta Opt-in for updated popper that does not use findDOMNode. */\n  removeFindDomNode?: boolean;\n  /** Maximum width of the tooltip (default 150px). */\n  maxWidth?: string;\n  /** Delay in ms before the tooltip disappears. */\n  exitDelay?: number;\n  /** Delay in ms before the tooltip appears. */\n  entryDelay?: number;\n  /** @deprecated Delay in ms before the tooltip message switch to hover tip. */\n  switchDelay?: number;\n  /** A function that is triggered on clicking the copy button. */\n  onCopy?: (event: React.ClipboardEvent<HTMLDivElement>, text?: React.ReactNode) => void;\n  /** A function that is triggered on changing the text. */\n  onChange?: (text?: string | number) => void;\n  /** The text which is copied. */\n  children: React.ReactNode;\n  /** Additional actions for inline clipboard copy. Should be wrapped with ClipboardCopyAction. */\n  additionalActions?: React.ReactNode;\n  /** Value to overwrite the randomly generated data-ouia-component-id.*/\n  ouiaId?: number | string;\n  /** Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false. */\n  ouiaSafe?: boolean;\n}\n\nexport class ClipboardCopy extends React.Component<ClipboardCopyProps, ClipboardCopyState> {\n  static displayName = 'ClipboardCopy';\n  timer = null as number;\n  constructor(props: ClipboardCopyProps) {\n    super(props);\n    this.state = {\n      text: Array.isArray(this.props.children)\n        ? this.props.children.join('')\n        : (this.props.children as string | number),\n      expanded: this.props.isExpanded,\n      copied: false\n    };\n\n    if (this.props.switchDelay !== undefined) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        'ClipboardCopy: switchDelay prop has been deprecated. ' +\n          'The tooltip message will switch back to the hover tip as soon as the tooltip is hidden.'\n      );\n    }\n  }\n\n  static defaultProps: PickOptional<ClipboardCopyProps> = {\n    hoverTip: 'Copy to clipboard',\n    clickTip: 'Successfully copied to clipboard!',\n    isReadOnly: false,\n    isExpanded: false,\n    isCode: false,\n    variant: 'inline',\n    position: PopoverPosition.top,\n    maxWidth: '150px',\n    exitDelay: 1500,\n    entryDelay: 300,\n    onCopy: clipboardCopyFunc,\n    onChange: (): any => undefined,\n    textAriaLabel: 'Copyable input',\n    toggleAriaLabel: 'Show content',\n    additionalActions: null,\n    ouiaSafe: true,\n    removeFindDomNode: false\n  };\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  componentDidUpdate = (prevProps: ClipboardCopyProps, prevState: ClipboardCopyState) => {\n    if (prevProps.children !== this.props.children) {\n      this.updateText(this.props.children as string | number);\n    }\n  };\n\n  componentWillUnmount = () => {\n    if (this.timer) {\n      window.clearTimeout(this.timer);\n    }\n  };\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  expandContent = (_event: React.MouseEvent<Element, MouseEvent>) => {\n    this.setState(prevState => ({\n      expanded: !prevState.expanded\n    }));\n  };\n\n  updateText = (text: string | number) => {\n    this.setState({ text });\n    this.props.onChange(text);\n  };\n\n  render = () => {\n    const {\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      isExpanded,\n      onChange, // Don't pass to <div>\n      switchDelay,\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      isReadOnly,\n      isCode,\n      isBlock,\n      exitDelay,\n      maxWidth,\n      entryDelay,\n      onCopy,\n      hoverTip,\n      clickTip,\n      textAriaLabel,\n      toggleAriaLabel,\n      variant,\n      position,\n      className,\n      additionalActions,\n      ouiaId,\n      ouiaSafe,\n      removeFindDomNode,\n      ...divProps\n    } = this.props;\n    const textIdPrefix = 'text-input-';\n    const toggleIdPrefix = 'toggle-';\n    const contentIdPrefix = 'content-';\n    return (\n      <div\n        className={css(\n          styles.clipboardCopy,\n          variant === 'inline-compact' && styles.modifiers.inline,\n          isBlock && styles.modifiers.block,\n          this.state.expanded && styles.modifiers.expanded,\n          className\n        )}\n        {...divProps}\n        {...getOUIAProps(ClipboardCopy.displayName, ouiaId, ouiaSafe)}\n      >\n        {variant === 'inline-compact' && (\n          <GenerateId prefix=\"\">\n            {id => (\n              <React.Fragment>\n                {!isCode && (\n                  <span className={css(styles.clipboardCopyText)} id={`${textIdPrefix}${id}`}>\n                    {this.state.text}\n                  </span>\n                )}\n                {isCode && (\n                  <code className={css(styles.clipboardCopyText, styles.modifiers.code)} id={`${textIdPrefix}${id}`}>\n                    {this.state.text}\n                  </code>\n                )}\n                <span className={css(styles.clipboardCopyActions)}>\n                  <span className={css(styles.clipboardCopyActionsItem)}>\n                    <ClipboardCopyButton\n                      variant=\"plain\"\n                      exitDelay={exitDelay}\n                      entryDelay={entryDelay}\n                      maxWidth={maxWidth}\n                      position={position}\n                      id={`copy-button-${id}`}\n                      textId={`text-input-${id}`}\n                      aria-label={hoverTip}\n                      onClick={(event: any) => {\n                        onCopy(event, this.state.text);\n                        this.setState({ copied: true });\n                      }}\n                      onTooltipHidden={() => this.setState({ copied: false })}\n                    >\n                      {this.state.copied ? clickTip : hoverTip}\n                    </ClipboardCopyButton>\n                  </span>\n                  {additionalActions && additionalActions}\n                </span>\n              </React.Fragment>\n            )}\n          </GenerateId>\n        )}\n        {variant !== 'inline-compact' && (\n          <GenerateId prefix=\"\">\n            {id => (\n              <React.Fragment>\n                <div className={css(styles.clipboardCopyGroup)}>\n                  {variant === 'expansion' && (\n                    <ClipboardCopyToggle\n                      isExpanded={this.state.expanded}\n                      onClick={this.expandContent}\n                      id={`${toggleIdPrefix}${id}`}\n                      textId={`${textIdPrefix}${id}`}\n                      contentId={`${contentIdPrefix}${id}`}\n                      aria-label={toggleAriaLabel}\n                    />\n                  )}\n                  <TextInput\n                    isReadOnly={isReadOnly || this.state.expanded}\n                    onChange={this.updateText}\n                    value={this.state.text as string | number}\n                    id={`text-input-${id}`}\n                    aria-label={textAriaLabel}\n                  />\n                  <ClipboardCopyButton\n                    exitDelay={exitDelay}\n                    entryDelay={entryDelay}\n                    maxWidth={maxWidth}\n                    position={position}\n                    id={`copy-button-${id}`}\n                    textId={`text-input-${id}`}\n                    aria-label={hoverTip}\n                    onClick={(event: any) => {\n                      onCopy(event, this.state.text);\n                      this.setState({ copied: true });\n                    }}\n                    onTooltipHidden={() => this.setState({ copied: false })}\n                    removeFindDomNode={removeFindDomNode}\n                  >\n                    {this.state.copied ? clickTip : hoverTip}\n                  </ClipboardCopyButton>\n                </div>\n                {this.state.expanded && (\n                  <ClipboardCopyExpanded\n                    isReadOnly={isReadOnly}\n                    isCode={isCode}\n                    id={`content-${id}`}\n                    onChange={this.updateText}\n                  >\n                    {this.state.text}\n                  </ClipboardCopyExpanded>\n                )}\n              </React.Fragment>\n            )}\n          </GenerateId>\n        )}\n      </div>\n    );\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}