{"ast":null,"code":"import _toConsumableArray from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n/**\n * The benefit of this function is to help developers get CSS var from theme without specifying the whole variable\n * and they does not need to remember the prefix (defined once).\n */\nexport default function createGetCssVar() {\n  var prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  function appendVar() {\n    for (var _len = arguments.length, vars = new Array(_len), _key = 0; _key < _len; _key++) {\n      vars[_key] = arguments[_key];\n    }\n    if (!vars.length) {\n      return '';\n    }\n    var value = vars[0];\n    if (typeof value === 'string' && !value.match(/(#|\\(|\\)|(-?(\\d*\\.)?\\d+)(px|em|%|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc))|^(-?(\\d*\\.)?\\d+)$|(\\d+ \\d+ \\d+)/)) {\n      return \", var(--\".concat(prefix ? \"\".concat(prefix, \"-\") : '').concat(value).concat(appendVar.apply(void 0, _toConsumableArray(vars.slice(1))), \")\");\n    }\n    return \", \".concat(value);\n  }\n\n  // AdditionalVars makes `getCssVar` less strict, so it can be use like this `getCssVar('non-mui-variable')` without type error.\n  var getCssVar = function getCssVar(field) {\n    for (var _len2 = arguments.length, fallbacks = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      fallbacks[_key2 - 1] = arguments[_key2];\n    }\n    return \"var(--\".concat(prefix ? \"\".concat(prefix, \"-\") : '').concat(field).concat(appendVar.apply(void 0, fallbacks), \")\");\n  };\n  return getCssVar;\n}","map":{"version":3,"names":["createGetCssVar","prefix","arguments","length","undefined","appendVar","_len","vars","Array","_key","value","match","concat","apply","_toConsumableArray","slice","getCssVar","field","_len2","fallbacks","_key2"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@mui/system/esm/cssVars/createGetCssVar.js"],"sourcesContent":["/**\n * The benefit of this function is to help developers get CSS var from theme without specifying the whole variable\n * and they does not need to remember the prefix (defined once).\n */\nexport default function createGetCssVar(prefix = '') {\n  function appendVar(...vars) {\n    if (!vars.length) {\n      return '';\n    }\n    const value = vars[0];\n    if (typeof value === 'string' && !value.match(/(#|\\(|\\)|(-?(\\d*\\.)?\\d+)(px|em|%|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc))|^(-?(\\d*\\.)?\\d+)$|(\\d+ \\d+ \\d+)/)) {\n      return `, var(--${prefix ? `${prefix}-` : ''}${value}${appendVar(...vars.slice(1))})`;\n    }\n    return `, ${value}`;\n  }\n\n  // AdditionalVars makes `getCssVar` less strict, so it can be use like this `getCssVar('non-mui-variable')` without type error.\n  const getCssVar = (field, ...fallbacks) => {\n    return `var(--${prefix ? `${prefix}-` : ''}${field}${appendVar(...fallbacks)})`;\n  };\n  return getCssVar;\n}"],"mappings":";AAAA;AACA;AACA;AACA;AACA,eAAe,SAASA,eAAeA,CAAA,EAAc;EAAA,IAAbC,MAAM,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;EACjD,SAASG,SAASA,CAAA,EAAU;IAAA,SAAAC,IAAA,GAAAJ,SAAA,CAAAC,MAAA,EAANI,IAAI,OAAAC,KAAA,CAAAF,IAAA,GAAAG,IAAA,MAAAA,IAAA,GAAAH,IAAA,EAAAG,IAAA;MAAJF,IAAI,CAAAE,IAAA,IAAAP,SAAA,CAAAO,IAAA;IAAA;IACxB,IAAI,CAACF,IAAI,CAACJ,MAAM,EAAE;MAChB,OAAO,EAAE;IACX;IACA,IAAMO,KAAK,GAAGH,IAAI,CAAC,CAAC,CAAC;IACrB,IAAI,OAAOG,KAAK,KAAK,QAAQ,IAAI,CAACA,KAAK,CAACC,KAAK,CAAC,6GAA6G,CAAC,EAAE;MAC5J,kBAAAC,MAAA,CAAkBX,MAAM,MAAAW,MAAA,CAAMX,MAAM,SAAM,EAAE,EAAAW,MAAA,CAAGF,KAAK,EAAAE,MAAA,CAAGP,SAAS,CAAAQ,KAAA,SAAAC,kBAAA,CAAIP,IAAI,CAACQ,KAAK,CAAC,CAAC,CAAC,EAAC;IACpF;IACA,YAAAH,MAAA,CAAYF,KAAK;EACnB;;EAEA;EACA,IAAMM,SAAS,GAAG,SAAZA,SAASA,CAAIC,KAAK,EAAmB;IAAA,SAAAC,KAAA,GAAAhB,SAAA,CAAAC,MAAA,EAAdgB,SAAS,OAAAX,KAAA,CAAAU,KAAA,OAAAA,KAAA,WAAAE,KAAA,MAAAA,KAAA,GAAAF,KAAA,EAAAE,KAAA;MAATD,SAAS,CAAAC,KAAA,QAAAlB,SAAA,CAAAkB,KAAA;IAAA;IACpC,gBAAAR,MAAA,CAAgBX,MAAM,MAAAW,MAAA,CAAMX,MAAM,SAAM,EAAE,EAAAW,MAAA,CAAGK,KAAK,EAAAL,MAAA,CAAGP,SAAS,CAAAQ,KAAA,SAAIM,SAAS,CAAC;EAC9E,CAAC;EACD,OAAOH,SAAS;AAClB"},"metadata":{},"sourceType":"module","externalDependencies":[]}