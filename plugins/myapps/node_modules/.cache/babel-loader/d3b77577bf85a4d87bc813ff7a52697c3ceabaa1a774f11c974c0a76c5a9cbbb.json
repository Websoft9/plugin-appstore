{"ast":null,"code":"// @ts-nocheck\nexport {};","map":{"version":3,"names":[],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@patternfly/react-core/src/helpers/Popper/thirdparty/popper-core/types.ts"],"sourcesContent":["// @ts-nocheck\n\n/* eslint-disable import/no-unused-modules */\nimport { Placement, ModifierPhases } from './enums';\n\nimport { PopperOffsetsModifier } from './modifiers/popperOffsets';\nimport { FlipModifier } from './modifiers/flip';\nimport { HideModifier } from './modifiers/hide';\nimport { OffsetModifier } from './modifiers/offset';\nimport { EventListenersModifier } from './modifiers/eventListeners';\nimport { ComputeStylesModifier } from './modifiers/computeStyles';\nimport { ArrowModifier } from './modifiers/arrow';\nimport { PreventOverflowModifier } from './modifiers/preventOverflow';\nimport { ApplyStylesModifier } from './modifiers/applyStyles';\n\nexport interface Obj {\n  [key: string]: any;\n}\n\nexport type VisualViewport = EventTarget & {\n  width: number;\n  height: number;\n  offsetLeft: number;\n  offsetTop: number;\n  scale: number;\n};\n\n// This is a limited subset of the Window object, Flow doesn't provide one\n// so we define our own, with just the properties we need\nexport interface Window {\n  innerHeight: number;\n  offsetHeight: number;\n  innerWidth: number;\n  offsetWidth: number;\n  pageXOffset: number;\n  pageYOffset: number;\n  getComputedStyle: typeof getComputedStyle;\n  addEventListener(type: any, listener: any, optionsOrUseCapture?: any): void;\n  removeEventListener(type: any, listener: any, optionsOrUseCapture?: any): void;\n  Element: Element;\n  HTMLElement: HTMLElement;\n  Node: Node;\n  toString(): '[object Window]';\n  devicePixelRatio: number;\n  visualViewport?: VisualViewport;\n}\n\nexport interface Rect {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n}\n\nexport interface Offsets {\n  y: number;\n  x: number;\n}\n\nexport type PositioningStrategy = 'absolute' | 'fixed';\n\nexport interface StateRects {\n  reference: Rect;\n  popper: Rect;\n}\n\nexport interface StateOffsets {\n  popper: Offsets;\n  arrow?: Offsets;\n}\n\n/* :: type OffsetData = { [Placement]: Offsets }; */\n\n/* ;; type OffsetData = { [key in Placement]: Offsets } */\n\nexport interface State {\n  elements: {\n    reference: Element | VirtualElement;\n    popper: HTMLElement;\n    arrow?: HTMLElement;\n  };\n  options: OptionsGeneric<any>;\n  placement: Placement;\n  strategy: PositioningStrategy;\n  orderedModifiers: Modifier<any, any>[];\n  rects: StateRects;\n  scrollParents: {\n    reference: (Element | Window | VisualViewport)[];\n    popper: (Element | Window | VisualViewport)[];\n  };\n  styles: {\n    [key: string]: Partial<CSSStyleDeclaration>;\n  };\n  attributes: {\n    [key: string]: {\n      [key: string]: string | boolean;\n    };\n  };\n  modifiersData: {\n    arrow?: {\n      x?: number;\n      y?: number;\n      centerOffset: number;\n    };\n    hide?: {\n      isReferenceHidden: boolean;\n      hasPopperEscaped: boolean;\n      referenceClippingOffsets: SideObject;\n      popperEscapeOffsets: SideObject;\n    };\n    offset?: any; // OffsetData;\n    preventOverflow?: Offsets;\n    popperOffsets?: Offsets;\n\n    [key: string]: any;\n  };\n  reset: boolean;\n}\n\nexport interface Instance {\n  state: State;\n  destroy: () => void;\n  forceUpdate: () => void;\n  update: () => Promise<Partial<State>>;\n  setOptions: (options: Partial<OptionsGeneric<any>>) => Promise<Partial<State>>;\n}\n\nexport interface ModifierArguments<Options extends Obj> {\n  state: State;\n  instance: Instance;\n  options: Partial<Options>;\n  name: string;\n}\nexport interface Modifier<Name, Options> {\n  name: Name;\n  enabled: boolean;\n  phase: ModifierPhases;\n  requires?: string[];\n  requiresIfExists?: string[];\n  fn: (arg0: ModifierArguments<Options>) => State | void;\n  effect?: (arg0: ModifierArguments<Options>) => () => void | void;\n  options?: Partial<Options>;\n  data?: Obj;\n}\n\nexport type StrictModifiers =\n  | Partial<OffsetModifier>\n  | Partial<ApplyStylesModifier>\n  | Partial<ArrowModifier>\n  | Partial<HideModifier>\n  | Partial<ComputeStylesModifier>\n  | Partial<EventListenersModifier>\n  | Partial<FlipModifier>\n  | Partial<PreventOverflowModifier>\n  | Partial<PopperOffsetsModifier>;\n\nexport interface EventListeners {\n  scroll: boolean;\n  resize: boolean;\n}\n\nexport interface Options {\n  placement: Placement;\n  modifiers: Partial<Modifier<any, any>>[];\n  strategy: PositioningStrategy;\n  onFirstUpdate?: (arg0: Partial<State>) => void;\n}\n\nexport interface OptionsGeneric<TModifier> {\n  placement: Placement;\n  modifiers: TModifier[];\n  strategy: PositioningStrategy;\n  onFirstUpdate?: (arg0: Partial<State>) => void;\n}\n\nexport type UpdateCallback = (arg0: State) => void;\n\nexport interface ClientRectObject {\n  x: number;\n  y: number;\n  top: number;\n  left: number;\n  right: number;\n  bottom: number;\n  width: number;\n  height: number;\n}\n\nexport interface SideObject {\n  top: number;\n  left: number;\n  right: number;\n  bottom: number;\n}\n\nexport type Padding = number | Partial<SideObject>;\n\nexport interface VirtualElement {\n  getBoundingClientRect: () => ClientRect | DOMRect;\n  contextElement?: Element;\n}\n"],"mappings":"AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}