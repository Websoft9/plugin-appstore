{"ast":null,"code":"import _slicedToArray from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport { Button, ButtonVariant } from '../Button';\nimport { Badge } from '../Badge';\nimport AngleDownIcon from '@patternfly/react-icons/dist/esm/icons/angle-down-icon';\nimport AngleUpIcon from '@patternfly/react-icons/dist/esm/icons/angle-up-icon';\nimport TimesIcon from '@patternfly/react-icons/dist/esm/icons/times-icon';\nimport SearchIcon from '@patternfly/react-icons/dist/esm/icons/search-icon';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport ArrowRightIcon from '@patternfly/react-icons/dist/esm/icons/arrow-right-icon';\nimport { AdvancedSearchMenu } from './AdvancedSearchMenu';\nimport { TextInputGroup, TextInputGroupMain, TextInputGroupUtilities } from '../TextInputGroup';\nimport { InputGroup } from '../InputGroup';\nimport { Popper } from '../../helpers';\nvar SearchInputBase = function SearchInputBase(_a) {\n  var className = _a.className,\n    _a$value = _a.value,\n    value = _a$value === void 0 ? '' : _a$value,\n    _a$attributes = _a.attributes,\n    attributes = _a$attributes === void 0 ? [] : _a$attributes,\n    formAdditionalItems = _a.formAdditionalItems,\n    _a$hasWordsAttrLabel = _a.hasWordsAttrLabel,\n    hasWordsAttrLabel = _a$hasWordsAttrLabel === void 0 ? 'Has words' : _a$hasWordsAttrLabel,\n    advancedSearchDelimiter = _a.advancedSearchDelimiter,\n    placeholder = _a.placeholder,\n    hint = _a.hint,\n    onChange = _a.onChange,\n    onSearch = _a.onSearch,\n    onClear = _a.onClear,\n    onToggleAdvancedSearch = _a.onToggleAdvancedSearch,\n    isAdvancedSearchOpen = _a.isAdvancedSearchOpen,\n    resultsCount = _a.resultsCount,\n    onNextClick = _a.onNextClick,\n    onPreviousClick = _a.onPreviousClick,\n    innerRef = _a.innerRef,\n    expandableInput = _a.expandableInput,\n    _a$ariaLabel = _a['aria-label'],\n    ariaLabel = _a$ariaLabel === void 0 ? 'Search input' : _a$ariaLabel,\n    _a$resetButtonLabel = _a.resetButtonLabel,\n    resetButtonLabel = _a$resetButtonLabel === void 0 ? 'Reset' : _a$resetButtonLabel,\n    _a$openMenuButtonAria = _a.openMenuButtonAriaLabel,\n    openMenuButtonAriaLabel = _a$openMenuButtonAria === void 0 ? 'Open advanced search' : _a$openMenuButtonAria,\n    _a$previousNavigation = _a.previousNavigationButtonAriaLabel,\n    previousNavigationButtonAriaLabel = _a$previousNavigation === void 0 ? 'Previous' : _a$previousNavigation,\n    _a$isPreviousNavigati = _a.isPreviousNavigationButtonDisabled,\n    isPreviousNavigationButtonDisabled = _a$isPreviousNavigati === void 0 ? false : _a$isPreviousNavigati,\n    _a$isNextNavigationBu = _a.isNextNavigationButtonDisabled,\n    isNextNavigationButtonDisabled = _a$isNextNavigationBu === void 0 ? false : _a$isNextNavigationBu,\n    _a$nextNavigationButt = _a.nextNavigationButtonAriaLabel,\n    nextNavigationButtonAriaLabel = _a$nextNavigationButt === void 0 ? 'Next' : _a$nextNavigationButt,\n    _a$submitSearchButton = _a.submitSearchButtonLabel,\n    submitSearchButtonLabel = _a$submitSearchButton === void 0 ? 'Search' : _a$submitSearchButton,\n    _a$isDisabled = _a.isDisabled,\n    isDisabled = _a$isDisabled === void 0 ? false : _a$isDisabled,\n    _appendTo = _a.appendTo,\n    _a$removeFindDomNode = _a.removeFindDomNode,\n    removeFindDomNode = _a$removeFindDomNode === void 0 ? false : _a$removeFindDomNode,\n    _a$zIndex = _a.zIndex,\n    zIndex = _a$zIndex === void 0 ? 9999 : _a$zIndex,\n    _a$type = _a.type,\n    type = _a$type === void 0 ? 'text' : _a$type,\n    name = _a.name,\n    props = __rest(_a, [\"className\", \"value\", \"attributes\", \"formAdditionalItems\", \"hasWordsAttrLabel\", \"advancedSearchDelimiter\", \"placeholder\", \"hint\", \"onChange\", \"onSearch\", \"onClear\", \"onToggleAdvancedSearch\", \"isAdvancedSearchOpen\", \"resultsCount\", \"onNextClick\", \"onPreviousClick\", \"innerRef\", \"expandableInput\", 'aria-label', \"resetButtonLabel\", \"openMenuButtonAriaLabel\", \"previousNavigationButtonAriaLabel\", \"isPreviousNavigationButtonDisabled\", \"isNextNavigationButtonDisabled\", \"nextNavigationButtonAriaLabel\", \"submitSearchButtonLabel\", \"isDisabled\", \"appendTo\", \"removeFindDomNode\", \"zIndex\", \"type\", \"name\"]);\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    isSearchMenuOpen = _React$useState2[0],\n    setIsSearchMenuOpen = _React$useState2[1];\n  var _React$useState3 = React.useState(value),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    searchValue = _React$useState4[0],\n    setSearchValue = _React$useState4[1];\n  var searchInputRef = React.useRef(null);\n  var ref = React.useRef(null);\n  var searchInputInputRef = innerRef || ref;\n  var searchInputExpandableToggleRef = React.useRef(null);\n  var _React$useState5 = React.useState(false),\n    _React$useState6 = _slicedToArray(_React$useState5, 2),\n    focusAfterExpandChange = _React$useState6[0],\n    setFocusAfterExpandChange = _React$useState6[1];\n  var _ref = expandableInput || {},\n    isExpanded = _ref.isExpanded,\n    onToggleExpand = _ref.onToggleExpand,\n    toggleAriaLabel = _ref.toggleAriaLabel;\n  React.useEffect(function () {\n    var _a, _b;\n    // this effect and the focusAfterExpandChange variable are needed to focus the input/toggle as needed when the\n    // expansion toggle is fired without focusing on mount\n    if (!focusAfterExpandChange) {\n      return;\n    } else if (isExpanded) {\n      (_a = searchInputInputRef === null || searchInputInputRef === void 0 ? void 0 : searchInputInputRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n    } else {\n      (_b = searchInputExpandableToggleRef === null || searchInputExpandableToggleRef === void 0 ? void 0 : searchInputExpandableToggleRef.current) === null || _b === void 0 ? void 0 : _b.focus();\n    }\n    setFocusAfterExpandChange(false);\n  }, [focusAfterExpandChange, isExpanded, searchInputInputRef, searchInputExpandableToggleRef]);\n  React.useEffect(function () {\n    setSearchValue(value);\n  }, [value]);\n  React.useEffect(function () {\n    if (attributes.length > 0 && !advancedSearchDelimiter) {\n      // eslint-disable-next-line no-console\n      console.error('An advancedSearchDelimiter prop is required when advanced search attributes are provided using the attributes prop');\n    }\n  });\n  React.useEffect(function () {\n    setIsSearchMenuOpen(isAdvancedSearchOpen);\n  }, [isAdvancedSearchOpen]);\n  var onChangeHandler = function onChangeHandler(event, value) {\n    if (onChange) {\n      onChange(event, value);\n    }\n    setSearchValue(value);\n  };\n  var onToggle = function onToggle(e) {\n    var isOpen = !isSearchMenuOpen;\n    setIsSearchMenuOpen(isOpen);\n    if (onToggleAdvancedSearch) {\n      onToggleAdvancedSearch(e, isOpen);\n    }\n  };\n  var onSearchHandler = function onSearchHandler(event) {\n    event.preventDefault();\n    if (onSearch) {\n      onSearch(event, value, getAttrValueMap());\n    }\n    setIsSearchMenuOpen(false);\n  };\n  var splitStringExceptInQuotes = function splitStringExceptInQuotes(str) {\n    var quoteType;\n    return str.match(/\\\\?.|^$/g).reduce(function (p, c) {\n      if (c === \"'\" || c === '\"') {\n        if (!quoteType) {\n          quoteType = c;\n        }\n        if (c === quoteType) {\n          p.quote = !p.quote;\n        }\n      } else if (!p.quote && c === ' ') {\n        p.a.push('');\n      } else {\n        p.a[p.a.length - 1] += c.replace(/\\\\(.)/, '$1');\n      }\n      return p;\n    }, {\n      a: ['']\n    }).a;\n  };\n  var getAttrValueMap = function getAttrValueMap() {\n    var attrValue = {};\n    var pairs = splitStringExceptInQuotes(searchValue);\n    pairs.map(function (pair) {\n      var splitPair = pair.split(advancedSearchDelimiter);\n      if (splitPair.length === 2) {\n        attrValue[splitPair[0]] = splitPair[1].replace(/(^'|'$)/g, '');\n      } else if (splitPair.length === 1) {\n        attrValue.haswords = attrValue.hasOwnProperty('haswords') ? \"\".concat(attrValue.haswords, \" \").concat(splitPair[0]) : splitPair[0];\n      }\n    });\n    return attrValue;\n  };\n  var onEnter = function onEnter(event) {\n    if (event.key === 'Enter') {\n      onSearchHandler(event);\n    }\n  };\n  var onClearInput = function onClearInput(e) {\n    if (onClear) {\n      onClear(e);\n    }\n    if (searchInputInputRef && searchInputInputRef.current) {\n      searchInputInputRef.current.focus();\n    }\n  };\n  var onExpandHandler = function onExpandHandler(event) {\n    setSearchValue('');\n    onToggleExpand(event, isExpanded);\n    setFocusAfterExpandChange(true);\n  };\n  var renderUtilities = value && (resultsCount || !!onNextClick && !!onPreviousClick || !!onClear && !expandableInput);\n  var buildTextInputGroup = function buildTextInputGroup() {\n    var _a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var searchInputProps = __rest(_a, []);\n    return React.createElement(TextInputGroup, Object.assign({\n      isDisabled: isDisabled\n    }, searchInputProps), React.createElement(TextInputGroupMain, {\n      hint: hint,\n      icon: React.createElement(SearchIcon, null),\n      innerRef: searchInputInputRef,\n      value: searchValue,\n      placeholder: placeholder,\n      \"aria-label\": ariaLabel,\n      onKeyDown: onEnter,\n      onChange: onChangeHandler,\n      type: type,\n      name: name\n    }), renderUtilities && React.createElement(TextInputGroupUtilities, null, resultsCount && React.createElement(Badge, {\n      isRead: true\n    }, resultsCount), !!onNextClick && !!onPreviousClick && React.createElement(\"div\", {\n      className: \"pf-c-text-input-group__group\"\n    }, React.createElement(Button, {\n      variant: ButtonVariant.plain,\n      \"aria-label\": previousNavigationButtonAriaLabel,\n      isDisabled: isDisabled || isPreviousNavigationButtonDisabled,\n      onClick: onPreviousClick\n    }, React.createElement(AngleUpIcon, null)), React.createElement(Button, {\n      variant: ButtonVariant.plain,\n      \"aria-label\": nextNavigationButtonAriaLabel,\n      isDisabled: isDisabled || isNextNavigationButtonDisabled,\n      onClick: onNextClick\n    }, React.createElement(AngleDownIcon, null))), !!onClear && !expandableInput && React.createElement(Button, {\n      variant: ButtonVariant.plain,\n      isDisabled: isDisabled,\n      \"aria-label\": resetButtonLabel,\n      onClick: onClearInput\n    }, React.createElement(TimesIcon, null))));\n  };\n  var expandableToggle = React.createElement(Button, {\n    variant: ButtonVariant.plain,\n    \"aria-label\": toggleAriaLabel,\n    \"aria-expanded\": isExpanded,\n    icon: isExpanded ? React.createElement(TimesIcon, null) : React.createElement(SearchIcon, null),\n    onClick: onExpandHandler,\n    ref: searchInputExpandableToggleRef\n  });\n  var buildExpandableSearchInput = function buildExpandableSearchInput() {\n    var _a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var searchInputProps = __rest(_a, []);\n    return React.createElement(InputGroup, Object.assign({}, searchInputProps), buildTextInputGroup(), expandableToggle);\n  };\n  var buildSearchTextInputGroup = function buildSearchTextInputGroup() {\n    var _a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var searchInputProps = __rest(_a, []);\n    if (expandableInput) {\n      return buildExpandableSearchInput(Object.assign({}, searchInputProps));\n    }\n    return buildTextInputGroup(Object.assign({}, searchInputProps));\n  };\n  var buildSearchTextInputGroupWithExtraButtons = function buildSearchTextInputGroupWithExtraButtons() {\n    var _a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var searchInputProps = __rest(_a, []);\n    return React.createElement(InputGroup, Object.assign({}, searchInputProps), buildTextInputGroup(), (attributes.length > 0 || onToggleAdvancedSearch) && React.createElement(Button, {\n      className: isSearchMenuOpen && 'pf-m-expanded',\n      variant: ButtonVariant.control,\n      \"aria-label\": openMenuButtonAriaLabel,\n      onClick: onToggle,\n      isDisabled: isDisabled,\n      \"aria-expanded\": isSearchMenuOpen\n    }, React.createElement(CaretDownIcon, null)), !!onSearch && React.createElement(Button, {\n      type: \"submit\",\n      variant: ButtonVariant.control,\n      \"aria-label\": submitSearchButtonLabel,\n      onClick: onSearchHandler,\n      isDisabled: isDisabled || !searchValue\n    }, React.createElement(ArrowRightIcon, null)), expandableInput && expandableToggle);\n  };\n  var searchInputProps = Object.assign(Object.assign({}, props), {\n    className: className && css(className),\n    innerRef: searchInputRef\n  });\n  if (!!expandableInput && !isExpanded) {\n    return React.createElement(InputGroup, Object.assign({}, searchInputProps), expandableToggle);\n  }\n  if (!!onSearch || attributes.length > 0 || !!onToggleAdvancedSearch) {\n    if (attributes.length > 0) {\n      var AdvancedSearch = React.createElement(\"div\", null, React.createElement(AdvancedSearchMenu, {\n        value: value,\n        parentRef: searchInputRef,\n        parentInputRef: searchInputInputRef,\n        onSearch: onSearch,\n        onClear: onClear,\n        onChange: onChange,\n        onToggleAdvancedMenu: onToggle,\n        resetButtonLabel: resetButtonLabel,\n        submitSearchButtonLabel: submitSearchButtonLabel,\n        attributes: attributes,\n        formAdditionalItems: formAdditionalItems,\n        hasWordsAttrLabel: hasWordsAttrLabel,\n        advancedSearchDelimiter: advancedSearchDelimiter,\n        getAttrValueMap: getAttrValueMap,\n        isSearchMenuOpen: isSearchMenuOpen\n      }));\n      var AdvancedSearchWithPopper = React.createElement(\"div\", Object.assign({\n        className: css(className),\n        ref: searchInputRef\n      }, props), React.createElement(Popper, {\n        trigger: buildSearchTextInputGroupWithExtraButtons(),\n        popper: AdvancedSearch,\n        isVisible: isSearchMenuOpen,\n        enableFlip: true,\n        appendTo: function appendTo() {\n          return _appendTo || searchInputRef.current;\n        },\n        removeFindDomNode: removeFindDomNode,\n        zIndex: zIndex\n      }));\n      var AdvancedSearchInline = React.createElement(\"div\", Object.assign({\n        className: css(className),\n        ref: searchInputRef\n      }, props), buildSearchTextInputGroupWithExtraButtons(), AdvancedSearch);\n      return _appendTo !== 'inline' ? AdvancedSearchWithPopper : AdvancedSearchInline;\n    }\n    return buildSearchTextInputGroupWithExtraButtons(Object.assign({}, searchInputProps));\n  }\n  return buildSearchTextInputGroup(searchInputProps);\n};\nSearchInputBase.displayName = 'SearchInputBase';\nexport var SearchInput = React.forwardRef(function (props, ref) {\n  return React.createElement(SearchInputBase, Object.assign({}, props, {\n    innerRef: ref\n  }));\n});\nSearchInput.displayName = 'SearchInput';","map":{"version":3,"names":["React","css","Button","ButtonVariant","Badge","AngleDownIcon","AngleUpIcon","TimesIcon","SearchIcon","CaretDownIcon","ArrowRightIcon","AdvancedSearchMenu","TextInputGroup","TextInputGroupMain","TextInputGroupUtilities","InputGroup","Popper","SearchInputBase","_a","className","_a$value","value","_a$attributes","attributes","formAdditionalItems","_a$hasWordsAttrLabel","hasWordsAttrLabel","advancedSearchDelimiter","placeholder","hint","onChange","onSearch","onClear","onToggleAdvancedSearch","isAdvancedSearchOpen","resultsCount","onNextClick","onPreviousClick","innerRef","expandableInput","_a$ariaLabel","ariaLabel","_a$resetButtonLabel","resetButtonLabel","_a$openMenuButtonAria","openMenuButtonAriaLabel","_a$previousNavigation","previousNavigationButtonAriaLabel","_a$isPreviousNavigati","isPreviousNavigationButtonDisabled","_a$isNextNavigationBu","isNextNavigationButtonDisabled","_a$nextNavigationButt","nextNavigationButtonAriaLabel","_a$submitSearchButton","submitSearchButtonLabel","_a$isDisabled","isDisabled","appendTo","_a$removeFindDomNode","removeFindDomNode","_a$zIndex","zIndex","_a$type","type","name","props","__rest","_React$useState","useState","_React$useState2","_slicedToArray","isSearchMenuOpen","setIsSearchMenuOpen","_React$useState3","_React$useState4","searchValue","setSearchValue","searchInputRef","useRef","ref","searchInputInputRef","searchInputExpandableToggleRef","_React$useState5","_React$useState6","focusAfterExpandChange","setFocusAfterExpandChange","_ref","isExpanded","onToggleExpand","toggleAriaLabel","useEffect","current","focus","_b","length","console","error","onChangeHandler","event","onToggle","e","isOpen","onSearchHandler","preventDefault","getAttrValueMap","splitStringExceptInQuotes","str","quoteType","match","reduce","p","c","quote","a","push","replace","attrValue","pairs","map","pair","splitPair","split","haswords","hasOwnProperty","concat","onEnter","key","onClearInput","onExpandHandler","renderUtilities","buildTextInputGroup","arguments","undefined","searchInputProps","createElement","Object","assign","icon","onKeyDown","isRead","variant","plain","onClick","expandableToggle","buildExpandableSearchInput","buildSearchTextInputGroup","buildSearchTextInputGroupWithExtraButtons","control","AdvancedSearch","parentRef","parentInputRef","onToggleAdvancedMenu","AdvancedSearchWithPopper","trigger","popper","isVisible","enableFlip","AdvancedSearchInline","displayName","SearchInput","forwardRef"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@patternfly/react-core/src/components/SearchInput/SearchInput.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport { Button, ButtonVariant } from '../Button';\nimport { Badge } from '../Badge';\nimport AngleDownIcon from '@patternfly/react-icons/dist/esm/icons/angle-down-icon';\nimport AngleUpIcon from '@patternfly/react-icons/dist/esm/icons/angle-up-icon';\nimport TimesIcon from '@patternfly/react-icons/dist/esm/icons/times-icon';\nimport SearchIcon from '@patternfly/react-icons/dist/esm/icons/search-icon';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport ArrowRightIcon from '@patternfly/react-icons/dist/esm/icons/arrow-right-icon';\nimport { AdvancedSearchMenu } from './AdvancedSearchMenu';\nimport { TextInputGroup, TextInputGroupMain, TextInputGroupUtilities } from '../TextInputGroup';\nimport { InputGroup } from '../InputGroup';\nimport { Popper } from '../../helpers';\n\n/** Properties for adding search attributes to an advanced search input. These properties must\n * be passed in as an object within an array to the search input component's attribute properrty.\n */\n\nexport interface SearchInputSearchAttribute {\n  /** The search attribute's value to be provided in the search input's query string.\n   * It should have no spaces and be unique for every attribute.\n   */\n  attr: string;\n  /** The search attribute's display name. It is used to label the field in the advanced\n   * search menu.\n   */\n  display: React.ReactNode;\n}\n\n/** Properties for creating an expandable search input. These properties should be passed into\n * the search input component's expandableInput property.\n */\n\nexport interface SearchInputExpandable {\n  /** Flag to indicate if the search input is expanded. */\n  isExpanded: boolean;\n  /** Callback function to toggle the expandable search input. */\n  onToggleExpand: (event: React.SyntheticEvent<HTMLButtonElement>, isExpanded: boolean) => void;\n  /** An accessible label for the expandable search input toggle. */\n  toggleAriaLabel: string;\n}\n\n/** The main search input component. */\n\nexport interface SearchInputProps extends Omit<React.HTMLProps<HTMLDivElement>, 'onChange' | 'results' | 'ref'> {\n  /** Delimiter in the query string for pairing attributes with search values.\n   * Required whenever attributes are passed as props.\n   */\n  advancedSearchDelimiter?: string;\n  /** The container to append the menu to.\n   * If your menu is being cut off you can append it to an element higher up the DOM tree.\n   * Some examples:\n   * appendTo={() => document.body}\n   * appendTo={document.getElementById('target')}\n   */\n  appendTo?: HTMLElement | (() => HTMLElement) | 'inline';\n  /** An accessible label for the search input. */\n  'aria-label'?: string;\n  /** Array of attribute values used for dynamically generated advanced search. */\n  attributes?: string[] | SearchInputSearchAttribute[];\n  /** Additional classes added to the search input. */\n  className?: string;\n  /** Object that makes the search input expandable/collapsible. */\n  expandableInput?: SearchInputExpandable;\n  /* Additional elements added after the attributes in the form.\n   * The new form elements can be wrapped in a form group component for automatic formatting. */\n  formAdditionalItems?: React.ReactNode;\n  /** Attribute label for strings unassociated with one of the provided listed attributes. */\n  hasWordsAttrLabel?: React.ReactNode;\n  /** A suggestion for autocompleting. */\n  hint?: string;\n  /** Type of the input */\n  type?:\n    | 'text'\n    | 'date'\n    | 'datetime-local'\n    | 'email'\n    | 'month'\n    | 'number'\n    | 'password'\n    | 'search'\n    | 'tel'\n    | 'time'\n    | 'url';\n  /** @hide A reference object to attach to the input box. */\n  innerRef?: React.RefObject<any>;\n  /** A flag for controlling the open state of a custom advanced search implementation. */\n  isAdvancedSearchOpen?: boolean;\n  /** Flag indicating if search input is disabled. */\n  isDisabled?: boolean;\n  /** Flag indicating if the next navigation button is disabled. */\n  isNextNavigationButtonDisabled?: boolean;\n  /** Flag indicating if the previous navigation button is disabled. */\n  isPreviousNavigationButtonDisabled?: boolean;\n  /** Accessible label for the button to navigate to next result. */\n  nextNavigationButtonAriaLabel?: string;\n  /** A callback for when the input value changes. */\n  onChange?: (event: React.FormEvent<HTMLInputElement>, value: string) => void;\n  /** A callback for when the user clicks the clear button. */\n  onClear?: (event: React.SyntheticEvent<HTMLButtonElement>) => void;\n  /** A callback for when the user clicks to navigate to next result. */\n  onNextClick?: (event: React.SyntheticEvent<HTMLButtonElement>) => void;\n  /** A callback for when the user clicks to navigate to previous result. */\n  onPreviousClick?: (event: React.SyntheticEvent<HTMLButtonElement>) => void;\n  /** A callback for when the search button is clicked. */\n  onSearch?: (\n    event: React.SyntheticEvent<HTMLButtonElement>,\n    value: string,\n    attrValueMap: { [key: string]: string }\n  ) => void;\n  /** A callback for when the open advanced search button is clicked. */\n  onToggleAdvancedSearch?: (event: React.SyntheticEvent<HTMLButtonElement>, isOpen?: boolean) => void;\n  /** Accessible label for the button which opens the advanced search form menu. */\n  openMenuButtonAriaLabel?: string;\n  /** Placeholder text of the search input. */\n  placeholder?: string;\n  /** Accessible label for the button to navigate to previous result. */\n  previousNavigationButtonAriaLabel?: string;\n  /** @beta Opt-in for updated popper that does not use findDOMNode. */\n  removeFindDomNode?: boolean;\n  /** z-index of the advanced search form when appendTo is not inline. */\n  zIndex?: number;\n  /** Label for the button which resets the advanced search form and clears the search input. */\n  resetButtonLabel?: string;\n  /** The number of search results returned. Either a total number of results,\n   * or a string representing the current result over the total number of results. i.e. \"1 / 5\". */\n  resultsCount?: number | string;\n  /** Label for the button which calls the onSearch event handler. */\n  submitSearchButtonLabel?: string;\n  /** Value of the search input. */\n  value?: string;\n  /** Name attribue for the search input */\n  name?: string;\n}\n\nconst SearchInputBase: React.FunctionComponent<SearchInputProps> = ({\n  className,\n  value = '',\n  attributes = [] as string[],\n  formAdditionalItems,\n  hasWordsAttrLabel = 'Has words',\n  advancedSearchDelimiter,\n  placeholder,\n  hint,\n  onChange,\n  onSearch,\n  onClear,\n  onToggleAdvancedSearch,\n  isAdvancedSearchOpen,\n  resultsCount,\n  onNextClick,\n  onPreviousClick,\n  innerRef,\n  expandableInput,\n  'aria-label': ariaLabel = 'Search input',\n  resetButtonLabel = 'Reset',\n  openMenuButtonAriaLabel = 'Open advanced search',\n  previousNavigationButtonAriaLabel = 'Previous',\n  isPreviousNavigationButtonDisabled = false,\n  isNextNavigationButtonDisabled = false,\n  nextNavigationButtonAriaLabel = 'Next',\n  submitSearchButtonLabel = 'Search',\n  isDisabled = false,\n  appendTo,\n  removeFindDomNode = false,\n  zIndex = 9999,\n  type = 'text',\n  name,\n  ...props\n}: SearchInputProps) => {\n  const [isSearchMenuOpen, setIsSearchMenuOpen] = React.useState(false);\n  const [searchValue, setSearchValue] = React.useState(value);\n  const searchInputRef = React.useRef(null);\n  const ref = React.useRef(null);\n  const searchInputInputRef = innerRef || ref;\n  const searchInputExpandableToggleRef = React.useRef(null);\n  const [focusAfterExpandChange, setFocusAfterExpandChange] = React.useState(false);\n\n  const { isExpanded, onToggleExpand, toggleAriaLabel } = expandableInput || {};\n\n  React.useEffect(() => {\n    // this effect and the focusAfterExpandChange variable are needed to focus the input/toggle as needed when the\n    // expansion toggle is fired without focusing on mount\n    if (!focusAfterExpandChange) {\n      return;\n    } else if (isExpanded) {\n      searchInputInputRef?.current?.focus();\n    } else {\n      searchInputExpandableToggleRef?.current?.focus();\n    }\n    setFocusAfterExpandChange(false);\n  }, [focusAfterExpandChange, isExpanded, searchInputInputRef, searchInputExpandableToggleRef]);\n\n  React.useEffect(() => {\n    setSearchValue(value);\n  }, [value]);\n\n  React.useEffect(() => {\n    if (attributes.length > 0 && !advancedSearchDelimiter) {\n      // eslint-disable-next-line no-console\n      console.error(\n        'An advancedSearchDelimiter prop is required when advanced search attributes are provided using the attributes prop'\n      );\n    }\n  });\n\n  React.useEffect(() => {\n    setIsSearchMenuOpen(isAdvancedSearchOpen);\n  }, [isAdvancedSearchOpen]);\n\n  const onChangeHandler = (event: React.FormEvent<HTMLInputElement>, value: string) => {\n    if (onChange) {\n      onChange(event, value);\n    }\n    setSearchValue(value);\n  };\n\n  const onToggle = (e: React.SyntheticEvent<HTMLButtonElement>) => {\n    const isOpen = !isSearchMenuOpen;\n    setIsSearchMenuOpen(isOpen);\n    if (onToggleAdvancedSearch) {\n      onToggleAdvancedSearch(e, isOpen);\n    }\n  };\n\n  const onSearchHandler = (event: React.SyntheticEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n    if (onSearch) {\n      onSearch(event, value, getAttrValueMap());\n    }\n    setIsSearchMenuOpen(false);\n  };\n\n  const splitStringExceptInQuotes = (str: string) => {\n    let quoteType: string;\n\n    return str.match(/\\\\?.|^$/g).reduce(\n      (p: any, c: string) => {\n        if (c === \"'\" || c === '\"') {\n          if (!quoteType) {\n            quoteType = c;\n          }\n          if (c === quoteType) {\n            p.quote = !p.quote;\n          }\n        } else if (!p.quote && c === ' ') {\n          p.a.push('');\n        } else {\n          p.a[p.a.length - 1] += c.replace(/\\\\(.)/, '$1');\n        }\n        return p;\n      },\n      { a: [''] }\n    ).a;\n  };\n\n  const getAttrValueMap = () => {\n    const attrValue: { [key: string]: string } = {};\n    const pairs = splitStringExceptInQuotes(searchValue);\n    pairs.map((pair: string) => {\n      const splitPair = pair.split(advancedSearchDelimiter);\n      if (splitPair.length === 2) {\n        attrValue[splitPair[0]] = splitPair[1].replace(/(^'|'$)/g, '');\n      } else if (splitPair.length === 1) {\n        attrValue.haswords = attrValue.hasOwnProperty('haswords')\n          ? `${attrValue.haswords} ${splitPair[0]}`\n          : splitPair[0];\n      }\n    });\n    return attrValue;\n  };\n\n  const onEnter = (event: React.KeyboardEvent<any>) => {\n    if (event.key === 'Enter') {\n      onSearchHandler(event);\n    }\n  };\n\n  const onClearInput = (e: React.SyntheticEvent<HTMLButtonElement>) => {\n    if (onClear) {\n      onClear(e);\n    }\n    if (searchInputInputRef && searchInputInputRef.current) {\n      searchInputInputRef.current.focus();\n    }\n  };\n\n  const onExpandHandler = (event: React.SyntheticEvent<HTMLButtonElement>) => {\n    setSearchValue('');\n    onToggleExpand(event, isExpanded);\n    setFocusAfterExpandChange(true);\n  };\n\n  const renderUtilities =\n    value && (resultsCount || (!!onNextClick && !!onPreviousClick) || (!!onClear && !expandableInput));\n\n  const buildTextInputGroup = ({ ...searchInputProps } = {}) => (\n    <TextInputGroup isDisabled={isDisabled} {...searchInputProps}>\n      <TextInputGroupMain\n        hint={hint}\n        icon={<SearchIcon />}\n        innerRef={searchInputInputRef}\n        value={searchValue}\n        placeholder={placeholder}\n        aria-label={ariaLabel}\n        onKeyDown={onEnter}\n        onChange={onChangeHandler}\n        type={type}\n        name={name}\n      />\n      {renderUtilities && (\n        <TextInputGroupUtilities>\n          {resultsCount && <Badge isRead>{resultsCount}</Badge>}\n          {!!onNextClick && !!onPreviousClick && (\n            <div className=\"pf-c-text-input-group__group\">\n              <Button\n                variant={ButtonVariant.plain}\n                aria-label={previousNavigationButtonAriaLabel}\n                isDisabled={isDisabled || isPreviousNavigationButtonDisabled}\n                onClick={onPreviousClick}\n              >\n                <AngleUpIcon />\n              </Button>\n              <Button\n                variant={ButtonVariant.plain}\n                aria-label={nextNavigationButtonAriaLabel}\n                isDisabled={isDisabled || isNextNavigationButtonDisabled}\n                onClick={onNextClick}\n              >\n                <AngleDownIcon />\n              </Button>\n            </div>\n          )}\n          {!!onClear && !expandableInput && (\n            <Button\n              variant={ButtonVariant.plain}\n              isDisabled={isDisabled}\n              aria-label={resetButtonLabel}\n              onClick={onClearInput}\n            >\n              <TimesIcon />\n            </Button>\n          )}\n        </TextInputGroupUtilities>\n      )}\n    </TextInputGroup>\n  );\n\n  const expandableToggle = (\n    <Button\n      variant={ButtonVariant.plain}\n      aria-label={toggleAriaLabel}\n      aria-expanded={isExpanded}\n      icon={isExpanded ? <TimesIcon /> : <SearchIcon />}\n      onClick={onExpandHandler}\n      ref={searchInputExpandableToggleRef}\n    />\n  );\n\n  const buildExpandableSearchInput = ({ ...searchInputProps } = {}) => (\n    <InputGroup {...searchInputProps}>\n      {buildTextInputGroup()}\n      {expandableToggle}\n    </InputGroup>\n  );\n\n  const buildSearchTextInputGroup = ({ ...searchInputProps } = {}) => {\n    if (expandableInput) {\n      return buildExpandableSearchInput({ ...searchInputProps });\n    }\n\n    return buildTextInputGroup({ ...searchInputProps });\n  };\n\n  const buildSearchTextInputGroupWithExtraButtons = ({ ...searchInputProps } = {}) => (\n    <InputGroup {...searchInputProps}>\n      {buildTextInputGroup()}\n      {(attributes.length > 0 || onToggleAdvancedSearch) && (\n        <Button\n          className={isSearchMenuOpen && 'pf-m-expanded'}\n          variant={ButtonVariant.control}\n          aria-label={openMenuButtonAriaLabel}\n          onClick={onToggle}\n          isDisabled={isDisabled}\n          aria-expanded={isSearchMenuOpen}\n        >\n          <CaretDownIcon />\n        </Button>\n      )}\n      {!!onSearch && (\n        <Button\n          type=\"submit\"\n          variant={ButtonVariant.control}\n          aria-label={submitSearchButtonLabel}\n          onClick={onSearchHandler}\n          isDisabled={isDisabled || !searchValue}\n        >\n          <ArrowRightIcon />\n        </Button>\n      )}\n      {expandableInput && expandableToggle}\n    </InputGroup>\n  );\n\n  const searchInputProps = {\n    ...props,\n    className: className && css(className),\n    innerRef: searchInputRef\n  };\n\n  if (!!expandableInput && !isExpanded) {\n    return <InputGroup {...searchInputProps}>{expandableToggle}</InputGroup>;\n  }\n\n  if (!!onSearch || attributes.length > 0 || !!onToggleAdvancedSearch) {\n    if (attributes.length > 0) {\n      const AdvancedSearch = (\n        <div>\n          <AdvancedSearchMenu\n            value={value}\n            parentRef={searchInputRef}\n            parentInputRef={searchInputInputRef}\n            onSearch={onSearch}\n            onClear={onClear}\n            onChange={onChange}\n            onToggleAdvancedMenu={onToggle}\n            resetButtonLabel={resetButtonLabel}\n            submitSearchButtonLabel={submitSearchButtonLabel}\n            attributes={attributes}\n            formAdditionalItems={formAdditionalItems}\n            hasWordsAttrLabel={hasWordsAttrLabel}\n            advancedSearchDelimiter={advancedSearchDelimiter}\n            getAttrValueMap={getAttrValueMap}\n            isSearchMenuOpen={isSearchMenuOpen}\n          />\n        </div>\n      );\n\n      const AdvancedSearchWithPopper = (\n        <div className={css(className)} ref={searchInputRef} {...props}>\n          <Popper\n            trigger={buildSearchTextInputGroupWithExtraButtons()}\n            popper={AdvancedSearch}\n            isVisible={isSearchMenuOpen}\n            enableFlip={true}\n            appendTo={() => appendTo || searchInputRef.current}\n            removeFindDomNode={removeFindDomNode}\n            zIndex={zIndex}\n          />\n        </div>\n      );\n\n      const AdvancedSearchInline = (\n        <div className={css(className)} ref={searchInputRef} {...props}>\n          {buildSearchTextInputGroupWithExtraButtons()}\n          {AdvancedSearch}\n        </div>\n      );\n\n      return appendTo !== 'inline' ? AdvancedSearchWithPopper : AdvancedSearchInline;\n    }\n    return buildSearchTextInputGroupWithExtraButtons({ ...searchInputProps });\n  }\n  return buildSearchTextInputGroup(searchInputProps);\n};\nSearchInputBase.displayName = 'SearchInputBase';\n\nexport const SearchInput = React.forwardRef((props: SearchInputProps, ref: React.Ref<HTMLInputElement>) => (\n  <SearchInputBase {...props} innerRef={ref as React.MutableRefObject<any>} />\n));\nSearchInput.displayName = 'SearchInput';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}