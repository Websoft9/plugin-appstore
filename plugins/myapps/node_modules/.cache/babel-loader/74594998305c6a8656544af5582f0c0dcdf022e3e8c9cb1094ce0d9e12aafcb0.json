{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport CopyIcon from '@patternfly/react-icons/dist/esm/icons/copy-icon';\nimport { Button } from '../Button';\nimport { Tooltip } from '../Tooltip';\nexport var ClipboardCopyButton = function ClipboardCopyButton(_a) {\n  var onClick = _a.onClick,\n    _a$exitDelay = _a.exitDelay,\n    exitDelay = _a$exitDelay === void 0 ? 0 : _a$exitDelay,\n    _a$entryDelay = _a.entryDelay,\n    entryDelay = _a$entryDelay === void 0 ? 300 : _a$entryDelay,\n    _a$maxWidth = _a.maxWidth,\n    maxWidth = _a$maxWidth === void 0 ? '100px' : _a$maxWidth,\n    _a$position = _a.position,\n    position = _a$position === void 0 ? 'top' : _a$position,\n    _a$ariaLabel = _a['aria-label'],\n    ariaLabel = _a$ariaLabel === void 0 ? 'Copyable input' : _a$ariaLabel,\n    id = _a.id,\n    textId = _a.textId,\n    children = _a.children,\n    _a$variant = _a.variant,\n    variant = _a$variant === void 0 ? 'control' : _a$variant,\n    _a$onTooltipHidden = _a.onTooltipHidden,\n    onTooltipHidden = _a$onTooltipHidden === void 0 ? function () {} : _a$onTooltipHidden,\n    _a$removeFindDomNode = _a.removeFindDomNode,\n    removeFindDomNode = _a$removeFindDomNode === void 0 ? false : _a$removeFindDomNode,\n    props = __rest(_a, [\"onClick\", \"exitDelay\", \"entryDelay\", \"maxWidth\", \"position\", 'aria-label', \"id\", \"textId\", \"children\", \"variant\", \"onTooltipHidden\", \"removeFindDomNode\"]);\n  return React.createElement(Tooltip, {\n    trigger: \"mouseenter focus click\",\n    exitDelay: exitDelay,\n    entryDelay: entryDelay,\n    maxWidth: maxWidth,\n    position: position,\n    \"aria-live\": \"polite\",\n    aria: \"none\",\n    content: React.createElement(\"div\", null, children),\n    onTooltipHidden: onTooltipHidden,\n    removeFindDomNode: removeFindDomNode\n  }, React.createElement(Button, Object.assign({\n    type: \"button\",\n    variant: variant,\n    onClick: onClick,\n    \"aria-label\": ariaLabel,\n    id: id,\n    \"aria-labelledby\": \"\".concat(id, \" \").concat(textId)\n  }, props), React.createElement(CopyIcon, null)));\n};\nClipboardCopyButton.displayName = 'ClipboardCopyButton';","map":{"version":3,"names":["React","CopyIcon","Button","Tooltip","ClipboardCopyButton","_a","onClick","_a$exitDelay","exitDelay","_a$entryDelay","entryDelay","_a$maxWidth","maxWidth","_a$position","position","_a$ariaLabel","ariaLabel","id","textId","children","_a$variant","variant","_a$onTooltipHidden","onTooltipHidden","_a$removeFindDomNode","removeFindDomNode","props","__rest","createElement","trigger","aria","content","Object","assign","type","concat","displayName"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@patternfly/react-core/src/components/ClipboardCopy/ClipboardCopyButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport CopyIcon from '@patternfly/react-icons/dist/esm/icons/copy-icon';\nimport { Button } from '../Button';\nimport { Tooltip, TooltipPosition } from '../Tooltip';\nimport { PopoverPosition } from '../Popover';\n\nexport interface ClipboardCopyButtonProps\n  extends Omit<React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, 'ref'> {\n  /** Callback for the copy when the button is clicked */\n  onClick: (event: React.MouseEvent) => void;\n  /** Content of the copy button */\n  children: React.ReactNode;\n  /** ID of the copy button */\n  id: string;\n  /** ID of the content that is being copied */\n  textId: string;\n  /** Additional classes added to the copy button */\n  className?: string;\n  /** Exit delay on the copy button tooltip */\n  exitDelay?: number;\n  /** Entry delay on the copy button tooltip */\n  entryDelay?: number;\n  /** Max width of the copy button tooltip */\n  maxWidth?: string;\n  /** Position of the copy button tooltip */\n  position?:\n    | TooltipPosition\n    | PopoverPosition\n    | 'auto'\n    | 'top'\n    | 'bottom'\n    | 'left'\n    | 'right'\n    | 'top-start'\n    | 'top-end'\n    | 'bottom-start'\n    | 'bottom-end'\n    | 'left-start'\n    | 'left-end'\n    | 'right-start'\n    | 'right-end';\n  /** @beta Opt-in for updated popper that does not use findDOMNode. */\n  removeFindDomNode?: boolean;\n  /** Aria-label for the copy button */\n  'aria-label'?: string;\n  /** Variant of the copy button */\n  variant?: 'control' | 'plain';\n  /** Callback when tooltip's hide transition has finished executing */\n  onTooltipHidden?: () => void;\n}\n\nexport const ClipboardCopyButton: React.FunctionComponent<ClipboardCopyButtonProps> = ({\n  onClick,\n  exitDelay = 0,\n  entryDelay = 300,\n  maxWidth = '100px',\n  position = 'top',\n  'aria-label': ariaLabel = 'Copyable input',\n  id,\n  textId,\n  children,\n  variant = 'control',\n  onTooltipHidden = () => {},\n  removeFindDomNode = false,\n  ...props\n}: ClipboardCopyButtonProps) => (\n  <Tooltip\n    trigger=\"mouseenter focus click\"\n    exitDelay={exitDelay}\n    entryDelay={entryDelay}\n    maxWidth={maxWidth}\n    position={position}\n    aria-live=\"polite\"\n    aria=\"none\"\n    content={<div>{children}</div>}\n    onTooltipHidden={onTooltipHidden}\n    removeFindDomNode={removeFindDomNode}\n  >\n    <Button\n      type=\"button\"\n      variant={variant}\n      onClick={onClick}\n      aria-label={ariaLabel}\n      id={id}\n      aria-labelledby={`${id} ${textId}`}\n      {...props}\n    >\n      <CopyIcon />\n    </Button>\n  </Tooltip>\n);\nClipboardCopyButton.displayName = 'ClipboardCopyButton';\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,QAAQ,MAAM,kDAAkD;AACvE,SAASC,MAAM,QAAQ,WAAW;AAClC,SAASC,OAAO,QAAyB,YAAY;AAgDrD,OAAO,IAAMC,mBAAmB,GAAsD,SAAzEA,mBAAmBA,CAAuDC,EAc5D,EAAI;MAb7BC,OAAO,GAWkBD,EAEA,CAbzBC,OAAO;IAAAC,YAAA,GAWkBF,EAEA,CAZzBG,SAAS;IAATA,SAAS,GAAAD,YAAA,cAAG,CAAC,GAAAA,YAAA;IAAAE,aAAA,GAUYJ,EAEA,CAXzBK,UAAU;IAAVA,UAAU,GAAAD,aAAA,cAAG,GAAG,GAAAA,aAAA;IAAAE,WAAA,GASSN,EAEA,CAVzBO,QAAQ;IAARA,QAAQ,GAAAD,WAAA,cAAG,OAAO,GAAAA,WAAA;IAAAE,WAAA,GAQOR,EAEA,CATzBS,QAAQ;IAARA,QAAQ,GAAAD,WAAA,cAAG,KAAK,GAAAA,WAAA;IAAAE,YAAA,GAOSV,EAEA,CARzB,YAAY;IAAEW,SAAS,GAAAD,YAAA,cAAG,gBAAgB,GAAAA,YAAA;IAC1CE,EAAE,GAKuBZ,EAEA,CAPzBY,EAAE;IACFC,MAAM,GAImBb,EAEA,CANzBa,MAAM;IACNC,QAAQ,GAGiBd,EAEA,CALzBc,QAAQ;IAAAC,UAAA,GAGiBf,EAEA,CAJzBgB,OAAO;IAAPA,OAAO,GAAAD,UAAA,cAAG,SAAS,GAAAA,UAAA;IAAAE,kBAAA,GAEMjB,EAEA,CAHzBkB,eAAe;IAAfA,eAAe,GAAAD,kBAAA,cAAG,YAAK,CAAE,CAAC,GAAAA,kBAAA;IAAAE,oBAAA,GACDnB,EAEA,CAFzBoB,iBAAiB;IAAjBA,iBAAiB,GAAAD,oBAAA,cAAG,KAAK,GAAAA,oBAAA;IACtBE,KAAK,GAAAC,MAAA,CAAAtB,EAAA,EAb6E,2JActF,CADS;EACsB,OAC9BL,KAAA,CAAA4B,aAAA,CAACzB,OAAO;IACN0B,OAAO,EAAC,wBAAwB;IAChCrB,SAAS,EAAEA,SAAS;IACpBE,UAAU,EAAEA,UAAU;IACtBE,QAAQ,EAAEA,QAAQ;IAClBE,QAAQ,EAAEA,QAAQ;IAAA,aACR,QAAQ;IAClBgB,IAAI,EAAC,MAAM;IACXC,OAAO,EAAE/B,KAAA,CAAA4B,aAAA,cAAMT,QAAQ,CAAO;IAC9BI,eAAe,EAAEA,eAAe;IAChCE,iBAAiB,EAAEA;EAAiB,GAEpCzB,KAAA,CAAA4B,aAAA,CAAC1B,MAAM,EAAA8B,MAAA,CAAAC,MAAA;IACLC,IAAI,EAAC,QAAQ;IACbb,OAAO,EAAEA,OAAO;IAChBf,OAAO,EAAEA,OAAO;IAAA,cACJU,SAAS;IACrBC,EAAE,EAAEA,EAAE;IAAA,sBAAAkB,MAAA,CACclB,EAAE,OAAAkB,MAAA,CAAIjB,MAAM;EAAE,GAC9BQ,KAAK,GAET1B,KAAA,CAAA4B,aAAA,CAAC3B,QAAQ,OAAG,CACL,CACD;CACX;AACDG,mBAAmB,CAACgC,WAAW,GAAG,qBAAqB"},"metadata":{},"sourceType":"module","externalDependencies":[]}