{"ast":null,"code":"import { invariant } from \"../globals/index.js\";\nimport { visit, BREAK } from 'graphql';\nexport function shouldInclude(_a, variables) {\n  var directives = _a.directives;\n  if (!directives || !directives.length) {\n    return true;\n  }\n  return getInclusionDirectives(directives).every(function (_a) {\n    var directive = _a.directive,\n      ifArgument = _a.ifArgument;\n    var evaledValue = false;\n    if (ifArgument.value.kind === 'Variable') {\n      evaledValue = variables && variables[ifArgument.value.name.value];\n      __DEV__ ? invariant(evaledValue !== void 0, \"Invalid variable referenced in @\".concat(directive.name.value, \" directive.\")) : invariant(evaledValue !== void 0, 40);\n    } else {\n      evaledValue = ifArgument.value.value;\n    }\n    return directive.name.value === 'skip' ? !evaledValue : evaledValue;\n  });\n}\nexport function getDirectiveNames(root) {\n  var names = [];\n  visit(root, {\n    Directive: function Directive(node) {\n      names.push(node.name.value);\n    }\n  });\n  return names;\n}\nexport var hasAnyDirectives = function hasAnyDirectives(names, root) {\n  return hasDirectives(names, root, false);\n};\nexport var hasAllDirectives = function hasAllDirectives(names, root) {\n  return hasDirectives(names, root, true);\n};\nexport function hasDirectives(names, root, all) {\n  var nameSet = new Set(names);\n  var uniqueCount = nameSet.size;\n  visit(root, {\n    Directive: function Directive(node) {\n      if (nameSet.delete(node.name.value) && (!all || !nameSet.size)) {\n        return BREAK;\n      }\n    }\n  });\n  return all ? !nameSet.size : nameSet.size < uniqueCount;\n}\nexport function hasClientExports(document) {\n  return document && hasDirectives(['client', 'export'], document, true);\n}\nfunction isInclusionDirective(_a) {\n  var value = _a.name.value;\n  return value === 'skip' || value === 'include';\n}\nexport function getInclusionDirectives(directives) {\n  var result = [];\n  if (directives && directives.length) {\n    directives.forEach(function (directive) {\n      if (!isInclusionDirective(directive)) return;\n      var directiveArguments = directive.arguments;\n      var directiveName = directive.name.value;\n      __DEV__ ? invariant(directiveArguments && directiveArguments.length === 1, \"Incorrect number of arguments for the @\".concat(directiveName, \" directive.\")) : invariant(directiveArguments && directiveArguments.length === 1, 41);\n      var ifArgument = directiveArguments[0];\n      __DEV__ ? invariant(ifArgument.name && ifArgument.name.value === 'if', \"Invalid argument for the @\".concat(directiveName, \" directive.\")) : invariant(ifArgument.name && ifArgument.name.value === 'if', 42);\n      var ifValue = ifArgument.value;\n      __DEV__ ? invariant(ifValue && (ifValue.kind === 'Variable' || ifValue.kind === 'BooleanValue'), \"Argument for the @\".concat(directiveName, \" directive must be a variable or a boolean value.\")) : invariant(ifValue && (ifValue.kind === 'Variable' || ifValue.kind === 'BooleanValue'), 43);\n      result.push({\n        directive: directive,\n        ifArgument: ifArgument\n      });\n    });\n  }\n  return result;\n}","map":{"version":3,"names":["invariant","visit","BREAK","shouldInclude","_a","variables","directives","length","getInclusionDirectives","every","directive","ifArgument","evaledValue","value","kind","name","__DEV__","concat","getDirectiveNames","root","names","Directive","node","push","hasAnyDirectives","hasDirectives","hasAllDirectives","all","nameSet","Set","uniqueCount","size","delete","hasClientExports","document","isInclusionDirective","result","forEach","directiveArguments","arguments","directiveName","ifValue"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@apollo/src/utilities/graphql/directives.ts"],"sourcesContent":["import { invariant } from '../globals';\n\n// Provides the methods that allow QueryManager to handle the `skip` and\n// `include` directives within GraphQL.\nimport {\n  SelectionNode,\n  VariableNode,\n  BooleanValueNode,\n  DirectiveNode,\n  DocumentNode,\n  ArgumentNode,\n  ValueNode,\n  ASTNode,\n  visit,\n  BREAK,\n} from 'graphql';\n\nexport type DirectiveInfo = {\n  [fieldName: string]: { [argName: string]: any };\n};\n\nexport function shouldInclude(\n  { directives }: SelectionNode,\n  variables?: Record<string, any>,\n): boolean {\n  if (!directives || !directives.length) {\n    return true;\n  }\n  return getInclusionDirectives(\n    directives\n  ).every(({ directive, ifArgument }) => {\n    let evaledValue: boolean = false;\n    if (ifArgument.value.kind === 'Variable') {\n      evaledValue = variables && variables[(ifArgument.value as VariableNode).name.value];\n      invariant(\n        evaledValue !== void 0,\n        `Invalid variable referenced in @${directive.name.value} directive.`,\n      );\n    } else {\n      evaledValue = (ifArgument.value as BooleanValueNode).value;\n    }\n    return directive.name.value === 'skip' ? !evaledValue : evaledValue;\n  });\n}\n\nexport function getDirectiveNames(root: ASTNode) {\n  const names: string[] = [];\n\n  visit(root, {\n    Directive(node: DirectiveNode) {\n      names.push(node.name.value);\n    },\n  });\n\n  return names;\n}\n\nexport const hasAnyDirectives = (\n  names: string[],\n  root: ASTNode,\n) => hasDirectives(names, root, false);\n\nexport const hasAllDirectives = (\n  names: string[],\n  root: ASTNode,\n) => hasDirectives(names, root, true);\n\nexport function hasDirectives(\n  names: string[],\n  root: ASTNode,\n  all?: boolean,\n) {\n  const nameSet = new Set(names);\n  const uniqueCount = nameSet.size;\n\n  visit(root, {\n    Directive(node) {\n      if (\n        nameSet.delete(node.name.value) &&\n        (!all || !nameSet.size)\n      ) {\n        return BREAK;\n      }\n    },\n  });\n\n  // If we found all the names, nameSet will be empty. If we only care about\n  // finding some of them, the < condition is sufficient.\n  return all ? !nameSet.size : nameSet.size < uniqueCount;\n}\n\nexport function hasClientExports(document: DocumentNode) {\n  return document && hasDirectives(['client', 'export'], document, true);\n}\n\nexport type InclusionDirectives = Array<{\n  directive: DirectiveNode;\n  ifArgument: ArgumentNode;\n}>;\n\nfunction isInclusionDirective({ name: { value } }: DirectiveNode): boolean {\n  return value === 'skip' || value === 'include';\n}\n\nexport function getInclusionDirectives(\n  directives: ReadonlyArray<DirectiveNode>,\n): InclusionDirectives {\n  const result: InclusionDirectives = [];\n\n  if (directives && directives.length) {\n    directives.forEach(directive => {\n      if (!isInclusionDirective(directive)) return;\n\n      const directiveArguments = directive.arguments;\n      const directiveName = directive.name.value;\n\n      invariant(\n        directiveArguments && directiveArguments.length === 1,\n        `Incorrect number of arguments for the @${directiveName} directive.`,\n      );\n\n      const ifArgument = directiveArguments![0];\n      invariant(\n        ifArgument.name && ifArgument.name.value === 'if',\n        `Invalid argument for the @${directiveName} directive.`,\n      );\n\n      const ifValue: ValueNode = ifArgument.value;\n\n      // means it has to be a variable value if this is a valid @skip or @include directive\n      invariant(\n        ifValue &&\n          (ifValue.kind === 'Variable' || ifValue.kind === 'BooleanValue'),\n        `Argument for the @${directiveName} directive must be a variable or a boolean value.`,\n      );\n\n      result.push({ directive, ifArgument });\n    });\n  }\n\n  return result;\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}