{"ast":null,"code":"/**\n * Produces the value of a block string from its parsed raw value, similar to\n * CoffeeScript's block string, Python's docstring trim or Ruby's strip_heredoc.\n *\n * This implements the GraphQL spec's BlockStringValue() static algorithm.\n *\n * @internal\n */\nexport function dedentBlockStringValue(rawString) {\n  // Expand a block string's raw value into independent lines.\n  var lines = rawString.split(/\\r\\n|[\\n\\r]/g); // Remove common indentation from all lines but first.\n\n  var commonIndent = getBlockStringIndentation(rawString);\n  if (commonIndent !== 0) {\n    for (var i = 1; i < lines.length; i++) {\n      lines[i] = lines[i].slice(commonIndent);\n    }\n  } // Remove leading and trailing blank lines.\n\n  var startLine = 0;\n  while (startLine < lines.length && isBlank(lines[startLine])) {\n    ++startLine;\n  }\n  var endLine = lines.length;\n  while (endLine > startLine && isBlank(lines[endLine - 1])) {\n    --endLine;\n  } // Return a string of the lines joined with U+000A.\n\n  return lines.slice(startLine, endLine).join('\\n');\n}\nfunction isBlank(str) {\n  for (var i = 0; i < str.length; ++i) {\n    if (str[i] !== ' ' && str[i] !== '\\t') {\n      return false;\n    }\n  }\n  return true;\n}\n/**\n * @internal\n */\n\nexport function getBlockStringIndentation(value) {\n  var _commonIndent;\n  var isFirstLine = true;\n  var isEmptyLine = true;\n  var indent = 0;\n  var commonIndent = null;\n  for (var i = 0; i < value.length; ++i) {\n    switch (value.charCodeAt(i)) {\n      case 13:\n        //  \\r\n        if (value.charCodeAt(i + 1) === 10) {\n          ++i; // skip \\r\\n as one symbol\n        }\n\n      // falls through\n\n      case 10:\n        //  \\n\n        isFirstLine = false;\n        isEmptyLine = true;\n        indent = 0;\n        break;\n      case 9: //   \\t\n\n      case 32:\n        //  <space>\n        ++indent;\n        break;\n      default:\n        if (isEmptyLine && !isFirstLine && (commonIndent === null || indent < commonIndent)) {\n          commonIndent = indent;\n        }\n        isEmptyLine = false;\n    }\n  }\n  return (_commonIndent = commonIndent) !== null && _commonIndent !== void 0 ? _commonIndent : 0;\n}\n/**\n * Print a block string in the indented block form by adding a leading and\n * trailing blank line. However, if a block string starts with whitespace and is\n * a single-line, adding a leading blank line would strip that whitespace.\n *\n * @internal\n */\n\nexport function printBlockString(value) {\n  var indentation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var preferMultipleLines = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var isSingleLine = value.indexOf('\\n') === -1;\n  var hasLeadingSpace = value[0] === ' ' || value[0] === '\\t';\n  var hasTrailingQuote = value[value.length - 1] === '\"';\n  var hasTrailingSlash = value[value.length - 1] === '\\\\';\n  var printAsMultipleLines = !isSingleLine || hasTrailingQuote || hasTrailingSlash || preferMultipleLines;\n  var result = ''; // Format a multi-line block quote to account for leading space.\n\n  if (printAsMultipleLines && !(isSingleLine && hasLeadingSpace)) {\n    result += '\\n' + indentation;\n  }\n  result += indentation ? value.replace(/\\n/g, '\\n' + indentation) : value;\n  if (printAsMultipleLines) {\n    result += '\\n';\n  }\n  return '\"\"\"' + result.replace(/\"\"\"/g, '\\\\\"\"\"') + '\"\"\"';\n}","map":{"version":3,"names":["dedentBlockStringValue","rawString","lines","split","commonIndent","getBlockStringIndentation","i","length","slice","startLine","isBlank","endLine","join","str","value","_commonIndent","isFirstLine","isEmptyLine","indent","charCodeAt","printBlockString","indentation","arguments","undefined","preferMultipleLines","isSingleLine","indexOf","hasLeadingSpace","hasTrailingQuote","hasTrailingSlash","printAsMultipleLines","result","replace"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/graphql/language/blockString.mjs"],"sourcesContent":["/**\n * Produces the value of a block string from its parsed raw value, similar to\n * CoffeeScript's block string, Python's docstring trim or Ruby's strip_heredoc.\n *\n * This implements the GraphQL spec's BlockStringValue() static algorithm.\n *\n * @internal\n */\nexport function dedentBlockStringValue(rawString) {\n  // Expand a block string's raw value into independent lines.\n  var lines = rawString.split(/\\r\\n|[\\n\\r]/g); // Remove common indentation from all lines but first.\n\n  var commonIndent = getBlockStringIndentation(rawString);\n\n  if (commonIndent !== 0) {\n    for (var i = 1; i < lines.length; i++) {\n      lines[i] = lines[i].slice(commonIndent);\n    }\n  } // Remove leading and trailing blank lines.\n\n\n  var startLine = 0;\n\n  while (startLine < lines.length && isBlank(lines[startLine])) {\n    ++startLine;\n  }\n\n  var endLine = lines.length;\n\n  while (endLine > startLine && isBlank(lines[endLine - 1])) {\n    --endLine;\n  } // Return a string of the lines joined with U+000A.\n\n\n  return lines.slice(startLine, endLine).join('\\n');\n}\n\nfunction isBlank(str) {\n  for (var i = 0; i < str.length; ++i) {\n    if (str[i] !== ' ' && str[i] !== '\\t') {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * @internal\n */\n\n\nexport function getBlockStringIndentation(value) {\n  var _commonIndent;\n\n  var isFirstLine = true;\n  var isEmptyLine = true;\n  var indent = 0;\n  var commonIndent = null;\n\n  for (var i = 0; i < value.length; ++i) {\n    switch (value.charCodeAt(i)) {\n      case 13:\n        //  \\r\n        if (value.charCodeAt(i + 1) === 10) {\n          ++i; // skip \\r\\n as one symbol\n        }\n\n      // falls through\n\n      case 10:\n        //  \\n\n        isFirstLine = false;\n        isEmptyLine = true;\n        indent = 0;\n        break;\n\n      case 9: //   \\t\n\n      case 32:\n        //  <space>\n        ++indent;\n        break;\n\n      default:\n        if (isEmptyLine && !isFirstLine && (commonIndent === null || indent < commonIndent)) {\n          commonIndent = indent;\n        }\n\n        isEmptyLine = false;\n    }\n  }\n\n  return (_commonIndent = commonIndent) !== null && _commonIndent !== void 0 ? _commonIndent : 0;\n}\n/**\n * Print a block string in the indented block form by adding a leading and\n * trailing blank line. However, if a block string starts with whitespace and is\n * a single-line, adding a leading blank line would strip that whitespace.\n *\n * @internal\n */\n\nexport function printBlockString(value) {\n  var indentation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var preferMultipleLines = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var isSingleLine = value.indexOf('\\n') === -1;\n  var hasLeadingSpace = value[0] === ' ' || value[0] === '\\t';\n  var hasTrailingQuote = value[value.length - 1] === '\"';\n  var hasTrailingSlash = value[value.length - 1] === '\\\\';\n  var printAsMultipleLines = !isSingleLine || hasTrailingQuote || hasTrailingSlash || preferMultipleLines;\n  var result = ''; // Format a multi-line block quote to account for leading space.\n\n  if (printAsMultipleLines && !(isSingleLine && hasLeadingSpace)) {\n    result += '\\n' + indentation;\n  }\n\n  result += indentation ? value.replace(/\\n/g, '\\n' + indentation) : value;\n\n  if (printAsMultipleLines) {\n    result += '\\n';\n  }\n\n  return '\"\"\"' + result.replace(/\"\"\"/g, '\\\\\"\"\"') + '\"\"\"';\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}