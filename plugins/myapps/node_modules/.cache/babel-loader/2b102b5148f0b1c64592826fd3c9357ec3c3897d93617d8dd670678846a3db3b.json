{"ast":null,"code":"import _slicedToArray from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { css } from '@patternfly/react-styles';\nimport { Badge } from '../Badge';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { flattenTree } from './treeUtils';\nimport { DualListSelectorListContext } from './DualListSelectorContext';\nvar DualListSelectorTreeItemBase = function DualListSelectorTreeItemBase(_a) {\n  var onOptionCheck = _a.onOptionCheck,\n    children = _a.children,\n    className = _a.className,\n    id = _a.id,\n    text = _a.text,\n    defaultExpanded = _a.defaultExpanded,\n    hasBadge = _a.hasBadge,\n    isChecked = _a.isChecked,\n    checkProps = _a.checkProps,\n    badgeProps = _a.badgeProps,\n    itemData = _a.itemData,\n    _a$isDisabled = _a.isDisabled,\n    isDisabled = _a$isDisabled === void 0 ? false : _a$isDisabled,\n    useMemo = _a.useMemo,\n    props = __rest(_a, [\"onOptionCheck\", \"children\", \"className\", \"id\", \"text\", \"defaultExpanded\", \"hasBadge\", \"isChecked\", \"checkProps\", \"badgeProps\", \"itemData\", \"isDisabled\", \"useMemo\"]);\n  var ref = React.useRef(null);\n  var _React$useState = React.useState(defaultExpanded || false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    isExpanded = _React$useState2[0],\n    setIsExpanded = _React$useState2[1];\n  var _React$useContext = React.useContext(DualListSelectorListContext),\n    setFocusedOption = _React$useContext.setFocusedOption;\n  React.useEffect(function () {\n    setIsExpanded(defaultExpanded);\n  }, [defaultExpanded]);\n  return React.createElement(\"li\", Object.assign({\n    className: css(styles.dualListSelectorListItem, className, children && styles.modifiers.expandable, isExpanded && styles.modifiers.expanded, isDisabled && styles.modifiers.disabled),\n    id: id\n  }, props, {\n    \"aria-selected\": isChecked,\n    role: \"treeitem\"\n  }, isExpanded && {\n    'aria-expanded': 'true'\n  }), React.createElement(\"div\", {\n    className: css(styles.dualListSelectorListItemRow, isChecked && styles.modifiers.selected, styles.modifiers.check)\n  }, React.createElement(\"div\", {\n    className: css(styles.dualListSelectorItem),\n    ref: ref,\n    tabIndex: -1,\n    onClick: isDisabled ? undefined : function (evt) {\n      onOptionCheck && onOptionCheck(evt, !isChecked, itemData);\n      setFocusedOption(id);\n    }\n  }, React.createElement(\"span\", {\n    className: css(styles.dualListSelectorItemMain)\n  }, children && React.createElement(\"div\", {\n    className: css(styles.dualListSelectorItemToggle),\n    onClick: function onClick(e) {\n      if (children) {\n        setIsExpanded(!isExpanded);\n      }\n      e.stopPropagation();\n    },\n    onKeyDown: function onKeyDown(e) {\n      if (e.key === ' ' || e.key === 'Enter') {\n        document.activeElement.click();\n        e.preventDefault();\n      }\n    },\n    tabIndex: -1\n  }, React.createElement(\"span\", {\n    className: css(styles.dualListSelectorItemToggleIcon)\n  }, React.createElement(AngleRightIcon, {\n    \"aria-hidden\": true\n  }))), React.createElement(\"span\", {\n    className: css(styles.dualListSelectorItemCheck)\n  }, React.createElement(\"input\", Object.assign({\n    type: \"checkbox\",\n    onChange: function onChange(evt) {\n      onOptionCheck && onOptionCheck(evt, !isChecked, itemData);\n      setFocusedOption(id);\n    },\n    onClick: function onClick(evt) {\n      return evt.stopPropagation();\n    },\n    onKeyDown: function onKeyDown(e) {\n      if (e.key === ' ' || e.key === 'Enter') {\n        onOptionCheck && onOptionCheck(e, !isChecked, itemData);\n        setFocusedOption(id);\n        e.preventDefault();\n      }\n    },\n    ref: function ref(elem) {\n      return elem && (elem.indeterminate = isChecked === null);\n    },\n    checked: isChecked || false,\n    tabIndex: -1\n  }, checkProps))), React.createElement(\"span\", {\n    className: css(styles.dualListSelectorItemText)\n  }, text), hasBadge && children && React.createElement(\"span\", {\n    className: css(styles.dualListSelectorItemCount)\n  }, React.createElement(Badge, Object.assign({}, badgeProps), flattenTree(children.props.data).length))))), isExpanded && children);\n};\nexport var DualListSelectorTreeItem = React.memo(DualListSelectorTreeItemBase, function (prevProps, nextProps) {\n  if (!nextProps.useMemo) {\n    return false;\n  }\n  if (prevProps.className !== nextProps.className || prevProps.text !== nextProps.text || prevProps.id !== nextProps.id || prevProps.defaultExpanded !== nextProps.defaultExpanded || prevProps.checkProps !== nextProps.checkProps || prevProps.hasBadge !== nextProps.hasBadge || prevProps.badgeProps !== nextProps.badgeProps || prevProps.isChecked !== nextProps.isChecked || prevProps.itemData !== nextProps.itemData) {\n    return false;\n  }\n  return true;\n});\nDualListSelectorTreeItem.displayName = 'DualListSelectorTreeItem';","map":{"version":3,"names":["React","styles","css","Badge","AngleRightIcon","flattenTree","DualListSelectorListContext","DualListSelectorTreeItemBase","_a","onOptionCheck","children","className","id","text","defaultExpanded","hasBadge","isChecked","checkProps","badgeProps","itemData","_a$isDisabled","isDisabled","useMemo","props","__rest","ref","useRef","_React$useState","useState","_React$useState2","_slicedToArray","isExpanded","setIsExpanded","_React$useContext","useContext","setFocusedOption","useEffect","createElement","Object","assign","dualListSelectorListItem","modifiers","expandable","expanded","disabled","role","dualListSelectorListItemRow","selected","check","dualListSelectorItem","tabIndex","onClick","undefined","evt","dualListSelectorItemMain","dualListSelectorItemToggle","e","stopPropagation","onKeyDown","key","document","activeElement","click","preventDefault","dualListSelectorItemToggleIcon","dualListSelectorItemCheck","type","onChange","elem","indeterminate","checked","dualListSelectorItemText","dualListSelectorItemCount","data","length","DualListSelectorTreeItem","memo","prevProps","nextProps","displayName"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@patternfly/react-core/src/components/DualListSelector/DualListSelectorTreeItem.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { css } from '@patternfly/react-styles';\nimport { DualListSelectorTreeItemData } from './DualListSelectorTree';\nimport { Badge } from '../Badge';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { flattenTree } from './treeUtils';\nimport { DualListSelectorListContext } from './DualListSelectorContext';\n\nexport interface DualListSelectorTreeItemProps extends React.HTMLProps<HTMLLIElement> {\n  /** Content rendered inside the dual list selector. */\n  children?: React.ReactNode;\n  /** Additional classes applied to the dual list selector. */\n  className?: string;\n  /** Flag indicating this option is expanded by default. */\n  defaultExpanded?: boolean;\n  /** Flag indicating this option has a badge */\n  hasBadge?: boolean;\n  /** Callback fired when an option is checked */\n  onOptionCheck?: (\n    event: React.MouseEvent | React.ChangeEvent<HTMLInputElement> | React.KeyboardEvent,\n    isChecked: boolean,\n    itemData: DualListSelectorTreeItemData\n  ) => void;\n  /** ID of the option */\n  id: string;\n  /** Text of the option */\n  text: string;\n  /** Flag indicating if this open is checked. */\n  isChecked?: boolean;\n  /** Additional properties to pass to the option checkbox */\n  checkProps?: any;\n  /** Additional properties to pass to the option badge */\n  badgeProps?: any;\n  /** Raw data of the option */\n  itemData?: DualListSelectorTreeItemData;\n  /** Flag indicating whether the component is disabled. */\n  isDisabled?: boolean;\n  /** Flag indicating the DualListSelector tree should utilize memoization to help render large data sets. */\n  useMemo?: boolean;\n}\n\nconst DualListSelectorTreeItemBase: React.FunctionComponent<DualListSelectorTreeItemProps> = ({\n  onOptionCheck,\n  children,\n  className,\n  id,\n  text,\n  defaultExpanded,\n  hasBadge,\n  isChecked,\n  checkProps,\n  badgeProps,\n  itemData,\n  isDisabled = false,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  useMemo,\n  ...props\n}: DualListSelectorTreeItemProps) => {\n  const ref = React.useRef(null);\n  const [isExpanded, setIsExpanded] = React.useState(defaultExpanded || false);\n  const { setFocusedOption } = React.useContext(DualListSelectorListContext);\n\n  React.useEffect(() => {\n    setIsExpanded(defaultExpanded);\n  }, [defaultExpanded]);\n\n  return (\n    <li\n      className={css(\n        styles.dualListSelectorListItem,\n        className,\n        children && styles.modifiers.expandable,\n        isExpanded && styles.modifiers.expanded,\n        isDisabled && styles.modifiers.disabled\n      )}\n      id={id}\n      {...props}\n      aria-selected={isChecked}\n      role=\"treeitem\"\n      {...(isExpanded && { 'aria-expanded': 'true' })}\n    >\n      <div\n        className={css(\n          styles.dualListSelectorListItemRow,\n          isChecked && styles.modifiers.selected,\n          styles.modifiers.check\n        )}\n      >\n        <div\n          className={css(styles.dualListSelectorItem)}\n          ref={ref}\n          tabIndex={-1}\n          onClick={\n            isDisabled\n              ? undefined\n              : evt => {\n                  onOptionCheck && onOptionCheck(evt, !isChecked, itemData);\n                  setFocusedOption(id);\n                }\n          }\n        >\n          <span className={css(styles.dualListSelectorItemMain)}>\n            {children && (\n              <div\n                className={css(styles.dualListSelectorItemToggle)}\n                onClick={e => {\n                  if (children) {\n                    setIsExpanded(!isExpanded);\n                  }\n                  e.stopPropagation();\n                }}\n                onKeyDown={(e: React.KeyboardEvent) => {\n                  if (e.key === ' ' || e.key === 'Enter') {\n                    (document.activeElement as HTMLElement).click();\n                    e.preventDefault();\n                  }\n                }}\n                tabIndex={-1}\n              >\n                <span className={css(styles.dualListSelectorItemToggleIcon)}>\n                  <AngleRightIcon aria-hidden />\n                </span>\n              </div>\n            )}\n            <span className={css(styles.dualListSelectorItemCheck)}>\n              <input\n                type=\"checkbox\"\n                onChange={(evt: React.ChangeEvent<HTMLInputElement>) => {\n                  onOptionCheck && onOptionCheck(evt, !isChecked, itemData);\n                  setFocusedOption(id);\n                }}\n                onClick={(evt: React.MouseEvent) => evt.stopPropagation()}\n                onKeyDown={(e: React.KeyboardEvent) => {\n                  if (e.key === ' ' || e.key === 'Enter') {\n                    onOptionCheck && onOptionCheck(e, !isChecked, itemData);\n                    setFocusedOption(id);\n                    e.preventDefault();\n                  }\n                }}\n                ref={elem => elem && (elem.indeterminate = isChecked === null)}\n                checked={isChecked || false}\n                tabIndex={-1}\n                {...checkProps}\n              />\n            </span>\n\n            <span className={css(styles.dualListSelectorItemText)}>{text}</span>\n            {hasBadge && children && (\n              <span className={css(styles.dualListSelectorItemCount)}>\n                <Badge {...badgeProps}>{flattenTree((children as React.ReactElement).props.data).length}</Badge>\n              </span>\n            )}\n          </span>\n        </div>\n      </div>\n      {isExpanded && children}\n    </li>\n  );\n};\n\nexport const DualListSelectorTreeItem = React.memo(DualListSelectorTreeItemBase, (prevProps, nextProps) => {\n  if (!nextProps.useMemo) {\n    return false;\n  }\n\n  if (\n    prevProps.className !== nextProps.className ||\n    prevProps.text !== nextProps.text ||\n    prevProps.id !== nextProps.id ||\n    prevProps.defaultExpanded !== nextProps.defaultExpanded ||\n    prevProps.checkProps !== nextProps.checkProps ||\n    prevProps.hasBadge !== nextProps.hasBadge ||\n    prevProps.badgeProps !== nextProps.badgeProps ||\n    prevProps.isChecked !== nextProps.isChecked ||\n    prevProps.itemData !== nextProps.itemData\n  ) {\n    return false;\n  }\n\n  return true;\n});\n\nDualListSelectorTreeItem.displayName = 'DualListSelectorTreeItem';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}