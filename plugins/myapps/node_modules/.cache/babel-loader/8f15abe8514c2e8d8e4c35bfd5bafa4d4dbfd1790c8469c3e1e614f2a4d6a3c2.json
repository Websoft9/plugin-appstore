{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/layouts/Split/split';\nimport { css } from '@patternfly/react-styles';\nexport var Split = function Split(_a) {\n  var _a$hasGutter = _a.hasGutter,\n    hasGutter = _a$hasGutter === void 0 ? false : _a$hasGutter,\n    _a$isWrappable = _a.isWrappable,\n    isWrappable = _a$isWrappable === void 0 ? false : _a$isWrappable,\n    _a$className = _a.className,\n    className = _a$className === void 0 ? '' : _a$className,\n    _a$children = _a.children,\n    children = _a$children === void 0 ? null : _a$children,\n    _a$component = _a.component,\n    component = _a$component === void 0 ? 'div' : _a$component,\n    props = __rest(_a, [\"hasGutter\", \"isWrappable\", \"className\", \"children\", \"component\"]);\n  var Component = component;\n  return React.createElement(Component, Object.assign({}, props, {\n    className: css(styles.split, hasGutter && styles.modifiers.gutter, isWrappable && styles.modifiers.wrap, className)\n  }), children);\n};\nSplit.displayName = 'Split';","map":{"version":3,"names":["React","styles","css","Split","_a","hasGutter","_a$hasGutter","_a$isWrappable","isWrappable","_a$className","className","_a$children","children","_a$component","component","props","__rest","Component","createElement","Object","assign","split","modifiers","gutter","wrap","displayName"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@patternfly/react-core/src/layouts/Split/Split.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/layouts/Split/split';\nimport { css } from '@patternfly/react-styles';\n\nexport interface SplitProps extends React.HTMLProps<HTMLDivElement> {\n  /** Adds space between children. */\n  hasGutter?: boolean;\n  /** Allows children to wrap */\n  isWrappable?: boolean;\n  /** content rendered inside the Split layout */\n  children?: React.ReactNode;\n  /** additional classes added to the Split layout */\n  className?: string;\n  /** Sets the base component to render. defaults to div */\n  component?: React.ReactNode;\n}\n\nexport const Split: React.FunctionComponent<SplitProps> = ({\n  hasGutter = false,\n  isWrappable = false,\n  className = '',\n  children = null,\n  component = 'div',\n  ...props\n}: SplitProps) => {\n  const Component = component as any;\n  return (\n    <Component\n      {...props}\n      className={css(\n        styles.split,\n        hasGutter && styles.modifiers.gutter,\n        isWrappable && styles.modifiers.wrap,\n        className\n      )}\n    >\n      {children}\n    </Component>\n  );\n};\nSplit.displayName = 'Split';\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,MAAM,MAAM,kDAAkD;AACrE,SAASC,GAAG,QAAQ,0BAA0B;AAe9C,OAAO,IAAMC,KAAK,GAAwC,SAA7CA,KAAKA,CAAyCC,EAO9C,EAAI;qBAFEA,EAEN,CANXC,SAAS;IAATA,SAAS,GAAAC,YAAA,cAAG,KAAK,GAAAA,YAAA;IAAAC,cAAA,GAIAH,EAEN,CALXI,WAAW;IAAXA,WAAW,GAAAD,cAAA,cAAG,KAAK,GAAAA,cAAA;IAAAE,YAAA,GAGFL,EAEN,CAJXM,SAAS;IAATA,SAAS,GAAAD,YAAA,cAAG,EAAE,GAAAA,YAAA;IAAAE,WAAA,GAEGP,EAEN,CAHXQ,QAAQ;IAARA,QAAQ,GAAAD,WAAA,cAAG,IAAI,GAAAA,WAAA;IAAAE,YAAA,GACET,EAEN,CAFXU,SAAS;IAATA,SAAS,GAAAD,YAAA,cAAG,KAAK,GAAAA,YAAA;IACdE,KAAK,GAAAC,MAAA,CAAAZ,EAAA,EANiD,kEAO1D,CADS;EAER,IAAMa,SAAS,GAAGH,SAAgB;EAClC,OACEd,KAAA,CAAAkB,aAAA,CAACD,SAAS,EAAAE,MAAA,CAAAC,MAAA,KACJL,KAAK;IACTL,SAAS,EAAER,GAAG,CACZD,MAAM,CAACoB,KAAK,EACZhB,SAAS,IAAIJ,MAAM,CAACqB,SAAS,CAACC,MAAM,EACpCf,WAAW,IAAIP,MAAM,CAACqB,SAAS,CAACE,IAAI,EACpCd,SAAS;EACV,IAEAE,QAAQ,CACC;AAEhB,CAAC;AACDT,KAAK,CAACsB,WAAW,GAAG,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}