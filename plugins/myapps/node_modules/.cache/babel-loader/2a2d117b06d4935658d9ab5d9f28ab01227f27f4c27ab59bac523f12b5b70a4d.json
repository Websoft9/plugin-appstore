{"ast":null,"code":"import _classCallCheck from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { css } from '@patternfly/react-styles';\nimport { canUseDOM } from '../../helpers/util';\nimport { ToolbarItem } from './ToolbarItem';\nimport { Button } from '../Button';\nimport { ToolbarGroup } from './ToolbarGroup';\nimport { globalBreakpoints } from './ToolbarUtils';\nexport var ToolbarChipGroupContent = /*#__PURE__*/function (_React$Component) {\n  _inherits(ToolbarChipGroupContent, _React$Component);\n  var _super = _createSuper(ToolbarChipGroupContent);\n  function ToolbarChipGroupContent() {\n    _classCallCheck(this, ToolbarChipGroupContent);\n    return _super.apply(this, arguments);\n  }\n  _createClass(ToolbarChipGroupContent, [{\n    key: \"render\",\n    value: function render() {\n      var _a = this.props,\n        className = _a.className,\n        isExpanded = _a.isExpanded,\n        chipGroupContentRef = _a.chipGroupContentRef,\n        clearAllFilters = _a.clearAllFilters,\n        showClearFiltersButton = _a.showClearFiltersButton,\n        clearFiltersButtonText = _a.clearFiltersButtonText,\n        collapseListedFiltersBreakpoint = _a.collapseListedFiltersBreakpoint,\n        numberOfFilters = _a.numberOfFilters,\n        numberOfFiltersText = _a.numberOfFiltersText,\n        customChipGroupContent = _a.customChipGroupContent,\n        props = __rest(_a, [\"className\", \"isExpanded\", \"chipGroupContentRef\", \"clearAllFilters\", \"showClearFiltersButton\", \"clearFiltersButtonText\", \"collapseListedFiltersBreakpoint\", \"numberOfFilters\", \"numberOfFiltersText\", \"customChipGroupContent\"]);\n      var clearChipGroups = function clearChipGroups() {\n        clearAllFilters();\n      };\n      var collapseListedFilters = false;\n      if (collapseListedFiltersBreakpoint === 'all') {\n        collapseListedFilters = true;\n      } else if (canUseDOM) {\n        collapseListedFilters = (canUseDOM ? window.innerWidth : 1200) < globalBreakpoints[collapseListedFiltersBreakpoint];\n      }\n      return React.createElement(\"div\", Object.assign({\n        className: css(styles.toolbarContent, (numberOfFilters === 0 || isExpanded) && styles.modifiers.hidden, className)\n      }, (numberOfFilters === 0 || isExpanded) && {\n        hidden: true\n      }, {\n        ref: chipGroupContentRef\n      }, props), React.createElement(ToolbarGroup, Object.assign({\n        className: css(collapseListedFilters && styles.modifiers.hidden)\n      }, collapseListedFilters && {\n        hidden: true\n      }, collapseListedFilters && {\n        'aria-hidden': true\n      })), collapseListedFilters && numberOfFilters > 0 && !isExpanded && React.createElement(ToolbarGroup, null, React.createElement(ToolbarItem, null, numberOfFiltersText(numberOfFilters))), showClearFiltersButton && !isExpanded && !customChipGroupContent && React.createElement(ToolbarItem, null, React.createElement(Button, {\n        variant: \"link\",\n        onClick: clearChipGroups,\n        isInline: true\n      }, clearFiltersButtonText)), customChipGroupContent && customChipGroupContent);\n    }\n  }]);\n  return ToolbarChipGroupContent;\n}(React.Component);\nToolbarChipGroupContent.displayName = 'ToolbarChipGroupContent';\nToolbarChipGroupContent.defaultProps = {\n  clearFiltersButtonText: 'Clear all filters',\n  collapseListedFiltersBreakpoint: 'lg',\n  numberOfFiltersText: function numberOfFiltersText(numberOfFilters) {\n    return \"\".concat(numberOfFilters, \" filters applied\");\n  }\n};","map":{"version":3,"names":["React","styles","css","canUseDOM","ToolbarItem","Button","ToolbarGroup","globalBreakpoints","ToolbarChipGroupContent","_React$Component","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","render","_a","props","className","isExpanded","chipGroupContentRef","clearAllFilters","showClearFiltersButton","clearFiltersButtonText","collapseListedFiltersBreakpoint","numberOfFilters","numberOfFiltersText","customChipGroupContent","__rest","clearChipGroups","collapseListedFilters","window","innerWidth","createElement","Object","assign","toolbarContent","modifiers","hidden","ref","variant","onClick","isInline","Component","displayName","defaultProps","concat"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@patternfly/react-core/src/components/Toolbar/ToolbarChipGroupContent.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { css } from '@patternfly/react-styles';\nimport { canUseDOM } from '../../helpers/util';\n\nimport { RefObject } from 'react';\nimport { ToolbarItem } from './ToolbarItem';\nimport { Button } from '../Button';\nimport { ToolbarGroup } from './ToolbarGroup';\nimport { globalBreakpoints } from './ToolbarUtils';\nimport { PickOptional } from '../../helpers/typeUtils';\n\nexport interface ToolbarChipGroupContentProps extends React.HTMLProps<HTMLDivElement> {\n  /** Classes applied to root element of the data toolbar content row */\n  className?: string;\n  /** Flag indicating if a data toolbar toggle group's expandable content is expanded */\n  isExpanded?: boolean;\n  /** Chip group content reference for passing to data toolbar children */\n  chipGroupContentRef?: RefObject<any>;\n  /** optional callback for clearing all filters in the toolbar */\n  clearAllFilters?: () => void;\n  /** Flag indicating that the clear all filters button should be visible */\n  showClearFiltersButton: boolean;\n  /** Text to display in the clear all filters button */\n  clearFiltersButtonText?: string;\n  /** Total number of filters currently being applied across all ToolbarFilter components */\n  numberOfFilters: number;\n  /** Text to display in the total number of applied filters ToolbarFilter */\n  numberOfFiltersText?: (numberOfFilters: number) => string;\n  /** The breakpoint at which the listed filters in chip groups are collapsed down to a summary */\n  collapseListedFiltersBreakpoint?: 'all' | 'md' | 'lg' | 'xl' | '2xl';\n  /** Custom additional content appended to the generated chips. To maintain spacing and styling, each node should be a ToolbarItem or ToolbarGroup. This property will remove the built in \"Clear all filters\" button. */\n  customChipGroupContent?: React.ReactNode;\n}\n\nexport class ToolbarChipGroupContent extends React.Component<ToolbarChipGroupContentProps> {\n  static displayName = 'ToolbarChipGroupContent';\n  static defaultProps: PickOptional<ToolbarChipGroupContentProps> = {\n    clearFiltersButtonText: 'Clear all filters',\n    collapseListedFiltersBreakpoint: 'lg',\n    numberOfFiltersText: (numberOfFilters: number) => `${numberOfFilters} filters applied`\n  };\n\n  render() {\n    const {\n      className,\n      isExpanded,\n      chipGroupContentRef,\n      clearAllFilters,\n      showClearFiltersButton,\n      clearFiltersButtonText,\n      collapseListedFiltersBreakpoint,\n      numberOfFilters,\n      numberOfFiltersText,\n      customChipGroupContent,\n      ...props\n    } = this.props;\n\n    const clearChipGroups = () => {\n      clearAllFilters();\n    };\n\n    let collapseListedFilters = false;\n    if (collapseListedFiltersBreakpoint === 'all') {\n      collapseListedFilters = true;\n    } else if (canUseDOM) {\n      collapseListedFilters =\n        (canUseDOM ? window.innerWidth : 1200) < globalBreakpoints[collapseListedFiltersBreakpoint];\n    }\n\n    return (\n      <div\n        className={css(\n          styles.toolbarContent,\n          (numberOfFilters === 0 || isExpanded) && styles.modifiers.hidden,\n          className\n        )}\n        {...((numberOfFilters === 0 || isExpanded) && { hidden: true })}\n        ref={chipGroupContentRef}\n        {...props}\n      >\n        <ToolbarGroup\n          className={css(collapseListedFilters && styles.modifiers.hidden)}\n          {...(collapseListedFilters && { hidden: true })}\n          {...(collapseListedFilters && { 'aria-hidden': true })}\n        />\n        {collapseListedFilters && numberOfFilters > 0 && !isExpanded && (\n          <ToolbarGroup>\n            <ToolbarItem>{numberOfFiltersText(numberOfFilters)}</ToolbarItem>\n          </ToolbarGroup>\n        )}\n        {showClearFiltersButton && !isExpanded && !customChipGroupContent && (\n          <ToolbarItem>\n            <Button variant=\"link\" onClick={clearChipGroups} isInline>\n              {clearFiltersButtonText}\n            </Button>\n          </ToolbarItem>\n        )}\n        {customChipGroupContent && customChipGroupContent}\n      </div>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}