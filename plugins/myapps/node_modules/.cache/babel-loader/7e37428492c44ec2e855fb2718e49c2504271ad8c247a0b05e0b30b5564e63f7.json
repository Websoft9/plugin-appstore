{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Dropdown/dropdown';\nimport { DropdownContext } from './dropdownConstants';\nimport { DropdownWithContext } from './DropdownWithContext';\nimport { useOUIAId } from '../../helpers';\nexport var Dropdown = function Dropdown(_a) {\n  var _onSelect = _a.onSelect,\n    ref = _a.ref,\n    ouiaId = _a.ouiaId,\n    ouiaSafe = _a.ouiaSafe,\n    alignments = _a.alignments,\n    contextProps = _a.contextProps,\n    _a$menuAppendTo = _a.menuAppendTo,\n    menuAppendTo = _a$menuAppendTo === void 0 ? 'inline' : _a$menuAppendTo,\n    _a$isFlipEnabled = _a.isFlipEnabled,\n    isFlipEnabled = _a$isFlipEnabled === void 0 ? true : _a$isFlipEnabled,\n    _a$removeFindDomNode = _a.removeFindDomNode,\n    removeFindDomNode = _a$removeFindDomNode === void 0 ? false : _a$removeFindDomNode,\n    _a$zIndex = _a.zIndex,\n    zIndex = _a$zIndex === void 0 ? 9999 : _a$zIndex,\n    props = __rest(_a, [\"onSelect\", \"ref\", \"ouiaId\", \"ouiaSafe\", \"alignments\", \"contextProps\", \"menuAppendTo\", \"isFlipEnabled\", \"removeFindDomNode\", \"zIndex\"]);\n  return React.createElement(DropdownContext.Provider, {\n    value: Object.assign({\n      onSelect: function onSelect(event) {\n        return _onSelect && _onSelect(event);\n      },\n      toggleTextClass: styles.dropdownToggleText,\n      toggleIconClass: styles.dropdownToggleImage,\n      toggleIndicatorClass: styles.dropdownToggleIcon,\n      menuClass: styles.dropdownMenu,\n      itemClass: styles.dropdownMenuItem,\n      toggleClass: styles.dropdownToggle,\n      baseClass: styles.dropdown,\n      baseComponent: 'div',\n      sectionClass: styles.dropdownGroup,\n      sectionTitleClass: styles.dropdownGroupTitle,\n      sectionComponent: 'section',\n      disabledClass: styles.modifiers.disabled,\n      plainTextClass: styles.modifiers.text,\n      ouiaId: useOUIAId(Dropdown.displayName, ouiaId),\n      ouiaSafe: ouiaSafe,\n      ouiaComponentType: Dropdown.displayName,\n      alignments: alignments\n    }, contextProps)\n  }, React.createElement(DropdownWithContext, Object.assign({\n    menuAppendTo: menuAppendTo,\n    isFlipEnabled: isFlipEnabled,\n    removeFindDomNode: removeFindDomNode,\n    zIndex: zIndex\n  }, props)));\n};\nDropdown.displayName = 'Dropdown';","map":{"version":3,"names":["React","styles","DropdownContext","DropdownWithContext","useOUIAId","Dropdown","_a","onSelect","ref","ouiaId","ouiaSafe","alignments","contextProps","_a$menuAppendTo","menuAppendTo","_a$isFlipEnabled","isFlipEnabled","_a$removeFindDomNode","removeFindDomNode","_a$zIndex","zIndex","props","__rest","createElement","Provider","value","Object","assign","event","toggleTextClass","dropdownToggleText","toggleIconClass","dropdownToggleImage","toggleIndicatorClass","dropdownToggleIcon","menuClass","dropdownMenu","itemClass","dropdownMenuItem","toggleClass","dropdownToggle","baseClass","dropdown","baseComponent","sectionClass","dropdownGroup","sectionTitleClass","dropdownGroupTitle","sectionComponent","disabledClass","modifiers","disabled","plainTextClass","text","displayName","ouiaComponentType"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@patternfly/react-core/src/components/Dropdown/Dropdown.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Dropdown/dropdown';\nimport { DropdownPosition, DropdownDirection, DropdownContext } from './dropdownConstants';\nimport { DropdownWithContext } from './DropdownWithContext';\nimport { ToggleMenuBaseProps } from '../../helpers/Popper/Popper';\nimport { OUIAProps, useOUIAId } from '../../helpers';\n\nexport interface DropdownProps\n  extends Omit<ToggleMenuBaseProps, 'menuAppendTo'>,\n    React.HTMLProps<HTMLDivElement>,\n    OUIAProps {\n  /** Anything which can be rendered in a dropdown */\n  children?: React.ReactNode;\n  /** Classes applied to root element of dropdown */\n  className?: string;\n  /** Array of DropdownItem nodes that will be rendered in the dropdown Menu list */\n  dropdownItems?: any[];\n  /** Flag to indicate if menu is opened */\n  isOpen?: boolean;\n  /** Display the toggle with no border or background */\n  isPlain?: boolean;\n  /** Display the toggle in text only mode */\n  isText?: boolean;\n  /** Flag indicating that the dropdown should expand to full height */\n  isFullHeight?: boolean;\n  /** Indicates where menu will be aligned horizontally */\n  position?: DropdownPosition | 'right' | 'left';\n  /** Indicates how the menu will align at screen size breakpoints. Default alignment is set via the position property. */\n  alignments?: {\n    sm?: 'right' | 'left';\n    md?: 'right' | 'left';\n    lg?: 'right' | 'left';\n    xl?: 'right' | 'left';\n    '2xl'?: 'right' | 'left';\n  };\n  /** Display menu above or below dropdown toggle */\n  direction?: DropdownDirection | 'up' | 'down';\n  /** The container to append the menu to. Defaults to 'inline'.\n   * If your menu is being cut off you can append it to an element higher up the DOM tree.\n   * Some examples:\n   * menuAppendTo=\"parent\"\n   * menuAppendTo={() => document.body}\n   * menuAppendTo={document.getElementById('target')}\n   */\n  menuAppendTo?: HTMLElement | (() => HTMLElement) | 'inline' | 'parent';\n  /** Flag to indicate if dropdown has groups */\n  isGrouped?: boolean;\n  /** Toggle for the dropdown, examples: <DropdownToggle> or <DropdownToggleCheckbox> */\n  toggle: React.ReactElement<any>;\n  /** Function callback called when user selects item */\n  onSelect?: (event?: React.SyntheticEvent<HTMLDivElement>) => void;\n  /** Flag to indicate if the first dropdown item should gain initial focus, set false when adding\n   * a specific auto-focus item (like a current selection) otherwise leave as true\n   */\n  autoFocus?: boolean;\n  /** Props for extreme customization of dropdown */\n  contextProps?: typeof DropdownContext;\n  /** Flag for indicating that the dropdown menu should automatically flip vertically when\n   * it reaches the boundary. This prop can only be used when the dropdown component is not\n   * appended inline, e.g. `menuAppendTo=\"parent\"`\n   */\n  isFlipEnabled?: boolean;\n  /** @beta Opt-in for updated popper that does not use findDOMNode. */\n  removeFindDomNode?: boolean;\n  /** z-index of the dropdown when menuAppendTo is not inline. */\n  zIndex?: number;\n  /** Value to overwrite the randomly generated data-ouia-component-id.*/\n  ouiaId?: number | string;\n  /** Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false. */\n  ouiaSafe?: boolean;\n}\n\nexport const Dropdown: React.FunctionComponent<DropdownProps> = ({\n  onSelect,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  ref, // Types of Ref are different for React.FunctionComponent vs React.Component\n  ouiaId,\n  ouiaSafe,\n  alignments,\n  contextProps,\n  menuAppendTo = 'inline',\n  isFlipEnabled = true,\n  removeFindDomNode = false,\n  zIndex = 9999,\n  ...props\n}: DropdownProps) => (\n  <DropdownContext.Provider\n    value={{\n      onSelect: event => onSelect && onSelect(event),\n      toggleTextClass: styles.dropdownToggleText,\n      toggleIconClass: styles.dropdownToggleImage,\n      toggleIndicatorClass: styles.dropdownToggleIcon,\n      menuClass: styles.dropdownMenu,\n      itemClass: styles.dropdownMenuItem,\n      toggleClass: styles.dropdownToggle,\n      baseClass: styles.dropdown,\n      baseComponent: 'div',\n      sectionClass: styles.dropdownGroup,\n      sectionTitleClass: styles.dropdownGroupTitle,\n      sectionComponent: 'section',\n      disabledClass: styles.modifiers.disabled,\n      plainTextClass: styles.modifiers.text,\n      ouiaId: useOUIAId(Dropdown.displayName, ouiaId),\n      ouiaSafe,\n      ouiaComponentType: Dropdown.displayName,\n      alignments,\n      ...contextProps\n    }}\n  >\n    <DropdownWithContext\n      menuAppendTo={menuAppendTo}\n      isFlipEnabled={isFlipEnabled}\n      removeFindDomNode={removeFindDomNode}\n      zIndex={zIndex}\n      {...props}\n    />\n  </DropdownContext.Provider>\n);\nDropdown.displayName = 'Dropdown';\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,MAAM,MAAM,2DAA2D;AAC9E,SAA8CC,eAAe,QAAQ,qBAAqB;AAC1F,SAASC,mBAAmB,QAAQ,uBAAuB;AAE3D,SAAoBC,SAAS,QAAQ,eAAe;AAmEpD,OAAO,IAAMC,QAAQ,GAA2C,SAAnDA,QAAQA,CAA4CC,EAajD,EAAI;MAZlBC,SAAQ,GAUKD,EAEC,CAZdC,QAAQ;IAERC,GAAG,GAQUF,EAEC,CAVdE,GAAG;IACHC,MAAM,GAOOH,EAEC,CATdG,MAAM;IACNC,QAAQ,GAMKJ,EAEC,CARdI,QAAQ;IACRC,UAAU,GAKGL,EAEC,CAPdK,UAAU;IACVC,YAAY,GAICN,EAEC,CANdM,YAAY;IAAAC,eAAA,GAICP,EAEC,CALdQ,YAAY;IAAZA,YAAY,GAAAD,eAAA,cAAG,QAAQ,GAAAA,eAAA;IAAAE,gBAAA,GAGVT,EAEC,CAJdU,aAAa;IAAbA,aAAa,GAAAD,gBAAA,cAAG,IAAI,GAAAA,gBAAA;IAAAE,oBAAA,GAEPX,EAEC,CAHdY,iBAAiB;IAAjBA,iBAAiB,GAAAD,oBAAA,cAAG,KAAK,GAAAA,oBAAA;IAAAE,SAAA,GACZb,EAEC,CAFdc,MAAM;IAANA,MAAM,GAAAD,SAAA,cAAG,IAAI,GAAAA,SAAA;IACVE,KAAK,GAAAC,MAAA,CAAAhB,EAAA,EAZuD,uIAahE,CADS;EACW,OACnBN,KAAA,CAAAuB,aAAA,CAACrB,eAAe,CAACsB,QAAQ;IACvBC,KAAK,EAAAC,MAAA,CAAAC,MAAA;MACHpB,QAAQ,EAAE,SAAAA,SAAAqB,KAAK;QAAA,OAAIrB,SAAQ,IAAIA,SAAQ,CAACqB,KAAK,CAAC;MAAA;MAC9CC,eAAe,EAAE5B,MAAM,CAAC6B,kBAAkB;MAC1CC,eAAe,EAAE9B,MAAM,CAAC+B,mBAAmB;MAC3CC,oBAAoB,EAAEhC,MAAM,CAACiC,kBAAkB;MAC/CC,SAAS,EAAElC,MAAM,CAACmC,YAAY;MAC9BC,SAAS,EAAEpC,MAAM,CAACqC,gBAAgB;MAClCC,WAAW,EAAEtC,MAAM,CAACuC,cAAc;MAClCC,SAAS,EAAExC,MAAM,CAACyC,QAAQ;MAC1BC,aAAa,EAAE,KAAK;MACpBC,YAAY,EAAE3C,MAAM,CAAC4C,aAAa;MAClCC,iBAAiB,EAAE7C,MAAM,CAAC8C,kBAAkB;MAC5CC,gBAAgB,EAAE,SAAS;MAC3BC,aAAa,EAAEhD,MAAM,CAACiD,SAAS,CAACC,QAAQ;MACxCC,cAAc,EAAEnD,MAAM,CAACiD,SAAS,CAACG,IAAI;MACrC5C,MAAM,EAAEL,SAAS,CAACC,QAAQ,CAACiD,WAAW,EAAE7C,MAAM,CAAC;MAC/CC,QAAQ,EAARA,QAAQ;MACR6C,iBAAiB,EAAElD,QAAQ,CAACiD,WAAW;MACvC3C,UAAU,EAAVA;IAAU,GACPC,YAAY;EAAA,GAGjBZ,KAAA,CAAAuB,aAAA,CAACpB,mBAAmB,EAAAuB,MAAA,CAAAC,MAAA;IAClBb,YAAY,EAAEA,YAAY;IAC1BE,aAAa,EAAEA,aAAa;IAC5BE,iBAAiB,EAAEA,iBAAiB;IACpCE,MAAM,EAAEA;EAAM,GACVC,KAAK,EACT,CACuB;CAC5B;AACDhB,QAAQ,CAACiD,WAAW,GAAG,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}