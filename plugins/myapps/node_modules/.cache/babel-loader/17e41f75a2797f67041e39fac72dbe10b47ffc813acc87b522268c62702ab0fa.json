{"ast":null,"code":"import { GraphQLError } from \"../../error/GraphQLError.mjs\";\n\n/**\n * Unique type names\n *\n * A GraphQL document is only valid if all defined types have unique names.\n */\nexport function UniqueTypeNamesRule(context) {\n  var knownTypeNames = Object.create(null);\n  var schema = context.getSchema();\n  return {\n    ScalarTypeDefinition: checkTypeName,\n    ObjectTypeDefinition: checkTypeName,\n    InterfaceTypeDefinition: checkTypeName,\n    UnionTypeDefinition: checkTypeName,\n    EnumTypeDefinition: checkTypeName,\n    InputObjectTypeDefinition: checkTypeName\n  };\n  function checkTypeName(node) {\n    var typeName = node.name.value;\n    if (schema !== null && schema !== void 0 && schema.getType(typeName)) {\n      context.reportError(new GraphQLError(\"Type \\\"\".concat(typeName, \"\\\" already exists in the schema. It cannot also be defined in this type definition.\"), node.name));\n      return;\n    }\n    if (knownTypeNames[typeName]) {\n      context.reportError(new GraphQLError(\"There can be only one type named \\\"\".concat(typeName, \"\\\".\"), [knownTypeNames[typeName], node.name]));\n    } else {\n      knownTypeNames[typeName] = node.name;\n    }\n    return false;\n  }\n}","map":{"version":3,"names":["GraphQLError","UniqueTypeNamesRule","context","knownTypeNames","Object","create","schema","getSchema","ScalarTypeDefinition","checkTypeName","ObjectTypeDefinition","InterfaceTypeDefinition","UnionTypeDefinition","EnumTypeDefinition","InputObjectTypeDefinition","node","typeName","name","value","getType","reportError","concat"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/graphql/validation/rules/UniqueTypeNamesRule.mjs"],"sourcesContent":["import { GraphQLError } from \"../../error/GraphQLError.mjs\";\n\n/**\n * Unique type names\n *\n * A GraphQL document is only valid if all defined types have unique names.\n */\nexport function UniqueTypeNamesRule(context) {\n  var knownTypeNames = Object.create(null);\n  var schema = context.getSchema();\n  return {\n    ScalarTypeDefinition: checkTypeName,\n    ObjectTypeDefinition: checkTypeName,\n    InterfaceTypeDefinition: checkTypeName,\n    UnionTypeDefinition: checkTypeName,\n    EnumTypeDefinition: checkTypeName,\n    InputObjectTypeDefinition: checkTypeName\n  };\n\n  function checkTypeName(node) {\n    var typeName = node.name.value;\n\n    if (schema !== null && schema !== void 0 && schema.getType(typeName)) {\n      context.reportError(new GraphQLError(\"Type \\\"\".concat(typeName, \"\\\" already exists in the schema. It cannot also be defined in this type definition.\"), node.name));\n      return;\n    }\n\n    if (knownTypeNames[typeName]) {\n      context.reportError(new GraphQLError(\"There can be only one type named \\\"\".concat(typeName, \"\\\".\"), [knownTypeNames[typeName], node.name]));\n    } else {\n      knownTypeNames[typeName] = node.name;\n    }\n\n    return false;\n  }\n}\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,8BAA8B;;AAE3D;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,mBAAmBA,CAACC,OAAO,EAAE;EAC3C,IAAIC,cAAc,GAAGC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;EACxC,IAAIC,MAAM,GAAGJ,OAAO,CAACK,SAAS,CAAC,CAAC;EAChC,OAAO;IACLC,oBAAoB,EAAEC,aAAa;IACnCC,oBAAoB,EAAED,aAAa;IACnCE,uBAAuB,EAAEF,aAAa;IACtCG,mBAAmB,EAAEH,aAAa;IAClCI,kBAAkB,EAAEJ,aAAa;IACjCK,yBAAyB,EAAEL;EAC7B,CAAC;EAED,SAASA,aAAaA,CAACM,IAAI,EAAE;IAC3B,IAAIC,QAAQ,GAAGD,IAAI,CAACE,IAAI,CAACC,KAAK;IAE9B,IAAIZ,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAK,KAAK,CAAC,IAAIA,MAAM,CAACa,OAAO,CAACH,QAAQ,CAAC,EAAE;MACpEd,OAAO,CAACkB,WAAW,CAAC,IAAIpB,YAAY,CAAC,SAAS,CAACqB,MAAM,CAACL,QAAQ,EAAE,qFAAqF,CAAC,EAAED,IAAI,CAACE,IAAI,CAAC,CAAC;MACnK;IACF;IAEA,IAAId,cAAc,CAACa,QAAQ,CAAC,EAAE;MAC5Bd,OAAO,CAACkB,WAAW,CAAC,IAAIpB,YAAY,CAAC,qCAAqC,CAACqB,MAAM,CAACL,QAAQ,EAAE,KAAK,CAAC,EAAE,CAACb,cAAc,CAACa,QAAQ,CAAC,EAAED,IAAI,CAACE,IAAI,CAAC,CAAC,CAAC;IAC7I,CAAC,MAAM;MACLd,cAAc,CAACa,QAAQ,CAAC,GAAGD,IAAI,CAACE,IAAI;IACtC;IAEA,OAAO,KAAK;EACd;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}