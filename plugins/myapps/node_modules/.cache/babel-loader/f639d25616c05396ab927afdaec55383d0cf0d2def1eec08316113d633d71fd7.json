{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@patternfly/react-core/src/helpers/typeUtils.ts"],"sourcesContent":["// Gathers all the required keys from an interface/type T\nexport type RequiredKeys<T> = {\n  [K in keyof T]-?: {} extends { [P in K]: T[K] } ? never : K;\n}[keyof T];\n\n// Gathers all the optional keys from an interface/type T\nexport type OptionalKeys<T> = {\n  [K in keyof T]-?: {} extends { [P in K]: T[K] } ? K : never;\n}[keyof T];\n\n// Picks all the optional keys from interface/type T\nexport type PickOptional<T> = Pick<T, OptionalKeys<T>>;\n\n// Picks all the optional keys from interface/type T and makes them required\n// so that they cannot be accidentally omitted when providing default values\nexport type PickAndRequireOptional<T> = Required<Pick<T, OptionalKeys<T>>>;\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}