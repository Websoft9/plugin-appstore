{"ast":null,"code":"import { __assign } from \"tslib\";\nimport \"../../utilities/globals/index.js\";\nimport { Trie } from \"@wry/trie\";\nimport { canUseWeakMap, canUseWeakSet, isNonNullObject as isObjectOrArray } from \"../../utilities/index.js\";\nimport { isArray } from \"./helpers.js\";\nfunction shallowCopy(value) {\n  if (isObjectOrArray(value)) {\n    return isArray(value) ? value.slice(0) : __assign({\n      __proto__: Object.getPrototypeOf(value)\n    }, value);\n  }\n  return value;\n}\nvar ObjectCanon = function () {\n  function ObjectCanon() {\n    this.known = new (canUseWeakSet ? WeakSet : Set)();\n    this.pool = new Trie(canUseWeakMap);\n    this.passes = new WeakMap();\n    this.keysByJSON = new Map();\n    this.empty = this.admit({});\n  }\n  ObjectCanon.prototype.isKnown = function (value) {\n    return isObjectOrArray(value) && this.known.has(value);\n  };\n  ObjectCanon.prototype.pass = function (value) {\n    if (isObjectOrArray(value)) {\n      var copy = shallowCopy(value);\n      this.passes.set(copy, value);\n      return copy;\n    }\n    return value;\n  };\n  ObjectCanon.prototype.admit = function (value) {\n    var _this = this;\n    if (isObjectOrArray(value)) {\n      var original = this.passes.get(value);\n      if (original) return original;\n      var proto = Object.getPrototypeOf(value);\n      switch (proto) {\n        case Array.prototype:\n          {\n            if (this.known.has(value)) return value;\n            var array = value.map(this.admit, this);\n            var node = this.pool.lookupArray(array);\n            if (!node.array) {\n              this.known.add(node.array = array);\n              if (__DEV__) {\n                Object.freeze(array);\n              }\n            }\n            return node.array;\n          }\n        case null:\n        case Object.prototype:\n          {\n            if (this.known.has(value)) return value;\n            var proto_1 = Object.getPrototypeOf(value);\n            var array_1 = [proto_1];\n            var keys = this.sortedKeys(value);\n            array_1.push(keys.json);\n            var firstValueIndex_1 = array_1.length;\n            keys.sorted.forEach(function (key) {\n              array_1.push(_this.admit(value[key]));\n            });\n            var node = this.pool.lookupArray(array_1);\n            if (!node.object) {\n              var obj_1 = node.object = Object.create(proto_1);\n              this.known.add(obj_1);\n              keys.sorted.forEach(function (key, i) {\n                obj_1[key] = array_1[firstValueIndex_1 + i];\n              });\n              if (__DEV__) {\n                Object.freeze(obj_1);\n              }\n            }\n            return node.object;\n          }\n      }\n    }\n    return value;\n  };\n  ObjectCanon.prototype.sortedKeys = function (obj) {\n    var keys = Object.keys(obj);\n    var node = this.pool.lookupArray(keys);\n    if (!node.keys) {\n      keys.sort();\n      var json = JSON.stringify(keys);\n      if (!(node.keys = this.keysByJSON.get(json))) {\n        this.keysByJSON.set(json, node.keys = {\n          sorted: keys,\n          json: json\n        });\n      }\n    }\n    return node.keys;\n  };\n  return ObjectCanon;\n}();\nexport { ObjectCanon };\nexport var canonicalStringify = Object.assign(function (value) {\n  if (isObjectOrArray(value)) {\n    if (stringifyCanon === void 0) {\n      resetCanonicalStringify();\n    }\n    var canonical = stringifyCanon.admit(value);\n    var json = stringifyCache.get(canonical);\n    if (json === void 0) {\n      stringifyCache.set(canonical, json = JSON.stringify(canonical));\n    }\n    return json;\n  }\n  return JSON.stringify(value);\n}, {\n  reset: resetCanonicalStringify\n});\nvar stringifyCanon;\nvar stringifyCache;\nfunction resetCanonicalStringify() {\n  stringifyCanon = new ObjectCanon();\n  stringifyCache = new (canUseWeakMap ? WeakMap : Map)();\n}","map":{"version":3,"names":["Trie","canUseWeakMap","canUseWeakSet","isNonNullObject","isObjectOrArray","isArray","shallowCopy","value","slice","__assign","__proto__","Object","getPrototypeOf","ObjectCanon","known","WeakSet","Set","pool","passes","WeakMap","keysByJSON","Map","empty","admit","prototype","isKnown","has","pass","copy","set","_this","original","get","proto","Array","array","map","node","lookupArray","add","__DEV__","freeze","proto_1","array_1","keys","sortedKeys","push","json","firstValueIndex_1","length","sorted","forEach","key","object","obj_1","create","i","obj","sort","JSON","stringify","canonicalStringify","assign","stringifyCanon","resetCanonicalStringify","canonical","stringifyCache","reset"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@apollo/src/cache/inmemory/object-canon.ts"],"sourcesContent":["import \"../../utilities/globals\";\n\nimport { Trie } from \"@wry/trie\";\nimport {\n  canUseWeakMap,\n  canUseWeakSet,\n  isNonNullObject as isObjectOrArray,\n} from \"../../utilities\";\nimport { isArray } from \"./helpers\";\n\nfunction shallowCopy<T>(value: T): T {\n  if (isObjectOrArray(value)) {\n    return isArray(value)\n      ? value.slice(0) as any as T\n      : { __proto__: Object.getPrototypeOf(value), ...value };\n  }\n  return value;\n}\n\n// When programmers talk about the \"canonical form\" of an object, they\n// usually have the following meaning in mind, which I've copied from\n// https://en.wiktionary.org/wiki/canonical_form:\n//\n// 1. A standard or normal presentation of a mathematical entity [or\n//    object]. A canonical form is an element of a set of representatives\n//    of equivalence classes of forms such that there is a function or\n//    procedure which projects every element of each equivalence class\n//    onto that one element, the canonical form of that equivalence\n//    class. The canonical form is expected to be simpler than the rest of\n//    the forms in some way.\n//\n// That's a long-winded way of saying any two objects that have the same\n// canonical form may be considered equivalent, even if they are !==,\n// which usually means the objects are structurally equivalent (deeply\n// equal), but don't necessarily use the same memory.\n//\n// Like a literary or musical canon, this ObjectCanon class represents a\n// collection of unique canonical items (JavaScript objects), with the\n// important property that canon.admit(a) === canon.admit(b) if a and b\n// are deeply equal to each other. In terms of the definition above, the\n// canon.admit method is the \"function or procedure which projects every\"\n// object \"onto that one element, the canonical form.\"\n//\n// In the worst case, the canonicalization process may involve looking at\n// every property in the provided object tree, so it takes the same order\n// of time as deep equality checking. Fortunately, already-canonicalized\n// objects are returned immediately from canon.admit, so the presence of\n// canonical subtrees tends to speed up canonicalization.\n//\n// Since consumers of canonical objects can check for deep equality in\n// constant time, canonicalizing cache results can massively improve the\n// performance of application code that skips re-rendering unchanged\n// results, such as \"pure\" UI components in a framework like React.\n//\n// Of course, since canonical objects may be shared widely between\n// unrelated consumers, it's important to think of them as immutable, even\n// though they are not actually frozen with Object.freeze in production,\n// due to the extra performance overhead that comes with frozen objects.\n//\n// Custom scalar objects whose internal class name is neither Array nor\n// Object can be included safely in the admitted tree, but they will not\n// be replaced with a canonical version (to put it another way, they are\n// assumed to be canonical already).\n//\n// If we ignore custom objects, no detection of cycles or repeated object\n// references is currently required by the StoreReader class, since\n// GraphQL result objects are JSON-serializable trees (and thus contain\n// neither cycles nor repeated subtrees), so we can avoid the complexity\n// of keeping track of objects we've already seen during the recursion of\n// the admit method.\n//\n// In the future, we may consider adding additional cases to the switch\n// statement to handle other common object types, such as \"[object Date]\"\n// objects, as needed.\nexport class ObjectCanon {\n  // Set of all canonical objects this ObjectCanon has admitted, allowing\n  // canon.admit to return previously-canonicalized objects immediately.\n  private known = new (canUseWeakSet ? WeakSet : Set)<object>();\n\n  // Efficient storage/lookup structure for canonical objects.\n  private pool = new Trie<{\n    array?: any[];\n    object?: Record<string, any>;\n    keys?: SortedKeysInfo;\n  }>(canUseWeakMap);\n\n  public isKnown(value: any): boolean {\n    return isObjectOrArray(value) && this.known.has(value);\n  }\n\n  // Make the ObjectCanon assume this value has already been\n  // canonicalized.\n  private passes = new WeakMap<object, object>();\n  public pass<T>(value: T): T;\n  public pass(value: any) {\n    if (isObjectOrArray(value)) {\n      const copy = shallowCopy(value);\n      this.passes.set(copy, value);\n      return copy;\n    }\n    return value;\n  }\n\n  // Returns the canonical version of value.\n  public admit<T>(value: T): T;\n  public admit(value: any) {\n    if (isObjectOrArray(value)) {\n      const original = this.passes.get(value);\n      if (original) return original;\n\n      const proto = Object.getPrototypeOf(value);\n      switch (proto) {\n        case Array.prototype: {\n          if (this.known.has(value)) return value;\n          const array: any[] = (value as any[]).map(this.admit, this);\n          // Arrays are looked up in the Trie using their recursively\n          // canonicalized elements, and the known version of the array is\n          // preserved as node.array.\n          const node = this.pool.lookupArray(array);\n          if (!node.array) {\n            this.known.add(node.array = array);\n            // Since canonical arrays may be shared widely between\n            // unrelated consumers, it's important to regard them as\n            // immutable, even if they are not frozen in production.\n            if (__DEV__) {\n              Object.freeze(array);\n            }\n          }\n          return node.array;\n        }\n\n        case null:\n        case Object.prototype: {\n          if (this.known.has(value)) return value;\n          const proto = Object.getPrototypeOf(value);\n          const array = [proto];\n          const keys = this.sortedKeys(value);\n          array.push(keys.json);\n          const firstValueIndex = array.length;\n          keys.sorted.forEach(key => {\n            array.push(this.admit((value as any)[key]));\n          });\n          // Objects are looked up in the Trie by their prototype (which\n          // is *not* recursively canonicalized), followed by a JSON\n          // representation of their (sorted) keys, followed by the\n          // sequence of recursively canonicalized values corresponding to\n          // those keys. To keep the final results unambiguous with other\n          // sequences (such as arrays that just happen to contain [proto,\n          // keys.json, value1, value2, ...]), the known version of the\n          // object is stored as node.object.\n          const node = this.pool.lookupArray(array);\n          if (!node.object) {\n            const obj = node.object = Object.create(proto);\n            this.known.add(obj);\n            keys.sorted.forEach((key, i) => {\n              obj[key] = array[firstValueIndex + i];\n            });\n            // Since canonical objects may be shared widely between\n            // unrelated consumers, it's important to regard them as\n            // immutable, even if they are not frozen in production.\n            if (__DEV__) {\n              Object.freeze(obj);\n            }\n          }\n          return node.object;\n        }\n      }\n    }\n    return value;\n  }\n\n  // It's worthwhile to cache the sorting of arrays of strings, since the\n  // same initial unsorted arrays tend to be encountered many times.\n  // Fortunately, we can reuse the Trie machinery to look up the sorted\n  // arrays in linear time (which is faster than sorting large arrays).\n  private sortedKeys(obj: object) {\n    const keys = Object.keys(obj);\n    const node = this.pool.lookupArray(keys);\n    if (!node.keys) {\n      keys.sort();\n      const json = JSON.stringify(keys);\n      if (!(node.keys = this.keysByJSON.get(json))) {\n        this.keysByJSON.set(json, node.keys = { sorted: keys, json });\n      }\n    }\n    return node.keys;\n  }\n  // Arrays that contain the same elements in a different order can share\n  // the same SortedKeysInfo object, to save memory.\n  private keysByJSON = new Map<string, SortedKeysInfo>();\n\n  // This has to come last because it depends on keysByJSON.\n  public readonly empty = this.admit({});\n}\n\ntype SortedKeysInfo = {\n  sorted: string[];\n  json: string;\n};\n\n// Since the keys of canonical objects are always created in lexicographically\n// sorted order, we can use the ObjectCanon to implement a fast and stable\n// version of JSON.stringify, which automatically sorts object keys.\nexport const canonicalStringify = Object.assign(function (value: any): string {\n  if (isObjectOrArray(value)) {\n    if (stringifyCanon === void 0) {\n      resetCanonicalStringify();\n    }\n    const canonical = stringifyCanon.admit(value);\n    let json = stringifyCache.get(canonical);\n    if (json === void 0) {\n      stringifyCache.set(\n        canonical,\n        json = JSON.stringify(canonical),\n      );\n    }\n    return json;\n  }\n  return JSON.stringify(value);\n}, {\n  reset: resetCanonicalStringify,\n});\n\n// Can be reset by calling canonicalStringify.reset().\nlet stringifyCanon: ObjectCanon;\nlet stringifyCache: WeakMap<object, string>;\n\nfunction resetCanonicalStringify() {\n  stringifyCanon = new ObjectCanon;\n  stringifyCache = new (canUseWeakMap ? WeakMap : Map)();\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}