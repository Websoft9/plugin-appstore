{"ast":null,"code":"import _slicedToArray from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport modalStyles from '@patternfly/react-styles/css/components/ModalBox/modal-box';\nimport { css } from '@patternfly/react-styles';\nimport accessibleStyles from '@patternfly/react-styles/css/utilities/Accessibility/accessibility';\nimport { capitalize } from '../../helpers';\nimport { Tooltip } from '../Tooltip';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon';\nimport InfoCircleIcon from '@patternfly/react-icons/dist/esm/icons/info-circle-icon';\nimport BellIcon from '@patternfly/react-icons/dist/esm/icons/bell-icon';\nimport { useIsomorphicLayoutEffect } from '../../helpers';\nexport var isVariantIcon = function isVariantIcon(icon) {\n  return ['success', 'danger', 'warning', 'info', 'default'].includes(icon);\n};\nexport var ModalBoxTitle = function ModalBoxTitle(_a) {\n  var _a$className = _a.className,\n    className = _a$className === void 0 ? '' : _a$className,\n    id = _a.id,\n    title = _a.title,\n    titleIconVariant = _a.titleIconVariant,\n    _a$titleLabel = _a.titleLabel,\n    titleLabel = _a$titleLabel === void 0 ? '' : _a$titleLabel,\n    props = __rest(_a, [\"className\", \"id\", \"title\", \"titleIconVariant\", \"titleLabel\"]);\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    hasTooltip = _React$useState2[0],\n    setHasTooltip = _React$useState2[1];\n  var h1 = React.useRef(null);\n  var label = titleLabel || (isVariantIcon(titleIconVariant) ? \"\".concat(capitalize(titleIconVariant), \" alert:\") : titleLabel);\n  var variantIcons = {\n    success: React.createElement(CheckCircleIcon, null),\n    danger: React.createElement(ExclamationCircleIcon, null),\n    warning: React.createElement(ExclamationTriangleIcon, null),\n    info: React.createElement(InfoCircleIcon, null),\n    default: React.createElement(BellIcon, null)\n  };\n  var CustomIcon = !isVariantIcon(titleIconVariant) && titleIconVariant;\n  useIsomorphicLayoutEffect(function () {\n    setHasTooltip(h1.current && h1.current.offsetWidth < h1.current.scrollWidth);\n  }, []);\n  var content = React.createElement(\"h1\", Object.assign({\n    id: id,\n    ref: h1,\n    className: css(modalStyles.modalBoxTitle, titleIconVariant && modalStyles.modifiers.icon, className)\n  }, props), titleIconVariant && React.createElement(\"span\", {\n    className: css(modalStyles.modalBoxTitleIcon)\n  }, isVariantIcon(titleIconVariant) ? variantIcons[titleIconVariant] : React.createElement(CustomIcon, null)), label && React.createElement(\"span\", {\n    className: css(accessibleStyles.screenReader)\n  }, label), React.createElement(\"span\", {\n    className: css(modalStyles.modalBoxTitleText)\n  }, title));\n  return hasTooltip ? React.createElement(Tooltip, {\n    content: title\n  }, content) : content;\n};\nModalBoxTitle.displayName = 'ModalBoxTitle';","map":{"version":3,"names":["React","modalStyles","css","accessibleStyles","capitalize","Tooltip","CheckCircleIcon","ExclamationCircleIcon","ExclamationTriangleIcon","InfoCircleIcon","BellIcon","useIsomorphicLayoutEffect","isVariantIcon","icon","includes","ModalBoxTitle","_a","className","_a$className","id","title","titleIconVariant","_a$titleLabel","titleLabel","props","__rest","_React$useState","useState","_React$useState2","_slicedToArray","hasTooltip","setHasTooltip","h1","useRef","label","concat","variantIcons","success","createElement","danger","warning","info","default","CustomIcon","current","offsetWidth","scrollWidth","content","Object","assign","ref","modalBoxTitle","modifiers","modalBoxTitleIcon","screenReader","modalBoxTitleText","displayName"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@patternfly/react-core/src/components/Modal/ModalBoxTitle.tsx"],"sourcesContent":["import * as React from 'react';\nimport modalStyles from '@patternfly/react-styles/css/components/ModalBox/modal-box';\nimport { css } from '@patternfly/react-styles';\nimport accessibleStyles from '@patternfly/react-styles/css/utilities/Accessibility/accessibility';\nimport { capitalize } from '../../helpers';\nimport { Tooltip } from '../Tooltip';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon';\nimport InfoCircleIcon from '@patternfly/react-icons/dist/esm/icons/info-circle-icon';\nimport BellIcon from '@patternfly/react-icons/dist/esm/icons/bell-icon';\nimport { useIsomorphicLayoutEffect } from '../../helpers';\n\nexport const isVariantIcon = (icon: any): icon is string =>\n  ['success', 'danger', 'warning', 'info', 'default'].includes(icon as string);\n\nexport interface ModalBoxTitleProps {\n  /** Additional classes added to the modal box title. */\n  className?: string;\n  /** Id of the modal box title. */\n  id: string;\n  /** Content rendered inside the modal box title. */\n  title: React.ReactNode;\n  /** Optional alert icon (or other) to show before the title. When the predefined alert types\n   * are used the default styling will be automatically applied. */\n  titleIconVariant?: 'success' | 'danger' | 'warning' | 'info' | 'default' | React.ComponentType<any>;\n  /** Optional title label text for screen readers. */\n  titleLabel?: string;\n}\n\nexport const ModalBoxTitle: React.FunctionComponent<ModalBoxTitleProps> = ({\n  className = '',\n  id,\n  title,\n  titleIconVariant,\n  titleLabel = '',\n  ...props\n}: ModalBoxTitleProps) => {\n  const [hasTooltip, setHasTooltip] = React.useState(false);\n  const h1 = React.useRef<HTMLHeadingElement>(null);\n  const label = titleLabel || (isVariantIcon(titleIconVariant) ? `${capitalize(titleIconVariant)} alert:` : titleLabel);\n  const variantIcons = {\n    success: <CheckCircleIcon />,\n    danger: <ExclamationCircleIcon />,\n    warning: <ExclamationTriangleIcon />,\n    info: <InfoCircleIcon />,\n    default: <BellIcon />\n  };\n  const CustomIcon = !isVariantIcon(titleIconVariant) && titleIconVariant;\n\n  useIsomorphicLayoutEffect(() => {\n    setHasTooltip(h1.current && h1.current.offsetWidth < h1.current.scrollWidth);\n  }, []);\n\n  const content = (\n    <h1\n      id={id}\n      ref={h1}\n      className={css(modalStyles.modalBoxTitle, titleIconVariant && modalStyles.modifiers.icon, className)}\n      {...props}\n    >\n      {titleIconVariant && (\n        <span className={css(modalStyles.modalBoxTitleIcon)}>\n          {isVariantIcon(titleIconVariant) ? variantIcons[titleIconVariant] : <CustomIcon />}\n        </span>\n      )}\n      {label && <span className={css(accessibleStyles.screenReader)}>{label}</span>}\n      <span className={css(modalStyles.modalBoxTitleText)}>{title}</span>\n    </h1>\n  );\n\n  return hasTooltip ? <Tooltip content={title}>{content}</Tooltip> : content;\n};\nModalBoxTitle.displayName = 'ModalBoxTitle';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}