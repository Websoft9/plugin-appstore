{"ast":null,"code":"import _slicedToArray from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { useState } from 'react';\nimport styles from '@patternfly/react-styles/css/components/Slider/slider';\nimport { css } from '@patternfly/react-styles';\nimport { SliderStep } from './SliderStep';\nimport { InputGroup, InputGroupText } from '../InputGroup';\nimport { TextInput } from '../TextInput';\nimport { Tooltip } from '../Tooltip';\nvar getPercentage = function getPercentage(current, max) {\n  return 100 * current / max;\n};\nexport var Slider = function Slider(_a) {\n  var className = _a.className,\n    _a$value = _a.value,\n    value = _a$value === void 0 ? 0 : _a$value,\n    customSteps = _a.customSteps,\n    _a$areCustomStepsCont = _a.areCustomStepsContinuous,\n    areCustomStepsContinuous = _a$areCustomStepsCont === void 0 ? false : _a$areCustomStepsCont,\n    _a$isDisabled = _a.isDisabled,\n    isDisabled = _a$isDisabled === void 0 ? false : _a$isDisabled,\n    _a$isInputVisible = _a.isInputVisible,\n    isInputVisible = _a$isInputVisible === void 0 ? false : _a$isInputVisible,\n    _a$inputValue = _a.inputValue,\n    inputValue = _a$inputValue === void 0 ? 0 : _a$inputValue,\n    inputLabel = _a.inputLabel,\n    _a$inputAriaLabel = _a.inputAriaLabel,\n    inputAriaLabel = _a$inputAriaLabel === void 0 ? 'Slider value input' : _a$inputAriaLabel,\n    _a$thumbAriaLabel = _a.thumbAriaLabel,\n    thumbAriaLabel = _a$thumbAriaLabel === void 0 ? 'Value' : _a$thumbAriaLabel,\n    _a$hasTooltipOverThum = _a.hasTooltipOverThumb,\n    hasTooltipOverThumb = _a$hasTooltipOverThum === void 0 ? false : _a$hasTooltipOverThum,\n    _a$inputPosition = _a.inputPosition,\n    inputPosition = _a$inputPosition === void 0 ? 'right' : _a$inputPosition,\n    onChange = _a.onChange,\n    leftActions = _a.leftActions,\n    rightActions = _a.rightActions,\n    _a$step = _a.step,\n    step = _a$step === void 0 ? 1 : _a$step,\n    _a$min = _a.min,\n    min = _a$min === void 0 ? 0 : _a$min,\n    _a$max = _a.max,\n    max = _a$max === void 0 ? 100 : _a$max,\n    _a$showTicks = _a.showTicks,\n    showTicks = _a$showTicks === void 0 ? false : _a$showTicks,\n    _a$showBoundaries = _a.showBoundaries,\n    showBoundaries = _a$showBoundaries === void 0 ? true : _a$showBoundaries,\n    ariaDescribedby = _a['aria-describedby'],\n    ariaLabelledby = _a['aria-labelledby'],\n    props = __rest(_a, [\"className\", \"value\", \"customSteps\", \"areCustomStepsContinuous\", \"isDisabled\", \"isInputVisible\", \"inputValue\", \"inputLabel\", \"inputAriaLabel\", \"thumbAriaLabel\", \"hasTooltipOverThumb\", \"inputPosition\", \"onChange\", \"leftActions\", \"rightActions\", \"step\", \"min\", \"max\", \"showTicks\", \"showBoundaries\", 'aria-describedby', 'aria-labelledby']);\n  var sliderRailRef = React.useRef();\n  var thumbRef = React.useRef();\n  var _useState = useState(value),\n    _useState2 = _slicedToArray(_useState, 2),\n    localValue = _useState2[0],\n    setValue = _useState2[1];\n  var _useState3 = useState(inputValue),\n    _useState4 = _slicedToArray(_useState3, 2),\n    localInputValue = _useState4[0],\n    setLocalInputValue = _useState4[1];\n  React.useEffect(function () {\n    setValue(value);\n  }, [value]);\n  React.useEffect(function () {\n    setLocalInputValue(inputValue);\n  }, [inputValue]);\n  var diff = 0;\n  var snapValue;\n  // calculate style value percentage\n  var stylePercent = (localValue - min) * 100 / (max - min);\n  var style = {\n    '--pf-c-slider--value': \"\".concat(stylePercent, \"%\")\n  };\n  var widthChars = React.useMemo(function () {\n    return localInputValue.toString().length;\n  }, [localInputValue]);\n  var inputStyle = {\n    '--pf-c-slider__value--c-form-control--width-chars': widthChars\n  };\n  var onChangeHandler = function onChangeHandler(value) {\n    setLocalInputValue(Number(value));\n  };\n  var handleKeyPressOnInput = function handleKeyPressOnInput(event) {\n    if (event.key === 'Enter') {\n      event.preventDefault();\n      if (onChange) {\n        onChange(localValue, localInputValue, setLocalInputValue);\n      }\n    }\n  };\n  var onInputFocus = function onInputFocus(e) {\n    e.stopPropagation();\n  };\n  var onThumbClick = function onThumbClick() {\n    thumbRef.current.focus();\n  };\n  var onBlur = function onBlur() {\n    if (onChange) {\n      onChange(localValue, localInputValue, setLocalInputValue);\n    }\n  };\n  var findAriaTextValue = function findAriaTextValue() {\n    if (!areCustomStepsContinuous && customSteps) {\n      var matchingStep = customSteps.find(function (stepObj) {\n        return stepObj.value === localValue;\n      });\n      if (matchingStep) {\n        return matchingStep.label;\n      }\n    }\n    // For continuous steps default to showing 2 decimals in tooltip\n    // Consider making it configurable via a property\n    return Number(Number(localValue).toFixed(2)).toString();\n  };\n  var handleThumbDragEnd = function handleThumbDragEnd() {\n    document.removeEventListener('mousemove', callbackThumbMove);\n    document.removeEventListener('mouseup', callbackThumbUp);\n    document.removeEventListener('touchmove', callbackThumbMove);\n    document.removeEventListener('touchend', callbackThumbUp);\n    document.removeEventListener('touchcancel', callbackThumbUp);\n  };\n  var handleMouseDown = function handleMouseDown(e) {\n    e.stopPropagation();\n    e.preventDefault();\n    diff = e.clientX - thumbRef.current.getBoundingClientRect().left;\n    document.addEventListener('mousemove', callbackThumbMove);\n    document.addEventListener('mouseup', callbackThumbUp);\n  };\n  var handleTouchStart = function handleTouchStart(e) {\n    e.stopPropagation();\n    diff = e.touches[0].clientX - thumbRef.current.getBoundingClientRect().left;\n    document.addEventListener('touchmove', callbackThumbMove, {\n      passive: false\n    });\n    document.addEventListener('touchend', callbackThumbUp);\n    document.addEventListener('touchcancel', callbackThumbUp);\n  };\n  var onSliderRailClick = function onSliderRailClick(e) {\n    handleThumbMove(e);\n    if (snapValue && !areCustomStepsContinuous) {\n      thumbRef.current.style.setProperty('--pf-c-slider--value', \"\".concat(snapValue, \"%\"));\n      setValue(snapValue);\n      if (onChange) {\n        onChange(snapValue);\n      }\n    }\n  };\n  var handleThumbMove = function handleThumbMove(e) {\n    if (e.type === 'touchmove') {\n      e.preventDefault();\n      e.stopImmediatePropagation();\n    }\n    var clientPosition = e.touches && e.touches.length ? e.touches[0].clientX : e.clientX;\n    var newPosition = clientPosition - diff - sliderRailRef.current.getBoundingClientRect().left;\n    var end = sliderRailRef.current.offsetWidth - thumbRef.current.offsetWidth;\n    var start = 0;\n    if (newPosition < start) {\n      newPosition = 0;\n    }\n    if (newPosition > end) {\n      newPosition = end;\n    }\n    var newPercentage = getPercentage(newPosition, end);\n    thumbRef.current.style.setProperty('--pf-c-slider--value', \"\".concat(newPercentage, \"%\"));\n    // convert percentage to value\n    var newValue = Math.round((newPercentage * (max - min) / 100 + min) * 100) / 100;\n    setValue(newValue);\n    if (!customSteps) {\n      // snap to new value if not custom steps\n      snapValue = Math.round((Math.round((newValue - min) / step) * step + min) * 100) / 100;\n      thumbRef.current.style.setProperty('--pf-c-slider--value', \"\".concat(snapValue, \"%\"));\n      setValue(snapValue);\n    }\n    /* If custom steps are discrete, snap to closest step value */\n    if (!areCustomStepsContinuous && customSteps) {\n      var percentage = newPercentage;\n      if (customSteps[customSteps.length - 1].value !== 100) {\n        percentage = newPercentage * (max - min) / 100 + min;\n      }\n      var stepIndex = customSteps.findIndex(function (stepObj) {\n        return stepObj.value >= percentage;\n      });\n      if (customSteps[stepIndex].value === percentage) {\n        snapValue = customSteps[stepIndex].value;\n      } else {\n        var midpoint = (customSteps[stepIndex].value + customSteps[stepIndex - 1].value) / 2;\n        if (midpoint > percentage) {\n          snapValue = customSteps[stepIndex - 1].value;\n        } else {\n          snapValue = customSteps[stepIndex].value;\n        }\n      }\n      setValue(snapValue);\n    }\n    // Call onchange callback\n    if (onChange) {\n      if (snapValue !== undefined) {\n        onChange(snapValue);\n      } else {\n        onChange(newValue);\n      }\n    }\n  };\n  var callbackThumbMove = React.useCallback(handleThumbMove, [min, max, customSteps, onChange]);\n  var callbackThumbUp = React.useCallback(handleThumbDragEnd, [min, max, customSteps, onChange]);\n  var handleThumbKeys = function handleThumbKeys(e) {\n    var key = e.key;\n    if (key !== 'ArrowLeft' && key !== 'ArrowRight') {\n      return;\n    }\n    e.preventDefault();\n    var newValue = localValue;\n    if (!areCustomStepsContinuous && customSteps) {\n      var stepIndex = customSteps.findIndex(function (stepObj) {\n        return stepObj.value === localValue;\n      });\n      if (key === 'ArrowRight') {\n        if (stepIndex + 1 < customSteps.length) {\n          {\n            newValue = customSteps[stepIndex + 1].value;\n          }\n        }\n      } else if (key === 'ArrowLeft') {\n        if (stepIndex - 1 >= 0) {\n          newValue = customSteps[stepIndex - 1].value;\n        }\n      }\n    } else {\n      if (key === 'ArrowRight') {\n        newValue = localValue + step <= max ? localValue + step : max;\n      } else if (key === 'ArrowLeft') {\n        newValue = localValue - step >= min ? localValue - step : min;\n      }\n    }\n    if (newValue !== localValue) {\n      thumbRef.current.style.setProperty('--pf-c-slider--value', \"\".concat(newValue, \"%\"));\n      setValue(newValue);\n      if (onChange) {\n        onChange(newValue);\n      }\n    }\n  };\n  var displayInput = function displayInput() {\n    var textInput = React.createElement(TextInput, {\n      className: css(styles.formControl),\n      isDisabled: isDisabled,\n      type: \"number\",\n      value: localInputValue,\n      \"aria-label\": inputAriaLabel,\n      onKeyDown: handleKeyPressOnInput,\n      onChange: onChangeHandler,\n      onClick: onInputFocus,\n      onFocus: onInputFocus,\n      onBlur: onBlur\n    });\n    if (inputLabel) {\n      return React.createElement(InputGroup, null, textInput, React.createElement(InputGroupText, Object.assign({}, isDisabled && {\n        className: css(styles.modifiers.disabled)\n      }), ' ', inputLabel));\n    } else {\n      return textInput;\n    }\n  };\n  var getStepValue = function getStepValue(val, min, max) {\n    return (val - min) * 100 / (max - min);\n  };\n  var buildSteps = function buildSteps() {\n    var builtSteps = [];\n    for (var i = min; i <= max; i = i + step) {\n      var stepValue = getStepValue(i, min, max);\n      // If we boundaries but not ticks just generate the needed steps\n      // so that we don't pullute them DOM with empty divs\n      if (!showTicks && showBoundaries && i !== min && i !== max) {\n        continue;\n      }\n      builtSteps.push(React.createElement(SliderStep, {\n        key: i,\n        value: stepValue,\n        label: i.toString(),\n        isTickHidden: !showTicks,\n        isLabelHidden: (i === min || i === max) && showBoundaries ? false : true,\n        isActive: i <= localValue\n      }));\n    }\n    return builtSteps;\n  };\n  var thumbComponent = React.createElement(\"div\", {\n    className: css(styles.sliderThumb),\n    ref: thumbRef,\n    tabIndex: isDisabled ? -1 : 0,\n    role: \"slider\",\n    \"aria-valuemin\": customSteps ? customSteps[0].value : min,\n    \"aria-valuemax\": customSteps ? customSteps[customSteps.length - 1].value : max,\n    \"aria-valuenow\": localValue,\n    \"aria-valuetext\": findAriaTextValue(),\n    \"aria-label\": thumbAriaLabel,\n    \"aria-disabled\": isDisabled,\n    \"aria-describedby\": ariaDescribedby,\n    \"aria-labelledby\": ariaLabelledby,\n    onMouseDown: !isDisabled ? handleMouseDown : null,\n    onTouchStart: !isDisabled ? handleTouchStart : null,\n    onKeyDown: !isDisabled ? handleThumbKeys : null,\n    onClick: !isDisabled ? onThumbClick : null\n  });\n  return React.createElement(\"div\", Object.assign({\n    className: css(styles.slider, className, isDisabled && styles.modifiers.disabled),\n    style: Object.assign(Object.assign({}, style), inputStyle)\n  }, props), leftActions && React.createElement(\"div\", {\n    className: css(styles.sliderActions)\n  }, leftActions), React.createElement(\"div\", {\n    className: css(styles.sliderMain)\n  }, React.createElement(\"div\", {\n    className: css(styles.sliderRail),\n    ref: sliderRailRef,\n    onClick: !isDisabled ? onSliderRailClick : null\n  }, React.createElement(\"div\", {\n    className: css(styles.sliderRailTrack)\n  })), customSteps && React.createElement(\"div\", {\n    className: css(styles.sliderSteps),\n    \"aria-hidden\": \"true\"\n  }, customSteps.map(function (stepObj) {\n    var minValue = customSteps[0].value;\n    var maxValue = customSteps[customSteps.length - 1].value;\n    var stepValue = getStepValue(stepObj.value, minValue, maxValue);\n    return React.createElement(SliderStep, {\n      key: stepObj.value,\n      value: stepValue,\n      label: stepObj.label,\n      isLabelHidden: stepObj.isLabelHidden,\n      isActive: stepObj.value <= localValue\n    });\n  })), !customSteps && (showTicks || showBoundaries) && React.createElement(\"div\", {\n    className: css(styles.sliderSteps),\n    \"aria-hidden\": \"true\"\n  }, buildSteps()), hasTooltipOverThumb ? React.createElement(Tooltip, {\n    entryDelay: 0,\n    content: findAriaTextValue()\n  }, thumbComponent) : thumbComponent, isInputVisible && inputPosition === 'aboveThumb' && React.createElement(\"div\", {\n    className: css(styles.sliderValue, styles.modifiers.floating)\n  }, displayInput())), isInputVisible && inputPosition === 'right' && React.createElement(\"div\", {\n    className: css(styles.sliderValue)\n  }, displayInput()), rightActions && React.createElement(\"div\", {\n    className: css(styles.sliderActions)\n  }, rightActions));\n};\nSlider.displayName = 'Slider';","map":{"version":3,"names":["React","useState","styles","css","SliderStep","InputGroup","InputGroupText","TextInput","Tooltip","getPercentage","current","max","Slider","_a","className","_a$value","value","customSteps","_a$areCustomStepsCont","areCustomStepsContinuous","_a$isDisabled","isDisabled","_a$isInputVisible","isInputVisible","_a$inputValue","inputValue","inputLabel","_a$inputAriaLabel","inputAriaLabel","_a$thumbAriaLabel","thumbAriaLabel","_a$hasTooltipOverThum","hasTooltipOverThumb","_a$inputPosition","inputPosition","onChange","leftActions","rightActions","_a$step","step","_a$min","min","_a$max","_a$showTicks","showTicks","_a$showBoundaries","showBoundaries","ariaDescribedby","ariaLabelledby","props","__rest","sliderRailRef","useRef","thumbRef","_useState","_useState2","_slicedToArray","localValue","setValue","_useState3","_useState4","localInputValue","setLocalInputValue","useEffect","diff","snapValue","stylePercent","style","concat","widthChars","useMemo","toString","length","inputStyle","onChangeHandler","Number","handleKeyPressOnInput","event","key","preventDefault","onInputFocus","e","stopPropagation","onThumbClick","focus","onBlur","findAriaTextValue","matchingStep","find","stepObj","label","toFixed","handleThumbDragEnd","document","removeEventListener","callbackThumbMove","callbackThumbUp","handleMouseDown","clientX","getBoundingClientRect","left","addEventListener","handleTouchStart","touches","passive","onSliderRailClick","handleThumbMove","setProperty","type","stopImmediatePropagation","clientPosition","newPosition","end","offsetWidth","start","newPercentage","newValue","Math","round","percentage","stepIndex","findIndex","midpoint","undefined","useCallback","handleThumbKeys","displayInput","textInput","createElement","formControl","onKeyDown","onClick","onFocus","Object","assign","modifiers","disabled","getStepValue","val","buildSteps","builtSteps","i","stepValue","push","isTickHidden","isLabelHidden","isActive","thumbComponent","sliderThumb","ref","tabIndex","role","onMouseDown","onTouchStart","slider","sliderActions","sliderMain","sliderRail","sliderRailTrack","sliderSteps","map","minValue","maxValue","entryDelay","content","sliderValue","floating","displayName"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@patternfly/react-core/src/components/Slider/Slider.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useState } from 'react';\nimport styles from '@patternfly/react-styles/css/components/Slider/slider';\nimport { css } from '@patternfly/react-styles';\nimport { SliderStep } from './SliderStep';\nimport { InputGroup, InputGroupText } from '../InputGroup';\nimport { TextInput } from '../TextInput';\nimport { Tooltip } from '../Tooltip';\n\n/** Properties for creating custom steps in a slider. These properties should be passed in as\n * an object within an array to the slider component's customSteps property.\n */\nexport interface SliderStepObject {\n  /** Flag to hide the label. */\n  isLabelHidden?: boolean;\n  /** The display label for the step value. This is also used for the aria-valuetext attribute. */\n  label: string;\n  /** Value of the step. This value is a percentage of the slider where the tick is drawn. */\n  value: number;\n}\n\n/** The main slider component. */\nexport interface SliderProps extends Omit<React.HTMLProps<HTMLDivElement>, 'onChange'> {\n  /** Flag indicating if the slider is discrete for custom steps. This will cause the slider\n   * to snap to the closest value.\n   */\n  areCustomStepsContinuous?: boolean;\n  /** One or more id's to use for the slider thumb's accessible description. */\n  'aria-describedby'?: string;\n  /** One or more id's to use for the slider thumb's accessible label. */\n  'aria-labelledby'?: string;\n  /** Additional classes added to the slider. */\n  className?: string;\n  /** Array of custom slider step objects (value and label of each step) for the slider. */\n  customSteps?: SliderStepObject[];\n  /* Adds a tooltip over the slider thumb containing the current value. */\n  hasTooltipOverThumb?: boolean;\n  /** Accessible label for the input field. */\n  inputAriaLabel?: string;\n  /** Text label that is place after the input field. */\n  inputLabel?: string | number;\n  /** Position of the input. */\n  inputPosition?: 'aboveThumb' | 'right';\n  /** Value displayed in the input field. */\n  inputValue?: number;\n  /** Adds disabled styling, and disables the slider and the input component if present. */\n  isDisabled?: boolean;\n  /** Flag to show value input field. */\n  isInputVisible?: boolean;\n  /** Actions placed to the left of the slider. */\n  leftActions?: React.ReactNode;\n  /** The maximum permitted value. */\n  max?: number;\n  /** The minimum permitted value. */\n  min?: number;\n  /** Value change callback. This is called when the slider value changes. */\n  onChange?: (\n    value: number,\n    inputValue?: number,\n    setLocalInputValue?: React.Dispatch<React.SetStateAction<number>>\n  ) => void;\n  /** Actions placed to the right of the slider. */\n  rightActions?: React.ReactNode;\n  /** Flag to indicate if boundaries should be shown for slider that does not have custom steps. */\n  showBoundaries?: boolean;\n  /** Flag to indicate if ticks should be shown for slider that does not have custom steps. */\n  showTicks?: boolean;\n  /** The step interval. */\n  step?: number;\n  /* Accessible label for the slider thumb. */\n  thumbAriaLabel?: string;\n  /** Current value of the slider.  */\n  value?: number;\n}\n\nconst getPercentage = (current: number, max: number) => (100 * current) / max;\n\nexport const Slider: React.FunctionComponent<SliderProps> = ({\n  className,\n  value = 0,\n  customSteps,\n  areCustomStepsContinuous = false,\n  isDisabled = false,\n  isInputVisible = false,\n  inputValue = 0,\n  inputLabel,\n  inputAriaLabel = 'Slider value input',\n  thumbAriaLabel = 'Value',\n  hasTooltipOverThumb = false,\n  inputPosition = 'right',\n  onChange,\n  leftActions,\n  rightActions,\n  step = 1,\n  min = 0,\n  max = 100,\n  showTicks = false,\n  showBoundaries = true,\n  'aria-describedby': ariaDescribedby,\n  'aria-labelledby': ariaLabelledby,\n  ...props\n}: SliderProps) => {\n  const sliderRailRef = React.useRef<HTMLDivElement>();\n  const thumbRef = React.useRef<HTMLDivElement>();\n\n  const [localValue, setValue] = useState(value);\n  const [localInputValue, setLocalInputValue] = useState(inputValue);\n\n  React.useEffect(() => {\n    setValue(value);\n  }, [value]);\n\n  React.useEffect(() => {\n    setLocalInputValue(inputValue);\n  }, [inputValue]);\n\n  let diff = 0;\n  let snapValue: number;\n\n  // calculate style value percentage\n  const stylePercent = ((localValue - min) * 100) / (max - min);\n  const style = { '--pf-c-slider--value': `${stylePercent}%` } as React.CSSProperties;\n  const widthChars = React.useMemo(() => localInputValue.toString().length, [localInputValue]);\n  const inputStyle = { '--pf-c-slider__value--c-form-control--width-chars': widthChars } as React.CSSProperties;\n\n  const onChangeHandler = (value: string) => {\n    setLocalInputValue(Number(value));\n  };\n\n  const handleKeyPressOnInput = (event: React.KeyboardEvent) => {\n    if (event.key === 'Enter') {\n      event.preventDefault();\n      if (onChange) {\n        onChange(localValue, localInputValue, setLocalInputValue);\n      }\n    }\n  };\n\n  const onInputFocus = (e: any) => {\n    e.stopPropagation();\n  };\n\n  const onThumbClick = () => {\n    thumbRef.current.focus();\n  };\n\n  const onBlur = () => {\n    if (onChange) {\n      onChange(localValue, localInputValue, setLocalInputValue);\n    }\n  };\n\n  const findAriaTextValue = () => {\n    if (!areCustomStepsContinuous && customSteps) {\n      const matchingStep = customSteps.find(stepObj => stepObj.value === localValue);\n      if (matchingStep) {\n        return matchingStep.label;\n      }\n    }\n    // For continuous steps default to showing 2 decimals in tooltip\n    // Consider making it configurable via a property\n    return Number(Number(localValue).toFixed(2)).toString();\n  };\n\n  const handleThumbDragEnd = () => {\n    document.removeEventListener('mousemove', callbackThumbMove);\n    document.removeEventListener('mouseup', callbackThumbUp);\n    document.removeEventListener('touchmove', callbackThumbMove);\n    document.removeEventListener('touchend', callbackThumbUp);\n    document.removeEventListener('touchcancel', callbackThumbUp);\n  };\n\n  const handleMouseDown = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n\n    diff = e.clientX - thumbRef.current.getBoundingClientRect().left;\n\n    document.addEventListener('mousemove', callbackThumbMove);\n    document.addEventListener('mouseup', callbackThumbUp);\n  };\n\n  const handleTouchStart = (e: React.TouchEvent) => {\n    e.stopPropagation();\n\n    diff = e.touches[0].clientX - thumbRef.current.getBoundingClientRect().left;\n\n    document.addEventListener('touchmove', callbackThumbMove, { passive: false });\n    document.addEventListener('touchend', callbackThumbUp);\n    document.addEventListener('touchcancel', callbackThumbUp);\n  };\n\n  const onSliderRailClick = (e: any) => {\n    handleThumbMove(e);\n    if (snapValue && !areCustomStepsContinuous) {\n      thumbRef.current.style.setProperty('--pf-c-slider--value', `${snapValue}%`);\n      setValue(snapValue);\n      if (onChange) {\n        onChange(snapValue);\n      }\n    }\n  };\n\n  const handleThumbMove = (e: any) => {\n    if (e.type === 'touchmove') {\n      e.preventDefault();\n      e.stopImmediatePropagation();\n    }\n\n    const clientPosition = e.touches && e.touches.length ? e.touches[0].clientX : e.clientX;\n\n    let newPosition = clientPosition - diff - sliderRailRef.current.getBoundingClientRect().left;\n\n    const end = sliderRailRef.current.offsetWidth - thumbRef.current.offsetWidth;\n\n    const start = 0;\n\n    if (newPosition < start) {\n      newPosition = 0;\n    }\n\n    if (newPosition > end) {\n      newPosition = end;\n    }\n\n    const newPercentage = getPercentage(newPosition, end);\n\n    thumbRef.current.style.setProperty('--pf-c-slider--value', `${newPercentage}%`);\n    // convert percentage to value\n    const newValue = Math.round(((newPercentage * (max - min)) / 100 + min) * 100) / 100;\n    setValue(newValue);\n\n    if (!customSteps) {\n      // snap to new value if not custom steps\n      snapValue = Math.round((Math.round((newValue - min) / step) * step + min) * 100) / 100;\n      thumbRef.current.style.setProperty('--pf-c-slider--value', `${snapValue}%`);\n      setValue(snapValue);\n    }\n\n    /* If custom steps are discrete, snap to closest step value */\n    if (!areCustomStepsContinuous && customSteps) {\n      let percentage = newPercentage;\n      if (customSteps[customSteps.length - 1].value !== 100) {\n        percentage = (newPercentage * (max - min)) / 100 + min;\n      }\n      const stepIndex = customSteps.findIndex(stepObj => stepObj.value >= percentage);\n      if (customSteps[stepIndex].value === percentage) {\n        snapValue = customSteps[stepIndex].value;\n      } else {\n        const midpoint = (customSteps[stepIndex].value + customSteps[stepIndex - 1].value) / 2;\n        if (midpoint > percentage) {\n          snapValue = customSteps[stepIndex - 1].value;\n        } else {\n          snapValue = customSteps[stepIndex].value;\n        }\n      }\n      setValue(snapValue);\n    }\n\n    // Call onchange callback\n    if (onChange) {\n      if (snapValue !== undefined) {\n        onChange(snapValue);\n      } else {\n        onChange(newValue);\n      }\n    }\n  };\n\n  const callbackThumbMove = React.useCallback(handleThumbMove, [min, max, customSteps, onChange]);\n  const callbackThumbUp = React.useCallback(handleThumbDragEnd, [min, max, customSteps, onChange]);\n\n  const handleThumbKeys = (e: React.KeyboardEvent) => {\n    const key = e.key;\n    if (key !== 'ArrowLeft' && key !== 'ArrowRight') {\n      return;\n    }\n    e.preventDefault();\n    let newValue: number = localValue;\n    if (!areCustomStepsContinuous && customSteps) {\n      const stepIndex = customSteps.findIndex(stepObj => stepObj.value === localValue);\n      if (key === 'ArrowRight') {\n        if (stepIndex + 1 < customSteps.length) {\n          {\n            newValue = customSteps[stepIndex + 1].value;\n          }\n        }\n      } else if (key === 'ArrowLeft') {\n        if (stepIndex - 1 >= 0) {\n          newValue = customSteps[stepIndex - 1].value;\n        }\n      }\n    } else {\n      if (key === 'ArrowRight') {\n        newValue = localValue + step <= max ? localValue + step : max;\n      } else if (key === 'ArrowLeft') {\n        newValue = localValue - step >= min ? localValue - step : min;\n      }\n    }\n\n    if (newValue !== localValue) {\n      thumbRef.current.style.setProperty('--pf-c-slider--value', `${newValue}%`);\n      setValue(newValue);\n      if (onChange) {\n        onChange(newValue);\n      }\n    }\n  };\n\n  const displayInput = () => {\n    const textInput = (\n      <TextInput\n        className={css(styles.formControl)}\n        isDisabled={isDisabled}\n        type=\"number\"\n        value={localInputValue}\n        aria-label={inputAriaLabel}\n        onKeyDown={handleKeyPressOnInput}\n        onChange={onChangeHandler}\n        onClick={onInputFocus}\n        onFocus={onInputFocus}\n        onBlur={onBlur}\n      />\n    );\n    if (inputLabel) {\n      return (\n        <InputGroup>\n          {textInput}\n          <InputGroupText {...(isDisabled && { className: css(styles.modifiers.disabled) })}>\n            {' '}\n            {inputLabel}\n          </InputGroupText>\n        </InputGroup>\n      );\n    } else {\n      return textInput;\n    }\n  };\n\n  const getStepValue = (val: number, min: number, max: number) => ((val - min) * 100) / (max - min);\n  const buildSteps = () => {\n    const builtSteps = [];\n    for (let i = min; i <= max; i = i + step) {\n      const stepValue = getStepValue(i, min, max);\n\n      // If we boundaries but not ticks just generate the needed steps\n      // so that we don't pullute them DOM with empty divs\n      if (!showTicks && showBoundaries && i !== min && i !== max) {\n        continue;\n      }\n\n      builtSteps.push(\n        <SliderStep\n          key={i}\n          value={stepValue}\n          label={i.toString()}\n          isTickHidden={!showTicks}\n          isLabelHidden={(i === min || i === max) && showBoundaries ? false : true}\n          isActive={i <= localValue}\n        />\n      );\n    }\n    return builtSteps;\n  };\n\n  const thumbComponent = (\n    <div\n      className={css(styles.sliderThumb)}\n      ref={thumbRef}\n      tabIndex={isDisabled ? -1 : 0}\n      role=\"slider\"\n      aria-valuemin={customSteps ? customSteps[0].value : min}\n      aria-valuemax={customSteps ? customSteps[customSteps.length - 1].value : max}\n      aria-valuenow={localValue}\n      aria-valuetext={findAriaTextValue()}\n      aria-label={thumbAriaLabel}\n      aria-disabled={isDisabled}\n      aria-describedby={ariaDescribedby}\n      aria-labelledby={ariaLabelledby}\n      onMouseDown={!isDisabled ? handleMouseDown : null}\n      onTouchStart={!isDisabled ? handleTouchStart : null}\n      onKeyDown={!isDisabled ? handleThumbKeys : null}\n      onClick={!isDisabled ? onThumbClick : null}\n    />\n  );\n\n  return (\n    <div\n      className={css(styles.slider, className, isDisabled && styles.modifiers.disabled)}\n      style={{ ...style, ...inputStyle }}\n      {...props}\n    >\n      {leftActions && <div className={css(styles.sliderActions)}>{leftActions}</div>}\n      <div className={css(styles.sliderMain)}>\n        <div className={css(styles.sliderRail)} ref={sliderRailRef} onClick={!isDisabled ? onSliderRailClick : null}>\n          <div className={css(styles.sliderRailTrack)} />\n        </div>\n        {customSteps && (\n          <div className={css(styles.sliderSteps)} aria-hidden=\"true\">\n            {customSteps.map(stepObj => {\n              const minValue = customSteps[0].value;\n              const maxValue = customSteps[customSteps.length - 1].value;\n              const stepValue = getStepValue(stepObj.value, minValue, maxValue);\n\n              return (\n                <SliderStep\n                  key={stepObj.value}\n                  value={stepValue}\n                  label={stepObj.label}\n                  isLabelHidden={stepObj.isLabelHidden}\n                  isActive={stepObj.value <= localValue}\n                />\n              );\n            })}\n          </div>\n        )}\n        {!customSteps && (showTicks || showBoundaries) && (\n          <div className={css(styles.sliderSteps)} aria-hidden=\"true\">\n            {buildSteps()}\n          </div>\n        )}\n        {hasTooltipOverThumb ? (\n          <Tooltip entryDelay={0} content={findAriaTextValue()}>\n            {thumbComponent}\n          </Tooltip>\n        ) : (\n          thumbComponent\n        )}\n        {isInputVisible && inputPosition === 'aboveThumb' && (\n          <div className={css(styles.sliderValue, styles.modifiers.floating)}>{displayInput()}</div>\n        )}\n      </div>\n      {isInputVisible && inputPosition === 'right' && <div className={css(styles.sliderValue)}>{displayInput()}</div>}\n      {rightActions && <div className={css(styles.sliderActions)}>{rightActions}</div>}\n    </div>\n  );\n};\nSlider.displayName = 'Slider';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}