{"ast":null,"code":"// A [trie](https://en.wikipedia.org/wiki/Trie) data structure that holds\n// object keys weakly, yet can also hold non-object keys, unlike the\n// native `WeakMap`.\n// If no makeData function is supplied, the looked-up data will be an empty,\n// null-prototype Object.\nvar defaultMakeData = function defaultMakeData() {\n  return Object.create(null);\n};\n// Useful for processing arguments objects as well as arrays.\nvar _a = Array.prototype,\n  forEach = _a.forEach,\n  slice = _a.slice;\nvar Trie = /** @class */function () {\n  function Trie(weakness, makeData) {\n    if (weakness === void 0) {\n      weakness = true;\n    }\n    if (makeData === void 0) {\n      makeData = defaultMakeData;\n    }\n    this.weakness = weakness;\n    this.makeData = makeData;\n  }\n  Trie.prototype.lookup = function () {\n    var array = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      array[_i] = arguments[_i];\n    }\n    return this.lookupArray(array);\n  };\n  Trie.prototype.lookupArray = function (array) {\n    var node = this;\n    forEach.call(array, function (key) {\n      return node = node.getChildTrie(key);\n    });\n    return node.data || (node.data = this.makeData(slice.call(array)));\n  };\n  Trie.prototype.getChildTrie = function (key) {\n    var map = this.weakness && isObjRef(key) ? this.weak || (this.weak = new WeakMap()) : this.strong || (this.strong = new Map());\n    var child = map.get(key);\n    if (!child) map.set(key, child = new Trie(this.weakness, this.makeData));\n    return child;\n  };\n  return Trie;\n}();\nfunction isObjRef(value) {\n  switch (typeof value) {\n    case \"object\":\n      if (value === null) break;\n    // Fall through to return true...\n    case \"function\":\n      return true;\n  }\n  return false;\n}\nexport { Trie };","map":{"version":3,"names":["defaultMakeData","Object","create","_a","Array","prototype","forEach","slice","Trie","weakness","makeData","lookup","array","_i","arguments","length","lookupArray","node","call","key","getChildTrie","data","map","isObjRef","weak","WeakMap","strong","Map","child","get","set","value"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/optimism/node_modules/@wry/trie/src/trie.ts"],"sourcesContent":["// A [trie](https://en.wikipedia.org/wiki/Trie) data structure that holds\n// object keys weakly, yet can also hold non-object keys, unlike the\n// native `WeakMap`.\n\n// If no makeData function is supplied, the looked-up data will be an empty,\n// null-prototype Object.\nconst defaultMakeData = () => Object.create(null);\n\n// Useful for processing arguments objects as well as arrays.\nconst { forEach, slice } = Array.prototype;\n\nexport class Trie<Data> {\n  // Since a `WeakMap` cannot hold primitive values as keys, we need a\n  // backup `Map` instance to hold primitive keys. Both `this._weakMap`\n  // and `this._strongMap` are lazily initialized.\n  private weak?: WeakMap<any, Trie<Data>>;\n  private strong?: Map<any, Trie<Data>>;\n  private data?: Data;\n\n  constructor(\n    private weakness = true,\n    private makeData: (array: any[]) => Data = defaultMakeData,\n  ) {}\n\n  public lookup<T extends any[]>(...array: T): Data {\n    return this.lookupArray(array);\n  }\n\n  public lookupArray<T extends IArguments | any[]>(array: T): Data {\n    let node: Trie<Data> = this;\n    forEach.call(array, key => node = node.getChildTrie(key));\n    return node.data || (node.data = this.makeData(slice.call(array)));\n  }\n\n  private getChildTrie(key: any) {\n    const map = this.weakness && isObjRef(key)\n      ? this.weak || (this.weak = new WeakMap<any, Trie<Data>>())\n      : this.strong || (this.strong = new Map<any, Trie<Data>>());\n    let child = map.get(key);\n    if (!child) map.set(key, child = new Trie<Data>(this.weakness, this.makeData));\n    return child;\n  }\n}\n\nfunction isObjRef(value: any) {\n  switch (typeof value) {\n  case \"object\":\n    if (value === null) break;\n    // Fall through to return true...\n  case \"function\":\n    return true;\n  }\n  return false;\n}\n"],"mappings":"AAAA;AACA;AACA;AAEA;AACA;AACA,IAAMA,eAAe,GAAG,SAAlBA,eAAeA,CAAA,EAAS;EAAA,OAAAC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;AAAnB,CAAmB;AAEjD;AACM,IAAAC,EAAA,GAAqBC,KAAK,CAACC,SAAS;EAAlCC,OAAO,GAAAH,EAAA,CAAAG,OAAA;EAAEC,KAAK,GAAAJ,EAAA,CAAAI,KAAoB;AAE1C,IAAAC,IAAA;EAQE,SACUA,KAAAC,QAAe,EACfC,QAAkD;IADlD,IAAAD,QAAA;MAAAA,QAAe;IAAA;IACf,IAAAC,QAAA;MAAAA,QAAkD,GAAAV,eAAA;IAAA;IADlD,IAAQ,CAAAS,QAAA,GAARA,QAAQ;IACR,IAAQ,CAAAC,QAAA,GAARA,QAAQ;;EAGXF,IAAA,CAAAH,SAAA,CAAAM,MAAM,GAAb;IAA+B,IAAWC,KAAA;SAAX,IAAWC,EAAA,MAAXA,EAAW,GAAAC,SAAA,CAAAC,MAAA,EAAXF,EAAW;MAAXD,KAAW,CAAAC,EAAA,IAAAC,SAAA,CAAAD,EAAA;;IACxC,OAAO,IAAI,CAACG,WAAW,CAACJ,KAAK,CAAC;GAC/B;EAEMJ,IAAW,CAAAH,SAAA,CAAAW,WAAA,GAAlB,UAAiDJ,KAAQ;IACvD,IAAIK,IAAI,GAAe,IAAI;IAC3BX,OAAO,CAACY,IAAI,CAACN,KAAK,EAAE,UAAAO,GAAG;MAAI,OAAAF,IAAI,GAAGA,IAAI,CAACG,YAAY,CAACD,GAAG,CAAC;IAA7B,CAA6B,CAAC;IACzD,OAAOF,IAAI,CAACI,IAAI,KAAKJ,IAAI,CAACI,IAAI,GAAG,IAAI,CAACX,QAAQ,CAACH,KAAK,CAACW,IAAI,CAACN,KAAK,CAAC,CAAC,CAAC;GACnE;EAEOJ,IAAY,CAAAH,SAAA,CAAAe,YAAA,GAApB,UAAqBD,GAAQ;IAC3B,IAAMG,GAAG,GAAG,IAAI,CAACb,QAAQ,IAAIc,QAAQ,CAACJ,GAAG,CAAC,GACtC,IAAI,CAACK,IAAI,KAAK,IAAI,CAACA,IAAI,GAAG,IAAIC,OAAO,EAAmB,CAAC,GACzD,IAAI,CAACC,MAAM,KAAK,IAAI,CAACA,MAAM,GAAG,IAAIC,GAAG,EAAmB,CAAC;IAC7D,IAAIC,KAAK,GAAGN,GAAG,CAACO,GAAG,CAACV,GAAG,CAAC;IACxB,IAAI,CAACS,KAAK,EAAEN,GAAG,CAACQ,GAAG,CAACX,GAAG,EAAES,KAAK,GAAG,IAAIpB,IAAI,CAAO,IAAI,CAACC,QAAQ,EAAE,IAAI,CAACC,QAAQ,CAAC,CAAC;IAC9E,OAAOkB,KAAK;GACb;EACH,OAACpB,IAAA;AAAD,CAAC;AAED,SAASe,QAAQA,CAACQ,KAAU;EAC1B,QAAQ,OAAOA,KAAK;IACpB,KAAK,QAAQ;MACX,IAAIA,KAAK,KAAK,IAAI,EAAE;;IAEtB,KAAK,UAAU;MACb,OAAO,IAAI;EACZ;EACD,OAAO,KAAK;AACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}