{"ast":null,"code":"import _slicedToArray from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/MultipleFileUpload/multiple-file-upload';\nimport { css } from '@patternfly/react-styles';\nimport { ExpandableSection } from '../ExpandableSection';\nimport InProgressIcon from '@patternfly/react-icons/dist/esm/icons/in-progress-icon';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/esm/icons/times-circle-icon';\nexport var MultipleFileUploadStatus = function MultipleFileUploadStatus(_a) {\n  var children = _a.children,\n    className = _a.className,\n    statusToggleText = _a.statusToggleText,\n    statusToggleIcon = _a.statusToggleIcon,\n    props = __rest(_a, [\"children\", \"className\", \"statusToggleText\", \"statusToggleIcon\"]);\n  var _React$useState = React.useState(),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    icon = _React$useState2[0],\n    setIcon = _React$useState2[1];\n  var _React$useState3 = React.useState(true),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    isOpen = _React$useState4[0],\n    setIsOpen = _React$useState4[1];\n  React.useEffect(function () {\n    switch (statusToggleIcon) {\n      case 'danger':\n        setIcon(React.createElement(TimesCircleIcon, null));\n        break;\n      case 'success':\n        setIcon(React.createElement(CheckCircleIcon, null));\n        break;\n      case 'inProgress':\n        setIcon(React.createElement(InProgressIcon, null));\n        break;\n      default:\n        setIcon(statusToggleIcon);\n    }\n  }, [statusToggleIcon]);\n  var toggle = React.createElement(\"div\", {\n    className: styles.multipleFileUploadStatusProgress\n  }, React.createElement(\"div\", {\n    className: styles.multipleFileUploadStatusProgressIcon\n  }, icon), React.createElement(\"div\", {\n    className: styles.multipleFileUploadStatusItemProgressText\n  }, statusToggleText));\n  var toggleExpandableSection = function toggleExpandableSection() {\n    setIsOpen(!isOpen);\n  };\n  return React.createElement(\"div\", Object.assign({\n    className: css(styles.multipleFileUploadStatus, className)\n  }, props), React.createElement(ExpandableSection, {\n    toggleContent: toggle,\n    isExpanded: isOpen,\n    onToggle: toggleExpandableSection\n  }, React.createElement(\"ul\", {\n    className: \"pf-c-multiple-file-upload__status-list\"\n  }, children)));\n};\nMultipleFileUploadStatus.displayName = 'MultipleFileUploadStatus';","map":{"version":3,"names":["React","styles","css","ExpandableSection","InProgressIcon","CheckCircleIcon","TimesCircleIcon","MultipleFileUploadStatus","_a","children","className","statusToggleText","statusToggleIcon","props","__rest","_React$useState","useState","_React$useState2","_slicedToArray","icon","setIcon","_React$useState3","_React$useState4","isOpen","setIsOpen","useEffect","createElement","toggle","multipleFileUploadStatusProgress","multipleFileUploadStatusProgressIcon","multipleFileUploadStatusItemProgressText","toggleExpandableSection","Object","assign","multipleFileUploadStatus","toggleContent","isExpanded","onToggle","displayName"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@patternfly/react-core/src/components/MultipleFileUpload/MultipleFileUploadStatus.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/MultipleFileUpload/multiple-file-upload';\nimport { css } from '@patternfly/react-styles';\nimport { ExpandableSection } from '../ExpandableSection';\nimport InProgressIcon from '@patternfly/react-icons/dist/esm/icons/in-progress-icon';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/esm/icons/times-circle-icon';\n\n/** Acts as an expandable container for all uploaded file statuses.\n * An optional text and/or icon can also be passed into this sub-component.\n * This sub-component can be conditionally rendered when at least 1 file has been\n * attempted to be uploaded.\n */\n\nexport interface MultipleFileUploadStatusProps extends React.HTMLProps<HTMLDivElement> {\n  /** Content rendered inside multi file upload status list */\n  children?: React.ReactNode;\n  /** Class to add to outer div */\n  className?: string;\n  /** String to show in the status toggle */\n  statusToggleText?: string;\n  /** Icon to show in the status toggle */\n  statusToggleIcon?: 'danger' | 'success' | 'inProgress' | React.ReactNode;\n}\n\nexport const MultipleFileUploadStatus: React.FunctionComponent<MultipleFileUploadStatusProps> = ({\n  children,\n  className,\n  statusToggleText,\n  statusToggleIcon,\n  ...props\n}: MultipleFileUploadStatusProps) => {\n  const [icon, setIcon] = React.useState<React.ReactNode>();\n  const [isOpen, setIsOpen] = React.useState(true);\n\n  React.useEffect(() => {\n    switch (statusToggleIcon) {\n      case 'danger':\n        setIcon(<TimesCircleIcon />);\n        break;\n      case 'success':\n        setIcon(<CheckCircleIcon />);\n        break;\n      case 'inProgress':\n        setIcon(<InProgressIcon />);\n        break;\n      default:\n        setIcon(statusToggleIcon);\n    }\n  }, [statusToggleIcon]);\n\n  const toggle = (\n    <div className={styles.multipleFileUploadStatusProgress}>\n      <div className={styles.multipleFileUploadStatusProgressIcon}>{icon}</div>\n      <div className={styles.multipleFileUploadStatusItemProgressText}>{statusToggleText}</div>\n    </div>\n  );\n\n  const toggleExpandableSection = () => {\n    setIsOpen(!isOpen);\n  };\n\n  return (\n    <div className={css(styles.multipleFileUploadStatus, className)} {...props}>\n      <ExpandableSection toggleContent={toggle} isExpanded={isOpen} onToggle={toggleExpandableSection}>\n        <ul className=\"pf-c-multiple-file-upload__status-list\">{children}</ul>\n      </ExpandableSection>\n    </div>\n  );\n};\n\nMultipleFileUploadStatus.displayName = 'MultipleFileUploadStatus';\n"],"mappings":";;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,MAAM,MAAM,iFAAiF;AACpG,SAASC,GAAG,QAAQ,0BAA0B;AAC9C,SAASC,iBAAiB,QAAQ,sBAAsB;AACxD,OAAOC,cAAc,MAAM,yDAAyD;AACpF,OAAOC,eAAe,MAAM,0DAA0D;AACtF,OAAOC,eAAe,MAAM,0DAA0D;AAmBtF,OAAO,IAAMC,wBAAwB,GAA2D,SAAnFA,wBAAwBA,CAA4DC,EAMjE,EAAI;MALlCC,QAAQ,GAGQD,EAEc,CAL9BC,QAAQ;IACRC,SAAS,GAEOF,EAEc,CAJ9BE,SAAS;IACTC,gBAAgB,GACAH,EAEc,CAH9BG,gBAAgB;IAChBC,gBAAgB,GAAAJ,EAEc,CAF9BI,gBAAgB;IACbC,KAAK,GAAAC,MAAA,CAAAN,EAAA,EALuF,iEAMhG,CADS;EAER,IAAAO,eAAA,GAAwBf,KAAK,CAACgB,QAAQ,EAAmB;IAAAC,gBAAA,GAAAC,cAAA,CAAAH,eAAA;IAAlDI,IAAI,GAAAF,gBAAA;IAAEG,OAAO,GAAAH,gBAAA;EACpB,IAAAI,gBAAA,GAA4BrB,KAAK,CAACgB,QAAQ,CAAC,IAAI,CAAC;IAAAM,gBAAA,GAAAJ,cAAA,CAAAG,gBAAA;IAAzCE,MAAM,GAAAD,gBAAA;IAAEE,SAAS,GAAAF,gBAAA;EAExBtB,KAAK,CAACyB,SAAS,CAAC,YAAK;IACnB,QAAQb,gBAAgB;MACtB,KAAK,QAAQ;QACXQ,OAAO,CAACpB,KAAA,CAAA0B,aAAA,CAACpB,eAAe,OAAG,CAAC;QAC5B;MACF,KAAK,SAAS;QACZc,OAAO,CAACpB,KAAA,CAAA0B,aAAA,CAACrB,eAAe,OAAG,CAAC;QAC5B;MACF,KAAK,YAAY;QACfe,OAAO,CAACpB,KAAA,CAAA0B,aAAA,CAACtB,cAAc,OAAG,CAAC;QAC3B;MACF;QACEgB,OAAO,CAACR,gBAAgB,CAAC;;EAE/B,CAAC,EAAE,CAACA,gBAAgB,CAAC,CAAC;EAEtB,IAAMe,MAAM,GACV3B,KAAA,CAAA0B,aAAA;IAAKhB,SAAS,EAAET,MAAM,CAAC2B;EAAgC,GACrD5B,KAAA,CAAA0B,aAAA;IAAKhB,SAAS,EAAET,MAAM,CAAC4B;EAAoC,GAAGV,IAAI,CAAO,EACzEnB,KAAA,CAAA0B,aAAA;IAAKhB,SAAS,EAAET,MAAM,CAAC6B;EAAwC,GAAGnB,gBAAgB,CAAO,CAE5F;EAED,IAAMoB,uBAAuB,GAAG,SAA1BA,uBAAuBA,CAAA,EAAQ;IACnCP,SAAS,CAAC,CAACD,MAAM,CAAC;EACpB,CAAC;EAED,OACEvB,KAAA,CAAA0B,aAAA,QAAAM,MAAA,CAAAC,MAAA;IAAKvB,SAAS,EAAER,GAAG,CAACD,MAAM,CAACiC,wBAAwB,EAAExB,SAAS;EAAC,GAAMG,KAAK,GACxEb,KAAA,CAAA0B,aAAA,CAACvB,iBAAiB;IAACgC,aAAa,EAAER,MAAM;IAAES,UAAU,EAAEb,MAAM;IAAEc,QAAQ,EAAEN;EAAuB,GAC7F/B,KAAA,CAAA0B,aAAA;IAAIhB,SAAS,EAAC;EAAwC,GAAED,QAAQ,CAAM,CACpD,CAChB;AAEV,CAAC;AAEDF,wBAAwB,CAAC+B,WAAW,GAAG,0BAA0B"},"metadata":{},"sourceType":"module","externalDependencies":[]}