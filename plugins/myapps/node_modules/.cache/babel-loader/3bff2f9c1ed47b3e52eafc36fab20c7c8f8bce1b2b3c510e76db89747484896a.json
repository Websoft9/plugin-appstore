{"ast":null,"code":"import _classCallCheck from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport styles from '@patternfly/react-styles/css/components/ContextSelector/context-selector';\nimport { css } from '@patternfly/react-styles';\nimport { KeyTypes } from '../../helpers/constants';\nexport var ContextSelectorToggle = /*#__PURE__*/function (_React$Component) {\n  _inherits(ContextSelectorToggle, _React$Component);\n  var _super = _createSuper(ContextSelectorToggle);\n  function ContextSelectorToggle() {\n    var _this;\n    _classCallCheck(this, ContextSelectorToggle);\n    _this = _super.apply(this, arguments);\n    _this.toggle = React.createRef();\n    _this.componentDidMount = function () {\n      document.addEventListener('mousedown', _this.onDocClick);\n      document.addEventListener('touchstart', _this.onDocClick);\n      document.addEventListener('keydown', _this.onEscPress);\n    };\n    _this.componentWillUnmount = function () {\n      document.removeEventListener('mousedown', _this.onDocClick);\n      document.removeEventListener('touchstart', _this.onDocClick);\n      document.removeEventListener('keydown', _this.onEscPress);\n    };\n    _this.onDocClick = function (event) {\n      var _this$props = _this.props,\n        isOpen = _this$props.isOpen,\n        parentRef = _this$props.parentRef,\n        onToggle = _this$props.onToggle;\n      if (isOpen && (parentRef === null || parentRef === void 0 ? void 0 : parentRef.current) && !parentRef.current.contains(event.target)) {\n        onToggle(null, false);\n        _this.toggle.current.focus();\n      }\n    };\n    _this.onEscPress = function (event) {\n      var _this$props2 = _this.props,\n        isOpen = _this$props2.isOpen,\n        onToggle = _this$props2.onToggle;\n      if (isOpen && event.key === KeyTypes.Escape) {\n        onToggle(null, false);\n        _this.toggle.current.focus();\n      }\n    };\n    _this.onKeyDown = function (event) {\n      var _this$props3 = _this.props,\n        isOpen = _this$props3.isOpen,\n        onToggle = _this$props3.onToggle,\n        onEnter = _this$props3.onEnter;\n      if (event.key === KeyTypes.Tab && !isOpen || event.key !== KeyTypes.Enter) {\n        return;\n      }\n      event.preventDefault();\n      if ((event.key === KeyTypes.Tab || event.key === KeyTypes.Enter || event.key !== KeyTypes.Space) && isOpen) {\n        onToggle(null, !isOpen);\n      } else if ((event.key === KeyTypes.Enter || event.key === ' ') && !isOpen) {\n        onToggle(null, !isOpen);\n        onEnter();\n      }\n    };\n    return _this;\n  }\n  _createClass(ContextSelectorToggle, [{\n    key: \"render\",\n    value: function render() {\n      var _a = this.props,\n        className = _a.className,\n        toggleText = _a.toggleText,\n        isOpen = _a.isOpen,\n        onToggle = _a.onToggle,\n        id = _a.id,\n        isPlain = _a.isPlain,\n        isText = _a.isText,\n        isActive = _a.isActive,\n        onEnter = _a.onEnter,\n        parentRef = _a.parentRef,\n        props = __rest(_a, [\"className\", \"toggleText\", \"isOpen\", \"onToggle\", \"id\", \"isPlain\", \"isText\", \"isActive\", \"onEnter\", \"parentRef\"]);\n      return React.createElement(\"button\", Object.assign({}, props, {\n        id: id,\n        ref: this.toggle,\n        className: css(styles.contextSelectorToggle, isActive && styles.modifiers.active, isPlain && styles.modifiers.plain, isText && styles.modifiers.text, className),\n        type: \"button\",\n        onClick: function onClick(event) {\n          return onToggle(event, !isOpen);\n        },\n        \"aria-expanded\": isOpen,\n        onKeyDown: this.onKeyDown\n      }), React.createElement(\"span\", {\n        className: css(styles.contextSelectorToggleText)\n      }, toggleText), React.createElement(\"span\", {\n        className: css(styles.contextSelectorToggleIcon)\n      }, React.createElement(CaretDownIcon, {\n        \"aria-hidden\": true\n      })));\n    }\n  }]);\n  return ContextSelectorToggle;\n}(React.Component);\nContextSelectorToggle.displayName = 'ContextSelectorToggle';\nContextSelectorToggle.defaultProps = {\n  className: '',\n  toggleText: '',\n  isOpen: false,\n  onEnter: function onEnter() {\n    return undefined;\n  },\n  parentRef: null,\n  isActive: false,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onToggle: function onToggle(event, value) {\n    return undefined;\n  }\n};","map":{"version":3,"names":["React","CaretDownIcon","styles","css","KeyTypes","ContextSelectorToggle","_React$Component","_inherits","_super","_createSuper","_this","_classCallCheck","toggle","createRef","componentDidMount","document","addEventListener","onDocClick","onEscPress","componentWillUnmount","removeEventListener","event","_this$props","props","isOpen","parentRef","onToggle","current","contains","target","focus","_this$props2","key","Escape","onKeyDown","_this$props3","onEnter","Tab","Enter","preventDefault","Space","_createClass","value","render","_a","className","toggleText","id","isPlain","isText","isActive","__rest","createElement","Object","assign","ref","contextSelectorToggle","modifiers","active","plain","text","type","onClick","contextSelectorToggleText","contextSelectorToggleIcon","Component","displayName","defaultProps","undefined"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@patternfly/react-core/src/components/ContextSelector/ContextSelectorToggle.tsx"],"sourcesContent":["import * as React from 'react';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport styles from '@patternfly/react-styles/css/components/ContextSelector/context-selector';\nimport { css } from '@patternfly/react-styles';\nimport { KeyTypes } from '../../helpers/constants';\nimport { PickOptional } from '../../helpers/typeUtils';\n\nexport interface ContextSelectorToggleProps {\n  /** HTML ID of toggle */\n  id: string;\n  /** Classes applied to root element of toggle */\n  className?: string;\n  /** Component or string that will be used in the context selector.\n   * This prop is placed in a button, and cannot contain any interactive elements\n   */\n  toggleText?: React.ReactNode;\n  /** Flag to indicate if menu is opened */\n  isOpen?: boolean;\n  /** Callback called when toggle is clicked */\n  onToggle?: (event: any, value: boolean) => void;\n  /** Callback for toggle open on keyboard entry */\n  onEnter?: () => void;\n  /** Element which wraps toggle */\n  parentRef?: any;\n  /** Forces active state */\n  isActive?: boolean;\n  /** Flag to indicate the toggle has no border or background */\n  isPlain?: boolean;\n  /** Flag to indicate if toggle is textual toggle */\n  isText?: boolean;\n}\n\nexport class ContextSelectorToggle extends React.Component<ContextSelectorToggleProps> {\n  static displayName = 'ContextSelectorToggle';\n  static defaultProps: PickOptional<ContextSelectorToggleProps> = {\n    className: '',\n    toggleText: '',\n    isOpen: false,\n    onEnter: () => undefined as any,\n    parentRef: null as any,\n    isActive: false,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onToggle: (event: any, value: boolean) => undefined as any\n  };\n\n  toggle: React.RefObject<HTMLButtonElement> = React.createRef();\n\n  componentDidMount = () => {\n    document.addEventListener('mousedown', this.onDocClick);\n    document.addEventListener('touchstart', this.onDocClick);\n    document.addEventListener('keydown', this.onEscPress);\n  };\n\n  componentWillUnmount = () => {\n    document.removeEventListener('mousedown', this.onDocClick);\n    document.removeEventListener('touchstart', this.onDocClick);\n    document.removeEventListener('keydown', this.onEscPress);\n  };\n\n  onDocClick = (event: any) => {\n    const { isOpen, parentRef, onToggle } = this.props;\n    if (isOpen && parentRef?.current && !parentRef.current.contains(event.target)) {\n      onToggle(null, false);\n      this.toggle.current.focus();\n    }\n  };\n\n  onEscPress = (event: any) => {\n    const { isOpen, onToggle } = this.props;\n    if (isOpen && event.key === KeyTypes.Escape) {\n      onToggle(null, false);\n      this.toggle.current.focus();\n    }\n  };\n\n  onKeyDown = (event: any) => {\n    const { isOpen, onToggle, onEnter } = this.props;\n    if ((event.key === KeyTypes.Tab && !isOpen) || event.key !== KeyTypes.Enter) {\n      return;\n    }\n    event.preventDefault();\n    if ((event.key === KeyTypes.Tab || event.key === KeyTypes.Enter || event.key !== KeyTypes.Space) && isOpen) {\n      onToggle(null, !isOpen);\n    } else if ((event.key === KeyTypes.Enter || event.key === ' ') && !isOpen) {\n      onToggle(null, !isOpen);\n      onEnter();\n    }\n  };\n\n  render() {\n    const {\n      className,\n      toggleText,\n      isOpen,\n      onToggle,\n      id,\n      isPlain,\n      isText,\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      isActive,\n      onEnter,\n      parentRef,\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      ...props\n    } = this.props;\n    return (\n      <button\n        {...props}\n        id={id}\n        ref={this.toggle}\n        className={css(\n          styles.contextSelectorToggle,\n          isActive && styles.modifiers.active,\n          isPlain && styles.modifiers.plain,\n          isText && styles.modifiers.text,\n          className\n        )}\n        type=\"button\"\n        onClick={event => onToggle(event, !isOpen)}\n        aria-expanded={isOpen}\n        onKeyDown={this.onKeyDown}\n      >\n        <span className={css(styles.contextSelectorToggleText)}>{toggleText}</span>\n        <span className={css(styles.contextSelectorToggleIcon)}>\n          <CaretDownIcon aria-hidden />\n        </span>\n      </button>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}