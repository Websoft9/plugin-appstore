{"ast":null,"code":"import inspect from \"../../jsutils/inspect.mjs\";\nimport { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { isCompositeType } from \"../../type/definition.mjs\";\nimport { typeFromAST } from \"../../utilities/typeFromAST.mjs\";\nimport { doTypesOverlap } from \"../../utilities/typeComparators.mjs\";\n\n/**\n * Possible fragment spread\n *\n * A fragment spread is only valid if the type condition could ever possibly\n * be true: if there is a non-empty intersection of the possible parent types,\n * and possible types which pass the type condition.\n */\nexport function PossibleFragmentSpreadsRule(context) {\n  return {\n    InlineFragment: function InlineFragment(node) {\n      var fragType = context.getType();\n      var parentType = context.getParentType();\n      if (isCompositeType(fragType) && isCompositeType(parentType) && !doTypesOverlap(context.getSchema(), fragType, parentType)) {\n        var parentTypeStr = inspect(parentType);\n        var fragTypeStr = inspect(fragType);\n        context.reportError(new GraphQLError(\"Fragment cannot be spread here as objects of type \\\"\".concat(parentTypeStr, \"\\\" can never be of type \\\"\").concat(fragTypeStr, \"\\\".\"), node));\n      }\n    },\n    FragmentSpread: function FragmentSpread(node) {\n      var fragName = node.name.value;\n      var fragType = getFragmentType(context, fragName);\n      var parentType = context.getParentType();\n      if (fragType && parentType && !doTypesOverlap(context.getSchema(), fragType, parentType)) {\n        var parentTypeStr = inspect(parentType);\n        var fragTypeStr = inspect(fragType);\n        context.reportError(new GraphQLError(\"Fragment \\\"\".concat(fragName, \"\\\" cannot be spread here as objects of type \\\"\").concat(parentTypeStr, \"\\\" can never be of type \\\"\").concat(fragTypeStr, \"\\\".\"), node));\n      }\n    }\n  };\n}\nfunction getFragmentType(context, name) {\n  var frag = context.getFragment(name);\n  if (frag) {\n    var type = typeFromAST(context.getSchema(), frag.typeCondition);\n    if (isCompositeType(type)) {\n      return type;\n    }\n  }\n}","map":{"version":3,"names":["inspect","GraphQLError","isCompositeType","typeFromAST","doTypesOverlap","PossibleFragmentSpreadsRule","context","InlineFragment","node","fragType","getType","parentType","getParentType","getSchema","parentTypeStr","fragTypeStr","reportError","concat","FragmentSpread","fragName","name","value","getFragmentType","frag","getFragment","type","typeCondition"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/graphql/validation/rules/PossibleFragmentSpreadsRule.mjs"],"sourcesContent":["import inspect from \"../../jsutils/inspect.mjs\";\nimport { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { isCompositeType } from \"../../type/definition.mjs\";\nimport { typeFromAST } from \"../../utilities/typeFromAST.mjs\";\nimport { doTypesOverlap } from \"../../utilities/typeComparators.mjs\";\n\n/**\n * Possible fragment spread\n *\n * A fragment spread is only valid if the type condition could ever possibly\n * be true: if there is a non-empty intersection of the possible parent types,\n * and possible types which pass the type condition.\n */\nexport function PossibleFragmentSpreadsRule(context) {\n  return {\n    InlineFragment: function InlineFragment(node) {\n      var fragType = context.getType();\n      var parentType = context.getParentType();\n\n      if (isCompositeType(fragType) && isCompositeType(parentType) && !doTypesOverlap(context.getSchema(), fragType, parentType)) {\n        var parentTypeStr = inspect(parentType);\n        var fragTypeStr = inspect(fragType);\n        context.reportError(new GraphQLError(\"Fragment cannot be spread here as objects of type \\\"\".concat(parentTypeStr, \"\\\" can never be of type \\\"\").concat(fragTypeStr, \"\\\".\"), node));\n      }\n    },\n    FragmentSpread: function FragmentSpread(node) {\n      var fragName = node.name.value;\n      var fragType = getFragmentType(context, fragName);\n      var parentType = context.getParentType();\n\n      if (fragType && parentType && !doTypesOverlap(context.getSchema(), fragType, parentType)) {\n        var parentTypeStr = inspect(parentType);\n        var fragTypeStr = inspect(fragType);\n        context.reportError(new GraphQLError(\"Fragment \\\"\".concat(fragName, \"\\\" cannot be spread here as objects of type \\\"\").concat(parentTypeStr, \"\\\" can never be of type \\\"\").concat(fragTypeStr, \"\\\".\"), node));\n      }\n    }\n  };\n}\n\nfunction getFragmentType(context, name) {\n  var frag = context.getFragment(name);\n\n  if (frag) {\n    var type = typeFromAST(context.getSchema(), frag.typeCondition);\n\n    if (isCompositeType(type)) {\n      return type;\n    }\n  }\n}\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,2BAA2B;AAC/C,SAASC,YAAY,QAAQ,8BAA8B;AAC3D,SAASC,eAAe,QAAQ,2BAA2B;AAC3D,SAASC,WAAW,QAAQ,iCAAiC;AAC7D,SAASC,cAAc,QAAQ,qCAAqC;;AAEpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,2BAA2BA,CAACC,OAAO,EAAE;EACnD,OAAO;IACLC,cAAc,EAAE,SAASA,cAAcA,CAACC,IAAI,EAAE;MAC5C,IAAIC,QAAQ,GAAGH,OAAO,CAACI,OAAO,CAAC,CAAC;MAChC,IAAIC,UAAU,GAAGL,OAAO,CAACM,aAAa,CAAC,CAAC;MAExC,IAAIV,eAAe,CAACO,QAAQ,CAAC,IAAIP,eAAe,CAACS,UAAU,CAAC,IAAI,CAACP,cAAc,CAACE,OAAO,CAACO,SAAS,CAAC,CAAC,EAAEJ,QAAQ,EAAEE,UAAU,CAAC,EAAE;QAC1H,IAAIG,aAAa,GAAGd,OAAO,CAACW,UAAU,CAAC;QACvC,IAAII,WAAW,GAAGf,OAAO,CAACS,QAAQ,CAAC;QACnCH,OAAO,CAACU,WAAW,CAAC,IAAIf,YAAY,CAAC,sDAAsD,CAACgB,MAAM,CAACH,aAAa,EAAE,4BAA4B,CAAC,CAACG,MAAM,CAACF,WAAW,EAAE,KAAK,CAAC,EAAEP,IAAI,CAAC,CAAC;MACpL;IACF,CAAC;IACDU,cAAc,EAAE,SAASA,cAAcA,CAACV,IAAI,EAAE;MAC5C,IAAIW,QAAQ,GAAGX,IAAI,CAACY,IAAI,CAACC,KAAK;MAC9B,IAAIZ,QAAQ,GAAGa,eAAe,CAAChB,OAAO,EAAEa,QAAQ,CAAC;MACjD,IAAIR,UAAU,GAAGL,OAAO,CAACM,aAAa,CAAC,CAAC;MAExC,IAAIH,QAAQ,IAAIE,UAAU,IAAI,CAACP,cAAc,CAACE,OAAO,CAACO,SAAS,CAAC,CAAC,EAAEJ,QAAQ,EAAEE,UAAU,CAAC,EAAE;QACxF,IAAIG,aAAa,GAAGd,OAAO,CAACW,UAAU,CAAC;QACvC,IAAII,WAAW,GAAGf,OAAO,CAACS,QAAQ,CAAC;QACnCH,OAAO,CAACU,WAAW,CAAC,IAAIf,YAAY,CAAC,aAAa,CAACgB,MAAM,CAACE,QAAQ,EAAE,gDAAgD,CAAC,CAACF,MAAM,CAACH,aAAa,EAAE,4BAA4B,CAAC,CAACG,MAAM,CAACF,WAAW,EAAE,KAAK,CAAC,EAAEP,IAAI,CAAC,CAAC;MAC9M;IACF;EACF,CAAC;AACH;AAEA,SAASc,eAAeA,CAAChB,OAAO,EAAEc,IAAI,EAAE;EACtC,IAAIG,IAAI,GAAGjB,OAAO,CAACkB,WAAW,CAACJ,IAAI,CAAC;EAEpC,IAAIG,IAAI,EAAE;IACR,IAAIE,IAAI,GAAGtB,WAAW,CAACG,OAAO,CAACO,SAAS,CAAC,CAAC,EAAEU,IAAI,CAACG,aAAa,CAAC;IAE/D,IAAIxB,eAAe,CAACuB,IAAI,CAAC,EAAE;MACzB,OAAOA,IAAI;IACb;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}