{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport { mergeOptions } from \"../../core/index.js\";\nimport { equal } from '@wry/equality';\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { ApolloError } from \"../../errors/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nexport function useMutation(mutation, options) {\n  var client = useApolloClient(options === null || options === void 0 ? void 0 : options.client);\n  verifyDocumentType(mutation, DocumentType.Mutation);\n  var _a = useState({\n      called: false,\n      loading: false,\n      client: client\n    }),\n    result = _a[0],\n    setResult = _a[1];\n  var ref = useRef({\n    result: result,\n    mutationId: 0,\n    isMounted: true,\n    client: client,\n    mutation: mutation,\n    options: options\n  });\n  {\n    Object.assign(ref.current, {\n      client: client,\n      options: options,\n      mutation: mutation\n    });\n  }\n  var execute = useCallback(function (executeOptions) {\n    if (executeOptions === void 0) {\n      executeOptions = {};\n    }\n    var _a = ref.current,\n      options = _a.options,\n      mutation = _a.mutation;\n    var baseOptions = __assign(__assign({}, options), {\n      mutation: mutation\n    });\n    var client = executeOptions.client || ref.current.client;\n    if (!ref.current.result.loading && !baseOptions.ignoreResults && ref.current.isMounted) {\n      setResult(ref.current.result = {\n        loading: true,\n        error: void 0,\n        data: void 0,\n        called: true,\n        client: client\n      });\n    }\n    var mutationId = ++ref.current.mutationId;\n    var clientOptions = mergeOptions(baseOptions, executeOptions);\n    return client.mutate(clientOptions).then(function (response) {\n      var _a;\n      var data = response.data,\n        errors = response.errors;\n      var error = errors && errors.length > 0 ? new ApolloError({\n        graphQLErrors: errors\n      }) : void 0;\n      if (mutationId === ref.current.mutationId && !clientOptions.ignoreResults) {\n        var result_1 = {\n          called: true,\n          loading: false,\n          data: data,\n          error: error,\n          client: client\n        };\n        if (ref.current.isMounted && !equal(ref.current.result, result_1)) {\n          setResult(ref.current.result = result_1);\n        }\n      }\n      var onCompleted = executeOptions.onCompleted || ((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onCompleted);\n      onCompleted === null || onCompleted === void 0 ? void 0 : onCompleted(response.data, clientOptions);\n      return response;\n    }).catch(function (error) {\n      var _a;\n      if (mutationId === ref.current.mutationId && ref.current.isMounted) {\n        var result_2 = {\n          loading: false,\n          error: error,\n          data: void 0,\n          called: true,\n          client: client\n        };\n        if (!equal(ref.current.result, result_2)) {\n          setResult(ref.current.result = result_2);\n        }\n      }\n      var onError = executeOptions.onError || ((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onError);\n      if (onError) {\n        onError(error, clientOptions);\n        return {\n          data: void 0,\n          errors: error\n        };\n      }\n      throw error;\n    });\n  }, []);\n  var reset = useCallback(function () {\n    if (ref.current.isMounted) {\n      setResult({\n        called: false,\n        loading: false,\n        client: client\n      });\n    }\n  }, []);\n  useEffect(function () {\n    ref.current.isMounted = true;\n    return function () {\n      ref.current.isMounted = false;\n    };\n  }, []);\n  return [execute, __assign({\n    reset: reset\n  }, result)];\n}","map":{"version":3,"names":["useCallback","useEffect","useRef","useState","mergeOptions","equal","DocumentType","verifyDocumentType","ApolloError","useApolloClient","useMutation","mutation","options","client","Mutation","_a","called","loading","result","setResult","ref","mutationId","isMounted","Object","assign","current","execute","executeOptions","baseOptions","__assign","ignoreResults","error","data","clientOptions","mutate","then","response","errors","length","graphQLErrors","result_1","onCompleted","catch","result_2","onError","reset"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@apollo/src/react/hooks/useMutation.ts"],"sourcesContent":["import { useCallback, useEffect, useRef, useState } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport {\n  MutationFunctionOptions,\n  MutationHookOptions,\n  MutationResult,\n  MutationTuple,\n} from '../types/types';\n\nimport {\n  ApolloCache,\n  DefaultContext,\n  mergeOptions,\n  OperationVariables,\n} from '../../core';\nimport { equal } from '@wry/equality';\nimport { DocumentType, verifyDocumentType } from '../parser';\nimport { ApolloError } from '../../errors';\nimport { useApolloClient } from './useApolloClient';\n\nexport function useMutation<\n  TData = any,\n  TVariables = OperationVariables,\n  TContext = DefaultContext,\n  TCache extends ApolloCache<any> = ApolloCache<any>,\n>(\n  mutation: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: MutationHookOptions<TData, TVariables, TContext, TCache>,\n): MutationTuple<TData, TVariables, TContext, TCache> {\n  const client = useApolloClient(options?.client);\n  verifyDocumentType(mutation, DocumentType.Mutation);\n  const [result, setResult] = useState<Omit<MutationResult, 'reset'>>({\n    called: false,\n    loading: false,\n    client,\n  });\n\n  const ref = useRef({\n    result,\n    mutationId: 0,\n    isMounted: true,\n    client,\n    mutation,\n    options,\n  });\n\n  // TODO: Trying to assign these in a useEffect or useLayoutEffect breaks\n  // higher-order components.\n  {\n    Object.assign(ref.current, { client, options, mutation });\n  }\n\n  const execute = useCallback((\n    executeOptions: MutationFunctionOptions<\n      TData,\n      TVariables,\n      TContext,\n      TCache\n    > = {}\n  ) => {\n    const {options, mutation} = ref.current;\n    const baseOptions = { ...options, mutation };\n    const client = executeOptions.client || ref.current.client;\n\n    if (!ref.current.result.loading && !baseOptions.ignoreResults && ref.current.isMounted) {\n      setResult(ref.current.result = {\n        loading: true,\n        error: void 0,\n        data: void 0,\n        called: true,\n        client,\n      });\n    }\n\n    const mutationId = ++ref.current.mutationId;\n    const clientOptions = mergeOptions(\n      baseOptions,\n      executeOptions as any,\n    );\n\n    return client.mutate(clientOptions).then((response) => {\n      const { data, errors } = response;\n      const error =\n        errors && errors.length > 0\n          ? new ApolloError({ graphQLErrors: errors })\n          : void 0;\n\n      if (\n        mutationId === ref.current.mutationId &&\n        !clientOptions.ignoreResults\n      ) {\n        const result = {\n          called: true,\n          loading: false,\n          data,\n          error,\n          client,\n        };\n\n        if (ref.current.isMounted && !equal(ref.current.result, result)) {\n          setResult(ref.current.result = result);\n        }\n      }\n\n      const onCompleted = executeOptions.onCompleted || ref.current.options?.onCompleted\n      onCompleted?.(response.data!, clientOptions);\n\n      return response;\n    }).catch((error) => {\n      if (\n        mutationId === ref.current.mutationId &&\n        ref.current.isMounted\n      ) {\n        const result = {\n          loading: false,\n          error,\n          data: void 0,\n          called: true,\n          client,\n        };\n\n        if (!equal(ref.current.result, result)) {\n          setResult(ref.current.result = result);\n        }\n      }\n\n      const onError = executeOptions.onError || ref.current.options?.onError\n\n      if (onError) {\n        onError(error, clientOptions);\n\n        // TODO(brian): why are we returning this here???\n        return { data: void 0, errors: error };\n      }\n\n      throw error;\n    });\n  }, []);\n\n  const reset = useCallback(() => {\n    if (ref.current.isMounted) {\n      setResult({ called: false, loading: false, client });\n    }\n  }, []);\n\n  useEffect(() => {\n    ref.current.isMounted = true;\n\n    return () => {\n      ref.current.isMounted = false;\n    };\n  }, []);\n\n  return [execute, { reset, ...result }];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}