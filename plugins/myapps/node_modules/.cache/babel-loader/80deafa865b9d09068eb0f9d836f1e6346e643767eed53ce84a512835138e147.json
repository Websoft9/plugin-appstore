{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { equal } from \"@wry/equality\";\nimport { DeepMerger } from \"../utilities/index.js\";\nimport { mergeIncrementalData } from \"../utilities/common/incrementalResult.js\";\nimport { reobserveCacheFirst } from \"./ObservableQuery.js\";\nimport { isNonEmptyArray, graphQLResultHasError, canUseWeakMap } from \"../utilities/index.js\";\nimport { NetworkStatus, isNetworkRequestInFlight } from \"./networkStatus.js\";\n;\nvar destructiveMethodCounts = new (canUseWeakMap ? WeakMap : Map)();\nfunction wrapDestructiveCacheMethod(cache, methodName) {\n  var original = cache[methodName];\n  if (typeof original === \"function\") {\n    cache[methodName] = function () {\n      destructiveMethodCounts.set(cache, (destructiveMethodCounts.get(cache) + 1) % 1e15);\n      return original.apply(this, arguments);\n    };\n  }\n}\nfunction cancelNotifyTimeout(info) {\n  if (info[\"notifyTimeout\"]) {\n    clearTimeout(info[\"notifyTimeout\"]);\n    info[\"notifyTimeout\"] = void 0;\n  }\n}\nvar QueryInfo = function () {\n  function QueryInfo(queryManager, queryId) {\n    if (queryId === void 0) {\n      queryId = queryManager.generateQueryId();\n    }\n    this.queryId = queryId;\n    this.listeners = new Set();\n    this.document = null;\n    this.lastRequestId = 1;\n    this.subscriptions = new Set();\n    this.stopped = false;\n    this.dirty = false;\n    this.observableQuery = null;\n    var cache = this.cache = queryManager.cache;\n    if (!destructiveMethodCounts.has(cache)) {\n      destructiveMethodCounts.set(cache, 0);\n      wrapDestructiveCacheMethod(cache, \"evict\");\n      wrapDestructiveCacheMethod(cache, \"modify\");\n      wrapDestructiveCacheMethod(cache, \"reset\");\n    }\n  }\n  QueryInfo.prototype.init = function (query) {\n    var networkStatus = query.networkStatus || NetworkStatus.loading;\n    if (this.variables && this.networkStatus !== NetworkStatus.loading && !equal(this.variables, query.variables)) {\n      networkStatus = NetworkStatus.setVariables;\n    }\n    if (!equal(query.variables, this.variables)) {\n      this.lastDiff = void 0;\n    }\n    Object.assign(this, {\n      document: query.document,\n      variables: query.variables,\n      networkError: null,\n      graphQLErrors: this.graphQLErrors || [],\n      networkStatus: networkStatus\n    });\n    if (query.observableQuery) {\n      this.setObservableQuery(query.observableQuery);\n    }\n    if (query.lastRequestId) {\n      this.lastRequestId = query.lastRequestId;\n    }\n    return this;\n  };\n  QueryInfo.prototype.reset = function () {\n    cancelNotifyTimeout(this);\n    this.dirty = false;\n  };\n  QueryInfo.prototype.getDiff = function (variables) {\n    if (variables === void 0) {\n      variables = this.variables;\n    }\n    var options = this.getDiffOptions(variables);\n    if (this.lastDiff && equal(options, this.lastDiff.options)) {\n      return this.lastDiff.diff;\n    }\n    this.updateWatch(this.variables = variables);\n    var oq = this.observableQuery;\n    if (oq && oq.options.fetchPolicy === \"no-cache\") {\n      return {\n        complete: false\n      };\n    }\n    var diff = this.cache.diff(options);\n    this.updateLastDiff(diff, options);\n    return diff;\n  };\n  QueryInfo.prototype.updateLastDiff = function (diff, options) {\n    this.lastDiff = diff ? {\n      diff: diff,\n      options: options || this.getDiffOptions()\n    } : void 0;\n  };\n  QueryInfo.prototype.getDiffOptions = function (variables) {\n    var _a;\n    if (variables === void 0) {\n      variables = this.variables;\n    }\n    return {\n      query: this.document,\n      variables: variables,\n      returnPartialData: true,\n      optimistic: true,\n      canonizeResults: (_a = this.observableQuery) === null || _a === void 0 ? void 0 : _a.options.canonizeResults\n    };\n  };\n  QueryInfo.prototype.setDiff = function (diff) {\n    var _this = this;\n    var oldDiff = this.lastDiff && this.lastDiff.diff;\n    this.updateLastDiff(diff);\n    if (!this.dirty && !equal(oldDiff && oldDiff.result, diff && diff.result)) {\n      this.dirty = true;\n      if (!this.notifyTimeout) {\n        this.notifyTimeout = setTimeout(function () {\n          return _this.notify();\n        }, 0);\n      }\n    }\n  };\n  QueryInfo.prototype.setObservableQuery = function (oq) {\n    var _this = this;\n    if (oq === this.observableQuery) return;\n    if (this.oqListener) {\n      this.listeners.delete(this.oqListener);\n    }\n    this.observableQuery = oq;\n    if (oq) {\n      oq[\"queryInfo\"] = this;\n      this.listeners.add(this.oqListener = function () {\n        var diff = _this.getDiff();\n        if (diff.fromOptimisticTransaction) {\n          oq[\"observe\"]();\n        } else {\n          reobserveCacheFirst(oq);\n        }\n      });\n    } else {\n      delete this.oqListener;\n    }\n  };\n  QueryInfo.prototype.notify = function () {\n    var _this = this;\n    cancelNotifyTimeout(this);\n    if (this.shouldNotify()) {\n      this.listeners.forEach(function (listener) {\n        return listener(_this);\n      });\n    }\n    this.dirty = false;\n  };\n  QueryInfo.prototype.shouldNotify = function () {\n    if (!this.dirty || !this.listeners.size) {\n      return false;\n    }\n    if (isNetworkRequestInFlight(this.networkStatus) && this.observableQuery) {\n      var fetchPolicy = this.observableQuery.options.fetchPolicy;\n      if (fetchPolicy !== \"cache-only\" && fetchPolicy !== \"cache-and-network\") {\n        return false;\n      }\n    }\n    return true;\n  };\n  QueryInfo.prototype.stop = function () {\n    if (!this.stopped) {\n      this.stopped = true;\n      this.reset();\n      this.cancel();\n      this.cancel = QueryInfo.prototype.cancel;\n      this.subscriptions.forEach(function (sub) {\n        return sub.unsubscribe();\n      });\n      var oq = this.observableQuery;\n      if (oq) oq.stopPolling();\n    }\n  };\n  QueryInfo.prototype.cancel = function () {};\n  QueryInfo.prototype.updateWatch = function (variables) {\n    var _this = this;\n    if (variables === void 0) {\n      variables = this.variables;\n    }\n    var oq = this.observableQuery;\n    if (oq && oq.options.fetchPolicy === \"no-cache\") {\n      return;\n    }\n    var watchOptions = __assign(__assign({}, this.getDiffOptions(variables)), {\n      watcher: this,\n      callback: function callback(diff) {\n        return _this.setDiff(diff);\n      }\n    });\n    if (!this.lastWatch || !equal(watchOptions, this.lastWatch)) {\n      this.cancel();\n      this.cancel = this.cache.watch(this.lastWatch = watchOptions);\n    }\n  };\n  QueryInfo.prototype.resetLastWrite = function () {\n    this.lastWrite = void 0;\n  };\n  QueryInfo.prototype.shouldWrite = function (result, variables) {\n    var lastWrite = this.lastWrite;\n    return !(lastWrite && lastWrite.dmCount === destructiveMethodCounts.get(this.cache) && equal(variables, lastWrite.variables) && equal(result.data, lastWrite.result.data));\n  };\n  QueryInfo.prototype.markResult = function (result, document, options, cacheWriteBehavior) {\n    var _this = this;\n    var merger = new DeepMerger();\n    var graphQLErrors = isNonEmptyArray(result.errors) ? result.errors.slice(0) : [];\n    this.reset();\n    if ('incremental' in result && isNonEmptyArray(result.incremental)) {\n      var mergedData = mergeIncrementalData(this.getDiff().result, result);\n      result.data = mergedData;\n    } else if ('hasNext' in result && result.hasNext) {\n      var diff = this.getDiff();\n      result.data = merger.merge(diff.result, result.data);\n    }\n    this.graphQLErrors = graphQLErrors;\n    if (options.fetchPolicy === 'no-cache') {\n      this.updateLastDiff({\n        result: result.data,\n        complete: true\n      }, this.getDiffOptions(options.variables));\n    } else if (cacheWriteBehavior !== 0) {\n      if (shouldWriteResult(result, options.errorPolicy)) {\n        this.cache.performTransaction(function (cache) {\n          if (_this.shouldWrite(result, options.variables)) {\n            cache.writeQuery({\n              query: document,\n              data: result.data,\n              variables: options.variables,\n              overwrite: cacheWriteBehavior === 1\n            });\n            _this.lastWrite = {\n              result: result,\n              variables: options.variables,\n              dmCount: destructiveMethodCounts.get(_this.cache)\n            };\n          } else {\n            if (_this.lastDiff && _this.lastDiff.diff.complete) {\n              result.data = _this.lastDiff.diff.result;\n              return;\n            }\n          }\n          var diffOptions = _this.getDiffOptions(options.variables);\n          var diff = cache.diff(diffOptions);\n          if (!_this.stopped) {\n            _this.updateWatch(options.variables);\n          }\n          _this.updateLastDiff(diff, diffOptions);\n          if (diff.complete) {\n            result.data = diff.result;\n          }\n        });\n      } else {\n        this.lastWrite = void 0;\n      }\n    }\n  };\n  QueryInfo.prototype.markReady = function () {\n    this.networkError = null;\n    return this.networkStatus = NetworkStatus.ready;\n  };\n  QueryInfo.prototype.markError = function (error) {\n    this.networkStatus = NetworkStatus.error;\n    this.lastWrite = void 0;\n    this.reset();\n    if (error.graphQLErrors) {\n      this.graphQLErrors = error.graphQLErrors;\n    }\n    if (error.networkError) {\n      this.networkError = error.networkError;\n    }\n    return error;\n  };\n  return QueryInfo;\n}();\nexport { QueryInfo };\nexport function shouldWriteResult(result, errorPolicy) {\n  if (errorPolicy === void 0) {\n    errorPolicy = \"none\";\n  }\n  var ignoreErrors = errorPolicy === \"ignore\" || errorPolicy === \"all\";\n  var writeWithErrors = !graphQLResultHasError(result);\n  if (!writeWithErrors && ignoreErrors && result.data) {\n    writeWithErrors = true;\n  }\n  return writeWithErrors;\n}","map":{"version":3,"names":["equal","DeepMerger","mergeIncrementalData","reobserveCacheFirst","isNonEmptyArray","graphQLResultHasError","canUseWeakMap","NetworkStatus","isNetworkRequestInFlight","destructiveMethodCounts","WeakMap","Map","wrapDestructiveCacheMethod","cache","methodName","original","set","get","apply","arguments","cancelNotifyTimeout","info","clearTimeout","QueryInfo","queryManager","queryId","generateQueryId","listeners","Set","document","lastRequestId","subscriptions","stopped","dirty","observableQuery","has","prototype","init","query","networkStatus","loading","variables","setVariables","lastDiff","Object","assign","networkError","graphQLErrors","setObservableQuery","reset","getDiff","options","getDiffOptions","diff","updateWatch","oq","fetchPolicy","complete","updateLastDiff","returnPartialData","optimistic","canonizeResults","_a","setDiff","_this","oldDiff","result","notifyTimeout","setTimeout","notify","oqListener","delete","add","fromOptimisticTransaction","shouldNotify","forEach","listener","size","stop","cancel","sub","unsubscribe","stopPolling","watchOptions","__assign","watcher","callback","lastWatch","watch","resetLastWrite","lastWrite","shouldWrite","dmCount","data","markResult","cacheWriteBehavior","merger","errors","slice","incremental","mergedData","hasNext","merge","shouldWriteResult","errorPolicy","performTransaction","writeQuery","overwrite","diffOptions","markReady","ready","markError","error","ignoreErrors","writeWithErrors"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@apollo/src/core/QueryInfo.ts"],"sourcesContent":["import { DocumentNode, GraphQLError } from 'graphql';\nimport { equal } from \"@wry/equality\";\n\nimport { Cache, ApolloCache } from '../cache';\nimport { DeepMerger } from \"../utilities\"\nimport { mergeIncrementalData } from '../utilities/common/incrementalResult';\nimport { WatchQueryOptions, ErrorPolicy } from './watchQueryOptions';\nimport { ObservableQuery, reobserveCacheFirst } from './ObservableQuery';\nimport { QueryListener } from './types';\nimport { FetchResult } from '../link/core';\nimport {\n  ObservableSubscription,\n  isNonEmptyArray,\n  graphQLResultHasError,\n  canUseWeakMap,\n} from '../utilities';\nimport {\n  NetworkStatus,\n  isNetworkRequestInFlight,\n} from './networkStatus';\nimport { ApolloError } from '../errors';\nimport { QueryManager } from './QueryManager';\n\nexport type QueryStoreValue = Pick<QueryInfo,\n  | \"variables\"\n  | \"networkStatus\"\n  | \"networkError\"\n  | \"graphQLErrors\"\n  >;\n\nexport const enum CacheWriteBehavior {\n  FORBID,\n  OVERWRITE,\n  MERGE,\n};\n\nconst destructiveMethodCounts = new (\n  canUseWeakMap ? WeakMap : Map\n)<ApolloCache<any>, number>();\n\nfunction wrapDestructiveCacheMethod(\n  cache: ApolloCache<any>,\n  methodName: keyof ApolloCache<any>,\n) {\n  const original = cache[methodName];\n  if (typeof original === \"function\") {\n    cache[methodName] = function () {\n      destructiveMethodCounts.set(\n        cache,\n        // The %1e15 allows the count to wrap around to 0 safely every\n        // quadrillion evictions, so there's no risk of overflow. To be\n        // clear, this is more of a pedantic principle than something\n        // that matters in any conceivable practical scenario.\n        (destructiveMethodCounts.get(cache)! + 1) % 1e15,\n      );\n      return original.apply(this, arguments);\n    };\n  }\n}\n\nfunction cancelNotifyTimeout(info: QueryInfo) {\n  if (info[\"notifyTimeout\"]) {\n    clearTimeout(info[\"notifyTimeout\"]);\n    info[\"notifyTimeout\"] = void 0;\n  }\n}\n\n// A QueryInfo object represents a single query managed by the\n// QueryManager, which tracks all QueryInfo objects by queryId in its\n// this.queries Map. QueryInfo objects store the latest results and errors\n// for the given query, and are responsible for reporting those results to\n// the corresponding ObservableQuery, via the QueryInfo.notify method.\n// Results are reported asynchronously whenever setDiff marks the\n// QueryInfo object as dirty, though a call to the QueryManager's\n// broadcastQueries method may trigger the notification before it happens\n// automatically. This class used to be a simple interface type without\n// any field privacy or meaningful methods, which is why it still has so\n// many public fields. The effort to lock down and simplify the QueryInfo\n// interface is ongoing, and further improvements are welcome.\nexport class QueryInfo {\n  listeners = new Set<QueryListener>();\n  document: DocumentNode | null = null;\n  lastRequestId = 1;\n  subscriptions = new Set<ObservableSubscription>();\n  variables?: Record<string, any>;\n  networkStatus?: NetworkStatus;\n  networkError?: Error | null;\n  graphQLErrors?: ReadonlyArray<GraphQLError>;\n  stopped = false;\n\n  private cache: ApolloCache<any>;\n\n  constructor(\n    queryManager: QueryManager<any>,\n    public readonly queryId = queryManager.generateQueryId(),\n  ) {\n    const cache = this.cache = queryManager.cache;\n\n    // Track how often cache.evict is called, since we want eviction to\n    // override the feud-stopping logic in the markResult method, by\n    // causing shouldWrite to return true. Wrapping the cache.evict method\n    // is a bit of a hack, but it saves us from having to make eviction\n    // counting an official part of the ApolloCache API.\n    if (!destructiveMethodCounts.has(cache)) {\n      destructiveMethodCounts.set(cache, 0);\n      wrapDestructiveCacheMethod(cache, \"evict\");\n      wrapDestructiveCacheMethod(cache, \"modify\");\n      wrapDestructiveCacheMethod(cache, \"reset\");\n    }\n  }\n\n  public init(query: {\n    document: DocumentNode;\n    variables: Record<string, any> | undefined,\n    // The initial networkStatus for this fetch, most often\n    // NetworkStatus.loading, but also possibly fetchMore, poll, refetch,\n    // or setVariables.\n    networkStatus?: NetworkStatus,\n    observableQuery?: ObservableQuery<any>;\n    lastRequestId?: number;\n  }): this {\n    let networkStatus = query.networkStatus || NetworkStatus.loading;\n    if (this.variables &&\n        this.networkStatus !== NetworkStatus.loading &&\n        !equal(this.variables, query.variables)) {\n      networkStatus = NetworkStatus.setVariables;\n    }\n\n    if (!equal(query.variables, this.variables)) {\n      this.lastDiff = void 0;\n    }\n\n    Object.assign(this, {\n      document: query.document,\n      variables: query.variables,\n      networkError: null,\n      graphQLErrors: this.graphQLErrors || [],\n      networkStatus,\n    });\n\n    if (query.observableQuery) {\n      this.setObservableQuery(query.observableQuery);\n    }\n\n    if (query.lastRequestId) {\n      this.lastRequestId = query.lastRequestId;\n    }\n\n    return this;\n  }\n\n  private dirty: boolean = false;\n\n  private notifyTimeout?: ReturnType<typeof setTimeout>;\n\n  reset() {\n    cancelNotifyTimeout(this);\n    this.dirty = false;\n  }\n\n  getDiff(variables = this.variables): Cache.DiffResult<any> {\n    const options = this.getDiffOptions(variables);\n\n    if (this.lastDiff && equal(options, this.lastDiff.options)) {\n      return this.lastDiff.diff;\n    }\n\n    this.updateWatch(this.variables = variables);\n\n    const oq = this.observableQuery;\n    if (oq && oq.options.fetchPolicy === \"no-cache\") {\n      return { complete: false };\n    }\n\n    const diff = this.cache.diff(options);\n    this.updateLastDiff(diff, options);\n    return diff;\n  }\n\n  private lastDiff?: {\n    diff: Cache.DiffResult<any>,\n    options: Cache.DiffOptions,\n  };\n\n  private updateLastDiff(\n    diff: Cache.DiffResult<any> | null,\n    options?: Cache.DiffOptions,\n  ) {\n    this.lastDiff = diff ? {\n      diff,\n      options: options || this.getDiffOptions(),\n    } : void 0;\n  }\n\n  private getDiffOptions(variables = this.variables): Cache.DiffOptions {\n    return {\n      query: this.document!,\n      variables,\n      returnPartialData: true,\n      optimistic: true,\n      canonizeResults: this.observableQuery?.options.canonizeResults,\n    };\n  }\n\n  setDiff(diff: Cache.DiffResult<any> | null) {\n    const oldDiff = this.lastDiff && this.lastDiff.diff;\n    this.updateLastDiff(diff);\n    if (!this.dirty &&\n        !equal(oldDiff && oldDiff.result,\n               diff && diff.result)) {\n      this.dirty = true;\n      if (!this.notifyTimeout) {\n        this.notifyTimeout = setTimeout(() => this.notify(), 0);\n      }\n    }\n  }\n\n  public readonly observableQuery: ObservableQuery<any> | null = null;\n  private oqListener?: QueryListener;\n\n  setObservableQuery(oq: ObservableQuery<any> | null) {\n    if (oq === this.observableQuery) return;\n\n    if (this.oqListener) {\n      this.listeners.delete(this.oqListener);\n    }\n\n    (this as any).observableQuery = oq;\n\n    if (oq) {\n      oq[\"queryInfo\"] = this;\n      this.listeners.add(this.oqListener = () => {\n        const diff = this.getDiff();\n        if (diff.fromOptimisticTransaction) {\n          // If this diff came from an optimistic transaction, deliver the\n          // current cache data to the ObservableQuery, but don't perform a\n          // reobservation, since oq.reobserveCacheFirst might make a network\n          // request, and we never want to trigger network requests in the\n          // middle of optimistic updates.\n          oq[\"observe\"]();\n        } else {\n          // Otherwise, make the ObservableQuery \"reobserve\" the latest data\n          // using a temporary fetch policy of \"cache-first\", so complete cache\n          // results have a chance to be delivered without triggering additional\n          // network requests, even when options.fetchPolicy is \"network-only\"\n          // or \"cache-and-network\". All other fetch policies are preserved by\n          // this method, and are handled by calling oq.reobserve(). If this\n          // reobservation is spurious, isDifferentFromLastResult still has a\n          // chance to catch it before delivery to ObservableQuery subscribers.\n          reobserveCacheFirst(oq);\n        }\n      });\n    } else {\n      delete this.oqListener;\n    }\n  }\n\n  notify() {\n    cancelNotifyTimeout(this);\n\n    if (this.shouldNotify()) {\n      this.listeners.forEach(listener => listener(this));\n    }\n\n    this.dirty = false;\n  }\n\n  private shouldNotify() {\n    if (!this.dirty || !this.listeners.size) {\n      return false;\n    }\n\n    if (isNetworkRequestInFlight(this.networkStatus) &&\n        this.observableQuery) {\n      const { fetchPolicy } = this.observableQuery.options;\n      if (fetchPolicy !== \"cache-only\" &&\n          fetchPolicy !== \"cache-and-network\") {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public stop() {\n    if (!this.stopped) {\n      this.stopped = true;\n\n      // Cancel the pending notify timeout\n      this.reset();\n\n      this.cancel();\n      // Revert back to the no-op version of cancel inherited from\n      // QueryInfo.prototype.\n      this.cancel = QueryInfo.prototype.cancel;\n\n      this.subscriptions.forEach(sub => sub.unsubscribe());\n\n      const oq = this.observableQuery;\n      if (oq) oq.stopPolling();\n    }\n  }\n\n  // This method is a no-op by default, until/unless overridden by the\n  // updateWatch method.\n  private cancel() {}\n\n  private lastWatch?: Cache.WatchOptions;\n\n  private updateWatch(variables = this.variables) {\n    const oq = this.observableQuery;\n    if (oq && oq.options.fetchPolicy === \"no-cache\") {\n      return;\n    }\n\n    const watchOptions: Cache.WatchOptions = {\n      // Although this.getDiffOptions returns Cache.DiffOptions instead of\n      // Cache.WatchOptions, all the overlapping options should be the same, so\n      // we can reuse getDiffOptions here, for consistency.\n      ...this.getDiffOptions(variables),\n      watcher: this,\n      callback: diff => this.setDiff(diff),\n    };\n\n    if (!this.lastWatch ||\n        !equal(watchOptions, this.lastWatch)) {\n      this.cancel();\n      this.cancel = this.cache.watch(this.lastWatch = watchOptions);\n    }\n  }\n\n  private lastWrite?: {\n    result: FetchResult<any>;\n    variables: WatchQueryOptions[\"variables\"];\n    dmCount: number | undefined;\n  };\n\n  public resetLastWrite() {\n    this.lastWrite = void 0;\n  }\n\n  private shouldWrite(\n    result: FetchResult<any>,\n    variables: WatchQueryOptions[\"variables\"],\n  ) {\n    const { lastWrite } = this;\n    return !(\n      lastWrite &&\n      // If cache.evict has been called since the last time we wrote this\n      // data into the cache, there's a chance writing this result into\n      // the cache will repair what was evicted.\n      lastWrite.dmCount === destructiveMethodCounts.get(this.cache) &&\n      equal(variables, lastWrite.variables) &&\n      equal(result.data, lastWrite.result.data)\n    );\n  }\n\n  public markResult<T>(\n    result: FetchResult<T>,\n    document: DocumentNode,\n    options: Pick<WatchQueryOptions,\n      | \"variables\"\n      | \"fetchPolicy\"\n      | \"errorPolicy\">,\n    cacheWriteBehavior: CacheWriteBehavior,\n  ) {\n    const merger = new DeepMerger();\n    const graphQLErrors = isNonEmptyArray(result.errors)\n      ? result.errors.slice(0)\n      : [];\n\n    // Cancel the pending notify timeout (if it exists) to prevent extraneous network\n    // requests. To allow future notify timeouts, diff and dirty are reset as well.\n    this.reset();\n\n    if ('incremental' in result && isNonEmptyArray(result.incremental)) {\n      const mergedData = mergeIncrementalData(this.getDiff().result, result);\n      result.data = mergedData;\n\n    // Detect the first chunk of a deferred query and merge it with existing\n    // cache data. This ensures a `cache-first` fetch policy that returns\n    // partial cache data or a `cache-and-network` fetch policy that already\n    // has full data in the cache does not complain when trying to merge the\n    // initial deferred server data with existing cache data.\n    } else if ('hasNext' in result && result.hasNext) {\n      const diff = this.getDiff();\n      result.data = merger.merge(diff.result, result.data)\n    }\n\n    this.graphQLErrors = graphQLErrors;\n\n    if (options.fetchPolicy === 'no-cache') {\n      this.updateLastDiff(\n        { result: result.data, complete: true },\n        this.getDiffOptions(options.variables),\n      );\n\n    } else if (cacheWriteBehavior !== CacheWriteBehavior.FORBID) {\n      if (shouldWriteResult(result, options.errorPolicy)) {\n        // Using a transaction here so we have a chance to read the result\n        // back from the cache before the watch callback fires as a result\n        // of writeQuery, so we can store the new diff quietly and ignore\n        // it when we receive it redundantly from the watch callback.\n        this.cache.performTransaction(cache => {\n          if (this.shouldWrite(result, options.variables)) {\n            cache.writeQuery({\n              query: document,\n              data: result.data as T,\n              variables: options.variables,\n              overwrite: cacheWriteBehavior === CacheWriteBehavior.OVERWRITE,\n            });\n\n            this.lastWrite = {\n              result,\n              variables: options.variables,\n              dmCount: destructiveMethodCounts.get(this.cache),\n            };\n          } else {\n            // If result is the same as the last result we received from\n            // the network (and the variables match too), avoid writing\n            // result into the cache again. The wisdom of skipping this\n            // cache write is far from obvious, since any cache write\n            // could be the one that puts the cache back into a desired\n            // state, fixing corruption or missing data. However, if we\n            // always write every network result into the cache, we enable\n            // feuds between queries competing to update the same data in\n            // incompatible ways, which can lead to an endless cycle of\n            // cache broadcasts and useless network requests. As with any\n            // feud, eventually one side must step back from the brink,\n            // letting the other side(s) have the last word(s). There may\n            // be other points where we could break this cycle, such as\n            // silencing the broadcast for cache.writeQuery (not a good\n            // idea, since it just delays the feud a bit) or somehow\n            // avoiding the network request that just happened (also bad,\n            // because the server could return useful new data). All\n            // options considered, skipping this cache write seems to be\n            // the least damaging place to break the cycle, because it\n            // reflects the intuition that we recently wrote this exact\n            // result into the cache, so the cache *should* already/still\n            // contain this data. If some other query has clobbered that\n            // data in the meantime, that's too bad, but there will be no\n            // winners if every query blindly reverts to its own version\n            // of the data. This approach also gives the network a chance\n            // to return new data, which will be written into the cache as\n            // usual, notifying only those queries that are directly\n            // affected by the cache updates, as usual. In the future, an\n            // even more sophisticated cache could perhaps prevent or\n            // mitigate the clobbering somehow, but that would make this\n            // particular cache write even less important, and thus\n            // skipping it would be even safer than it is today.\n            if (this.lastDiff &&\n                this.lastDiff.diff.complete) {\n              // Reuse data from the last good (complete) diff that we\n              // received, when possible.\n              result.data = this.lastDiff.diff.result;\n              return;\n            }\n            // If the previous this.diff was incomplete, fall through to\n            // re-reading the latest data with cache.diff, below.\n          }\n\n          const diffOptions = this.getDiffOptions(options.variables);\n          const diff = cache.diff<T>(diffOptions);\n\n          // In case the QueryManager stops this QueryInfo before its\n          // results are delivered, it's important to avoid restarting the\n          // cache watch when markResult is called.\n          if (!this.stopped) {\n            // Any time we're about to update this.diff, we need to make\n            // sure we've started watching the cache.\n            this.updateWatch(options.variables);\n          }\n\n          // If we're allowed to write to the cache, and we can read a\n          // complete result from the cache, update result.data to be the\n          // result from the cache, rather than the raw network result.\n          // Set without setDiff to avoid triggering a notify call, since\n          // we have other ways of notifying for this result.\n          this.updateLastDiff(diff, diffOptions);\n          if (diff.complete) {\n            result.data = diff.result;\n          }\n        });\n      } else {\n        this.lastWrite = void 0;\n      }\n    }\n  }\n\n  public markReady() {\n    this.networkError = null;\n    return this.networkStatus = NetworkStatus.ready;\n  }\n\n  public markError(error: ApolloError) {\n    this.networkStatus = NetworkStatus.error;\n    this.lastWrite = void 0;\n\n    this.reset();\n\n    if (error.graphQLErrors) {\n      this.graphQLErrors = error.graphQLErrors;\n    }\n\n    if (error.networkError) {\n      this.networkError = error.networkError;\n    }\n\n    return error;\n  }\n}\n\nexport function shouldWriteResult<T>(\n  result: FetchResult<T>,\n  errorPolicy: ErrorPolicy = \"none\",\n) {\n  const ignoreErrors =\n    errorPolicy === \"ignore\" ||\n    errorPolicy === \"all\";\n  let writeWithErrors = !graphQLResultHasError(result);\n  if (!writeWithErrors && ignoreErrors && result.data) {\n    writeWithErrors = true;\n  }\n  return writeWithErrors;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}