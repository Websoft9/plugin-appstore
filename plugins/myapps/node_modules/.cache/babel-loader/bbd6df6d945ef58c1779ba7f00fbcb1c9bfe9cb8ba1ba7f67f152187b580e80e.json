{"ast":null,"code":"import _slicedToArray from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/NotificationDrawer/notification-drawer';\nimport maxLines from '@patternfly/react-tokens/dist/esm/c_notification_drawer__group_toggle_title_max_lines';\nimport { Badge } from '../Badge';\nimport { Tooltip } from '../Tooltip';\nexport var NotificationDrawerGroup = function NotificationDrawerGroup(_a) {\n  var children = _a.children,\n    _a$className = _a.className,\n    className = _a$className === void 0 ? '' : _a$className,\n    count = _a.count,\n    isExpanded = _a.isExpanded,\n    _a$isRead = _a.isRead,\n    isRead = _a$isRead === void 0 ? false : _a$isRead,\n    _a$onExpand = _a.onExpand,\n    onExpand = _a$onExpand === void 0 ? function (event, expanded) {\n      return undefined;\n    } : _a$onExpand,\n    title = _a.title,\n    _a$truncateTitle = _a.truncateTitle,\n    truncateTitle = _a$truncateTitle === void 0 ? 0 : _a$truncateTitle,\n    tooltipPosition = _a.tooltipPosition,\n    _a$headingLevel = _a.headingLevel,\n    HeadingLevel = _a$headingLevel === void 0 ? 'h1' : _a$headingLevel,\n    props = __rest(_a, [\"children\", \"className\", \"count\", \"isExpanded\", \"isRead\", \"onExpand\", \"title\", \"truncateTitle\", \"tooltipPosition\", \"headingLevel\"]);\n  var titleRef = React.useRef(null);\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    isTooltipVisible = _React$useState2[0],\n    setIsTooltipVisible = _React$useState2[1];\n  React.useEffect(function () {\n    // Title will always truncate on overflow regardless of truncateTitle prop\n    var showTooltip = titleRef.current && titleRef.current.offsetHeight < titleRef.current.scrollHeight;\n    if (isTooltipVisible !== showTooltip) {\n      setIsTooltipVisible(showTooltip);\n    }\n    if (!titleRef.current || !truncateTitle) {\n      return;\n    }\n    titleRef.current.style.setProperty(maxLines.name, truncateTitle.toString());\n  }, [titleRef, truncateTitle, isTooltipVisible]);\n  var Title = React.createElement(\"div\", Object.assign({}, isTooltipVisible && {\n    tabIndex: 0\n  }, {\n    ref: titleRef,\n    className: css(styles.notificationDrawerGroupToggleTitle)\n  }), title);\n  return React.createElement(\"section\", Object.assign({}, props, {\n    className: css(styles.notificationDrawerGroup, isExpanded && styles.modifiers.expanded, className)\n  }), React.createElement(HeadingLevel, null, React.createElement(\"button\", {\n    className: css(styles.notificationDrawerGroupToggle),\n    \"aria-expanded\": isExpanded,\n    onClick: function onClick(e) {\n      return onExpand(e, !isExpanded);\n    },\n    onKeyDown: function onKeyDown(e) {\n      if (e.key === 'Enter' || e.key === ' ') {\n        e.preventDefault();\n        onExpand(e, !isExpanded);\n      }\n    }\n  }, isTooltipVisible ? React.createElement(Tooltip, {\n    content: title,\n    position: tooltipPosition\n  }, Title) : Title, React.createElement(\"div\", {\n    className: css(styles.notificationDrawerGroupToggleCount)\n  }, React.createElement(Badge, {\n    isRead: isRead\n  }, count)), React.createElement(\"span\", {\n    className: \"pf-c-notification-drawer__group-toggle-icon\"\n  }, React.createElement(AngleRightIcon, null)))), children);\n};\nNotificationDrawerGroup.displayName = 'NotificationDrawerGroup';","map":{"version":3,"names":["React","AngleRightIcon","css","styles","maxLines","Badge","Tooltip","NotificationDrawerGroup","_a","children","_a$className","className","count","isExpanded","_a$isRead","isRead","_a$onExpand","onExpand","event","expanded","undefined","title","_a$truncateTitle","truncateTitle","tooltipPosition","_a$headingLevel","headingLevel","HeadingLevel","props","__rest","titleRef","useRef","_React$useState","useState","_React$useState2","_slicedToArray","isTooltipVisible","setIsTooltipVisible","useEffect","showTooltip","current","offsetHeight","scrollHeight","style","setProperty","name","toString","Title","createElement","Object","assign","tabIndex","ref","notificationDrawerGroupToggleTitle","notificationDrawerGroup","modifiers","notificationDrawerGroupToggle","onClick","e","onKeyDown","key","preventDefault","content","position","notificationDrawerGroupToggleCount","displayName"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@patternfly/react-core/src/components/NotificationDrawer/NotificationDrawerGroup.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/NotificationDrawer/notification-drawer';\nimport maxLines from '@patternfly/react-tokens/dist/esm/c_notification_drawer__group_toggle_title_max_lines';\n\nimport { Badge } from '../Badge';\nimport { Tooltip, TooltipPosition } from '../Tooltip';\n\nexport interface NotificationDrawerGroupProps extends Omit<React.HTMLProps<HTMLDivElement>, 'title'> {\n  /**  Content rendered inside the group */\n  children?: React.ReactNode;\n  /**  Additional classes added to the group */\n  className?: string;\n  /**  Notification drawer group count */\n  count: number;\n  /**  Adds styling to the group to indicate expanded state */\n  isExpanded: boolean;\n  /**  Adds styling to the group to indicate whether it has been read */\n  isRead?: boolean;\n  /**  Callback for when group button is clicked to expand */\n  onExpand?: (event: any, value: boolean) => void;\n  /**  Notification drawer group title */\n  title: string | React.ReactNode;\n  /** Truncate title to number of lines */\n  truncateTitle?: number;\n  /** Position of the tooltip which is displayed if text is truncated */\n  tooltipPosition?:\n    | TooltipPosition\n    | 'auto'\n    | 'top'\n    | 'bottom'\n    | 'left'\n    | 'right'\n    | 'top-start'\n    | 'top-end'\n    | 'bottom-start'\n    | 'bottom-end'\n    | 'left-start'\n    | 'left-end'\n    | 'right-start'\n    | 'right-end';\n  /** Sets the heading level to use for the group title. Default is h1. */\n  headingLevel?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';\n}\n\nexport const NotificationDrawerGroup: React.FunctionComponent<NotificationDrawerGroupProps> = ({\n  children,\n  className = '',\n  count,\n  isExpanded,\n  isRead = false,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onExpand = (event: any, expanded: boolean) => undefined as any,\n  title,\n  truncateTitle = 0,\n  tooltipPosition,\n  headingLevel: HeadingLevel = 'h1',\n  ...props\n}: NotificationDrawerGroupProps) => {\n  const titleRef = React.useRef(null);\n  const [isTooltipVisible, setIsTooltipVisible] = React.useState(false);\n  React.useEffect(() => {\n    // Title will always truncate on overflow regardless of truncateTitle prop\n    const showTooltip = titleRef.current && titleRef.current.offsetHeight < titleRef.current.scrollHeight;\n    if (isTooltipVisible !== showTooltip) {\n      setIsTooltipVisible(showTooltip);\n    }\n    if (!titleRef.current || !truncateTitle) {\n      return;\n    }\n    titleRef.current.style.setProperty(maxLines.name, truncateTitle.toString());\n  }, [titleRef, truncateTitle, isTooltipVisible]);\n\n  const Title = (\n    <div\n      {...(isTooltipVisible && { tabIndex: 0 })}\n      ref={titleRef}\n      className={css(styles.notificationDrawerGroupToggleTitle)}\n    >\n      {title}\n    </div>\n  );\n\n  return (\n    <section\n      {...props}\n      className={css(styles.notificationDrawerGroup, isExpanded && styles.modifiers.expanded, className)}\n    >\n      <HeadingLevel>\n        <button\n          className={css(styles.notificationDrawerGroupToggle)}\n          aria-expanded={isExpanded}\n          onClick={e => onExpand(e, !isExpanded)}\n          onKeyDown={e => {\n            if (e.key === 'Enter' || e.key === ' ') {\n              e.preventDefault();\n              onExpand(e, !isExpanded);\n            }\n          }}\n        >\n          {isTooltipVisible ? (\n            <Tooltip content={title} position={tooltipPosition}>\n              {Title}\n            </Tooltip>\n          ) : (\n            Title\n          )}\n          <div className={css(styles.notificationDrawerGroupToggleCount)}>\n            <Badge isRead={isRead}>{count}</Badge>\n          </div>\n\n          <span className=\"pf-c-notification-drawer__group-toggle-icon\">\n            <AngleRightIcon />\n          </span>\n        </button>\n      </HeadingLevel>\n      {children}\n    </section>\n  );\n};\nNotificationDrawerGroup.displayName = 'NotificationDrawerGroup';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}