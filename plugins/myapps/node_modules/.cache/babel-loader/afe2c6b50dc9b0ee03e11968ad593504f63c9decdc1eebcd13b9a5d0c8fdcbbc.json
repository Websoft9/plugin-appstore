{"ast":null,"code":"import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Wizard/wizard';\nimport { css } from '@patternfly/react-styles';\nimport { WizardDrawerWrapper } from './WizardDrawerWrapper';\nimport { Drawer, DrawerContent } from '../Drawer';\nexport var WizardBody = function WizardBody(_ref) {\n  var children = _ref.children,\n    _ref$hasNoBodyPadding = _ref.hasNoBodyPadding,\n    hasNoBodyPadding = _ref$hasNoBodyPadding === void 0 ? false : _ref$hasNoBodyPadding,\n    ariaLabel = _ref['aria-label'],\n    ariaLabelledBy = _ref['aria-labelledby'],\n    _ref$mainComponent = _ref.mainComponent,\n    mainComponent = _ref$mainComponent === void 0 ? 'div' : _ref$mainComponent,\n    hasDrawer = _ref.hasDrawer,\n    isDrawerExpanded = _ref.isDrawerExpanded,\n    onExpandDrawer = _ref.onExpandDrawer,\n    activeStep = _ref.activeStep;\n  var MainComponent = mainComponent;\n  return React.createElement(MainComponent, {\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    className: css(styles.wizardMain)\n  }, React.createElement(WizardDrawerWrapper, {\n    hasDrawer: hasDrawer && activeStep.drawerPanelContent,\n    wrapper: function wrapper(children) {\n      return React.createElement(Drawer, {\n        isInline: true,\n        isExpanded: isDrawerExpanded,\n        onExpand: onExpandDrawer\n      }, React.createElement(DrawerContent, {\n        panelContent: activeStep.drawerPanelContent\n      }, children));\n    }\n  }, React.createElement(\"div\", {\n    className: css(styles.wizardMainBody, hasNoBodyPadding && styles.modifiers.noPadding)\n  }, children)));\n};\nWizardBody.displayName = 'WizardBody';","map":{"version":3,"names":["React","styles","css","WizardDrawerWrapper","Drawer","DrawerContent","WizardBody","_ref","children","_ref$hasNoBodyPadding","hasNoBodyPadding","ariaLabel","ariaLabelledBy","_ref$mainComponent","mainComponent","hasDrawer","isDrawerExpanded","onExpandDrawer","activeStep","MainComponent","createElement","className","wizardMain","drawerPanelContent","wrapper","isInline","isExpanded","onExpand","panelContent","wizardMainBody","modifiers","noPadding","displayName"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@patternfly/react-core/src/components/Wizard/WizardBody.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Wizard/wizard';\nimport { css } from '@patternfly/react-styles';\nimport { WizardDrawerWrapper } from './WizardDrawerWrapper';\nimport { Drawer, DrawerContent } from '../Drawer';\nimport { WizardStep } from './Wizard';\n\nexport interface WizardBodyProps {\n  /** Anything that can be rendered in the Wizard body */\n  children: any;\n  /** Set to true to remove the default body padding */\n  hasNoBodyPadding: boolean;\n  /** An aria-label to use for the main element */\n  'aria-label'?: string;\n  /** Sets the aria-labelledby attribute for the main element */\n  'aria-labelledby': string;\n  /** Component used as the primary content container */\n  mainComponent?: React.ElementType;\n  /** The currently active WizardStep */\n  activeStep: WizardStep;\n  hasDrawer?: boolean;\n  /** Flag indicating the wizard drawer is expanded */\n  isDrawerExpanded?: boolean;\n  /** Callback function for when the drawer is toggled */\n  onExpandDrawer?: () => void;\n}\n\nexport const WizardBody: React.FunctionComponent<WizardBodyProps> = ({\n  children,\n  hasNoBodyPadding = false,\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelledBy,\n  mainComponent = 'div',\n  hasDrawer,\n  isDrawerExpanded,\n  onExpandDrawer,\n  activeStep\n}: WizardBodyProps) => {\n  const MainComponent = mainComponent;\n  return (\n    <MainComponent aria-label={ariaLabel} aria-labelledby={ariaLabelledBy} className={css(styles.wizardMain)}>\n      <WizardDrawerWrapper\n        hasDrawer={hasDrawer && activeStep.drawerPanelContent}\n        wrapper={(children: React.ReactNode) => (\n          <Drawer isInline isExpanded={isDrawerExpanded} onExpand={onExpandDrawer}>\n            <DrawerContent panelContent={activeStep.drawerPanelContent}>{children}</DrawerContent>\n          </Drawer>\n        )}\n      >\n        <div className={css(styles.wizardMainBody, hasNoBodyPadding && styles.modifiers.noPadding)}>{children}</div>\n      </WizardDrawerWrapper>\n    </MainComponent>\n  );\n};\nWizardBody.displayName = 'WizardBody';\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,MAAM,MAAM,uDAAuD;AAC1E,SAASC,GAAG,QAAQ,0BAA0B;AAC9C,SAASC,mBAAmB,QAAQ,uBAAuB;AAC3D,SAASC,MAAM,EAAEC,aAAa,QAAQ,WAAW;AAuBjD,OAAO,IAAMC,UAAU,GAA6C,SAAvDA,UAAUA,CAAAC,IAAA,EAUD;EAAA,IATpBC,QAAQ,GAAAD,IAAA,CAARC,QAAQ;IAAAC,qBAAA,GAAAF,IAAA,CACRG,gBAAgB;IAAhBA,gBAAgB,GAAAD,qBAAA,cAAG,KAAK,GAAAA,qBAAA;IACVE,SAAS,GAAAJ,IAAA,CAAvB,YAAY;IACOK,cAAc,GAAAL,IAAA,CAAjC,iBAAiB;IAAAM,kBAAA,GAAAN,IAAA,CACjBO,aAAa;IAAbA,aAAa,GAAAD,kBAAA,cAAG,KAAK,GAAAA,kBAAA;IACrBE,SAAS,GAAAR,IAAA,CAATQ,SAAS;IACTC,gBAAgB,GAAAT,IAAA,CAAhBS,gBAAgB;IAChBC,cAAc,GAAAV,IAAA,CAAdU,cAAc;IACdC,UAAU,GAAAX,IAAA,CAAVW,UAAU;EAEV,IAAMC,aAAa,GAAGL,aAAa;EACnC,OACEd,KAAA,CAAAoB,aAAA,CAACD,aAAa;IAAA,cAAaR,SAAS;IAAA,mBAAmBC,cAAc;IAAES,SAAS,EAAEnB,GAAG,CAACD,MAAM,CAACqB,UAAU;EAAC,GACtGtB,KAAA,CAAAoB,aAAA,CAACjB,mBAAmB;IAClBY,SAAS,EAAEA,SAAS,IAAIG,UAAU,CAACK,kBAAkB;IACrDC,OAAO,EAAE,SAAAA,QAAChB,QAAyB;MAAA,OACjCR,KAAA,CAAAoB,aAAA,CAAChB,MAAM;QAACqB,QAAQ;QAACC,UAAU,EAAEV,gBAAgB;QAAEW,QAAQ,EAAEV;MAAc,GACrEjB,KAAA,CAAAoB,aAAA,CAACf,aAAa;QAACuB,YAAY,EAAEV,UAAU,CAACK;MAAkB,GAAGf,QAAQ,CAAiB,CAC/E;IAAA;EACV,GAEDR,KAAA,CAAAoB,aAAA;IAAKC,SAAS,EAAEnB,GAAG,CAACD,MAAM,CAAC4B,cAAc,EAAEnB,gBAAgB,IAAIT,MAAM,CAAC6B,SAAS,CAACC,SAAS;EAAC,GAAGvB,QAAQ,CAAO,CACxF,CACR;AAEpB,CAAC;AACDF,UAAU,CAAC0B,WAAW,GAAG,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}