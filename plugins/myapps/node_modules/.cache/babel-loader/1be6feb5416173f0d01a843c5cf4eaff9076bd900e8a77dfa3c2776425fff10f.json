{"ast":null,"code":"import \"../../utilities/globals/index.js\";\nimport { useState, useRef, useEffect } from 'react';\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport { equal } from '@wry/equality';\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nexport function useSubscription(subscription, options) {\n  var hasIssuedDeprecationWarningRef = useRef(false);\n  var client = useApolloClient(options === null || options === void 0 ? void 0 : options.client);\n  verifyDocumentType(subscription, DocumentType.Subscription);\n  var _a = useState({\n      loading: !(options === null || options === void 0 ? void 0 : options.skip),\n      error: void 0,\n      data: void 0,\n      variables: options === null || options === void 0 ? void 0 : options.variables\n    }),\n    result = _a[0],\n    setResult = _a[1];\n  if (!hasIssuedDeprecationWarningRef.current) {\n    hasIssuedDeprecationWarningRef.current = true;\n    if (options === null || options === void 0 ? void 0 : options.onSubscriptionData) {\n      __DEV__ && invariant.warn(options.onData ? \"'useSubscription' supports only the 'onSubscriptionData' or 'onData' option, but not both. Only the 'onData' option will be used.\" : \"'onSubscriptionData' is deprecated and will be removed in a future major version. Please use the 'onData' option instead.\");\n    }\n    if (options === null || options === void 0 ? void 0 : options.onSubscriptionComplete) {\n      __DEV__ && invariant.warn(options.onComplete ? \"'useSubscription' supports only the 'onSubscriptionComplete' or 'onComplete' option, but not both. Only the 'onComplete' option will be used.\" : \"'onSubscriptionComplete' is deprecated and will be removed in a future major version. Please use the 'onComplete' option instead.\");\n    }\n  }\n  var _b = useState(function () {\n      if (options === null || options === void 0 ? void 0 : options.skip) {\n        return null;\n      }\n      return client.subscribe({\n        query: subscription,\n        variables: options === null || options === void 0 ? void 0 : options.variables,\n        fetchPolicy: options === null || options === void 0 ? void 0 : options.fetchPolicy,\n        context: options === null || options === void 0 ? void 0 : options.context\n      });\n    }),\n    observable = _b[0],\n    setObservable = _b[1];\n  var canResetObservableRef = useRef(false);\n  useEffect(function () {\n    return function () {\n      canResetObservableRef.current = true;\n    };\n  }, []);\n  var ref = useRef({\n    client: client,\n    subscription: subscription,\n    options: options\n  });\n  useEffect(function () {\n    var _a, _b, _c, _d;\n    var shouldResubscribe = options === null || options === void 0 ? void 0 : options.shouldResubscribe;\n    if (typeof shouldResubscribe === 'function') {\n      shouldResubscribe = !!shouldResubscribe(options);\n    }\n    if (options === null || options === void 0 ? void 0 : options.skip) {\n      if (!(options === null || options === void 0 ? void 0 : options.skip) !== !((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.skip) || canResetObservableRef.current) {\n        setResult({\n          loading: false,\n          data: void 0,\n          error: void 0,\n          variables: options === null || options === void 0 ? void 0 : options.variables\n        });\n        setObservable(null);\n        canResetObservableRef.current = false;\n      }\n    } else if (shouldResubscribe !== false && (client !== ref.current.client || subscription !== ref.current.subscription || (options === null || options === void 0 ? void 0 : options.fetchPolicy) !== ((_b = ref.current.options) === null || _b === void 0 ? void 0 : _b.fetchPolicy) || !(options === null || options === void 0 ? void 0 : options.skip) !== !((_c = ref.current.options) === null || _c === void 0 ? void 0 : _c.skip) || !equal(options === null || options === void 0 ? void 0 : options.variables, (_d = ref.current.options) === null || _d === void 0 ? void 0 : _d.variables)) || canResetObservableRef.current) {\n      setResult({\n        loading: true,\n        data: void 0,\n        error: void 0,\n        variables: options === null || options === void 0 ? void 0 : options.variables\n      });\n      setObservable(client.subscribe({\n        query: subscription,\n        variables: options === null || options === void 0 ? void 0 : options.variables,\n        fetchPolicy: options === null || options === void 0 ? void 0 : options.fetchPolicy,\n        context: options === null || options === void 0 ? void 0 : options.context\n      }));\n      canResetObservableRef.current = false;\n    }\n    Object.assign(ref.current, {\n      client: client,\n      subscription: subscription,\n      options: options\n    });\n  }, [client, subscription, options, canResetObservableRef.current]);\n  useEffect(function () {\n    if (!observable) {\n      return;\n    }\n    var subscriptionStopped = false;\n    var subscription = observable.subscribe({\n      next: function next(fetchResult) {\n        var _a, _b;\n        if (subscriptionStopped) {\n          return;\n        }\n        var result = {\n          loading: false,\n          data: fetchResult.data,\n          error: void 0,\n          variables: options === null || options === void 0 ? void 0 : options.variables\n        };\n        setResult(result);\n        if ((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onData) {\n          ref.current.options.onData({\n            client: client,\n            data: result\n          });\n        } else if ((_b = ref.current.options) === null || _b === void 0 ? void 0 : _b.onSubscriptionData) {\n          ref.current.options.onSubscriptionData({\n            client: client,\n            subscriptionData: result\n          });\n        }\n      },\n      error: function error(_error) {\n        var _a, _b;\n        if (!subscriptionStopped) {\n          setResult({\n            loading: false,\n            data: void 0,\n            error: _error,\n            variables: options === null || options === void 0 ? void 0 : options.variables\n          });\n          (_b = (_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onError) === null || _b === void 0 ? void 0 : _b.call(_a, _error);\n        }\n        ;\n      },\n      complete: function complete() {\n        var _a, _b;\n        if (!subscriptionStopped) {\n          if ((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onComplete) {\n            ref.current.options.onComplete();\n          } else if ((_b = ref.current.options) === null || _b === void 0 ? void 0 : _b.onSubscriptionComplete) {\n            ref.current.options.onSubscriptionComplete();\n          }\n        }\n      }\n    });\n    return function () {\n      subscriptionStopped = true;\n      setTimeout(function () {\n        subscription.unsubscribe();\n      });\n    };\n  }, [observable]);\n  return result;\n}","map":{"version":3,"names":["useState","useRef","useEffect","invariant","equal","DocumentType","verifyDocumentType","useApolloClient","useSubscription","subscription","options","hasIssuedDeprecationWarningRef","client","Subscription","_a","loading","skip","error","data","variables","result","setResult","current","onSubscriptionData","__DEV__","warn","onData","onSubscriptionComplete","onComplete","_b","subscribe","query","fetchPolicy","context","observable","setObservable","canResetObservableRef","ref","shouldResubscribe","_c","_d","Object","assign","subscriptionStopped","next","fetchResult","subscriptionData","onError","call","complete","setTimeout","unsubscribe"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@apollo/src/react/hooks/useSubscription.ts"],"sourcesContent":["import '../../utilities/globals';\nimport { useState, useRef, useEffect } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport { invariant } from '../../utilities/globals'\nimport { equal } from '@wry/equality';\n\nimport { DocumentType, verifyDocumentType } from '../parser';\nimport {\n  SubscriptionHookOptions,\n  SubscriptionResult\n} from '../types/types';\nimport { OperationVariables } from '../../core';\nimport { useApolloClient } from './useApolloClient';\n\nexport function useSubscription<TData = any, TVariables extends OperationVariables = OperationVariables>(\n  subscription: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: SubscriptionHookOptions<TData, TVariables>,\n) {\n  const hasIssuedDeprecationWarningRef = useRef(false);\n  const client = useApolloClient(options?.client);\n  verifyDocumentType(subscription, DocumentType.Subscription);\n  const [result, setResult] = useState<SubscriptionResult<TData>>({\n    loading: !options?.skip,\n    error: void 0,\n    data: void 0,\n    variables: options?.variables,\n  });\n\n  if (!hasIssuedDeprecationWarningRef.current) {\n    hasIssuedDeprecationWarningRef.current = true;\n\n    if (options?.onSubscriptionData) {\n      invariant.warn(\n        options.onData\n          ? \"'useSubscription' supports only the 'onSubscriptionData' or 'onData' option, but not both. Only the 'onData' option will be used.\"\n          : \"'onSubscriptionData' is deprecated and will be removed in a future major version. Please use the 'onData' option instead.\"\n      );\n    }\n\n    if (options?.onSubscriptionComplete) {\n      invariant.warn(\n        options.onComplete\n          ? \"'useSubscription' supports only the 'onSubscriptionComplete' or 'onComplete' option, but not both. Only the 'onComplete' option will be used.\"\n          : \"'onSubscriptionComplete' is deprecated and will be removed in a future major version. Please use the 'onComplete' option instead.\"\n      );\n    }\n  }\n\n  const [observable, setObservable] = useState(() => {\n    if (options?.skip) {\n      return null;\n    }\n\n    return client.subscribe({\n      query: subscription,\n      variables: options?.variables,\n      fetchPolicy: options?.fetchPolicy,\n      context: options?.context,\n    });\n  });\n\n  const canResetObservableRef = useRef(false);\n  useEffect(() => {\n    return () => {\n      canResetObservableRef.current = true;\n    };\n  }, []);\n\n  const ref = useRef({ client, subscription, options });\n  useEffect(() => {\n    let shouldResubscribe = options?.shouldResubscribe;\n    if (typeof shouldResubscribe === 'function') {\n      shouldResubscribe = !!shouldResubscribe(options!);\n    }\n\n    if (options?.skip) {\n      if (!options?.skip !== !ref.current.options?.skip || canResetObservableRef.current) {\n        setResult({\n          loading: false,\n          data: void 0,\n          error: void 0,\n          variables: options?.variables,\n        });\n        setObservable(null);\n        canResetObservableRef.current = false;\n      }\n    } else if (\n      (shouldResubscribe !== false &&\n        (client !== ref.current.client ||\n          subscription !== ref.current.subscription ||\n          options?.fetchPolicy !== ref.current.options?.fetchPolicy ||\n          !options?.skip !== !ref.current.options?.skip ||\n          !equal(options?.variables, ref.current.options?.variables))) ||\n      canResetObservableRef.current\n    ) {\n      setResult({\n        loading: true,\n        data: void 0,\n        error: void 0,\n        variables: options?.variables,\n      });\n      setObservable(client.subscribe({\n        query: subscription,\n        variables: options?.variables,\n        fetchPolicy: options?.fetchPolicy,\n        context: options?.context,\n      }));\n      canResetObservableRef.current = false;\n    }\n\n    Object.assign(ref.current, { client, subscription, options });\n  }, [client, subscription, options, canResetObservableRef.current]);\n\n  useEffect(() => {\n    if (!observable) {\n      return;\n    }\n\n    let subscriptionStopped = false;\n    const subscription = observable.subscribe({\n      next(fetchResult) {\n        if (subscriptionStopped) {\n          return;\n        }\n\n        const result = {\n          loading: false,\n          // TODO: fetchResult.data can be null but SubscriptionResult.data\n          // expects TData | undefined only\n          data: fetchResult.data!,\n          error: void 0,\n          variables: options?.variables,\n        };\n        setResult(result);\n\n        if (ref.current.options?.onData) {\n          ref.current.options.onData({\n            client,\n            data: result\n          });\n        } else if (ref.current.options?.onSubscriptionData) {\n          ref.current.options.onSubscriptionData({\n            client,\n            subscriptionData: result\n          });\n        }\n      },\n      error(error) {\n        if (!subscriptionStopped) {\n          setResult({\n            loading: false,\n            data: void 0,\n            error,\n            variables: options?.variables,\n          });\n          ref.current.options?.onError?.(error);\n        };\n      },\n      complete() {\n        if (!subscriptionStopped) {\n          if (ref.current.options?.onComplete) {\n            ref.current.options.onComplete();\n          } else if (ref.current.options?.onSubscriptionComplete) {\n            ref.current.options.onSubscriptionComplete();\n          }\n        }\n      },\n    });\n\n    return () => {\n      // immediately stop receiving subscription values, but do not unsubscribe\n      // until after a short delay in case another useSubscription hook is\n      // reusing the same underlying observable and is about to subscribe\n      subscriptionStopped = true;\n      setTimeout(() => {\n        subscription.unsubscribe();\n      });\n    };\n  }, [observable]);\n\n  return result;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}