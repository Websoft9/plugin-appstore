{"ast":null,"code":"import _slicedToArray from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport React, { useState, useEffect } from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/TreeView/tree-view';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { Badge } from '../Badge';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nvar TreeViewListItemBase = function TreeViewListItemBase(_ref) {\n  var name = _ref.name,\n    title = _ref.title,\n    id = _ref.id,\n    isExpanded = _ref.isExpanded,\n    _ref$defaultExpanded = _ref.defaultExpanded,\n    defaultExpanded = _ref$defaultExpanded === void 0 ? false : _ref$defaultExpanded,\n    _ref$children = _ref.children,\n    children = _ref$children === void 0 ? null : _ref$children,\n    onSelect = _ref.onSelect,\n    onCheck = _ref.onCheck,\n    _ref$hasCheck = _ref.hasCheck,\n    hasCheck = _ref$hasCheck === void 0 ? false : _ref$hasCheck,\n    _ref$checkProps = _ref.checkProps,\n    checkProps = _ref$checkProps === void 0 ? {\n      checked: false\n    } : _ref$checkProps,\n    _ref$hasBadge = _ref.hasBadge,\n    hasBadge = _ref$hasBadge === void 0 ? false : _ref$hasBadge,\n    customBadgeContent = _ref.customBadgeContent,\n    _ref$badgeProps = _ref.badgeProps,\n    badgeProps = _ref$badgeProps === void 0 ? {\n      isRead: true\n    } : _ref$badgeProps,\n    _ref$isSelectable = _ref.isSelectable,\n    isSelectable = _ref$isSelectable === void 0 ? false : _ref$isSelectable,\n    isCompact = _ref.isCompact,\n    _ref$activeItems = _ref.activeItems,\n    activeItems = _ref$activeItems === void 0 ? [] : _ref$activeItems,\n    itemData = _ref.itemData,\n    parentItem = _ref.parentItem,\n    icon = _ref.icon,\n    expandedIcon = _ref.expandedIcon,\n    action = _ref.action,\n    compareItems = _ref.compareItems,\n    useMemo = _ref.useMemo;\n  var _useState = useState(defaultExpanded),\n    _useState2 = _slicedToArray(_useState, 2),\n    internalIsExpanded = _useState2[0],\n    setIsExpanded = _useState2[1];\n  useEffect(function () {\n    if (isExpanded !== undefined && isExpanded !== null) {\n      setIsExpanded(isExpanded);\n    } else if (defaultExpanded !== undefined && defaultExpanded !== null) {\n      setIsExpanded(internalIsExpanded || defaultExpanded);\n    }\n  }, [isExpanded, defaultExpanded]);\n  var Component = 'button';\n  if (hasCheck) {\n    Component = 'label';\n  } else if (isSelectable) {\n    Component = 'div';\n  }\n  var ToggleComponent = hasCheck || isSelectable ? 'button' : 'span';\n  var renderToggle = function renderToggle(randomId) {\n    return React.createElement(ToggleComponent, Object.assign({\n      className: css(styles.treeViewNodeToggle),\n      onClick: function onClick(evt) {\n        if (isSelectable || hasCheck) {\n          setIsExpanded(!internalIsExpanded);\n        }\n        if (isSelectable) {\n          evt.stopPropagation();\n        }\n      }\n    }, (hasCheck || isSelectable) && {\n      'aria-labelledby': \"label-\".concat(randomId)\n    }, {\n      tabIndex: -1\n    }), React.createElement(\"span\", {\n      className: css(styles.treeViewNodeToggleIcon)\n    }, React.createElement(AngleRightIcon, {\n      \"aria-hidden\": \"true\"\n    })));\n  };\n  var renderCheck = function renderCheck(randomId) {\n    return React.createElement(\"span\", {\n      className: css(styles.treeViewNodeCheck)\n    }, React.createElement(\"input\", Object.assign({\n      type: \"checkbox\",\n      onChange: function onChange(evt) {\n        return onCheck && onCheck(evt, itemData, parentItem);\n      },\n      onClick: function onClick(evt) {\n        return evt.stopPropagation();\n      },\n      ref: function ref(elem) {\n        return elem && (elem.indeterminate = checkProps.checked === null);\n      }\n    }, checkProps, {\n      checked: checkProps.checked === null ? false : checkProps.checked,\n      id: randomId,\n      tabIndex: -1\n    })));\n  };\n  var iconRendered = React.createElement(\"span\", {\n    className: css(styles.treeViewNodeIcon)\n  }, !internalIsExpanded && icon, internalIsExpanded && (expandedIcon || icon));\n  var renderNodeContent = function renderNodeContent() {\n    var content = React.createElement(React.Fragment, null, isCompact && title && React.createElement(\"span\", {\n      className: css(styles.treeViewNodeTitle)\n    }, title), isSelectable ? React.createElement(\"button\", {\n      tabIndex: -1,\n      className: css(styles.treeViewNodeText)\n    }, name) : React.createElement(\"span\", {\n      className: css(styles.treeViewNodeText)\n    }, name));\n    return isCompact ? React.createElement(\"span\", {\n      className: css(styles.treeViewNodeContent)\n    }, content) : content;\n  };\n  var badgeRendered = React.createElement(React.Fragment, null, hasBadge && children && React.createElement(\"span\", {\n    className: css(styles.treeViewNodeCount)\n  }, React.createElement(Badge, Object.assign({}, badgeProps), customBadgeContent ? customBadgeContent : children.props.data.length)), hasBadge && !children && customBadgeContent !== undefined && React.createElement(\"span\", {\n    className: css(styles.treeViewNodeCount)\n  }, React.createElement(Badge, Object.assign({}, badgeProps), customBadgeContent)));\n  return React.createElement(\"li\", Object.assign({\n    id: id,\n    className: css(styles.treeViewListItem, internalIsExpanded && styles.modifiers.expanded)\n  }, internalIsExpanded && {\n    'aria-expanded': 'true'\n  }, {\n    role: \"treeitem\",\n    tabIndex: -1\n  }), React.createElement(\"div\", {\n    className: css(styles.treeViewContent)\n  }, React.createElement(GenerateId, {\n    prefix: isSelectable ? 'selectable-id' : 'checkbox-id'\n  }, function (randomId) {\n    return React.createElement(Component, Object.assign({\n      className: css(styles.treeViewNode, children && (isSelectable || hasCheck) && styles.modifiers.selectable, (!children || isSelectable) && activeItems && activeItems.length > 0 && activeItems.some(function (item) {\n        return compareItems && item && compareItems(item, itemData);\n      }) ? styles.modifiers.current : ''),\n      onClick: function onClick(evt) {\n        if (!hasCheck) {\n          onSelect && onSelect(evt, itemData, parentItem);\n          if (!isSelectable && children && evt.isDefaultPrevented() !== true) {\n            setIsExpanded(!internalIsExpanded);\n          }\n        }\n      }\n    }, hasCheck && {\n      htmlFor: randomId\n    }, (hasCheck || isSelectable && children) && {\n      id: \"label-\".concat(randomId)\n    }), React.createElement(\"span\", {\n      className: css(styles.treeViewNodeContainer)\n    }, children && renderToggle(randomId), hasCheck && renderCheck(randomId), icon && iconRendered, renderNodeContent(), badgeRendered));\n  }), action && React.createElement(\"div\", {\n    className: css(styles.treeViewAction)\n  }, action)), internalIsExpanded && children);\n};\nexport var TreeViewListItem = React.memo(TreeViewListItemBase, function (prevProps, nextProps) {\n  if (!nextProps.useMemo) {\n    return false;\n  }\n  var prevIncludes = prevProps.activeItems && prevProps.activeItems.length > 0 && prevProps.activeItems.some(function (item) {\n    return prevProps.compareItems && item && prevProps.compareItems(item, prevProps.itemData);\n  });\n  var nextIncludes = nextProps.activeItems && nextProps.activeItems.length > 0 && nextProps.activeItems.some(function (item) {\n    return nextProps.compareItems && item && nextProps.compareItems(item, nextProps.itemData);\n  });\n  if (prevIncludes || nextIncludes) {\n    return false;\n  }\n  if (prevProps.name !== nextProps.name || prevProps.title !== nextProps.title || prevProps.id !== nextProps.id || prevProps.isExpanded !== nextProps.isExpanded || prevProps.defaultExpanded !== nextProps.defaultExpanded || prevProps.onSelect !== nextProps.onSelect || prevProps.onCheck !== nextProps.onCheck || prevProps.hasCheck !== nextProps.hasCheck || prevProps.checkProps !== nextProps.checkProps || prevProps.hasBadge !== nextProps.hasBadge || prevProps.customBadgeContent !== nextProps.customBadgeContent || prevProps.badgeProps !== nextProps.badgeProps || prevProps.isCompact !== nextProps.isCompact || prevProps.icon !== nextProps.icon || prevProps.expandedIcon !== nextProps.expandedIcon || prevProps.action !== nextProps.action || prevProps.parentItem !== nextProps.parentItem || prevProps.itemData !== nextProps.itemData) {\n    return false;\n  }\n  return true;\n});\nTreeViewListItem.displayName = 'TreeViewListItem';","map":{"version":3,"names":["React","useState","useEffect","css","styles","AngleRightIcon","Badge","GenerateId","TreeViewListItemBase","_ref","name","title","id","isExpanded","_ref$defaultExpanded","defaultExpanded","_ref$children","children","onSelect","onCheck","_ref$hasCheck","hasCheck","_ref$checkProps","checkProps","checked","_ref$hasBadge","hasBadge","customBadgeContent","_ref$badgeProps","badgeProps","isRead","_ref$isSelectable","isSelectable","isCompact","_ref$activeItems","activeItems","itemData","parentItem","icon","expandedIcon","action","compareItems","useMemo","_useState","_useState2","_slicedToArray","internalIsExpanded","setIsExpanded","undefined","Component","ToggleComponent","renderToggle","randomId","createElement","Object","assign","className","treeViewNodeToggle","onClick","evt","stopPropagation","concat","tabIndex","treeViewNodeToggleIcon","renderCheck","treeViewNodeCheck","type","onChange","ref","elem","indeterminate","iconRendered","treeViewNodeIcon","renderNodeContent","content","Fragment","treeViewNodeTitle","treeViewNodeText","treeViewNodeContent","badgeRendered","treeViewNodeCount","props","data","length","treeViewListItem","modifiers","expanded","role","treeViewContent","prefix","treeViewNode","selectable","some","item","current","isDefaultPrevented","htmlFor","treeViewNodeContainer","treeViewAction","TreeViewListItem","memo","prevProps","nextProps","prevIncludes","nextIncludes","displayName"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@patternfly/react-core/src/components/TreeView/TreeViewListItem.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/TreeView/tree-view';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { TreeViewDataItem } from './TreeView';\nimport { Badge } from '../Badge';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\n\nexport interface TreeViewCheckProps extends Omit<Partial<React.InputHTMLAttributes<HTMLInputElement>>, 'checked'> {\n  checked?: boolean | null;\n}\n\nexport interface TreeViewListItemProps {\n  /** Action of a tree view item, which can be either a button or dropdown component. */\n  action?: React.ReactNode;\n  /** Active items of tree view. */\n  activeItems?: TreeViewDataItem[];\n  /** Additional properties of the tree view item badge. */\n  badgeProps?: any;\n  /** Additional properties of the tree view item checkbox. */\n  checkProps?: TreeViewCheckProps;\n  /** Child nodes of a tree view item. */\n  children?: React.ReactNode;\n  /** Callback for item comparison function. */\n  compareItems?: (item: TreeViewDataItem, itemToCheck: TreeViewDataItem) => boolean;\n  /** Optional prop for a custom badge. */\n  customBadgeContent?: React.ReactNode;\n  /** Flag indicating if node is expanded by default. */\n  defaultExpanded?: boolean;\n  /** Expanded icon of a tree view item. */\n  expandedIcon?: React.ReactNode;\n  /** Flag indicating if a tree view item has a badge. */\n  hasBadge?: boolean;\n  /** Flag indicating if a tree view item has a checkbox. */\n  hasCheck?: boolean;\n  /** Default icon of a tree view item. */\n  icon?: React.ReactNode;\n  /** ID of a tree view item. */\n  id?: string;\n  /** Flag indicating if the tree view is using a compact variation. */\n  isCompact?: boolean;\n  /** Flag indicating if the node is expanded, overrides internal state. */\n  isExpanded?: boolean;\n  /** Flag indicating that tree nodes should be independently selectable, even when having\n   * children.\n   */\n  isSelectable?: boolean;\n  /** Data structure of tree view item. */\n  itemData?: TreeViewDataItem;\n  /** Internal content of a tree view item. */\n  name: React.ReactNode;\n  /** Callback for item checkbox selection. */\n  onCheck?: (event: React.ChangeEvent<HTMLInputElement>, item: TreeViewDataItem, parent: TreeViewDataItem) => void;\n  /** Callback for item selection. Note: calling event.preventDefault() will prevent the node\n   * from toggling.\n   */\n  onSelect?: (event: React.MouseEvent, item: TreeViewDataItem, parent: TreeViewDataItem) => void;\n  /** Parent item of tree view item. */\n  parentItem?: TreeViewDataItem;\n  /** Title of a tree view item. */\n  title: React.ReactNode;\n  /** Flag indicating the tree view should utilize memoization to help render large data sets.\n   * Setting this property requires that the activeItems property is passed an array containing\n   * every node in the selected item's path.\n   */\n  useMemo?: boolean;\n}\n\nconst TreeViewListItemBase: React.FunctionComponent<TreeViewListItemProps> = ({\n  name,\n  title,\n  id,\n  isExpanded,\n  defaultExpanded = false,\n  children = null,\n  onSelect,\n  onCheck,\n  hasCheck = false,\n  checkProps = {\n    checked: false\n  },\n  hasBadge = false,\n  customBadgeContent,\n  badgeProps = { isRead: true },\n  isSelectable = false,\n  isCompact,\n  activeItems = [],\n  itemData,\n  parentItem,\n  icon,\n  expandedIcon,\n  action,\n  compareItems,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  useMemo\n}: TreeViewListItemProps) => {\n  const [internalIsExpanded, setIsExpanded] = useState(defaultExpanded);\n  useEffect(() => {\n    if (isExpanded !== undefined && isExpanded !== null) {\n      setIsExpanded(isExpanded);\n    } else if (defaultExpanded !== undefined && defaultExpanded !== null) {\n      setIsExpanded(internalIsExpanded || defaultExpanded);\n    }\n  }, [isExpanded, defaultExpanded]);\n\n  let Component: 'label' | 'div' | 'button' = 'button';\n  if (hasCheck) {\n    Component = 'label';\n  } else if (isSelectable) {\n    Component = 'div';\n  }\n\n  const ToggleComponent = hasCheck || isSelectable ? 'button' : 'span';\n\n  const renderToggle = (randomId: string) => (\n    <ToggleComponent\n      className={css(styles.treeViewNodeToggle)}\n      onClick={(evt: React.MouseEvent) => {\n        if (isSelectable || hasCheck) {\n          setIsExpanded(!internalIsExpanded);\n        }\n        if (isSelectable) {\n          evt.stopPropagation();\n        }\n      }}\n      {...((hasCheck || isSelectable) && { 'aria-labelledby': `label-${randomId}` })}\n      tabIndex={-1}\n    >\n      <span className={css(styles.treeViewNodeToggleIcon)}>\n        <AngleRightIcon aria-hidden=\"true\" />\n      </span>\n    </ToggleComponent>\n  );\n  const renderCheck = (randomId: string) => (\n    <span className={css(styles.treeViewNodeCheck)}>\n      <input\n        type=\"checkbox\"\n        onChange={evt => onCheck && onCheck(evt, itemData, parentItem)}\n        onClick={evt => evt.stopPropagation()}\n        ref={elem => elem && (elem.indeterminate = checkProps.checked === null)}\n        {...checkProps}\n        checked={checkProps.checked === null ? false : checkProps.checked}\n        id={randomId}\n        tabIndex={-1}\n      />\n    </span>\n  );\n  const iconRendered = (\n    <span className={css(styles.treeViewNodeIcon)}>\n      {!internalIsExpanded && icon}\n      {internalIsExpanded && (expandedIcon || icon)}\n    </span>\n  );\n  const renderNodeContent = () => {\n    const content = (\n      <>\n        {isCompact && title && <span className={css(styles.treeViewNodeTitle)}>{title}</span>}\n        {isSelectable ? (\n          <button tabIndex={-1} className={css(styles.treeViewNodeText)}>\n            {name}\n          </button>\n        ) : (\n          <span className={css(styles.treeViewNodeText)}>{name}</span>\n        )}\n      </>\n    );\n    return isCompact ? <span className={css(styles.treeViewNodeContent)}>{content}</span> : content;\n  };\n  const badgeRendered = (\n    <>\n      {hasBadge && children && (\n        <span className={css(styles.treeViewNodeCount)}>\n          <Badge {...badgeProps}>\n            {customBadgeContent ? customBadgeContent : (children as React.ReactElement).props.data.length}\n          </Badge>\n        </span>\n      )}\n      {hasBadge && !children && customBadgeContent !== undefined && (\n        <span className={css(styles.treeViewNodeCount)}>\n          <Badge {...badgeProps}>{customBadgeContent}</Badge>\n        </span>\n      )}\n    </>\n  );\n  return (\n    <li\n      id={id}\n      className={css(styles.treeViewListItem, internalIsExpanded && styles.modifiers.expanded)}\n      {...(internalIsExpanded && { 'aria-expanded': 'true' })}\n      role=\"treeitem\"\n      tabIndex={-1}\n    >\n      <div className={css(styles.treeViewContent)}>\n        <GenerateId prefix={isSelectable ? 'selectable-id' : 'checkbox-id'}>\n          {randomId => (\n            <Component\n              className={css(\n                styles.treeViewNode,\n                children && (isSelectable || hasCheck) && styles.modifiers.selectable,\n                (!children || isSelectable) &&\n                  activeItems &&\n                  activeItems.length > 0 &&\n                  activeItems.some(item => compareItems && item && compareItems(item, itemData))\n                  ? styles.modifiers.current\n                  : ''\n              )}\n              onClick={(evt: React.MouseEvent) => {\n                if (!hasCheck) {\n                  onSelect && onSelect(evt, itemData, parentItem);\n                  if (!isSelectable && children && evt.isDefaultPrevented() !== true) {\n                    setIsExpanded(!internalIsExpanded);\n                  }\n                }\n              }}\n              {...(hasCheck && { htmlFor: randomId })}\n              {...((hasCheck || (isSelectable && children)) && { id: `label-${randomId}` })}\n            >\n              <span className={css(styles.treeViewNodeContainer)}>\n                {children && renderToggle(randomId)}\n                {hasCheck && renderCheck(randomId)}\n                {icon && iconRendered}\n                {renderNodeContent()}\n                {badgeRendered}\n              </span>\n            </Component>\n          )}\n        </GenerateId>\n        {action && <div className={css(styles.treeViewAction)}>{action}</div>}\n      </div>\n      {internalIsExpanded && children}\n    </li>\n  );\n};\n\nexport const TreeViewListItem = React.memo(TreeViewListItemBase, (prevProps, nextProps) => {\n  if (!nextProps.useMemo) {\n    return false;\n  }\n\n  const prevIncludes =\n    prevProps.activeItems &&\n    prevProps.activeItems.length > 0 &&\n    prevProps.activeItems.some(\n      item => prevProps.compareItems && item && prevProps.compareItems(item, prevProps.itemData)\n    );\n  const nextIncludes =\n    nextProps.activeItems &&\n    nextProps.activeItems.length > 0 &&\n    nextProps.activeItems.some(\n      item => nextProps.compareItems && item && nextProps.compareItems(item, nextProps.itemData)\n    );\n\n  if (prevIncludes || nextIncludes) {\n    return false;\n  }\n\n  if (\n    prevProps.name !== nextProps.name ||\n    prevProps.title !== nextProps.title ||\n    prevProps.id !== nextProps.id ||\n    prevProps.isExpanded !== nextProps.isExpanded ||\n    prevProps.defaultExpanded !== nextProps.defaultExpanded ||\n    prevProps.onSelect !== nextProps.onSelect ||\n    prevProps.onCheck !== nextProps.onCheck ||\n    prevProps.hasCheck !== nextProps.hasCheck ||\n    prevProps.checkProps !== nextProps.checkProps ||\n    prevProps.hasBadge !== nextProps.hasBadge ||\n    prevProps.customBadgeContent !== nextProps.customBadgeContent ||\n    prevProps.badgeProps !== nextProps.badgeProps ||\n    prevProps.isCompact !== nextProps.isCompact ||\n    prevProps.icon !== nextProps.icon ||\n    prevProps.expandedIcon !== nextProps.expandedIcon ||\n    prevProps.action !== nextProps.action ||\n    prevProps.parentItem !== nextProps.parentItem ||\n    prevProps.itemData !== nextProps.itemData\n  ) {\n    return false;\n  }\n\n  return true;\n});\n\nTreeViewListItem.displayName = 'TreeViewListItem';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}