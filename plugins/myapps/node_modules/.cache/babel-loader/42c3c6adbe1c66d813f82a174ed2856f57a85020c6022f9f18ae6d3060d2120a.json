{"ast":null,"code":"import { serializeFetchParameter } from \"./serializeFetchParameter.js\";\nexport function rewriteURIForGET(chosenURI, body) {\n  var queryParams = [];\n  var addQueryParam = function addQueryParam(key, value) {\n    queryParams.push(\"\".concat(key, \"=\").concat(encodeURIComponent(value)));\n  };\n  if ('query' in body) {\n    addQueryParam('query', body.query);\n  }\n  if (body.operationName) {\n    addQueryParam('operationName', body.operationName);\n  }\n  if (body.variables) {\n    var serializedVariables = void 0;\n    try {\n      serializedVariables = serializeFetchParameter(body.variables, 'Variables map');\n    } catch (parseError) {\n      return {\n        parseError: parseError\n      };\n    }\n    addQueryParam('variables', serializedVariables);\n  }\n  if (body.extensions) {\n    var serializedExtensions = void 0;\n    try {\n      serializedExtensions = serializeFetchParameter(body.extensions, 'Extensions map');\n    } catch (parseError) {\n      return {\n        parseError: parseError\n      };\n    }\n    addQueryParam('extensions', serializedExtensions);\n  }\n  var fragment = '',\n    preFragment = chosenURI;\n  var fragmentStart = chosenURI.indexOf('#');\n  if (fragmentStart !== -1) {\n    fragment = chosenURI.substr(fragmentStart);\n    preFragment = chosenURI.substr(0, fragmentStart);\n  }\n  var queryParamsPrefix = preFragment.indexOf('?') === -1 ? '?' : '&';\n  var newURI = preFragment + queryParamsPrefix + queryParams.join('&') + fragment;\n  return {\n    newURI: newURI\n  };\n}","map":{"version":3,"names":["serializeFetchParameter","rewriteURIForGET","chosenURI","body","queryParams","addQueryParam","key","value","push","concat","encodeURIComponent","query","operationName","variables","serializedVariables","parseError","extensions","serializedExtensions","fragment","preFragment","fragmentStart","indexOf","substr","queryParamsPrefix","newURI","join"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@apollo/src/link/http/rewriteURIForGET.ts"],"sourcesContent":["import { serializeFetchParameter } from './serializeFetchParameter';\nimport { Body } from './selectHttpOptionsAndBody';\n\n// For GET operations, returns the given URI rewritten with parameters, or a\n// parse error.\nexport function rewriteURIForGET(chosenURI: string, body: Body) {\n  // Implement the standard HTTP GET serialization, plus 'extensions'. Note\n  // the extra level of JSON serialization!\n  const queryParams: string[] = [];\n  const addQueryParam = (key: string, value: string) => {\n    queryParams.push(`${key}=${encodeURIComponent(value)}`);\n  };\n\n  if ('query' in body) {\n    addQueryParam('query', body.query!);\n  }\n  if (body.operationName) {\n    addQueryParam('operationName', body.operationName);\n  }\n  if (body.variables) {\n    let serializedVariables;\n    try {\n      serializedVariables = serializeFetchParameter(\n        body.variables,\n        'Variables map',\n      );\n    } catch (parseError) {\n      return { parseError };\n    }\n    addQueryParam('variables', serializedVariables);\n  }\n  if (body.extensions) {\n    let serializedExtensions;\n    try {\n      serializedExtensions = serializeFetchParameter(\n        body.extensions,\n        'Extensions map',\n      );\n    } catch (parseError) {\n      return { parseError };\n    }\n    addQueryParam('extensions', serializedExtensions);\n  }\n\n  // Reconstruct the URI with added query params.\n  // XXX This assumes that the URI is well-formed and that it doesn't\n  //     already contain any of these query params. We could instead use the\n  //     URL API and take a polyfill (whatwg-url@6) for older browsers that\n  //     don't support URLSearchParams. Note that some browsers (and\n  //     versions of whatwg-url) support URL but not URLSearchParams!\n  let fragment = '',\n    preFragment = chosenURI;\n  const fragmentStart = chosenURI.indexOf('#');\n  if (fragmentStart !== -1) {\n    fragment = chosenURI.substr(fragmentStart);\n    preFragment = chosenURI.substr(0, fragmentStart);\n  }\n  const queryParamsPrefix = preFragment.indexOf('?') === -1 ? '?' : '&';\n  const newURI =\n    preFragment + queryParamsPrefix + queryParams.join('&') + fragment;\n  return { newURI };\n}\n"],"mappings":"AAAA,SAASA,uBAAuB,QAAQ,8BAA4B;AAKpE,OAAM,SAAUC,gBAAgBA,CAACC,SAAiB,EAAEC,IAAU;EAG5D,IAAMC,WAAW,GAAa,EAAE;EAChC,IAAMC,aAAa,GAAG,SAAhBA,aAAaA,CAAIC,GAAW,EAAEC,KAAa;IAC/CH,WAAW,CAACI,IAAI,CAAC,GAAAC,MAAA,CAAGH,GAAG,OAAAG,MAAA,CAAIC,kBAAkB,CAACH,KAAK,CAAC,CAAE,CAAC;EACzD,CAAC;EAED,IAAI,OAAO,IAAIJ,IAAI,EAAE;IACnBE,aAAa,CAAC,OAAO,EAAEF,IAAI,CAACQ,KAAM,CAAC;;EAErC,IAAIR,IAAI,CAACS,aAAa,EAAE;IACtBP,aAAa,CAAC,eAAe,EAAEF,IAAI,CAACS,aAAa,CAAC;;EAEpD,IAAIT,IAAI,CAACU,SAAS,EAAE;IAClB,IAAIC,mBAAmB;IACvB,IAAI;MACFA,mBAAmB,GAAGd,uBAAuB,CAC3CG,IAAI,CAACU,SAAS,EACd,eAAe,CAChB;KACF,CAAC,OAAOE,UAAU,EAAE;MACnB,OAAO;QAAEA,UAAU,EAAAA;MAAA,CAAE;;IAEvBV,aAAa,CAAC,WAAW,EAAES,mBAAmB,CAAC;;EAEjD,IAAIX,IAAI,CAACa,UAAU,EAAE;IACnB,IAAIC,oBAAoB;IACxB,IAAI;MACFA,oBAAoB,GAAGjB,uBAAuB,CAC5CG,IAAI,CAACa,UAAU,EACf,gBAAgB,CACjB;KACF,CAAC,OAAOD,UAAU,EAAE;MACnB,OAAO;QAAEA,UAAU,EAAAA;MAAA,CAAE;;IAEvBV,aAAa,CAAC,YAAY,EAAEY,oBAAoB,CAAC;;EASnD,IAAIC,QAAQ,GAAG,EAAE;IACfC,WAAW,GAAGjB,SAAS;EACzB,IAAMkB,aAAa,GAAGlB,SAAS,CAACmB,OAAO,CAAC,GAAG,CAAC;EAC5C,IAAID,aAAa,KAAK,CAAC,CAAC,EAAE;IACxBF,QAAQ,GAAGhB,SAAS,CAACoB,MAAM,CAACF,aAAa,CAAC;IAC1CD,WAAW,GAAGjB,SAAS,CAACoB,MAAM,CAAC,CAAC,EAAEF,aAAa,CAAC;;EAElD,IAAMG,iBAAiB,GAAGJ,WAAW,CAACE,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG;EACrE,IAAMG,MAAM,GACVL,WAAW,GAAGI,iBAAiB,GAAGnB,WAAW,CAACqB,IAAI,CAAC,GAAG,CAAC,GAAGP,QAAQ;EACpE,OAAO;IAAEM,MAAM,EAAAA;EAAA,CAAE;AACnB"},"metadata":{},"sourceType":"module","externalDependencies":[]}