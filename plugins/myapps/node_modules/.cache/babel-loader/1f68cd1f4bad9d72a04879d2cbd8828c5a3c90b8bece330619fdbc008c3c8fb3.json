{"ast":null,"code":"import { Observable } from 'zen-observable-ts';\nimport 'symbol-observable';\nvar prototype = Observable.prototype;\nvar fakeObsSymbol = '@@observable';\nif (!prototype[fakeObsSymbol]) {\n  prototype[fakeObsSymbol] = function () {\n    return this;\n  };\n}\nexport { Observable };","map":{"version":3,"names":["Observable","prototype","fakeObsSymbol"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@apollo/src/utilities/observables/Observable.ts"],"sourcesContent":["import {\n  Observable,\n  Observer,\n  Subscription as ObservableSubscription,\n  Subscriber,\n} from 'zen-observable-ts';\n\n// This simplified polyfill attempts to follow the ECMAScript Observable\n// proposal (https://github.com/zenparsing/es-observable)\nimport 'symbol-observable';\n\nexport type {\n  Observer,\n  ObservableSubscription,\n  Subscriber,\n};\n\n// The zen-observable package defines Observable.prototype[Symbol.observable]\n// when Symbol is supported, but RxJS interop depends on also setting this fake\n// '@@observable' string as a polyfill for Symbol.observable.\nconst { prototype } = Observable;\nconst fakeObsSymbol = '@@observable' as keyof typeof prototype;\nif (!prototype[fakeObsSymbol]) {\n  prototype[fakeObsSymbol] = function () { return this; };\n}\n\nexport { Observable };\n"],"mappings":"AAAA,SACEA,UAAU,QAIL,mBAAmB;AAI1B,OAAO,mBAAmB;AAWlB,IAAAC,SAAS,GAAKD,UAAU,CAAAC,SAAf;AACjB,IAAMC,aAAa,GAAG,cAAwC;AAC9D,IAAI,CAACD,SAAS,CAACC,aAAa,CAAC,EAAE;EAC7BD,SAAS,CAACC,aAAa,CAAC,GAAG;IAAc,OAAO,IAAI;EAAE,CAAC;;AAGzD,SAASF,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}