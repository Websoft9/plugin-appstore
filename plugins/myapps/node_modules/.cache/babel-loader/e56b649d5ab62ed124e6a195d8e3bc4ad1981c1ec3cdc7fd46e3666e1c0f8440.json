{"ast":null,"code":"import { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { Kind } from \"../../language/kinds.mjs\";\nimport { isExecutableDefinitionNode } from \"../../language/predicates.mjs\";\n\n/**\n * Executable definitions\n *\n * A GraphQL document is only valid for execution if all definitions are either\n * operation or fragment definitions.\n */\nexport function ExecutableDefinitionsRule(context) {\n  return {\n    Document: function Document(node) {\n      for (var _i2 = 0, _node$definitions2 = node.definitions; _i2 < _node$definitions2.length; _i2++) {\n        var definition = _node$definitions2[_i2];\n        if (!isExecutableDefinitionNode(definition)) {\n          var defName = definition.kind === Kind.SCHEMA_DEFINITION || definition.kind === Kind.SCHEMA_EXTENSION ? 'schema' : '\"' + definition.name.value + '\"';\n          context.reportError(new GraphQLError(\"The \".concat(defName, \" definition is not executable.\"), definition));\n        }\n      }\n      return false;\n    }\n  };\n}","map":{"version":3,"names":["GraphQLError","Kind","isExecutableDefinitionNode","ExecutableDefinitionsRule","context","Document","node","_i2","_node$definitions2","definitions","length","definition","defName","kind","SCHEMA_DEFINITION","SCHEMA_EXTENSION","name","value","reportError","concat"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/graphql/validation/rules/ExecutableDefinitionsRule.mjs"],"sourcesContent":["import { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { Kind } from \"../../language/kinds.mjs\";\nimport { isExecutableDefinitionNode } from \"../../language/predicates.mjs\";\n\n/**\n * Executable definitions\n *\n * A GraphQL document is only valid for execution if all definitions are either\n * operation or fragment definitions.\n */\nexport function ExecutableDefinitionsRule(context) {\n  return {\n    Document: function Document(node) {\n      for (var _i2 = 0, _node$definitions2 = node.definitions; _i2 < _node$definitions2.length; _i2++) {\n        var definition = _node$definitions2[_i2];\n\n        if (!isExecutableDefinitionNode(definition)) {\n          var defName = definition.kind === Kind.SCHEMA_DEFINITION || definition.kind === Kind.SCHEMA_EXTENSION ? 'schema' : '\"' + definition.name.value + '\"';\n          context.reportError(new GraphQLError(\"The \".concat(defName, \" definition is not executable.\"), definition));\n        }\n      }\n\n      return false;\n    }\n  };\n}\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,8BAA8B;AAC3D,SAASC,IAAI,QAAQ,0BAA0B;AAC/C,SAASC,0BAA0B,QAAQ,+BAA+B;;AAE1E;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,yBAAyBA,CAACC,OAAO,EAAE;EACjD,OAAO;IACLC,QAAQ,EAAE,SAASA,QAAQA,CAACC,IAAI,EAAE;MAChC,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEC,kBAAkB,GAAGF,IAAI,CAACG,WAAW,EAAEF,GAAG,GAAGC,kBAAkB,CAACE,MAAM,EAAEH,GAAG,EAAE,EAAE;QAC/F,IAAII,UAAU,GAAGH,kBAAkB,CAACD,GAAG,CAAC;QAExC,IAAI,CAACL,0BAA0B,CAACS,UAAU,CAAC,EAAE;UAC3C,IAAIC,OAAO,GAAGD,UAAU,CAACE,IAAI,KAAKZ,IAAI,CAACa,iBAAiB,IAAIH,UAAU,CAACE,IAAI,KAAKZ,IAAI,CAACc,gBAAgB,GAAG,QAAQ,GAAG,GAAG,GAAGJ,UAAU,CAACK,IAAI,CAACC,KAAK,GAAG,GAAG;UACpJb,OAAO,CAACc,WAAW,CAAC,IAAIlB,YAAY,CAAC,MAAM,CAACmB,MAAM,CAACP,OAAO,EAAE,gCAAgC,CAAC,EAAED,UAAU,CAAC,CAAC;QAC7G;MACF;MAEA,OAAO,KAAK;IACd;EACF,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}