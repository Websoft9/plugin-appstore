{"ast":null,"code":"import _slicedToArray from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { ListActionTypes } from './listActions.types';\nimport defaultReducer from './listReducer';\nimport useListChangeNotifiers from './useListChangeNotifiers';\nimport useControllableReducer from '../utils/useControllableReducer';\nimport areArraysEqual from '../utils/areArraysEqual';\nimport useLatest from '../utils/useLatest';\nimport useTextNavigation from '../utils/useTextNavigation';\nvar EMPTY_OBJECT = {};\nvar NOOP = function NOOP() {};\nvar defaultItemComparer = function defaultItemComparer(optionA, optionB) {\n  return optionA === optionB;\n};\nvar defaultIsItemDisabled = function defaultIsItemDisabled() {\n  return false;\n};\nvar defaultItemStringifier = function defaultItemStringifier(item) {\n  return typeof item === 'string' ? item : String(item);\n};\nvar defaultGetInitialState = function defaultGetInitialState() {\n  return {\n    highlightedValue: null,\n    selectedValues: []\n  };\n};\n\n/**\n * The useList is a lower-level utility that is used to build list-like components.\n * It's used to manage the state of the list and its items.\n *\n * Supports highlighting a single item and selecting an arbitrary number of items.\n *\n * The state of the list is managed by a controllable reducer - that is a reducer that can have its state\n * controlled from outside.\n *\n * By default, the state consists of `selectedValues` and `highlightedValue` but can be extended by the caller of the hook.\n * Also the actions that can be dispatched and the reducer function can be defined externally.\n *\n * @template ItemValue The type of the item values.\n * @template State The type of the list state. This should be a subtype of `ListState<ItemValue>`.\n * @template CustomAction The type of the actions that can be dispatched (besides the standard ListAction).\n * @template CustomActionContext The shape of additional properties that will be added to actions when dispatched.\n *\n * @ignore - internal hook.\n */\nfunction useList(params) {\n  var _params$controlledPro = params.controlledProps,\n    controlledProps = _params$controlledPro === void 0 ? EMPTY_OBJECT : _params$controlledPro,\n    _params$disabledItems = params.disabledItemsFocusable,\n    disabledItemsFocusable = _params$disabledItems === void 0 ? false : _params$disabledItems,\n    _params$disableListWr = params.disableListWrap,\n    disableListWrap = _params$disableListWr === void 0 ? false : _params$disableListWr,\n    _params$focusManageme = params.focusManagement,\n    focusManagement = _params$focusManageme === void 0 ? 'activeDescendant' : _params$focusManageme,\n    _params$getInitialSta = params.getInitialState,\n    getInitialState = _params$getInitialSta === void 0 ? defaultGetInitialState : _params$getInitialSta,\n    getItemDomElement = params.getItemDomElement,\n    getItemId = params.getItemId,\n    _params$isItemDisable = params.isItemDisabled,\n    isItemDisabled = _params$isItemDisable === void 0 ? defaultIsItemDisabled : _params$isItemDisable,\n    externalListRef = params.rootRef,\n    _params$onStateChange = params.onStateChange,\n    onStateChange = _params$onStateChange === void 0 ? NOOP : _params$onStateChange,\n    items = params.items,\n    _params$itemComparer = params.itemComparer,\n    itemComparer = _params$itemComparer === void 0 ? defaultItemComparer : _params$itemComparer,\n    _params$getItemAsStri = params.getItemAsString,\n    getItemAsString = _params$getItemAsStri === void 0 ? defaultItemStringifier : _params$getItemAsStri,\n    onChange = params.onChange,\n    onHighlightChange = params.onHighlightChange,\n    _params$orientation = params.orientation,\n    orientation = _params$orientation === void 0 ? 'vertical' : _params$orientation,\n    _params$pageSize = params.pageSize,\n    pageSize = _params$pageSize === void 0 ? 5 : _params$pageSize,\n    _params$reducerAction = params.reducerActionContext,\n    reducerActionContext = _params$reducerAction === void 0 ? EMPTY_OBJECT : _params$reducerAction,\n    _params$selectionMode = params.selectionMode,\n    selectionMode = _params$selectionMode === void 0 ? 'single' : _params$selectionMode,\n    externalReducer = params.stateReducer;\n  if (process.env.NODE_ENV !== 'production') {\n    if (focusManagement === 'DOM' && getItemDomElement == null) {\n      throw new Error('useList: The `getItemDomElement` prop is required when using the `DOM` focus management.');\n    }\n    if (focusManagement === 'activeDescendant' && getItemId == null) {\n      throw new Error('useList: The `getItemId` prop is required when using the `activeDescendant` focus management.');\n    }\n  }\n  var listRef = React.useRef(null);\n  var handleRef = useForkRef(externalListRef, listRef);\n  var handleHighlightChange = React.useCallback(function (event, value, reason) {\n    onHighlightChange == null ? void 0 : onHighlightChange(event, value, reason);\n    if (focusManagement === 'DOM' && value != null && (reason === ListActionTypes.itemClick || reason === ListActionTypes.keyDown || reason === ListActionTypes.textNavigation)) {\n      var _getItemDomElement;\n      getItemDomElement == null ? void 0 : (_getItemDomElement = getItemDomElement(value)) == null ? void 0 : _getItemDomElement.focus();\n    }\n  }, [getItemDomElement, onHighlightChange, focusManagement]);\n  var stateComparers = React.useMemo(function () {\n    return {\n      highlightedValue: itemComparer,\n      selectedValues: function selectedValues(valuesArray1, valuesArray2) {\n        return areArraysEqual(valuesArray1, valuesArray2, itemComparer);\n      }\n    };\n  }, [itemComparer]);\n\n  // This gets called whenever a reducer changes the state.\n  var handleStateChange = React.useCallback(function (event, field, value, reason, state) {\n    onStateChange == null ? void 0 : onStateChange(event, field, value, reason, state);\n    switch (field) {\n      case 'highlightedValue':\n        handleHighlightChange(event, value, reason);\n        break;\n      case 'selectedValues':\n        onChange == null ? void 0 : onChange(event, value, reason);\n        break;\n      default:\n        break;\n    }\n  }, [handleHighlightChange, onChange, onStateChange]);\n\n  // The following object is added to each action when it's dispatched.\n  // It's accessible in the reducer via the `action.context` field.\n  var listActionContext = React.useMemo(function () {\n    return {\n      disabledItemsFocusable: disabledItemsFocusable,\n      disableListWrap: disableListWrap,\n      focusManagement: focusManagement,\n      isItemDisabled: isItemDisabled,\n      itemComparer: itemComparer,\n      items: items,\n      getItemAsString: getItemAsString,\n      onHighlightChange: handleHighlightChange,\n      orientation: orientation,\n      pageSize: pageSize,\n      selectionMode: selectionMode,\n      stateComparers: stateComparers\n    };\n  }, [disabledItemsFocusable, disableListWrap, focusManagement, isItemDisabled, itemComparer, items, getItemAsString, handleHighlightChange, orientation, pageSize, selectionMode, stateComparers]);\n  var initialState = getInitialState();\n  var reducer = externalReducer != null ? externalReducer : defaultReducer;\n  var actionContext = React.useMemo(function () {\n    return _extends({}, reducerActionContext, listActionContext);\n  }, [reducerActionContext, listActionContext]);\n  var _useControllableReduc = useControllableReducer({\n      reducer: reducer,\n      actionContext: actionContext,\n      initialState: initialState,\n      controlledProps: controlledProps,\n      stateComparers: stateComparers,\n      onStateChange: handleStateChange\n    }),\n    _useControllableReduc2 = _slicedToArray(_useControllableReduc, 2),\n    state = _useControllableReduc2[0],\n    dispatch = _useControllableReduc2[1];\n  var highlightedValue = state.highlightedValue,\n    selectedValues = state.selectedValues;\n  var handleTextNavigation = useTextNavigation(function (searchString, event) {\n    return dispatch({\n      type: ListActionTypes.textNavigation,\n      event: event,\n      searchString: searchString\n    });\n  });\n\n  // introducing refs to avoid recreating the getItemState function on each change.\n  var latestSelectedValues = useLatest(selectedValues);\n  var latestHighlightedValue = useLatest(highlightedValue);\n  var previousItems = React.useRef([]);\n  React.useEffect(function () {\n    // Whenever the `items` object changes, we need to determine if the actual items changed.\n    // If they did, we need to dispatch an `itemsChange` action, so the selected/highlighted state is updated.\n    if (areArraysEqual(previousItems.current, items, itemComparer)) {\n      return;\n    }\n    dispatch({\n      type: ListActionTypes.itemsChange,\n      event: null,\n      items: items,\n      previousItems: previousItems.current\n    });\n    previousItems.current = items;\n  }, [items, itemComparer, dispatch]);\n\n  // Subitems are notified of changes to the highlighted and selected values.\n  // This is not done via context because we don't want to trigger a re-render of all the subitems each time any of them changes state.\n  // Instead, we use a custom message bus to publish messages about changes.\n  // On the child component, we use a custom hook to subscribe to these messages and re-render only when the value they care about changes.\n  var _useListChangeNotifie = useListChangeNotifiers(),\n    notifySelectionChanged = _useListChangeNotifie.notifySelectionChanged,\n    notifyHighlightChanged = _useListChangeNotifie.notifyHighlightChanged,\n    registerHighlightChangeHandler = _useListChangeNotifie.registerHighlightChangeHandler,\n    registerSelectionChangeHandler = _useListChangeNotifie.registerSelectionChangeHandler;\n  React.useEffect(function () {\n    notifySelectionChanged(selectedValues);\n  }, [selectedValues, notifySelectionChanged]);\n  React.useEffect(function () {\n    notifyHighlightChanged(highlightedValue);\n  }, [highlightedValue, notifyHighlightChanged]);\n  var createHandleKeyDown = function createHandleKeyDown(other) {\n    return function (event) {\n      var _other$onKeyDown;\n      (_other$onKeyDown = other.onKeyDown) == null ? void 0 : _other$onKeyDown.call(other, event);\n      if (event.defaultMuiPrevented) {\n        return;\n      }\n      var keysToPreventDefault = ['Home', 'End', 'PageUp', 'PageDown'];\n      if (orientation === 'vertical') {\n        keysToPreventDefault.push('ArrowUp', 'ArrowDown');\n      } else {\n        keysToPreventDefault.push('ArrowLeft', 'ArrowRight');\n      }\n      if (focusManagement === 'activeDescendant') {\n        // When the child element is focused using the activeDescendant attribute,\n        // the list handles keyboard events on its behalf.\n        // We have to `preventDefault()` is this case to prevent the browser from\n        // scrolling the view when space is pressed or submitting forms when enter is pressed.\n        keysToPreventDefault.push(' ', 'Enter');\n      }\n      if (keysToPreventDefault.includes(event.key)) {\n        event.preventDefault();\n      }\n      dispatch({\n        type: ListActionTypes.keyDown,\n        key: event.key,\n        event: event\n      });\n      handleTextNavigation(event);\n    };\n  };\n  var createHandleBlur = function createHandleBlur(other) {\n    return function (event) {\n      var _other$onBlur, _listRef$current;\n      (_other$onBlur = other.onBlur) == null ? void 0 : _other$onBlur.call(other, event);\n      if (event.defaultMuiPrevented) {\n        return;\n      }\n      if ((_listRef$current = listRef.current) != null && _listRef$current.contains(event.relatedTarget)) {\n        // focus remains within the list\n        return;\n      }\n      dispatch({\n        type: ListActionTypes.blur,\n        event: event\n      });\n    };\n  };\n  var getRootProps = function getRootProps() {\n    var otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return _extends({}, otherHandlers, {\n      'aria-activedescendant': focusManagement === 'activeDescendant' && highlightedValue != null ? getItemId(highlightedValue) : undefined,\n      onBlur: createHandleBlur(otherHandlers),\n      onKeyDown: createHandleKeyDown(otherHandlers),\n      tabIndex: focusManagement === 'DOM' ? -1 : 0,\n      ref: handleRef\n    });\n  };\n  var getItemState = React.useCallback(function (item) {\n    var _latestSelectedValues;\n    var index = items.findIndex(function (i) {\n      return itemComparer(i, item);\n    });\n    var selected = ((_latestSelectedValues = latestSelectedValues.current) != null ? _latestSelectedValues : []).some(function (value) {\n      return value != null && itemComparer(item, value);\n    });\n    var disabled = isItemDisabled(item, index);\n    var highlighted = latestHighlightedValue.current != null && itemComparer(item, latestHighlightedValue.current);\n    var focusable = focusManagement === 'DOM';\n    return {\n      disabled: disabled,\n      focusable: focusable,\n      highlighted: highlighted,\n      index: index,\n      selected: selected\n    };\n  }, [items, isItemDisabled, itemComparer, latestSelectedValues, latestHighlightedValue, focusManagement]);\n  var contextValue = React.useMemo(function () {\n    return {\n      dispatch: dispatch,\n      getItemState: getItemState,\n      registerHighlightChangeHandler: registerHighlightChangeHandler,\n      registerSelectionChangeHandler: registerSelectionChangeHandler\n    };\n  }, [dispatch, getItemState, registerHighlightChangeHandler, registerSelectionChangeHandler]);\n  React.useDebugValue({\n    state: state\n  });\n  return {\n    contextValue: contextValue,\n    dispatch: dispatch,\n    getRootProps: getRootProps,\n    rootRef: handleRef,\n    state: state\n  };\n}\nexport default useList;","map":{"version":3,"names":["_extends","React","unstable_useForkRef","useForkRef","ListActionTypes","defaultReducer","useListChangeNotifiers","useControllableReducer","areArraysEqual","useLatest","useTextNavigation","EMPTY_OBJECT","NOOP","defaultItemComparer","optionA","optionB","defaultIsItemDisabled","defaultItemStringifier","item","String","defaultGetInitialState","highlightedValue","selectedValues","useList","params","_params$controlledPro","controlledProps","_params$disabledItems","disabledItemsFocusable","_params$disableListWr","disableListWrap","_params$focusManageme","focusManagement","_params$getInitialSta","getInitialState","getItemDomElement","getItemId","_params$isItemDisable","isItemDisabled","externalListRef","rootRef","_params$onStateChange","onStateChange","items","_params$itemComparer","itemComparer","_params$getItemAsStri","getItemAsString","onChange","onHighlightChange","_params$orientation","orientation","_params$pageSize","pageSize","_params$reducerAction","reducerActionContext","_params$selectionMode","selectionMode","externalReducer","stateReducer","process","env","NODE_ENV","Error","listRef","useRef","handleRef","handleHighlightChange","useCallback","event","value","reason","itemClick","keyDown","textNavigation","_getItemDomElement","focus","stateComparers","useMemo","valuesArray1","valuesArray2","handleStateChange","field","state","listActionContext","initialState","reducer","actionContext","_useControllableReduc","_useControllableReduc2","_slicedToArray","dispatch","handleTextNavigation","searchString","type","latestSelectedValues","latestHighlightedValue","previousItems","useEffect","current","itemsChange","_useListChangeNotifie","notifySelectionChanged","notifyHighlightChanged","registerHighlightChangeHandler","registerSelectionChangeHandler","createHandleKeyDown","other","_other$onKeyDown","onKeyDown","call","defaultMuiPrevented","keysToPreventDefault","push","includes","key","preventDefault","createHandleBlur","_other$onBlur","_listRef$current","onBlur","contains","relatedTarget","blur","getRootProps","otherHandlers","arguments","length","undefined","tabIndex","ref","getItemState","_latestSelectedValues","index","findIndex","i","selected","some","disabled","highlighted","focusable","contextValue","useDebugValue"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@mui/base/useList/useList.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { ListActionTypes } from './listActions.types';\nimport defaultReducer from './listReducer';\nimport useListChangeNotifiers from './useListChangeNotifiers';\nimport useControllableReducer from '../utils/useControllableReducer';\nimport areArraysEqual from '../utils/areArraysEqual';\nimport useLatest from '../utils/useLatest';\nimport useTextNavigation from '../utils/useTextNavigation';\nconst EMPTY_OBJECT = {};\nconst NOOP = () => {};\nconst defaultItemComparer = (optionA, optionB) => optionA === optionB;\nconst defaultIsItemDisabled = () => false;\nconst defaultItemStringifier = item => typeof item === 'string' ? item : String(item);\nconst defaultGetInitialState = () => ({\n  highlightedValue: null,\n  selectedValues: []\n});\n\n/**\n * The useList is a lower-level utility that is used to build list-like components.\n * It's used to manage the state of the list and its items.\n *\n * Supports highlighting a single item and selecting an arbitrary number of items.\n *\n * The state of the list is managed by a controllable reducer - that is a reducer that can have its state\n * controlled from outside.\n *\n * By default, the state consists of `selectedValues` and `highlightedValue` but can be extended by the caller of the hook.\n * Also the actions that can be dispatched and the reducer function can be defined externally.\n *\n * @template ItemValue The type of the item values.\n * @template State The type of the list state. This should be a subtype of `ListState<ItemValue>`.\n * @template CustomAction The type of the actions that can be dispatched (besides the standard ListAction).\n * @template CustomActionContext The shape of additional properties that will be added to actions when dispatched.\n *\n * @ignore - internal hook.\n */\nfunction useList(params) {\n  const {\n    controlledProps = EMPTY_OBJECT,\n    disabledItemsFocusable = false,\n    disableListWrap = false,\n    focusManagement = 'activeDescendant',\n    getInitialState = defaultGetInitialState,\n    getItemDomElement,\n    getItemId,\n    isItemDisabled = defaultIsItemDisabled,\n    rootRef: externalListRef,\n    onStateChange = NOOP,\n    items,\n    itemComparer = defaultItemComparer,\n    getItemAsString = defaultItemStringifier,\n    onChange,\n    onHighlightChange,\n    orientation = 'vertical',\n    pageSize = 5,\n    reducerActionContext = EMPTY_OBJECT,\n    selectionMode = 'single',\n    stateReducer: externalReducer\n  } = params;\n  if (process.env.NODE_ENV !== 'production') {\n    if (focusManagement === 'DOM' && getItemDomElement == null) {\n      throw new Error('useList: The `getItemDomElement` prop is required when using the `DOM` focus management.');\n    }\n    if (focusManagement === 'activeDescendant' && getItemId == null) {\n      throw new Error('useList: The `getItemId` prop is required when using the `activeDescendant` focus management.');\n    }\n  }\n  const listRef = React.useRef(null);\n  const handleRef = useForkRef(externalListRef, listRef);\n  const handleHighlightChange = React.useCallback((event, value, reason) => {\n    onHighlightChange == null ? void 0 : onHighlightChange(event, value, reason);\n    if (focusManagement === 'DOM' && value != null && (reason === ListActionTypes.itemClick || reason === ListActionTypes.keyDown || reason === ListActionTypes.textNavigation)) {\n      var _getItemDomElement;\n      getItemDomElement == null ? void 0 : (_getItemDomElement = getItemDomElement(value)) == null ? void 0 : _getItemDomElement.focus();\n    }\n  }, [getItemDomElement, onHighlightChange, focusManagement]);\n  const stateComparers = React.useMemo(() => ({\n    highlightedValue: itemComparer,\n    selectedValues: (valuesArray1, valuesArray2) => areArraysEqual(valuesArray1, valuesArray2, itemComparer)\n  }), [itemComparer]);\n\n  // This gets called whenever a reducer changes the state.\n  const handleStateChange = React.useCallback((event, field, value, reason, state) => {\n    onStateChange == null ? void 0 : onStateChange(event, field, value, reason, state);\n    switch (field) {\n      case 'highlightedValue':\n        handleHighlightChange(event, value, reason);\n        break;\n      case 'selectedValues':\n        onChange == null ? void 0 : onChange(event, value, reason);\n        break;\n      default:\n        break;\n    }\n  }, [handleHighlightChange, onChange, onStateChange]);\n\n  // The following object is added to each action when it's dispatched.\n  // It's accessible in the reducer via the `action.context` field.\n  const listActionContext = React.useMemo(() => {\n    return {\n      disabledItemsFocusable,\n      disableListWrap,\n      focusManagement,\n      isItemDisabled,\n      itemComparer,\n      items,\n      getItemAsString,\n      onHighlightChange: handleHighlightChange,\n      orientation,\n      pageSize,\n      selectionMode,\n      stateComparers\n    };\n  }, [disabledItemsFocusable, disableListWrap, focusManagement, isItemDisabled, itemComparer, items, getItemAsString, handleHighlightChange, orientation, pageSize, selectionMode, stateComparers]);\n  const initialState = getInitialState();\n  const reducer = externalReducer != null ? externalReducer : defaultReducer;\n  const actionContext = React.useMemo(() => _extends({}, reducerActionContext, listActionContext), [reducerActionContext, listActionContext]);\n  const [state, dispatch] = useControllableReducer({\n    reducer,\n    actionContext,\n    initialState: initialState,\n    controlledProps,\n    stateComparers,\n    onStateChange: handleStateChange\n  });\n  const {\n    highlightedValue,\n    selectedValues\n  } = state;\n  const handleTextNavigation = useTextNavigation((searchString, event) => dispatch({\n    type: ListActionTypes.textNavigation,\n    event,\n    searchString\n  }));\n\n  // introducing refs to avoid recreating the getItemState function on each change.\n  const latestSelectedValues = useLatest(selectedValues);\n  const latestHighlightedValue = useLatest(highlightedValue);\n  const previousItems = React.useRef([]);\n  React.useEffect(() => {\n    // Whenever the `items` object changes, we need to determine if the actual items changed.\n    // If they did, we need to dispatch an `itemsChange` action, so the selected/highlighted state is updated.\n    if (areArraysEqual(previousItems.current, items, itemComparer)) {\n      return;\n    }\n    dispatch({\n      type: ListActionTypes.itemsChange,\n      event: null,\n      items,\n      previousItems: previousItems.current\n    });\n    previousItems.current = items;\n  }, [items, itemComparer, dispatch]);\n\n  // Subitems are notified of changes to the highlighted and selected values.\n  // This is not done via context because we don't want to trigger a re-render of all the subitems each time any of them changes state.\n  // Instead, we use a custom message bus to publish messages about changes.\n  // On the child component, we use a custom hook to subscribe to these messages and re-render only when the value they care about changes.\n  const {\n    notifySelectionChanged,\n    notifyHighlightChanged,\n    registerHighlightChangeHandler,\n    registerSelectionChangeHandler\n  } = useListChangeNotifiers();\n  React.useEffect(() => {\n    notifySelectionChanged(selectedValues);\n  }, [selectedValues, notifySelectionChanged]);\n  React.useEffect(() => {\n    notifyHighlightChanged(highlightedValue);\n  }, [highlightedValue, notifyHighlightChanged]);\n  const createHandleKeyDown = other => event => {\n    var _other$onKeyDown;\n    (_other$onKeyDown = other.onKeyDown) == null ? void 0 : _other$onKeyDown.call(other, event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    const keysToPreventDefault = ['Home', 'End', 'PageUp', 'PageDown'];\n    if (orientation === 'vertical') {\n      keysToPreventDefault.push('ArrowUp', 'ArrowDown');\n    } else {\n      keysToPreventDefault.push('ArrowLeft', 'ArrowRight');\n    }\n    if (focusManagement === 'activeDescendant') {\n      // When the child element is focused using the activeDescendant attribute,\n      // the list handles keyboard events on its behalf.\n      // We have to `preventDefault()` is this case to prevent the browser from\n      // scrolling the view when space is pressed or submitting forms when enter is pressed.\n      keysToPreventDefault.push(' ', 'Enter');\n    }\n    if (keysToPreventDefault.includes(event.key)) {\n      event.preventDefault();\n    }\n    dispatch({\n      type: ListActionTypes.keyDown,\n      key: event.key,\n      event\n    });\n    handleTextNavigation(event);\n  };\n  const createHandleBlur = other => event => {\n    var _other$onBlur, _listRef$current;\n    (_other$onBlur = other.onBlur) == null ? void 0 : _other$onBlur.call(other, event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    if ((_listRef$current = listRef.current) != null && _listRef$current.contains(event.relatedTarget)) {\n      // focus remains within the list\n      return;\n    }\n    dispatch({\n      type: ListActionTypes.blur,\n      event\n    });\n  };\n  const getRootProps = (otherHandlers = {}) => {\n    return _extends({}, otherHandlers, {\n      'aria-activedescendant': focusManagement === 'activeDescendant' && highlightedValue != null ? getItemId(highlightedValue) : undefined,\n      onBlur: createHandleBlur(otherHandlers),\n      onKeyDown: createHandleKeyDown(otherHandlers),\n      tabIndex: focusManagement === 'DOM' ? -1 : 0,\n      ref: handleRef\n    });\n  };\n  const getItemState = React.useCallback(item => {\n    var _latestSelectedValues;\n    const index = items.findIndex(i => itemComparer(i, item));\n    const selected = ((_latestSelectedValues = latestSelectedValues.current) != null ? _latestSelectedValues : []).some(value => value != null && itemComparer(item, value));\n    const disabled = isItemDisabled(item, index);\n    const highlighted = latestHighlightedValue.current != null && itemComparer(item, latestHighlightedValue.current);\n    const focusable = focusManagement === 'DOM';\n    return {\n      disabled,\n      focusable,\n      highlighted,\n      index,\n      selected\n    };\n  }, [items, isItemDisabled, itemComparer, latestSelectedValues, latestHighlightedValue, focusManagement]);\n  const contextValue = React.useMemo(() => ({\n    dispatch,\n    getItemState,\n    registerHighlightChangeHandler,\n    registerSelectionChangeHandler\n  }), [dispatch, getItemState, registerHighlightChangeHandler, registerSelectionChangeHandler]);\n  React.useDebugValue({\n    state\n  });\n  return {\n    contextValue,\n    dispatch,\n    getRootProps,\n    rootRef: handleRef,\n    state\n  };\n}\nexport default useList;"],"mappings":";AAAA,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,mBAAmB,IAAIC,UAAU,QAAQ,YAAY;AAC9D,SAASC,eAAe,QAAQ,qBAAqB;AACrD,OAAOC,cAAc,MAAM,eAAe;AAC1C,OAAOC,sBAAsB,MAAM,0BAA0B;AAC7D,OAAOC,sBAAsB,MAAM,iCAAiC;AACpE,OAAOC,cAAc,MAAM,yBAAyB;AACpD,OAAOC,SAAS,MAAM,oBAAoB;AAC1C,OAAOC,iBAAiB,MAAM,4BAA4B;AAC1D,IAAMC,YAAY,GAAG,CAAC,CAAC;AACvB,IAAMC,IAAI,GAAG,SAAPA,IAAIA,CAAA,EAAS,CAAC,CAAC;AACrB,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAmBA,CAAIC,OAAO,EAAEC,OAAO;EAAA,OAAKD,OAAO,KAAKC,OAAO;AAAA;AACrE,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAqBA,CAAA;EAAA,OAAS,KAAK;AAAA;AACzC,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAsBA,CAAGC,IAAI;EAAA,OAAI,OAAOA,IAAI,KAAK,QAAQ,GAAGA,IAAI,GAAGC,MAAM,CAACD,IAAI,CAAC;AAAA;AACrF,IAAME,sBAAsB,GAAG,SAAzBA,sBAAsBA,CAAA;EAAA,OAAU;IACpCC,gBAAgB,EAAE,IAAI;IACtBC,cAAc,EAAE;EAClB,CAAC;AAAA,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,OAAOA,CAACC,MAAM,EAAE;EACvB,IAAAC,qBAAA,GAqBID,MAAM,CApBRE,eAAe;IAAfA,eAAe,GAAAD,qBAAA,cAAGd,YAAY,GAAAc,qBAAA;IAAAE,qBAAA,GAoB5BH,MAAM,CAnBRI,sBAAsB;IAAtBA,sBAAsB,GAAAD,qBAAA,cAAG,KAAK,GAAAA,qBAAA;IAAAE,qBAAA,GAmB5BL,MAAM,CAlBRM,eAAe;IAAfA,eAAe,GAAAD,qBAAA,cAAG,KAAK,GAAAA,qBAAA;IAAAE,qBAAA,GAkBrBP,MAAM,CAjBRQ,eAAe;IAAfA,eAAe,GAAAD,qBAAA,cAAG,kBAAkB,GAAAA,qBAAA;IAAAE,qBAAA,GAiBlCT,MAAM,CAhBRU,eAAe;IAAfA,eAAe,GAAAD,qBAAA,cAAGb,sBAAsB,GAAAa,qBAAA;IACxCE,iBAAiB,GAefX,MAAM,CAfRW,iBAAiB;IACjBC,SAAS,GAcPZ,MAAM,CAdRY,SAAS;IAAAC,qBAAA,GAcPb,MAAM,CAbRc,cAAc;IAAdA,cAAc,GAAAD,qBAAA,cAAGrB,qBAAqB,GAAAqB,qBAAA;IAC7BE,eAAe,GAYtBf,MAAM,CAZRgB,OAAO;IAAAC,qBAAA,GAYLjB,MAAM,CAXRkB,aAAa;IAAbA,aAAa,GAAAD,qBAAA,cAAG7B,IAAI,GAAA6B,qBAAA;IACpBE,KAAK,GAUHnB,MAAM,CAVRmB,KAAK;IAAAC,oBAAA,GAUHpB,MAAM,CATRqB,YAAY;IAAZA,YAAY,GAAAD,oBAAA,cAAG/B,mBAAmB,GAAA+B,oBAAA;IAAAE,qBAAA,GAShCtB,MAAM,CARRuB,eAAe;IAAfA,eAAe,GAAAD,qBAAA,cAAG7B,sBAAsB,GAAA6B,qBAAA;IACxCE,QAAQ,GAONxB,MAAM,CAPRwB,QAAQ;IACRC,iBAAiB,GAMfzB,MAAM,CANRyB,iBAAiB;IAAAC,mBAAA,GAMf1B,MAAM,CALR2B,WAAW;IAAXA,WAAW,GAAAD,mBAAA,cAAG,UAAU,GAAAA,mBAAA;IAAAE,gBAAA,GAKtB5B,MAAM,CAJR6B,QAAQ;IAARA,QAAQ,GAAAD,gBAAA,cAAG,CAAC,GAAAA,gBAAA;IAAAE,qBAAA,GAIV9B,MAAM,CAHR+B,oBAAoB;IAApBA,oBAAoB,GAAAD,qBAAA,cAAG3C,YAAY,GAAA2C,qBAAA;IAAAE,qBAAA,GAGjChC,MAAM,CAFRiC,aAAa;IAAbA,aAAa,GAAAD,qBAAA,cAAG,QAAQ,GAAAA,qBAAA;IACVE,eAAe,GAC3BlC,MAAM,CADRmC,YAAY;EAEd,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;IACzC,IAAI9B,eAAe,KAAK,KAAK,IAAIG,iBAAiB,IAAI,IAAI,EAAE;MAC1D,MAAM,IAAI4B,KAAK,CAAC,0FAA0F,CAAC;IAC7G;IACA,IAAI/B,eAAe,KAAK,kBAAkB,IAAII,SAAS,IAAI,IAAI,EAAE;MAC/D,MAAM,IAAI2B,KAAK,CAAC,+FAA+F,CAAC;IAClH;EACF;EACA,IAAMC,OAAO,GAAG/D,KAAK,CAACgE,MAAM,CAAC,IAAI,CAAC;EAClC,IAAMC,SAAS,GAAG/D,UAAU,CAACoC,eAAe,EAAEyB,OAAO,CAAC;EACtD,IAAMG,qBAAqB,GAAGlE,KAAK,CAACmE,WAAW,CAAC,UAACC,KAAK,EAAEC,KAAK,EAAEC,MAAM,EAAK;IACxEtB,iBAAiB,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,iBAAiB,CAACoB,KAAK,EAAEC,KAAK,EAAEC,MAAM,CAAC;IAC5E,IAAIvC,eAAe,KAAK,KAAK,IAAIsC,KAAK,IAAI,IAAI,KAAKC,MAAM,KAAKnE,eAAe,CAACoE,SAAS,IAAID,MAAM,KAAKnE,eAAe,CAACqE,OAAO,IAAIF,MAAM,KAAKnE,eAAe,CAACsE,cAAc,CAAC,EAAE;MAC3K,IAAIC,kBAAkB;MACtBxC,iBAAiB,IAAI,IAAI,GAAG,KAAK,CAAC,GAAG,CAACwC,kBAAkB,GAAGxC,iBAAiB,CAACmC,KAAK,CAAC,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGK,kBAAkB,CAACC,KAAK,CAAC,CAAC;IACpI;EACF,CAAC,EAAE,CAACzC,iBAAiB,EAAEc,iBAAiB,EAAEjB,eAAe,CAAC,CAAC;EAC3D,IAAM6C,cAAc,GAAG5E,KAAK,CAAC6E,OAAO,CAAC;IAAA,OAAO;MAC1CzD,gBAAgB,EAAEwB,YAAY;MAC9BvB,cAAc,EAAE,SAAAA,eAACyD,YAAY,EAAEC,YAAY;QAAA,OAAKxE,cAAc,CAACuE,YAAY,EAAEC,YAAY,EAAEnC,YAAY,CAAC;MAAA;IAC1G,CAAC;EAAA,CAAC,EAAE,CAACA,YAAY,CAAC,CAAC;;EAEnB;EACA,IAAMoC,iBAAiB,GAAGhF,KAAK,CAACmE,WAAW,CAAC,UAACC,KAAK,EAAEa,KAAK,EAAEZ,KAAK,EAAEC,MAAM,EAAEY,KAAK,EAAK;IAClFzC,aAAa,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,aAAa,CAAC2B,KAAK,EAAEa,KAAK,EAAEZ,KAAK,EAAEC,MAAM,EAAEY,KAAK,CAAC;IAClF,QAAQD,KAAK;MACX,KAAK,kBAAkB;QACrBf,qBAAqB,CAACE,KAAK,EAAEC,KAAK,EAAEC,MAAM,CAAC;QAC3C;MACF,KAAK,gBAAgB;QACnBvB,QAAQ,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,QAAQ,CAACqB,KAAK,EAAEC,KAAK,EAAEC,MAAM,CAAC;QAC1D;MACF;QACE;IACJ;EACF,CAAC,EAAE,CAACJ,qBAAqB,EAAEnB,QAAQ,EAAEN,aAAa,CAAC,CAAC;;EAEpD;EACA;EACA,IAAM0C,iBAAiB,GAAGnF,KAAK,CAAC6E,OAAO,CAAC,YAAM;IAC5C,OAAO;MACLlD,sBAAsB,EAAtBA,sBAAsB;MACtBE,eAAe,EAAfA,eAAe;MACfE,eAAe,EAAfA,eAAe;MACfM,cAAc,EAAdA,cAAc;MACdO,YAAY,EAAZA,YAAY;MACZF,KAAK,EAALA,KAAK;MACLI,eAAe,EAAfA,eAAe;MACfE,iBAAiB,EAAEkB,qBAAqB;MACxChB,WAAW,EAAXA,WAAW;MACXE,QAAQ,EAARA,QAAQ;MACRI,aAAa,EAAbA,aAAa;MACboB,cAAc,EAAdA;IACF,CAAC;EACH,CAAC,EAAE,CAACjD,sBAAsB,EAAEE,eAAe,EAAEE,eAAe,EAAEM,cAAc,EAAEO,YAAY,EAAEF,KAAK,EAAEI,eAAe,EAAEoB,qBAAqB,EAAEhB,WAAW,EAAEE,QAAQ,EAAEI,aAAa,EAAEoB,cAAc,CAAC,CAAC;EACjM,IAAMQ,YAAY,GAAGnD,eAAe,CAAC,CAAC;EACtC,IAAMoD,OAAO,GAAG5B,eAAe,IAAI,IAAI,GAAGA,eAAe,GAAGrD,cAAc;EAC1E,IAAMkF,aAAa,GAAGtF,KAAK,CAAC6E,OAAO,CAAC;IAAA,OAAM9E,QAAQ,CAAC,CAAC,CAAC,EAAEuD,oBAAoB,EAAE6B,iBAAiB,CAAC;EAAA,GAAE,CAAC7B,oBAAoB,EAAE6B,iBAAiB,CAAC,CAAC;EAC3I,IAAAI,qBAAA,GAA0BjF,sBAAsB,CAAC;MAC/C+E,OAAO,EAAPA,OAAO;MACPC,aAAa,EAAbA,aAAa;MACbF,YAAY,EAAEA,YAAY;MAC1B3D,eAAe,EAAfA,eAAe;MACfmD,cAAc,EAAdA,cAAc;MACdnC,aAAa,EAAEuC;IACjB,CAAC,CAAC;IAAAQ,sBAAA,GAAAC,cAAA,CAAAF,qBAAA;IAPKL,KAAK,GAAAM,sBAAA;IAAEE,QAAQ,GAAAF,sBAAA;EAQtB,IACEpE,gBAAgB,GAEd8D,KAAK,CAFP9D,gBAAgB;IAChBC,cAAc,GACZ6D,KAAK,CADP7D,cAAc;EAEhB,IAAMsE,oBAAoB,GAAGlF,iBAAiB,CAAC,UAACmF,YAAY,EAAExB,KAAK;IAAA,OAAKsB,QAAQ,CAAC;MAC/EG,IAAI,EAAE1F,eAAe,CAACsE,cAAc;MACpCL,KAAK,EAALA,KAAK;MACLwB,YAAY,EAAZA;IACF,CAAC,CAAC;EAAA,EAAC;;EAEH;EACA,IAAME,oBAAoB,GAAGtF,SAAS,CAACa,cAAc,CAAC;EACtD,IAAM0E,sBAAsB,GAAGvF,SAAS,CAACY,gBAAgB,CAAC;EAC1D,IAAM4E,aAAa,GAAGhG,KAAK,CAACgE,MAAM,CAAC,EAAE,CAAC;EACtChE,KAAK,CAACiG,SAAS,CAAC,YAAM;IACpB;IACA;IACA,IAAI1F,cAAc,CAACyF,aAAa,CAACE,OAAO,EAAExD,KAAK,EAAEE,YAAY,CAAC,EAAE;MAC9D;IACF;IACA8C,QAAQ,CAAC;MACPG,IAAI,EAAE1F,eAAe,CAACgG,WAAW;MACjC/B,KAAK,EAAE,IAAI;MACX1B,KAAK,EAALA,KAAK;MACLsD,aAAa,EAAEA,aAAa,CAACE;IAC/B,CAAC,CAAC;IACFF,aAAa,CAACE,OAAO,GAAGxD,KAAK;EAC/B,CAAC,EAAE,CAACA,KAAK,EAAEE,YAAY,EAAE8C,QAAQ,CAAC,CAAC;;EAEnC;EACA;EACA;EACA;EACA,IAAAU,qBAAA,GAKI/F,sBAAsB,CAAC,CAAC;IAJ1BgG,sBAAsB,GAAAD,qBAAA,CAAtBC,sBAAsB;IACtBC,sBAAsB,GAAAF,qBAAA,CAAtBE,sBAAsB;IACtBC,8BAA8B,GAAAH,qBAAA,CAA9BG,8BAA8B;IAC9BC,8BAA8B,GAAAJ,qBAAA,CAA9BI,8BAA8B;EAEhCxG,KAAK,CAACiG,SAAS,CAAC,YAAM;IACpBI,sBAAsB,CAAChF,cAAc,CAAC;EACxC,CAAC,EAAE,CAACA,cAAc,EAAEgF,sBAAsB,CAAC,CAAC;EAC5CrG,KAAK,CAACiG,SAAS,CAAC,YAAM;IACpBK,sBAAsB,CAAClF,gBAAgB,CAAC;EAC1C,CAAC,EAAE,CAACA,gBAAgB,EAAEkF,sBAAsB,CAAC,CAAC;EAC9C,IAAMG,mBAAmB,GAAG,SAAtBA,mBAAmBA,CAAGC,KAAK;IAAA,OAAI,UAAAtC,KAAK,EAAI;MAC5C,IAAIuC,gBAAgB;MACpB,CAACA,gBAAgB,GAAGD,KAAK,CAACE,SAAS,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGD,gBAAgB,CAACE,IAAI,CAACH,KAAK,EAAEtC,KAAK,CAAC;MAC3F,IAAIA,KAAK,CAAC0C,mBAAmB,EAAE;QAC7B;MACF;MACA,IAAMC,oBAAoB,GAAG,CAAC,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,UAAU,CAAC;MAClE,IAAI7D,WAAW,KAAK,UAAU,EAAE;QAC9B6D,oBAAoB,CAACC,IAAI,CAAC,SAAS,EAAE,WAAW,CAAC;MACnD,CAAC,MAAM;QACLD,oBAAoB,CAACC,IAAI,CAAC,WAAW,EAAE,YAAY,CAAC;MACtD;MACA,IAAIjF,eAAe,KAAK,kBAAkB,EAAE;QAC1C;QACA;QACA;QACA;QACAgF,oBAAoB,CAACC,IAAI,CAAC,GAAG,EAAE,OAAO,CAAC;MACzC;MACA,IAAID,oBAAoB,CAACE,QAAQ,CAAC7C,KAAK,CAAC8C,GAAG,CAAC,EAAE;QAC5C9C,KAAK,CAAC+C,cAAc,CAAC,CAAC;MACxB;MACAzB,QAAQ,CAAC;QACPG,IAAI,EAAE1F,eAAe,CAACqE,OAAO;QAC7B0C,GAAG,EAAE9C,KAAK,CAAC8C,GAAG;QACd9C,KAAK,EAALA;MACF,CAAC,CAAC;MACFuB,oBAAoB,CAACvB,KAAK,CAAC;IAC7B,CAAC;EAAA;EACD,IAAMgD,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAGV,KAAK;IAAA,OAAI,UAAAtC,KAAK,EAAI;MACzC,IAAIiD,aAAa,EAAEC,gBAAgB;MACnC,CAACD,aAAa,GAAGX,KAAK,CAACa,MAAM,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGF,aAAa,CAACR,IAAI,CAACH,KAAK,EAAEtC,KAAK,CAAC;MAClF,IAAIA,KAAK,CAAC0C,mBAAmB,EAAE;QAC7B;MACF;MACA,IAAI,CAACQ,gBAAgB,GAAGvD,OAAO,CAACmC,OAAO,KAAK,IAAI,IAAIoB,gBAAgB,CAACE,QAAQ,CAACpD,KAAK,CAACqD,aAAa,CAAC,EAAE;QAClG;QACA;MACF;MACA/B,QAAQ,CAAC;QACPG,IAAI,EAAE1F,eAAe,CAACuH,IAAI;QAC1BtD,KAAK,EAALA;MACF,CAAC,CAAC;IACJ,CAAC;EAAA;EACD,IAAMuD,YAAY,GAAG,SAAfA,YAAYA,CAAA,EAA2B;IAAA,IAAvBC,aAAa,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IACtC,OAAO9H,QAAQ,CAAC,CAAC,CAAC,EAAE6H,aAAa,EAAE;MACjC,uBAAuB,EAAE7F,eAAe,KAAK,kBAAkB,IAAIX,gBAAgB,IAAI,IAAI,GAAGe,SAAS,CAACf,gBAAgB,CAAC,GAAG2G,SAAS;MACrIR,MAAM,EAAEH,gBAAgB,CAACQ,aAAa,CAAC;MACvChB,SAAS,EAAEH,mBAAmB,CAACmB,aAAa,CAAC;MAC7CI,QAAQ,EAAEjG,eAAe,KAAK,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC;MAC5CkG,GAAG,EAAEhE;IACP,CAAC,CAAC;EACJ,CAAC;EACD,IAAMiE,YAAY,GAAGlI,KAAK,CAACmE,WAAW,CAAC,UAAAlD,IAAI,EAAI;IAC7C,IAAIkH,qBAAqB;IACzB,IAAMC,KAAK,GAAG1F,KAAK,CAAC2F,SAAS,CAAC,UAAAC,CAAC;MAAA,OAAI1F,YAAY,CAAC0F,CAAC,EAAErH,IAAI,CAAC;IAAA,EAAC;IACzD,IAAMsH,QAAQ,GAAG,CAAC,CAACJ,qBAAqB,GAAGrC,oBAAoB,CAACI,OAAO,KAAK,IAAI,GAAGiC,qBAAqB,GAAG,EAAE,EAAEK,IAAI,CAAC,UAAAnE,KAAK;MAAA,OAAIA,KAAK,IAAI,IAAI,IAAIzB,YAAY,CAAC3B,IAAI,EAAEoD,KAAK,CAAC;IAAA,EAAC;IACxK,IAAMoE,QAAQ,GAAGpG,cAAc,CAACpB,IAAI,EAAEmH,KAAK,CAAC;IAC5C,IAAMM,WAAW,GAAG3C,sBAAsB,CAACG,OAAO,IAAI,IAAI,IAAItD,YAAY,CAAC3B,IAAI,EAAE8E,sBAAsB,CAACG,OAAO,CAAC;IAChH,IAAMyC,SAAS,GAAG5G,eAAe,KAAK,KAAK;IAC3C,OAAO;MACL0G,QAAQ,EAARA,QAAQ;MACRE,SAAS,EAATA,SAAS;MACTD,WAAW,EAAXA,WAAW;MACXN,KAAK,EAALA,KAAK;MACLG,QAAQ,EAARA;IACF,CAAC;EACH,CAAC,EAAE,CAAC7F,KAAK,EAAEL,cAAc,EAAEO,YAAY,EAAEkD,oBAAoB,EAAEC,sBAAsB,EAAEhE,eAAe,CAAC,CAAC;EACxG,IAAM6G,YAAY,GAAG5I,KAAK,CAAC6E,OAAO,CAAC;IAAA,OAAO;MACxCa,QAAQ,EAARA,QAAQ;MACRwC,YAAY,EAAZA,YAAY;MACZ3B,8BAA8B,EAA9BA,8BAA8B;MAC9BC,8BAA8B,EAA9BA;IACF,CAAC;EAAA,CAAC,EAAE,CAACd,QAAQ,EAAEwC,YAAY,EAAE3B,8BAA8B,EAAEC,8BAA8B,CAAC,CAAC;EAC7FxG,KAAK,CAAC6I,aAAa,CAAC;IAClB3D,KAAK,EAALA;EACF,CAAC,CAAC;EACF,OAAO;IACL0D,YAAY,EAAZA,YAAY;IACZlD,QAAQ,EAARA,QAAQ;IACRiC,YAAY,EAAZA,YAAY;IACZpF,OAAO,EAAE0B,SAAS;IAClBiB,KAAK,EAALA;EACF,CAAC;AACH;AACA,eAAe5D,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}