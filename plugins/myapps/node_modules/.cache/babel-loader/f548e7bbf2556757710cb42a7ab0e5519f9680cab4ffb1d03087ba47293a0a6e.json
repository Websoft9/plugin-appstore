{"ast":null,"code":"import getBoundingClientRect from './getBoundingClientRect';\nimport getNodeScroll from './getNodeScroll';\nimport getNodeName from './getNodeName';\nimport { isHTMLElement } from './instanceOf';\nimport getWindowScrollBarX from './getWindowScrollBarX';\nimport getDocumentElement from './getDocumentElement';\nimport isScrollParent from './isScrollParent';\n// Returns the composite rect of an element relative to its offsetParent.\n// Composite means it takes into account transforms as well as layout.\n/**\n * @param elementOrVirtualElement\n * @param offsetParent\n * @param isFixed\n */\nexport default function getCompositeRect(elementOrVirtualElement, offsetParent) {\n  var isFixed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var documentElement = getDocumentElement(offsetParent);\n  var rect = getBoundingClientRect(elementOrVirtualElement);\n  var isOffsetParentAnElement = isHTMLElement(offsetParent);\n  var scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  var offsets = {\n    x: 0,\n    y: 0\n  };\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n    if (getNodeName(offsetParent) !== 'body' ||\n    // https://github.com/popperjs/popper-core/issues/1078\n    isScrollParent(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n    if (isHTMLElement(offsetParent)) {\n      offsets = getBoundingClientRect(offsetParent);\n      offsets.x += offsetParent.clientLeft;\n      offsets.y += offsetParent.clientTop;\n    } else if (documentElement) {\n      offsets.x = getWindowScrollBarX(documentElement);\n    }\n  }\n  return {\n    x: rect.left + scroll.scrollLeft - offsets.x,\n    y: rect.top + scroll.scrollTop - offsets.y,\n    width: rect.width,\n    height: rect.height\n  };\n}","map":{"version":3,"names":["getBoundingClientRect","getNodeScroll","getNodeName","isHTMLElement","getWindowScrollBarX","getDocumentElement","isScrollParent","getCompositeRect","elementOrVirtualElement","offsetParent","isFixed","arguments","length","undefined","documentElement","rect","isOffsetParentAnElement","scroll","scrollLeft","scrollTop","offsets","x","y","clientLeft","clientTop","left","top","width","height"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@patternfly/react-core/src/helpers/Popper/thirdparty/popper-core/dom-utils/getCompositeRect.ts"],"sourcesContent":["// @ts-nocheck\nimport { Rect, VirtualElement, Window } from '../types';\nimport getBoundingClientRect from './getBoundingClientRect';\nimport getNodeScroll from './getNodeScroll';\nimport getNodeName from './getNodeName';\nimport { isHTMLElement } from './instanceOf';\nimport getWindowScrollBarX from './getWindowScrollBarX';\nimport getDocumentElement from './getDocumentElement';\nimport isScrollParent from './isScrollParent';\n\n// Returns the composite rect of an element relative to its offsetParent.\n// Composite means it takes into account transforms as well as layout.\n/**\n * @param elementOrVirtualElement\n * @param offsetParent\n * @param isFixed\n */\nexport default function getCompositeRect(\n  elementOrVirtualElement: Element | VirtualElement,\n  offsetParent: Element | Window,\n  isFixed: boolean = false\n): Rect {\n  const documentElement = getDocumentElement(offsetParent);\n  const rect = getBoundingClientRect(elementOrVirtualElement);\n  const isOffsetParentAnElement = isHTMLElement(offsetParent);\n\n  let scroll = { scrollLeft: 0, scrollTop: 0 };\n  let offsets = { x: 0, y: 0 };\n\n  if (isOffsetParentAnElement || (!isOffsetParentAnElement && !isFixed)) {\n    if (\n      getNodeName(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078\n      isScrollParent(documentElement)\n    ) {\n      scroll = getNodeScroll(offsetParent);\n    }\n\n    if (isHTMLElement(offsetParent)) {\n      offsets = getBoundingClientRect(offsetParent);\n      offsets.x += offsetParent.clientLeft;\n      offsets.y += offsetParent.clientTop;\n    } else if (documentElement) {\n      offsets.x = getWindowScrollBarX(documentElement);\n    }\n  }\n\n  return {\n    x: rect.left + scroll.scrollLeft - offsets.x,\n    y: rect.top + scroll.scrollTop - offsets.y,\n    width: rect.width,\n    height: rect.height\n  };\n}\n"],"mappings":"AAEA,OAAOA,qBAAqB,MAAM,yBAAyB;AAC3D,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAOC,WAAW,MAAM,eAAe;AACvC,SAASC,aAAa,QAAQ,cAAc;AAC5C,OAAOC,mBAAmB,MAAM,uBAAuB;AACvD,OAAOC,kBAAkB,MAAM,sBAAsB;AACrD,OAAOC,cAAc,MAAM,kBAAkB;AAE7C;AACA;AACA;;;;;AAKA,eAAc,SAAUC,gBAAgBA,CACtCC,uBAAiD,EACjDC,YAA8B,EACN;EAAA,IAAxBC,OAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAmB,KAAK;EAExB,IAAMG,eAAe,GAAGT,kBAAkB,CAACI,YAAY,CAAC;EACxD,IAAMM,IAAI,GAAGf,qBAAqB,CAACQ,uBAAuB,CAAC;EAC3D,IAAMQ,uBAAuB,GAAGb,aAAa,CAACM,YAAY,CAAC;EAE3D,IAAIQ,MAAM,GAAG;IAAEC,UAAU,EAAE,CAAC;IAAEC,SAAS,EAAE;EAAC,CAAE;EAC5C,IAAIC,OAAO,GAAG;IAAEC,CAAC,EAAE,CAAC;IAAEC,CAAC,EAAE;EAAC,CAAE;EAE5B,IAAIN,uBAAuB,IAAK,CAACA,uBAAuB,IAAI,CAACN,OAAQ,EAAE;IACrE,IACER,WAAW,CAACO,YAAY,CAAC,KAAK,MAAM;IAAI;IACxCH,cAAc,CAACQ,eAAe,CAAC,EAC/B;MACAG,MAAM,GAAGhB,aAAa,CAACQ,YAAY,CAAC;;IAGtC,IAAIN,aAAa,CAACM,YAAY,CAAC,EAAE;MAC/BW,OAAO,GAAGpB,qBAAqB,CAACS,YAAY,CAAC;MAC7CW,OAAO,CAACC,CAAC,IAAIZ,YAAY,CAACc,UAAU;MACpCH,OAAO,CAACE,CAAC,IAAIb,YAAY,CAACe,SAAS;KACpC,MAAM,IAAIV,eAAe,EAAE;MAC1BM,OAAO,CAACC,CAAC,GAAGjB,mBAAmB,CAACU,eAAe,CAAC;;;EAIpD,OAAO;IACLO,CAAC,EAAEN,IAAI,CAACU,IAAI,GAAGR,MAAM,CAACC,UAAU,GAAGE,OAAO,CAACC,CAAC;IAC5CC,CAAC,EAAEP,IAAI,CAACW,GAAG,GAAGT,MAAM,CAACE,SAAS,GAAGC,OAAO,CAACE,CAAC;IAC1CK,KAAK,EAAEZ,IAAI,CAACY,KAAK;IACjBC,MAAM,EAAEb,IAAI,CAACa;GACd;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}