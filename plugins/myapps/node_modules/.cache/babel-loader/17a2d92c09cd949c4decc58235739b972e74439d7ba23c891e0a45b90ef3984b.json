{"ast":null,"code":"import { Trie } from '@wry/trie';\nexport { Trie as KeyTrie } from '@wry/trie';\nimport { Slot } from '@wry/context';\nexport { asyncFromGen, bind as bindContext, noContext, setTimeout } from '@wry/context';\nfunction defaultDispose() {}\nvar Cache = /** @class */function () {\n  function Cache(max, dispose) {\n    if (max === void 0) {\n      max = Infinity;\n    }\n    if (dispose === void 0) {\n      dispose = defaultDispose;\n    }\n    this.max = max;\n    this.dispose = dispose;\n    this.map = new Map();\n    this.newest = null;\n    this.oldest = null;\n  }\n  Cache.prototype.has = function (key) {\n    return this.map.has(key);\n  };\n  Cache.prototype.get = function (key) {\n    var node = this.getNode(key);\n    return node && node.value;\n  };\n  Cache.prototype.getNode = function (key) {\n    var node = this.map.get(key);\n    if (node && node !== this.newest) {\n      var older = node.older,\n        newer = node.newer;\n      if (newer) {\n        newer.older = older;\n      }\n      if (older) {\n        older.newer = newer;\n      }\n      node.older = this.newest;\n      node.older.newer = node;\n      node.newer = null;\n      this.newest = node;\n      if (node === this.oldest) {\n        this.oldest = newer;\n      }\n    }\n    return node;\n  };\n  Cache.prototype.set = function (key, value) {\n    var node = this.getNode(key);\n    if (node) {\n      return node.value = value;\n    }\n    node = {\n      key: key,\n      value: value,\n      newer: null,\n      older: this.newest\n    };\n    if (this.newest) {\n      this.newest.newer = node;\n    }\n    this.newest = node;\n    this.oldest = this.oldest || node;\n    this.map.set(key, node);\n    return node.value;\n  };\n  Cache.prototype.clean = function () {\n    while (this.oldest && this.map.size > this.max) {\n      this.delete(this.oldest.key);\n    }\n  };\n  Cache.prototype.delete = function (key) {\n    var node = this.map.get(key);\n    if (node) {\n      if (node === this.newest) {\n        this.newest = node.older;\n      }\n      if (node === this.oldest) {\n        this.oldest = node.newer;\n      }\n      if (node.newer) {\n        node.newer.older = node.older;\n      }\n      if (node.older) {\n        node.older.newer = node.newer;\n      }\n      this.map.delete(key);\n      this.dispose(node.value, key);\n      return true;\n    }\n    return false;\n  };\n  return Cache;\n}();\nvar parentEntrySlot = new Slot();\nvar _a;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar\n// This Array.from polyfill is restricted to working with Set<any> for now,\n// but we can improve the polyfill and add other input types, as needed. Note\n// that this fallback implementation will only be used if the host environment\n// does not support a native Array.from function. In most modern JS runtimes,\n// the toArray function exported here will be === Array.from.\ntoArray = (_a = Array.from, _a === void 0 ? function (collection) {\n  var array = [];\n  collection.forEach(function (item) {\n    return array.push(item);\n  });\n  return array;\n} : _a);\nfunction maybeUnsubscribe(entryOrDep) {\n  var unsubscribe = entryOrDep.unsubscribe;\n  if (typeof unsubscribe === \"function\") {\n    entryOrDep.unsubscribe = void 0;\n    unsubscribe();\n  }\n}\nvar emptySetPool = [];\nvar POOL_TARGET_SIZE = 100;\n// Since this package might be used browsers, we should avoid using the\n// Node built-in assert module.\nfunction assert(condition, optionalMessage) {\n  if (!condition) {\n    throw new Error(optionalMessage || \"assertion failure\");\n  }\n}\nfunction valueIs(a, b) {\n  var len = a.length;\n  return (\n    // Unknown values are not equal to each other.\n    len > 0 &&\n    // Both values must be ordinary (or both exceptional) to be equal.\n    len === b.length &&\n    // The underlying value or exception must be the same.\n    a[len - 1] === b[len - 1]\n  );\n}\nfunction valueGet(value) {\n  switch (value.length) {\n    case 0:\n      throw new Error(\"unknown value\");\n    case 1:\n      return value[0];\n    case 2:\n      throw value[1];\n  }\n}\nfunction valueCopy(value) {\n  return value.slice(0);\n}\nvar Entry = /** @class */function () {\n  function Entry(fn) {\n    this.fn = fn;\n    this.parents = new Set();\n    this.childValues = new Map();\n    // When this Entry has children that are dirty, this property becomes\n    // a Set containing other Entry objects, borrowed from emptySetPool.\n    // When the set becomes empty, it gets recycled back to emptySetPool.\n    this.dirtyChildren = null;\n    this.dirty = true;\n    this.recomputing = false;\n    this.value = [];\n    this.deps = null;\n    ++Entry.count;\n  }\n  Entry.prototype.peek = function () {\n    if (this.value.length === 1 && !mightBeDirty(this)) {\n      rememberParent(this);\n      return this.value[0];\n    }\n  };\n  // This is the most important method of the Entry API, because it\n  // determines whether the cached this.value can be returned immediately,\n  // or must be recomputed. The overall performance of the caching system\n  // depends on the truth of the following observations: (1) this.dirty is\n  // usually false, (2) this.dirtyChildren is usually null/empty, and thus\n  // (3) valueGet(this.value) is usually returned without recomputation.\n  Entry.prototype.recompute = function (args) {\n    assert(!this.recomputing, \"already recomputing\");\n    rememberParent(this);\n    return mightBeDirty(this) ? reallyRecompute(this, args) : valueGet(this.value);\n  };\n  Entry.prototype.setDirty = function () {\n    if (this.dirty) return;\n    this.dirty = true;\n    this.value.length = 0;\n    reportDirty(this);\n    // We can go ahead and unsubscribe here, since any further dirty\n    // notifications we receive will be redundant, and unsubscribing may\n    // free up some resources, e.g. file watchers.\n    maybeUnsubscribe(this);\n  };\n  Entry.prototype.dispose = function () {\n    var _this = this;\n    this.setDirty();\n    // Sever any dependency relationships with our own children, so those\n    // children don't retain this parent Entry in their child.parents sets,\n    // thereby preventing it from being fully garbage collected.\n    forgetChildren(this);\n    // Because this entry has been kicked out of the cache (in index.js),\n    // we've lost the ability to find out if/when this entry becomes dirty,\n    // whether that happens through a subscription, because of a direct call\n    // to entry.setDirty(), or because one of its children becomes dirty.\n    // Because of this loss of future information, we have to assume the\n    // worst (that this entry might have become dirty very soon), so we must\n    // immediately mark this entry's parents as dirty. Normally we could\n    // just call entry.setDirty() rather than calling parent.setDirty() for\n    // each parent, but that would leave this entry in parent.childValues\n    // and parent.dirtyChildren, which would prevent the child from being\n    // truly forgotten.\n    eachParent(this, function (parent, child) {\n      parent.setDirty();\n      forgetChild(parent, _this);\n    });\n  };\n  Entry.prototype.forget = function () {\n    // The code that creates Entry objects in index.ts will replace this method\n    // with one that actually removes the Entry from the cache, which will also\n    // trigger the entry.dispose method.\n    this.dispose();\n  };\n  Entry.prototype.dependOn = function (dep) {\n    dep.add(this);\n    if (!this.deps) {\n      this.deps = emptySetPool.pop() || new Set();\n    }\n    this.deps.add(dep);\n  };\n  Entry.prototype.forgetDeps = function () {\n    var _this = this;\n    if (this.deps) {\n      toArray(this.deps).forEach(function (dep) {\n        return dep.delete(_this);\n      });\n      this.deps.clear();\n      emptySetPool.push(this.deps);\n      this.deps = null;\n    }\n  };\n  Entry.count = 0;\n  return Entry;\n}();\nfunction rememberParent(child) {\n  var parent = parentEntrySlot.getValue();\n  if (parent) {\n    child.parents.add(parent);\n    if (!parent.childValues.has(child)) {\n      parent.childValues.set(child, []);\n    }\n    if (mightBeDirty(child)) {\n      reportDirtyChild(parent, child);\n    } else {\n      reportCleanChild(parent, child);\n    }\n    return parent;\n  }\n}\nfunction reallyRecompute(entry, args) {\n  forgetChildren(entry);\n  // Set entry as the parent entry while calling recomputeNewValue(entry).\n  parentEntrySlot.withValue(entry, recomputeNewValue, [entry, args]);\n  if (maybeSubscribe(entry, args)) {\n    // If we successfully recomputed entry.value and did not fail to\n    // (re)subscribe, then this Entry is no longer explicitly dirty.\n    setClean(entry);\n  }\n  return valueGet(entry.value);\n}\nfunction recomputeNewValue(entry, args) {\n  entry.recomputing = true;\n  // Set entry.value as unknown.\n  entry.value.length = 0;\n  try {\n    // If entry.fn succeeds, entry.value will become a normal Value.\n    entry.value[0] = entry.fn.apply(null, args);\n  } catch (e) {\n    // If entry.fn throws, entry.value will become exceptional.\n    entry.value[1] = e;\n  }\n  // Either way, this line is always reached.\n  entry.recomputing = false;\n}\nfunction mightBeDirty(entry) {\n  return entry.dirty || !!(entry.dirtyChildren && entry.dirtyChildren.size);\n}\nfunction setClean(entry) {\n  entry.dirty = false;\n  if (mightBeDirty(entry)) {\n    // This Entry may still have dirty children, in which case we can't\n    // let our parents know we're clean just yet.\n    return;\n  }\n  reportClean(entry);\n}\nfunction reportDirty(child) {\n  eachParent(child, reportDirtyChild);\n}\nfunction reportClean(child) {\n  eachParent(child, reportCleanChild);\n}\nfunction eachParent(child, callback) {\n  var parentCount = child.parents.size;\n  if (parentCount) {\n    var parents = toArray(child.parents);\n    for (var i = 0; i < parentCount; ++i) {\n      callback(parents[i], child);\n    }\n  }\n}\n// Let a parent Entry know that one of its children may be dirty.\nfunction reportDirtyChild(parent, child) {\n  // Must have called rememberParent(child) before calling\n  // reportDirtyChild(parent, child).\n  assert(parent.childValues.has(child));\n  assert(mightBeDirty(child));\n  var parentWasClean = !mightBeDirty(parent);\n  if (!parent.dirtyChildren) {\n    parent.dirtyChildren = emptySetPool.pop() || new Set();\n  } else if (parent.dirtyChildren.has(child)) {\n    // If we already know this child is dirty, then we must have already\n    // informed our own parents that we are dirty, so we can terminate\n    // the recursion early.\n    return;\n  }\n  parent.dirtyChildren.add(child);\n  // If parent was clean before, it just became (possibly) dirty (according to\n  // mightBeDirty), since we just added child to parent.dirtyChildren.\n  if (parentWasClean) {\n    reportDirty(parent);\n  }\n}\n// Let a parent Entry know that one of its children is no longer dirty.\nfunction reportCleanChild(parent, child) {\n  // Must have called rememberChild(child) before calling\n  // reportCleanChild(parent, child).\n  assert(parent.childValues.has(child));\n  assert(!mightBeDirty(child));\n  var childValue = parent.childValues.get(child);\n  if (childValue.length === 0) {\n    parent.childValues.set(child, valueCopy(child.value));\n  } else if (!valueIs(childValue, child.value)) {\n    parent.setDirty();\n  }\n  removeDirtyChild(parent, child);\n  if (mightBeDirty(parent)) {\n    return;\n  }\n  reportClean(parent);\n}\nfunction removeDirtyChild(parent, child) {\n  var dc = parent.dirtyChildren;\n  if (dc) {\n    dc.delete(child);\n    if (dc.size === 0) {\n      if (emptySetPool.length < POOL_TARGET_SIZE) {\n        emptySetPool.push(dc);\n      }\n      parent.dirtyChildren = null;\n    }\n  }\n}\n// Removes all children from this entry and returns an array of the\n// removed children.\nfunction forgetChildren(parent) {\n  if (parent.childValues.size > 0) {\n    parent.childValues.forEach(function (_value, child) {\n      forgetChild(parent, child);\n    });\n  }\n  // Remove this parent Entry from any sets to which it was added by the\n  // addToSet method.\n  parent.forgetDeps();\n  // After we forget all our children, this.dirtyChildren must be empty\n  // and therefore must have been reset to null.\n  assert(parent.dirtyChildren === null);\n}\nfunction forgetChild(parent, child) {\n  child.parents.delete(parent);\n  parent.childValues.delete(child);\n  removeDirtyChild(parent, child);\n}\nfunction maybeSubscribe(entry, args) {\n  if (typeof entry.subscribe === \"function\") {\n    try {\n      maybeUnsubscribe(entry); // Prevent double subscriptions.\n      entry.unsubscribe = entry.subscribe.apply(null, args);\n    } catch (e) {\n      // If this Entry has a subscribe function and it threw an exception\n      // (or an unsubscribe function it previously returned now throws),\n      // return false to indicate that we were not able to subscribe (or\n      // unsubscribe), and this Entry should remain dirty.\n      entry.setDirty();\n      return false;\n    }\n  }\n  // Returning true indicates either that there was no entry.subscribe\n  // function or that it succeeded.\n  return true;\n}\nvar EntryMethods = {\n  setDirty: true,\n  dispose: true,\n  forget: true // Fully remove parent Entry from LRU cache and computation graph\n};\n\nfunction dep(options) {\n  var depsByKey = new Map();\n  var subscribe = options && options.subscribe;\n  function depend(key) {\n    var parent = parentEntrySlot.getValue();\n    if (parent) {\n      var dep_1 = depsByKey.get(key);\n      if (!dep_1) {\n        depsByKey.set(key, dep_1 = new Set());\n      }\n      parent.dependOn(dep_1);\n      if (typeof subscribe === \"function\") {\n        maybeUnsubscribe(dep_1);\n        dep_1.unsubscribe = subscribe(key);\n      }\n    }\n  }\n  depend.dirty = function dirty(key, entryMethodName) {\n    var dep = depsByKey.get(key);\n    if (dep) {\n      var m_1 = entryMethodName && hasOwnProperty.call(EntryMethods, entryMethodName) ? entryMethodName : \"setDirty\";\n      // We have to use toArray(dep).forEach instead of dep.forEach, because\n      // modifying a Set while iterating over it can cause elements in the Set\n      // to be removed from the Set before they've been iterated over.\n      toArray(dep).forEach(function (entry) {\n        return entry[m_1]();\n      });\n      depsByKey.delete(key);\n      maybeUnsubscribe(dep);\n    }\n  };\n  return depend;\n}\nfunction makeDefaultMakeCacheKeyFunction() {\n  var keyTrie = new Trie(typeof WeakMap === \"function\");\n  return function () {\n    return keyTrie.lookupArray(arguments);\n  };\n}\n// The defaultMakeCacheKey function is remarkably powerful, because it gives\n// a unique object for any shallow-identical list of arguments. If you need\n// to implement a custom makeCacheKey function, you may find it helpful to\n// delegate the final work to defaultMakeCacheKey, which is why we export it\n// here. However, you may want to avoid defaultMakeCacheKey if your runtime\n// does not support WeakMap, or you have the ability to return a string key.\n// In those cases, just write your own custom makeCacheKey functions.\nvar defaultMakeCacheKey = makeDefaultMakeCacheKeyFunction();\nvar caches = new Set();\nfunction wrap(originalFunction, options) {\n  if (options === void 0) {\n    options = Object.create(null);\n  }\n  var cache = new Cache(options.max || Math.pow(2, 16), function (entry) {\n    return entry.dispose();\n  });\n  var keyArgs = options.keyArgs;\n  var makeCacheKey = options.makeCacheKey || makeDefaultMakeCacheKeyFunction();\n  var optimistic = function optimistic() {\n    var key = makeCacheKey.apply(null, keyArgs ? keyArgs.apply(null, arguments) : arguments);\n    if (key === void 0) {\n      return originalFunction.apply(null, arguments);\n    }\n    var entry = cache.get(key);\n    if (!entry) {\n      cache.set(key, entry = new Entry(originalFunction));\n      entry.subscribe = options.subscribe;\n      // Give the Entry the ability to trigger cache.delete(key), even though\n      // the Entry itself does not know about key or cache.\n      entry.forget = function () {\n        return cache.delete(key);\n      };\n    }\n    var value = entry.recompute(Array.prototype.slice.call(arguments));\n    // Move this entry to the front of the least-recently used queue,\n    // since we just finished computing its value.\n    cache.set(key, entry);\n    caches.add(cache);\n    // Clean up any excess entries in the cache, but only if there is no\n    // active parent entry, meaning we're not in the middle of a larger\n    // computation that might be flummoxed by the cleaning.\n    if (!parentEntrySlot.hasValue()) {\n      caches.forEach(function (cache) {\n        return cache.clean();\n      });\n      caches.clear();\n    }\n    return value;\n  };\n  Object.defineProperty(optimistic, \"size\", {\n    get: function get() {\n      return cache[\"map\"].size;\n    },\n    configurable: false,\n    enumerable: false\n  });\n  function dirtyKey(key) {\n    var entry = cache.get(key);\n    if (entry) {\n      entry.setDirty();\n    }\n  }\n  optimistic.dirtyKey = dirtyKey;\n  optimistic.dirty = function dirty() {\n    dirtyKey(makeCacheKey.apply(null, arguments));\n  };\n  function peekKey(key) {\n    var entry = cache.get(key);\n    if (entry) {\n      return entry.peek();\n    }\n  }\n  optimistic.peekKey = peekKey;\n  optimistic.peek = function peek() {\n    return peekKey(makeCacheKey.apply(null, arguments));\n  };\n  function forgetKey(key) {\n    return cache.delete(key);\n  }\n  optimistic.forgetKey = forgetKey;\n  optimistic.forget = function forget() {\n    return forgetKey(makeCacheKey.apply(null, arguments));\n  };\n  optimistic.makeCacheKey = makeCacheKey;\n  optimistic.getKey = keyArgs ? function getKey() {\n    return makeCacheKey.apply(null, keyArgs.apply(null, arguments));\n  } : makeCacheKey;\n  return Object.freeze(optimistic);\n}\nexport { defaultMakeCacheKey, dep, wrap };","map":{"version":3,"names":["defaultDispose","Cache","max","dispose","Infinity","map","Map","newest","oldest","prototype","has","key","get","node","getNode","value","older","newer","set","clean","size","delete","parentEntrySlot","Slot","hasOwnProperty","Object","toArray","_a","Array","from","collection","array","forEach","item","push","maybeUnsubscribe","entryOrDep","unsubscribe","emptySetPool","POOL_TARGET_SIZE","assert","condition","optionalMessage","Error","valueIs","a","b","len","length","valueGet","valueCopy","slice","Entry","fn","parents","Set","childValues","dirtyChildren","dirty","recomputing","deps","count","peek","mightBeDirty","rememberParent","recompute","args","reallyRecompute","setDirty","reportDirty","_this","forgetChildren","eachParent","parent","child","forgetChild","forget","dependOn","dep","add","pop","forgetDeps","clear","getValue","reportDirtyChild","reportCleanChild","entry","withValue","recomputeNewValue","maybeSubscribe","setClean","apply","e","reportClean","callback","parentCount","i","parentWasClean","childValue","removeDirtyChild","dc","_value","subscribe","EntryMethods","options","depsByKey","depend","dep_1","entryMethodName","m_1","call","makeDefaultMakeCacheKeyFunction","keyTrie","Trie","WeakMap","lookupArray","arguments","defaultMakeCacheKey","caches","wrap","originalFunction","create","cache","Math","pow","keyArgs","makeCacheKey","optimistic","hasValue","defineProperty","configurable","enumerable","dirtyKey","peekKey","forgetKey","getKey","freeze"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/optimism/src/cache.ts","/data/stackhub-web/plugins/myapps/node_modules/optimism/src/context.ts","/data/stackhub-web/plugins/myapps/node_modules/optimism/src/helpers.ts","/data/stackhub-web/plugins/myapps/node_modules/optimism/src/entry.ts","/data/stackhub-web/plugins/myapps/node_modules/optimism/src/dep.ts","/data/stackhub-web/plugins/myapps/node_modules/optimism/src/index.ts"],"sourcesContent":["interface Node<K, V> {\n  key: K;\n  value: V;\n  newer: Node<K, V> | null;\n  older: Node<K, V> | null;\n}\n\nfunction defaultDispose() {}\n\nexport class Cache<K = any, V = any> {\n  private map = new Map<K, Node<K, V>>();\n  private newest: Node<K, V> | null = null;\n  private oldest: Node<K, V> | null = null;\n\n  constructor(\n    private max = Infinity,\n    public dispose: (value: V, key: K) => void = defaultDispose,\n  ) {}\n\n  public has(key: K): boolean {\n    return this.map.has(key);\n  }\n\n  public get(key: K): V | undefined {\n    const node = this.getNode(key);\n    return node && node.value;\n  }\n\n  private getNode(key: K): Node<K, V> | undefined {\n    const node = this.map.get(key);\n\n    if (node && node !== this.newest) {\n      const { older, newer } = node;\n\n      if (newer) {\n        newer.older = older;\n      }\n\n      if (older) {\n        older.newer = newer;\n      }\n\n      node.older = this.newest;\n      node.older!.newer = node;\n\n      node.newer = null;\n      this.newest = node;\n\n      if (node === this.oldest) {\n        this.oldest = newer;\n      }\n    }\n\n    return node;\n  }\n\n  public set(key: K, value: V): V {\n    let node = this.getNode(key);\n    if (node) {\n      return node.value = value;\n    }\n\n    node = {\n      key,\n      value,\n      newer: null,\n      older: this.newest\n    };\n\n    if (this.newest) {\n      this.newest.newer = node;\n    }\n\n    this.newest = node;\n    this.oldest = this.oldest || node;\n\n    this.map.set(key, node);\n\n    return node.value;\n  }\n\n  public clean() {\n    while (this.oldest && this.map.size > this.max) {\n      this.delete(this.oldest.key);\n    }\n  }\n\n  public delete(key: K): boolean {\n    const node = this.map.get(key);\n    if (node) {\n      if (node === this.newest) {\n        this.newest = node.older;\n      }\n\n      if (node === this.oldest) {\n        this.oldest = node.newer;\n      }\n\n      if (node.newer) {\n        node.newer.older = node.older;\n      }\n\n      if (node.older) {\n        node.older.newer = node.newer;\n      }\n\n      this.map.delete(key);\n      this.dispose(node.value, key);\n\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { AnyEntry } from \"./entry\";\nimport { Slot } from \"@wry/context\";\n\nexport const parentEntrySlot = new Slot<AnyEntry>();\n\nexport {\n  bind as bindContext,\n  noContext,\n  setTimeout,\n  asyncFromGen,\n} from \"@wry/context\";\n","export const {\n  hasOwnProperty,\n} = Object.prototype;\n\nexport const {\n  // This Array.from polyfill is restricted to working with Set<any> for now,\n  // but we can improve the polyfill and add other input types, as needed. Note\n  // that this fallback implementation will only be used if the host environment\n  // does not support a native Array.from function. In most modern JS runtimes,\n  // the toArray function exported here will be === Array.from.\n  from: toArray = (collection: Set<any>) => {\n    const array: any[] = [];\n    collection.forEach(item => array.push(item));\n    return array;\n  },\n} = Array;\n\nexport type Unsubscribable = {\n  unsubscribe?: void | (() => any);\n}\n\nexport function maybeUnsubscribe(entryOrDep: Unsubscribable) {\n  const { unsubscribe } = entryOrDep;\n  if (typeof unsubscribe === \"function\") {\n    entryOrDep.unsubscribe = void 0;\n    unsubscribe();\n  }\n}\n","import { parentEntrySlot } from \"./context\";\nimport { OptimisticWrapOptions } from \"./index\";\nimport { Dep } from \"./dep\";\nimport { maybeUnsubscribe, toArray, Unsubscribable } from \"./helpers\";\n\nconst emptySetPool: Set<any>[] = [];\nconst POOL_TARGET_SIZE = 100;\n\n// Since this package might be used browsers, we should avoid using the\n// Node built-in assert module.\nfunction assert(condition: any, optionalMessage?: string) {\n  if (! condition) {\n    throw new Error(optionalMessage || \"assertion failure\");\n  }\n}\n\n// Since exceptions are cached just like normal values, we need an efficient\n// way of representing unknown, ordinary, and exceptional values.\ntype Value<T> =\n  | []           // unknown\n  | [T]          // known value\n  | [void, any]; // known exception\n\nfunction valueIs(a: Value<any>, b: Value<any>) {\n  const len = a.length;\n  return (\n    // Unknown values are not equal to each other.\n    len > 0 &&\n    // Both values must be ordinary (or both exceptional) to be equal.\n    len === b.length &&\n    // The underlying value or exception must be the same.\n    a[len - 1] === b[len - 1]\n  );\n}\n\nfunction valueGet<T>(value: Value<T>): T {\n  switch (value.length) {\n    case 0: throw new Error(\"unknown value\");\n    case 1: return value[0];\n    case 2: throw value[1];\n  }\n}\n\nfunction valueCopy<T>(value: Value<T>): Value<T> {\n  return value.slice(0) as Value<T>;\n}\n\nexport type AnyEntry = Entry<any, any>;\n\nexport class Entry<TArgs extends any[], TValue> {\n  public static count = 0;\n\n  public subscribe: OptimisticWrapOptions<TArgs>[\"subscribe\"];\n  public unsubscribe: Unsubscribable[\"unsubscribe\"];\n\n  public readonly parents = new Set<AnyEntry>();\n  public readonly childValues = new Map<AnyEntry, Value<any>>();\n\n  // When this Entry has children that are dirty, this property becomes\n  // a Set containing other Entry objects, borrowed from emptySetPool.\n  // When the set becomes empty, it gets recycled back to emptySetPool.\n  public dirtyChildren: Set<AnyEntry> | null = null;\n\n  public dirty = true;\n  public recomputing = false;\n  public readonly value: Value<TValue> = [];\n\n  constructor(\n    public readonly fn: (...args: TArgs) => TValue,\n  ) {\n    ++Entry.count;\n  }\n\n  public peek(): TValue | undefined {\n    if (this.value.length === 1 && !mightBeDirty(this)) {\n      rememberParent(this);\n      return this.value[0];\n    }\n  }\n\n  // This is the most important method of the Entry API, because it\n  // determines whether the cached this.value can be returned immediately,\n  // or must be recomputed. The overall performance of the caching system\n  // depends on the truth of the following observations: (1) this.dirty is\n  // usually false, (2) this.dirtyChildren is usually null/empty, and thus\n  // (3) valueGet(this.value) is usually returned without recomputation.\n  public recompute(args: TArgs): TValue {\n    assert(! this.recomputing, \"already recomputing\");\n    rememberParent(this);\n    return mightBeDirty(this)\n      ? reallyRecompute(this, args)\n      : valueGet(this.value);\n  }\n\n  public setDirty() {\n    if (this.dirty) return;\n    this.dirty = true;\n    this.value.length = 0;\n    reportDirty(this);\n    // We can go ahead and unsubscribe here, since any further dirty\n    // notifications we receive will be redundant, and unsubscribing may\n    // free up some resources, e.g. file watchers.\n    maybeUnsubscribe(this);\n  }\n\n  public dispose() {\n    this.setDirty();\n\n    // Sever any dependency relationships with our own children, so those\n    // children don't retain this parent Entry in their child.parents sets,\n    // thereby preventing it from being fully garbage collected.\n    forgetChildren(this);\n\n    // Because this entry has been kicked out of the cache (in index.js),\n    // we've lost the ability to find out if/when this entry becomes dirty,\n    // whether that happens through a subscription, because of a direct call\n    // to entry.setDirty(), or because one of its children becomes dirty.\n    // Because of this loss of future information, we have to assume the\n    // worst (that this entry might have become dirty very soon), so we must\n    // immediately mark this entry's parents as dirty. Normally we could\n    // just call entry.setDirty() rather than calling parent.setDirty() for\n    // each parent, but that would leave this entry in parent.childValues\n    // and parent.dirtyChildren, which would prevent the child from being\n    // truly forgotten.\n    eachParent(this, (parent, child) => {\n      parent.setDirty();\n      forgetChild(parent, this);\n    });\n  }\n\n  public forget() {\n    // The code that creates Entry objects in index.ts will replace this method\n    // with one that actually removes the Entry from the cache, which will also\n    // trigger the entry.dispose method.\n    this.dispose();\n  }\n\n  private deps: Set<Dep<any>> | null = null;\n\n  public dependOn(dep: Dep<any>) {\n    dep.add(this);\n    if (! this.deps) {\n      this.deps = emptySetPool.pop() || new Set<Set<AnyEntry>>();\n    }\n    this.deps.add(dep);\n  }\n\n  public forgetDeps() {\n    if (this.deps) {\n      toArray(this.deps).forEach(dep => dep.delete(this));\n      this.deps.clear();\n      emptySetPool.push(this.deps);\n      this.deps = null;\n    }\n  }\n}\n\nfunction rememberParent(child: AnyEntry) {\n  const parent = parentEntrySlot.getValue();\n  if (parent) {\n    child.parents.add(parent);\n\n    if (! parent.childValues.has(child)) {\n      parent.childValues.set(child, []);\n    }\n\n    if (mightBeDirty(child)) {\n      reportDirtyChild(parent, child);\n    } else {\n      reportCleanChild(parent, child);\n    }\n\n    return parent;\n  }\n}\n\nfunction reallyRecompute(entry: AnyEntry, args: any[]) {\n  forgetChildren(entry);\n\n  // Set entry as the parent entry while calling recomputeNewValue(entry).\n  parentEntrySlot.withValue(entry, recomputeNewValue, [entry, args]);\n\n  if (maybeSubscribe(entry, args)) {\n    // If we successfully recomputed entry.value and did not fail to\n    // (re)subscribe, then this Entry is no longer explicitly dirty.\n    setClean(entry);\n  }\n\n  return valueGet(entry.value);\n}\n\nfunction recomputeNewValue(entry: AnyEntry, args: any[]) {\n  entry.recomputing = true;\n  // Set entry.value as unknown.\n  entry.value.length = 0;\n  try {\n    // If entry.fn succeeds, entry.value will become a normal Value.\n    entry.value[0] = entry.fn.apply(null, args);\n  } catch (e) {\n    // If entry.fn throws, entry.value will become exceptional.\n    entry.value[1] = e;\n  }\n  // Either way, this line is always reached.\n  entry.recomputing = false;\n}\n\nfunction mightBeDirty(entry: AnyEntry) {\n  return entry.dirty || !!(entry.dirtyChildren && entry.dirtyChildren.size);\n}\n\nfunction setClean(entry: AnyEntry) {\n  entry.dirty = false;\n\n  if (mightBeDirty(entry)) {\n    // This Entry may still have dirty children, in which case we can't\n    // let our parents know we're clean just yet.\n    return;\n  }\n\n  reportClean(entry);\n}\n\nfunction reportDirty(child: AnyEntry) {\n  eachParent(child, reportDirtyChild);\n}\n\nfunction reportClean(child: AnyEntry) {\n  eachParent(child, reportCleanChild);\n}\n\nfunction eachParent(\n  child: AnyEntry,\n  callback: (parent: AnyEntry, child: AnyEntry) => any,\n) {\n  const parentCount = child.parents.size;\n  if (parentCount) {\n    const parents = toArray(child.parents);\n    for (let i = 0; i < parentCount; ++i) {\n      callback(parents[i], child);\n    }\n  }\n}\n\n// Let a parent Entry know that one of its children may be dirty.\nfunction reportDirtyChild(parent: AnyEntry, child: AnyEntry) {\n  // Must have called rememberParent(child) before calling\n  // reportDirtyChild(parent, child).\n  assert(parent.childValues.has(child));\n  assert(mightBeDirty(child));\n  const parentWasClean = !mightBeDirty(parent);\n\n  if (! parent.dirtyChildren) {\n    parent.dirtyChildren = emptySetPool.pop() || new Set;\n\n  } else if (parent.dirtyChildren.has(child)) {\n    // If we already know this child is dirty, then we must have already\n    // informed our own parents that we are dirty, so we can terminate\n    // the recursion early.\n    return;\n  }\n\n  parent.dirtyChildren.add(child);\n\n  // If parent was clean before, it just became (possibly) dirty (according to\n  // mightBeDirty), since we just added child to parent.dirtyChildren.\n  if (parentWasClean) {\n    reportDirty(parent);\n  }\n}\n\n// Let a parent Entry know that one of its children is no longer dirty.\nfunction reportCleanChild(parent: AnyEntry, child: AnyEntry) {\n  // Must have called rememberChild(child) before calling\n  // reportCleanChild(parent, child).\n  assert(parent.childValues.has(child));\n  assert(! mightBeDirty(child));\n\n  const childValue = parent.childValues.get(child)!;\n  if (childValue.length === 0) {\n    parent.childValues.set(child, valueCopy(child.value));\n  } else if (! valueIs(childValue, child.value)) {\n    parent.setDirty();\n  }\n\n  removeDirtyChild(parent, child);\n\n  if (mightBeDirty(parent)) {\n    return;\n  }\n\n  reportClean(parent);\n}\n\nfunction removeDirtyChild(parent: AnyEntry, child: AnyEntry) {\n  const dc = parent.dirtyChildren;\n  if (dc) {\n    dc.delete(child);\n    if (dc.size === 0) {\n      if (emptySetPool.length < POOL_TARGET_SIZE) {\n        emptySetPool.push(dc);\n      }\n      parent.dirtyChildren = null;\n    }\n  }\n}\n\n// Removes all children from this entry and returns an array of the\n// removed children.\nfunction forgetChildren(parent: AnyEntry) {\n  if (parent.childValues.size > 0) {\n    parent.childValues.forEach((_value, child) => {\n      forgetChild(parent, child);\n    });\n  }\n\n  // Remove this parent Entry from any sets to which it was added by the\n  // addToSet method.\n  parent.forgetDeps();\n\n  // After we forget all our children, this.dirtyChildren must be empty\n  // and therefore must have been reset to null.\n  assert(parent.dirtyChildren === null);\n}\n\nfunction forgetChild(parent: AnyEntry, child: AnyEntry) {\n  child.parents.delete(parent);\n  parent.childValues.delete(child);\n  removeDirtyChild(parent, child);\n}\n\nfunction maybeSubscribe(entry: AnyEntry, args: any[]) {\n  if (typeof entry.subscribe === \"function\") {\n    try {\n      maybeUnsubscribe(entry); // Prevent double subscriptions.\n      entry.unsubscribe = entry.subscribe.apply(null, args);\n    } catch (e) {\n      // If this Entry has a subscribe function and it threw an exception\n      // (or an unsubscribe function it previously returned now throws),\n      // return false to indicate that we were not able to subscribe (or\n      // unsubscribe), and this Entry should remain dirty.\n      entry.setDirty();\n      return false;\n    }\n  }\n\n  // Returning true indicates either that there was no entry.subscribe\n  // function or that it succeeded.\n  return true;\n}\n","import { AnyEntry } from \"./entry\";\nimport { OptimisticWrapOptions } from \"./index\";\nimport { parentEntrySlot } from \"./context\";\nimport { hasOwnProperty, Unsubscribable, maybeUnsubscribe, toArray } from \"./helpers\";\n\ntype EntryMethodName = keyof typeof EntryMethods;\nconst EntryMethods = {\n  setDirty: true, // Mark parent Entry as needing to be recomputed (default)\n  dispose: true,  // Detach parent Entry from parents and children, but leave in LRU cache\n  forget: true,   // Fully remove parent Entry from LRU cache and computation graph\n};\n\nexport type OptimisticDependencyFunction<TKey> =\n  ((key: TKey) => void) & {\n    dirty: (key: TKey, entryMethodName?: EntryMethodName) => void;\n  };\n\nexport type Dep<TKey> = Set<AnyEntry> & {\n  subscribe: OptimisticWrapOptions<[TKey]>[\"subscribe\"];\n} & Unsubscribable;\n\nexport function dep<TKey>(options?: {\n  subscribe: Dep<TKey>[\"subscribe\"];\n}) {\n  const depsByKey = new Map<TKey, Dep<TKey>>();\n  const subscribe = options && options.subscribe;\n\n  function depend(key: TKey) {\n    const parent = parentEntrySlot.getValue();\n    if (parent) {\n      let dep = depsByKey.get(key);\n      if (!dep) {\n        depsByKey.set(key, dep = new Set as Dep<TKey>);\n      }\n      parent.dependOn(dep);\n      if (typeof subscribe === \"function\") {\n        maybeUnsubscribe(dep);\n        dep.unsubscribe = subscribe(key);\n      }\n    }\n  }\n\n  depend.dirty = function dirty(\n    key: TKey,\n    entryMethodName?: EntryMethodName,\n  ) {\n    const dep = depsByKey.get(key);\n    if (dep) {\n      const m: EntryMethodName = (\n        entryMethodName &&\n        hasOwnProperty.call(EntryMethods, entryMethodName)\n      ) ? entryMethodName : \"setDirty\";\n      // We have to use toArray(dep).forEach instead of dep.forEach, because\n      // modifying a Set while iterating over it can cause elements in the Set\n      // to be removed from the Set before they've been iterated over.\n      toArray(dep).forEach(entry => entry[m]());\n      depsByKey.delete(key);\n      maybeUnsubscribe(dep);\n    }\n  };\n\n  return depend as OptimisticDependencyFunction<TKey>;\n}\n","import { Trie } from \"@wry/trie\";\n\nimport { Cache } from \"./cache\";\nimport { Entry, AnyEntry } from \"./entry\";\nimport { parentEntrySlot } from \"./context\";\n\n// These helper functions are important for making optimism work with\n// asynchronous code. In order to register parent-child dependencies,\n// optimism needs to know about any currently active parent computations.\n// In ordinary synchronous code, the parent context is implicit in the\n// execution stack, but asynchronous code requires some extra guidance in\n// order to propagate context from one async task segment to the next.\nexport {\n  bindContext,\n  noContext,\n  setTimeout,\n  asyncFromGen,\n} from \"./context\";\n\n// A lighter-weight dependency, similar to OptimisticWrapperFunction, except\n// with only one argument, no makeCacheKey, no wrapped function to recompute,\n// and no result value. Useful for representing dependency leaves in the graph\n// of computation. Subscriptions are supported.\nexport { dep, OptimisticDependencyFunction } from \"./dep\";\n\nfunction makeDefaultMakeCacheKeyFunction<\n  TKeyArgs extends any[],\n  TCacheKey = any,\n>(): (...args: TKeyArgs) => TCacheKey {\n  const keyTrie = new Trie<TCacheKey>(typeof WeakMap === \"function\");\n  return function () {\n    return keyTrie.lookupArray(arguments);\n  };\n}\n\n// The defaultMakeCacheKey function is remarkably powerful, because it gives\n// a unique object for any shallow-identical list of arguments. If you need\n// to implement a custom makeCacheKey function, you may find it helpful to\n// delegate the final work to defaultMakeCacheKey, which is why we export it\n// here. However, you may want to avoid defaultMakeCacheKey if your runtime\n// does not support WeakMap, or you have the ability to return a string key.\n// In those cases, just write your own custom makeCacheKey functions.\nexport const defaultMakeCacheKey = makeDefaultMakeCacheKeyFunction();\n\n// If you're paranoid about memory leaks, or you want to avoid using WeakMap\n// under the hood, but you still need the behavior of defaultMakeCacheKey,\n// import this constructor to create your own tries.\nexport { Trie as KeyTrie }\n\nexport type OptimisticWrapperFunction<\n  TArgs extends any[],\n  TResult,\n  TKeyArgs extends any[] = TArgs,\n  TCacheKey = any,\n> = ((...args: TArgs) => TResult) & {\n  // Get the current number of Entry objects in the LRU cache.\n  readonly size: number;\n\n  // \"Dirty\" any cached Entry stored for the given arguments, marking that Entry\n  // and its ancestors as potentially needing to be recomputed. The .dirty(...)\n  // method of an optimistic function takes the same parameter types as the\n  // original function by default, unless a keyArgs function is configured, and\n  // then it matters that .dirty takes TKeyArgs instead of TArgs.\n  dirty: (...args: TKeyArgs) => void;\n  // A version of .dirty that accepts a key returned by .getKey.\n  dirtyKey: (key: TCacheKey) => void;\n\n  // Examine the current value without recomputing it.\n  peek: (...args: TKeyArgs) => TResult | undefined;\n  // A version of .peek that accepts a key returned by .getKey.\n  peekKey: (key: TCacheKey) => TResult | undefined;\n\n  // Completely remove the entry from the cache, dirtying any parent entries.\n  forget: (...args: TKeyArgs) => boolean;\n  // A version of .forget that accepts a key returned by .getKey.\n  forgetKey: (key: TCacheKey) => boolean;\n\n  // In order to use the -Key version of the above functions, you need a key\n  // rather than the arguments used to compute the key. These two functions take\n  // TArgs or TKeyArgs and return the corresponding TCacheKey. If no keyArgs\n  // function has been configured, TArgs will be the same as TKeyArgs, and thus\n  // getKey and makeCacheKey will be synonymous.\n  getKey: (...args: TArgs) => TCacheKey;\n\n  // This property is equivalent to the makeCacheKey function provided in the\n  // OptimisticWrapOptions, or (if no options.makeCacheKey function is provided)\n  // a default implementation of makeCacheKey.\n  makeCacheKey: (...args: TKeyArgs) => TCacheKey;\n};\n\nexport type OptimisticWrapOptions<\n  TArgs extends any[],\n  TKeyArgs extends any[] = TArgs,\n  TCacheKey = any,\n> = {\n  // The maximum number of cache entries that should be retained before the\n  // cache begins evicting the oldest ones.\n  max?: number;\n  // Transform the raw arguments to some other type of array, which will then\n  // be passed to makeCacheKey.\n  keyArgs?: (...args: TArgs) => TKeyArgs;\n  // The makeCacheKey function takes the same arguments that were passed to\n  // the wrapper function and returns a single value that can be used as a key\n  // in a Map to identify the cached result.\n  makeCacheKey?: (...args: TKeyArgs) => TCacheKey;\n  // If provided, the subscribe function should either return an unsubscribe\n  // function or return nothing.\n  subscribe?: (...args: TArgs) => void | (() => any);\n};\n\nconst caches = new Set<Cache<any, AnyEntry>>();\n\nexport function wrap<\n  TArgs extends any[],\n  TResult,\n  TKeyArgs extends any[] = TArgs,\n  TCacheKey = any,\n>(\n  originalFunction: (...args: TArgs) => TResult,\n  options: OptimisticWrapOptions<TArgs, TKeyArgs> = Object.create(null),\n) {\n  const cache = new Cache<TCacheKey, Entry<TArgs, TResult>>(\n    options.max || Math.pow(2, 16),\n    entry => entry.dispose(),\n  );\n\n  const keyArgs = options.keyArgs;\n  const makeCacheKey = options.makeCacheKey ||\n    makeDefaultMakeCacheKeyFunction<TKeyArgs, TCacheKey>();\n\n  const optimistic = function (): TResult {\n    const key = makeCacheKey.apply(\n      null,\n      keyArgs ? keyArgs.apply(null, arguments as any) : arguments as any\n    );\n\n    if (key === void 0) {\n      return originalFunction.apply(null, arguments as any);\n    }\n\n    let entry = cache.get(key)!;\n    if (!entry) {\n      cache.set(key, entry = new Entry(originalFunction));\n      entry.subscribe = options.subscribe;\n      // Give the Entry the ability to trigger cache.delete(key), even though\n      // the Entry itself does not know about key or cache.\n      entry.forget = () => cache.delete(key);\n    }\n\n    const value = entry.recompute(\n      Array.prototype.slice.call(arguments) as TArgs,\n    );\n\n    // Move this entry to the front of the least-recently used queue,\n    // since we just finished computing its value.\n    cache.set(key, entry);\n\n    caches.add(cache);\n\n    // Clean up any excess entries in the cache, but only if there is no\n    // active parent entry, meaning we're not in the middle of a larger\n    // computation that might be flummoxed by the cleaning.\n    if (! parentEntrySlot.hasValue()) {\n      caches.forEach(cache => cache.clean());\n      caches.clear();\n    }\n\n    return value;\n  } as OptimisticWrapperFunction<TArgs, TResult, TKeyArgs, TCacheKey>;\n\n  Object.defineProperty(optimistic, \"size\", {\n    get() {\n      return cache[\"map\"].size;\n    },\n    configurable: false,\n    enumerable: false,\n  });\n\n  function dirtyKey(key: TCacheKey) {\n    const entry = cache.get(key);\n    if (entry) {\n      entry.setDirty();\n    }\n  }\n  optimistic.dirtyKey = dirtyKey;\n  optimistic.dirty = function dirty() {\n    dirtyKey(makeCacheKey.apply(null, arguments as any));\n  };\n\n  function peekKey(key: TCacheKey) {\n    const entry = cache.get(key);\n    if (entry) {\n      return entry.peek();\n    }\n  }\n  optimistic.peekKey = peekKey;\n  optimistic.peek = function peek() {\n    return peekKey(makeCacheKey.apply(null, arguments as any));\n  };\n\n  function forgetKey(key: TCacheKey) {\n    return cache.delete(key);\n  }\n  optimistic.forgetKey = forgetKey;\n  optimistic.forget = function forget() {\n    return forgetKey(makeCacheKey.apply(null, arguments as any));\n  };\n\n  optimistic.makeCacheKey = makeCacheKey;\n  optimistic.getKey = keyArgs ? function getKey() {\n    return makeCacheKey.apply(null, keyArgs.apply(null, arguments as any));\n  } : makeCacheKey as (...args: any[]) => TCacheKey;\n\n  return Object.freeze(optimistic);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}