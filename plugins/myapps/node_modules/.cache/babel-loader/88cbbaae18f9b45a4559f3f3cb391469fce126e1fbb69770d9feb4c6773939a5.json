{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef, unstable_useId as useId, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport useButton from '../useButton';\nimport { SelectActionTypes } from './useSelect.types';\nimport useList from '../useList';\nimport defaultOptionStringifier from './defaultOptionStringifier';\nimport { useCompoundParent } from '../utils/useCompound';\nimport selectReducer from './selectReducer';\nimport combineHooksSlotProps from '../utils/combineHooksSlotProps';\nfunction preventDefault(event) {\n  event.preventDefault();\n}\n\n/**\n *\n * Demos:\n *\n * - [Select](https://mui.com/base/react-select/#hooks)\n *\n * API:\n *\n * - [useSelect API](https://mui.com/base/react-select/hooks-api/#use-select)\n */\nfunction useSelect(props) {\n  var buttonRefProp = props.buttonRef,\n    _props$defaultOpen = props.defaultOpen,\n    defaultOpen = _props$defaultOpen === void 0 ? false : _props$defaultOpen,\n    defaultValueProp = props.defaultValue,\n    _props$disabled = props.disabled,\n    disabled = _props$disabled === void 0 ? false : _props$disabled,\n    listboxIdProp = props.listboxId,\n    listboxRefProp = props.listboxRef,\n    _props$multiple = props.multiple,\n    multiple = _props$multiple === void 0 ? false : _props$multiple,\n    onChange = props.onChange,\n    onHighlightChange = props.onHighlightChange,\n    onOpenChange = props.onOpenChange,\n    openProp = props.open,\n    optionsParam = props.options,\n    _props$getOptionAsStr = props.getOptionAsString,\n    getOptionAsString = _props$getOptionAsStr === void 0 ? defaultOptionStringifier : _props$getOptionAsStr,\n    valueProp = props.value;\n  var buttonRef = React.useRef(null);\n  var handleButtonRef = useForkRef(buttonRefProp, buttonRef);\n  var listboxRef = React.useRef(null);\n  var listboxId = useId(listboxIdProp);\n  var defaultValue;\n  if (valueProp === undefined && defaultValueProp === undefined) {\n    defaultValue = [];\n  } else if (defaultValueProp !== undefined) {\n    if (multiple) {\n      defaultValue = defaultValueProp;\n    } else {\n      defaultValue = defaultValueProp == null ? [] : [defaultValueProp];\n    }\n  }\n  var value = React.useMemo(function () {\n    if (valueProp !== undefined) {\n      if (multiple) {\n        return valueProp;\n      }\n      return valueProp == null ? [] : [valueProp];\n    }\n    return undefined;\n  }, [valueProp, multiple]);\n  var _useCompoundParent = useCompoundParent(),\n    subitems = _useCompoundParent.subitems,\n    compoundComponentContextValue = _useCompoundParent.contextValue;\n  var options = React.useMemo(function () {\n    if (optionsParam != null) {\n      return new Map(optionsParam.map(function (option, index) {\n        return [option.value, {\n          value: option.value,\n          label: option.label,\n          disabled: option.disabled,\n          ref: /*#__PURE__*/React.createRef(),\n          id: \"\".concat(listboxId, \"_\").concat(index)\n        }];\n      }));\n    }\n    return subitems;\n  }, [optionsParam, subitems, listboxId]);\n  var handleListboxRef = useForkRef(listboxRefProp, listboxRef);\n  var _useButton = useButton({\n      disabled: disabled,\n      rootRef: handleButtonRef\n    }),\n    getButtonRootProps = _useButton.getRootProps,\n    buttonActive = _useButton.active,\n    buttonFocusVisible = _useButton.focusVisible,\n    mergedButtonRef = _useButton.rootRef;\n  var optionValues = React.useMemo(function () {\n    return Array.from(options.keys());\n  }, [options]);\n  var isItemDisabled = React.useCallback(function (valueToCheck) {\n    var _option$disabled;\n    var option = options.get(valueToCheck);\n    return (_option$disabled = option == null ? void 0 : option.disabled) != null ? _option$disabled : false;\n  }, [options]);\n  var stringifyOption = React.useCallback(function (valueToCheck) {\n    var option = options.get(valueToCheck);\n    if (!option) {\n      return '';\n    }\n    return getOptionAsString(option);\n  }, [options, getOptionAsString]);\n  var controlledState = React.useMemo(function () {\n    return {\n      selectedValues: value,\n      open: openProp\n    };\n  }, [value, openProp]);\n  var getItemId = React.useCallback(function (itemValue) {\n    var _options$get;\n    return (_options$get = options.get(itemValue)) == null ? void 0 : _options$get.id;\n  }, [options]);\n  var handleSelectionChange = React.useCallback(function (event, newValues) {\n    if (multiple) {\n      onChange == null ? void 0 : onChange(event, newValues);\n    } else {\n      var _newValues$;\n      onChange == null ? void 0 : onChange(event, (_newValues$ = newValues[0]) != null ? _newValues$ : null);\n    }\n  }, [multiple, onChange]);\n  var handleHighlightChange = React.useCallback(function (event, newValue) {\n    onHighlightChange == null ? void 0 : onHighlightChange(event, newValue != null ? newValue : null);\n  }, [onHighlightChange]);\n  var handleStateChange = React.useCallback(function (event, field, fieldValue) {\n    if (field === 'open') {\n      onOpenChange == null ? void 0 : onOpenChange(fieldValue);\n      if (fieldValue === false && (event == null ? void 0 : event.type) !== 'blur') {\n        var _buttonRef$current;\n        (_buttonRef$current = buttonRef.current) == null ? void 0 : _buttonRef$current.focus();\n      }\n    }\n  }, [onOpenChange]);\n  var useListParameters = {\n    getInitialState: function getInitialState() {\n      var _defaultValue;\n      return {\n        highlightedValue: null,\n        selectedValues: (_defaultValue = defaultValue) != null ? _defaultValue : [],\n        open: defaultOpen\n      };\n    },\n    getItemId: getItemId,\n    controlledProps: controlledState,\n    isItemDisabled: isItemDisabled,\n    rootRef: mergedButtonRef,\n    onChange: handleSelectionChange,\n    onHighlightChange: handleHighlightChange,\n    onStateChange: handleStateChange,\n    reducerActionContext: React.useMemo(function () {\n      return {\n        multiple: multiple\n      };\n    }, [multiple]),\n    items: optionValues,\n    getItemAsString: stringifyOption,\n    selectionMode: multiple ? 'multiple' : 'single',\n    stateReducer: selectReducer\n  };\n  var _useList = useList(useListParameters),\n    dispatch = _useList.dispatch,\n    getListboxRootProps = _useList.getRootProps,\n    listContextValue = _useList.contextValue,\n    _useList$state = _useList.state,\n    open = _useList$state.open,\n    highlightedOption = _useList$state.highlightedValue,\n    selectedOptions = _useList$state.selectedValues,\n    mergedListRootRef = _useList.rootRef;\n  var createHandleButtonClick = function createHandleButtonClick(otherHandlers) {\n    return function (event) {\n      var _otherHandlers$onClic;\n      otherHandlers == null ? void 0 : (_otherHandlers$onClic = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic.call(otherHandlers, event);\n      if (!event.defaultMuiPrevented) {\n        var action = {\n          type: SelectActionTypes.buttonClick,\n          event: event\n        };\n        dispatch(action);\n      }\n    };\n  };\n  useEnhancedEffect(function () {\n    // Scroll to the currently highlighted option.\n    if (highlightedOption != null) {\n      var _options$get2;\n      var optionRef = (_options$get2 = options.get(highlightedOption)) == null ? void 0 : _options$get2.ref;\n      if (!listboxRef.current || !(optionRef != null && optionRef.current)) {\n        return;\n      }\n      var listboxClientRect = listboxRef.current.getBoundingClientRect();\n      var optionClientRect = optionRef.current.getBoundingClientRect();\n      if (optionClientRect.top < listboxClientRect.top) {\n        listboxRef.current.scrollTop -= listboxClientRect.top - optionClientRect.top;\n      } else if (optionClientRect.bottom > listboxClientRect.bottom) {\n        listboxRef.current.scrollTop += optionClientRect.bottom - listboxClientRect.bottom;\n      }\n    }\n  }, [highlightedOption, options]);\n  var getOptionMetadata = React.useCallback(function (optionValue) {\n    return options.get(optionValue);\n  }, [options]);\n  var getSelectTriggerProps = function getSelectTriggerProps() {\n    var otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return _extends({}, otherHandlers, {\n      onClick: createHandleButtonClick(otherHandlers),\n      ref: mergedListRootRef,\n      role: 'combobox',\n      'aria-expanded': open,\n      'aria-controls': listboxId\n    });\n  };\n  var getButtonProps = function getButtonProps() {\n    var otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var listboxAndButtonProps = combineHooksSlotProps(getButtonRootProps, getListboxRootProps);\n    var combinedProps = combineHooksSlotProps(listboxAndButtonProps, getSelectTriggerProps);\n    return combinedProps(otherHandlers);\n  };\n  var getListboxProps = function getListboxProps() {\n    var otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return _extends({}, otherHandlers, {\n      id: listboxId,\n      role: 'listbox',\n      'aria-multiselectable': multiple ? 'true' : undefined,\n      ref: handleListboxRef,\n      onMouseDown: preventDefault // to prevent the button from losing focus when interacting with the listbox\n    });\n  };\n\n  React.useDebugValue({\n    selectedOptions: selectedOptions,\n    highlightedOption: highlightedOption,\n    open: open\n  });\n  var contextValue = React.useMemo(function () {\n    return _extends({}, listContextValue, compoundComponentContextValue);\n  }, [listContextValue, compoundComponentContextValue]);\n  var selectValue;\n  if (props.multiple) {\n    selectValue = selectedOptions;\n  } else {\n    selectValue = selectedOptions.length > 0 ? selectedOptions[0] : null;\n  }\n  return {\n    buttonActive: buttonActive,\n    buttonFocusVisible: buttonFocusVisible,\n    buttonRef: mergedButtonRef,\n    contextValue: contextValue,\n    disabled: disabled,\n    dispatch: dispatch,\n    getButtonProps: getButtonProps,\n    getListboxProps: getListboxProps,\n    getOptionMetadata: getOptionMetadata,\n    listboxRef: mergedListRootRef,\n    open: open,\n    options: optionValues,\n    value: selectValue,\n    highlightedOption: highlightedOption\n  };\n}\nexport default useSelect;","map":{"version":3,"names":["_extends","React","unstable_useForkRef","useForkRef","unstable_useId","useId","unstable_useEnhancedEffect","useEnhancedEffect","useButton","SelectActionTypes","useList","defaultOptionStringifier","useCompoundParent","selectReducer","combineHooksSlotProps","preventDefault","event","useSelect","props","buttonRefProp","buttonRef","_props$defaultOpen","defaultOpen","defaultValueProp","defaultValue","_props$disabled","disabled","listboxIdProp","listboxId","listboxRefProp","listboxRef","_props$multiple","multiple","onChange","onHighlightChange","onOpenChange","openProp","open","optionsParam","options","_props$getOptionAsStr","getOptionAsString","valueProp","value","useRef","handleButtonRef","undefined","useMemo","_useCompoundParent","subitems","compoundComponentContextValue","contextValue","Map","map","option","index","label","ref","createRef","id","concat","handleListboxRef","_useButton","rootRef","getButtonRootProps","getRootProps","buttonActive","active","buttonFocusVisible","focusVisible","mergedButtonRef","optionValues","Array","from","keys","isItemDisabled","useCallback","valueToCheck","_option$disabled","get","stringifyOption","controlledState","selectedValues","getItemId","itemValue","_options$get","handleSelectionChange","newValues","_newValues$","handleHighlightChange","newValue","handleStateChange","field","fieldValue","type","_buttonRef$current","current","focus","useListParameters","getInitialState","_defaultValue","highlightedValue","controlledProps","onStateChange","reducerActionContext","items","getItemAsString","selectionMode","stateReducer","_useList","dispatch","getListboxRootProps","listContextValue","_useList$state","state","highlightedOption","selectedOptions","mergedListRootRef","createHandleButtonClick","otherHandlers","_otherHandlers$onClic","onClick","call","defaultMuiPrevented","action","buttonClick","_options$get2","optionRef","listboxClientRect","getBoundingClientRect","optionClientRect","top","scrollTop","bottom","getOptionMetadata","optionValue","getSelectTriggerProps","arguments","length","role","getButtonProps","listboxAndButtonProps","combinedProps","getListboxProps","onMouseDown","useDebugValue","selectValue"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@mui/base/useSelect/useSelect.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef, unstable_useId as useId, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport useButton from '../useButton';\nimport { SelectActionTypes } from './useSelect.types';\nimport useList from '../useList';\nimport defaultOptionStringifier from './defaultOptionStringifier';\nimport { useCompoundParent } from '../utils/useCompound';\nimport selectReducer from './selectReducer';\nimport combineHooksSlotProps from '../utils/combineHooksSlotProps';\nfunction preventDefault(event) {\n  event.preventDefault();\n}\n\n/**\n *\n * Demos:\n *\n * - [Select](https://mui.com/base/react-select/#hooks)\n *\n * API:\n *\n * - [useSelect API](https://mui.com/base/react-select/hooks-api/#use-select)\n */\nfunction useSelect(props) {\n  const {\n    buttonRef: buttonRefProp,\n    defaultOpen = false,\n    defaultValue: defaultValueProp,\n    disabled = false,\n    listboxId: listboxIdProp,\n    listboxRef: listboxRefProp,\n    multiple = false,\n    onChange,\n    onHighlightChange,\n    onOpenChange,\n    open: openProp,\n    options: optionsParam,\n    getOptionAsString = defaultOptionStringifier,\n    value: valueProp\n  } = props;\n  const buttonRef = React.useRef(null);\n  const handleButtonRef = useForkRef(buttonRefProp, buttonRef);\n  const listboxRef = React.useRef(null);\n  const listboxId = useId(listboxIdProp);\n  let defaultValue;\n  if (valueProp === undefined && defaultValueProp === undefined) {\n    defaultValue = [];\n  } else if (defaultValueProp !== undefined) {\n    if (multiple) {\n      defaultValue = defaultValueProp;\n    } else {\n      defaultValue = defaultValueProp == null ? [] : [defaultValueProp];\n    }\n  }\n  const value = React.useMemo(() => {\n    if (valueProp !== undefined) {\n      if (multiple) {\n        return valueProp;\n      }\n      return valueProp == null ? [] : [valueProp];\n    }\n    return undefined;\n  }, [valueProp, multiple]);\n  const {\n    subitems,\n    contextValue: compoundComponentContextValue\n  } = useCompoundParent();\n  const options = React.useMemo(() => {\n    if (optionsParam != null) {\n      return new Map(optionsParam.map((option, index) => [option.value, {\n        value: option.value,\n        label: option.label,\n        disabled: option.disabled,\n        ref: /*#__PURE__*/React.createRef(),\n        id: `${listboxId}_${index}`\n      }]));\n    }\n    return subitems;\n  }, [optionsParam, subitems, listboxId]);\n  const handleListboxRef = useForkRef(listboxRefProp, listboxRef);\n  const {\n    getRootProps: getButtonRootProps,\n    active: buttonActive,\n    focusVisible: buttonFocusVisible,\n    rootRef: mergedButtonRef\n  } = useButton({\n    disabled,\n    rootRef: handleButtonRef\n  });\n  const optionValues = React.useMemo(() => Array.from(options.keys()), [options]);\n  const isItemDisabled = React.useCallback(valueToCheck => {\n    var _option$disabled;\n    const option = options.get(valueToCheck);\n    return (_option$disabled = option == null ? void 0 : option.disabled) != null ? _option$disabled : false;\n  }, [options]);\n  const stringifyOption = React.useCallback(valueToCheck => {\n    const option = options.get(valueToCheck);\n    if (!option) {\n      return '';\n    }\n    return getOptionAsString(option);\n  }, [options, getOptionAsString]);\n  const controlledState = React.useMemo(() => ({\n    selectedValues: value,\n    open: openProp\n  }), [value, openProp]);\n  const getItemId = React.useCallback(itemValue => {\n    var _options$get;\n    return (_options$get = options.get(itemValue)) == null ? void 0 : _options$get.id;\n  }, [options]);\n  const handleSelectionChange = React.useCallback((event, newValues) => {\n    if (multiple) {\n      onChange == null ? void 0 : onChange(event, newValues);\n    } else {\n      var _newValues$;\n      onChange == null ? void 0 : onChange(event, (_newValues$ = newValues[0]) != null ? _newValues$ : null);\n    }\n  }, [multiple, onChange]);\n  const handleHighlightChange = React.useCallback((event, newValue) => {\n    onHighlightChange == null ? void 0 : onHighlightChange(event, newValue != null ? newValue : null);\n  }, [onHighlightChange]);\n  const handleStateChange = React.useCallback((event, field, fieldValue) => {\n    if (field === 'open') {\n      onOpenChange == null ? void 0 : onOpenChange(fieldValue);\n      if (fieldValue === false && (event == null ? void 0 : event.type) !== 'blur') {\n        var _buttonRef$current;\n        (_buttonRef$current = buttonRef.current) == null ? void 0 : _buttonRef$current.focus();\n      }\n    }\n  }, [onOpenChange]);\n  const useListParameters = {\n    getInitialState: () => {\n      var _defaultValue;\n      return {\n        highlightedValue: null,\n        selectedValues: (_defaultValue = defaultValue) != null ? _defaultValue : [],\n        open: defaultOpen\n      };\n    },\n    getItemId,\n    controlledProps: controlledState,\n    isItemDisabled,\n    rootRef: mergedButtonRef,\n    onChange: handleSelectionChange,\n    onHighlightChange: handleHighlightChange,\n    onStateChange: handleStateChange,\n    reducerActionContext: React.useMemo(() => ({\n      multiple\n    }), [multiple]),\n    items: optionValues,\n    getItemAsString: stringifyOption,\n    selectionMode: multiple ? 'multiple' : 'single',\n    stateReducer: selectReducer\n  };\n  const {\n    dispatch,\n    getRootProps: getListboxRootProps,\n    contextValue: listContextValue,\n    state: {\n      open,\n      highlightedValue: highlightedOption,\n      selectedValues: selectedOptions\n    },\n    rootRef: mergedListRootRef\n  } = useList(useListParameters);\n  const createHandleButtonClick = otherHandlers => event => {\n    var _otherHandlers$onClic;\n    otherHandlers == null ? void 0 : (_otherHandlers$onClic = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic.call(otherHandlers, event);\n    if (!event.defaultMuiPrevented) {\n      const action = {\n        type: SelectActionTypes.buttonClick,\n        event\n      };\n      dispatch(action);\n    }\n  };\n  useEnhancedEffect(() => {\n    // Scroll to the currently highlighted option.\n    if (highlightedOption != null) {\n      var _options$get2;\n      const optionRef = (_options$get2 = options.get(highlightedOption)) == null ? void 0 : _options$get2.ref;\n      if (!listboxRef.current || !(optionRef != null && optionRef.current)) {\n        return;\n      }\n      const listboxClientRect = listboxRef.current.getBoundingClientRect();\n      const optionClientRect = optionRef.current.getBoundingClientRect();\n      if (optionClientRect.top < listboxClientRect.top) {\n        listboxRef.current.scrollTop -= listboxClientRect.top - optionClientRect.top;\n      } else if (optionClientRect.bottom > listboxClientRect.bottom) {\n        listboxRef.current.scrollTop += optionClientRect.bottom - listboxClientRect.bottom;\n      }\n    }\n  }, [highlightedOption, options]);\n  const getOptionMetadata = React.useCallback(optionValue => options.get(optionValue), [options]);\n  const getSelectTriggerProps = (otherHandlers = {}) => {\n    return _extends({}, otherHandlers, {\n      onClick: createHandleButtonClick(otherHandlers),\n      ref: mergedListRootRef,\n      role: 'combobox',\n      'aria-expanded': open,\n      'aria-controls': listboxId\n    });\n  };\n  const getButtonProps = (otherHandlers = {}) => {\n    const listboxAndButtonProps = combineHooksSlotProps(getButtonRootProps, getListboxRootProps);\n    const combinedProps = combineHooksSlotProps(listboxAndButtonProps, getSelectTriggerProps);\n    return combinedProps(otherHandlers);\n  };\n  const getListboxProps = (otherHandlers = {}) => {\n    return _extends({}, otherHandlers, {\n      id: listboxId,\n      role: 'listbox',\n      'aria-multiselectable': multiple ? 'true' : undefined,\n      ref: handleListboxRef,\n      onMouseDown: preventDefault // to prevent the button from losing focus when interacting with the listbox\n    });\n  };\n\n  React.useDebugValue({\n    selectedOptions,\n    highlightedOption,\n    open\n  });\n  const contextValue = React.useMemo(() => _extends({}, listContextValue, compoundComponentContextValue), [listContextValue, compoundComponentContextValue]);\n  let selectValue;\n  if (props.multiple) {\n    selectValue = selectedOptions;\n  } else {\n    selectValue = selectedOptions.length > 0 ? selectedOptions[0] : null;\n  }\n  return {\n    buttonActive,\n    buttonFocusVisible,\n    buttonRef: mergedButtonRef,\n    contextValue,\n    disabled,\n    dispatch,\n    getButtonProps,\n    getListboxProps,\n    getOptionMetadata,\n    listboxRef: mergedListRootRef,\n    open,\n    options: optionValues,\n    value: selectValue,\n    highlightedOption\n  };\n}\nexport default useSelect;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}