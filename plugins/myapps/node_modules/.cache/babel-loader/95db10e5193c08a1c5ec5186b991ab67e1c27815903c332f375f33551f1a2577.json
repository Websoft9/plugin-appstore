{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Card/card';\nimport { CardContext } from './Card';\nimport { Button } from '../Button';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nexport var CardHeader = function CardHeader(_a) {\n  var _a$children = _a.children,\n    children = _a$children === void 0 ? null : _a$children,\n    _a$className = _a.className,\n    className = _a$className === void 0 ? '' : _a$className,\n    id = _a.id,\n    onExpand = _a.onExpand,\n    toggleButtonProps = _a.toggleButtonProps,\n    isToggleRightAligned = _a.isToggleRightAligned,\n    props = __rest(_a, [\"children\", \"className\", \"id\", \"onExpand\", \"toggleButtonProps\", \"isToggleRightAligned\"]);\n  return React.createElement(CardContext.Consumer, null, function (_ref) {\n    var cardId = _ref.cardId;\n    var cardHeaderToggle = React.createElement(\"div\", {\n      className: css(styles.cardHeaderToggle)\n    }, React.createElement(Button, Object.assign({\n      variant: \"plain\",\n      type: \"button\",\n      onClick: function onClick(evt) {\n        onExpand(evt, cardId);\n      }\n    }, toggleButtonProps), React.createElement(\"span\", {\n      className: css(styles.cardHeaderToggleIcon)\n    }, React.createElement(AngleRightIcon, {\n      \"aria-hidden\": \"true\"\n    }))));\n    return React.createElement(\"div\", Object.assign({\n      className: css(styles.cardHeader, isToggleRightAligned && styles.modifiers.toggleRight, className),\n      id: id\n    }, props), onExpand && !isToggleRightAligned && cardHeaderToggle, children, onExpand && isToggleRightAligned && cardHeaderToggle);\n  });\n};\nCardHeader.displayName = 'CardHeader';","map":{"version":3,"names":["React","css","styles","CardContext","Button","AngleRightIcon","CardHeader","_a","children","_a$children","_a$className","className","id","onExpand","toggleButtonProps","isToggleRightAligned","props","__rest","createElement","Consumer","_ref","cardId","cardHeaderToggle","Object","assign","variant","type","onClick","evt","cardHeaderToggleIcon","cardHeader","modifiers","toggleRight","displayName"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@patternfly/react-core/src/components/Card/CardHeader.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Card/card';\nimport { CardContext } from './Card';\nimport { Button } from '../Button';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\n\nexport interface CardHeaderProps extends React.HTMLProps<HTMLDivElement> {\n  /** Content rendered inside the CardHeader */\n  children?: React.ReactNode;\n  /** Additional classes added to the CardHeader */\n  className?: string;\n  /** ID of the card header. */\n  id?: string;\n  /** Callback expandable card */\n  onExpand?: (event: React.MouseEvent, id: string) => void;\n  /** Additional props for expandable toggle button */\n  toggleButtonProps?: any;\n  /** Whether to right-align expandable toggle button */\n  isToggleRightAligned?: boolean;\n}\n\nexport const CardHeader: React.FunctionComponent<CardHeaderProps> = ({\n  children = null,\n  className = '',\n  id,\n  onExpand,\n  toggleButtonProps,\n  isToggleRightAligned,\n  ...props\n}: CardHeaderProps) => (\n  <CardContext.Consumer>\n    {({ cardId }) => {\n      const cardHeaderToggle = (\n        <div className={css(styles.cardHeaderToggle)}>\n          <Button\n            variant=\"plain\"\n            type=\"button\"\n            onClick={evt => {\n              onExpand(evt, cardId);\n            }}\n            {...toggleButtonProps}\n          >\n            <span className={css(styles.cardHeaderToggleIcon)}>\n              <AngleRightIcon aria-hidden=\"true\" />\n            </span>\n          </Button>\n        </div>\n      );\n\n      return (\n        <div\n          className={css(styles.cardHeader, isToggleRightAligned && styles.modifiers.toggleRight, className)}\n          id={id}\n          {...props}\n        >\n          {onExpand && !isToggleRightAligned && cardHeaderToggle}\n          {children}\n          {onExpand && isToggleRightAligned && cardHeaderToggle}\n        </div>\n      );\n    }}\n  </CardContext.Consumer>\n);\nCardHeader.displayName = 'CardHeader';\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,GAAG,QAAQ,0BAA0B;AAC9C,OAAOC,MAAM,MAAM,mDAAmD;AACtE,SAASC,WAAW,QAAQ,QAAQ;AACpC,SAASC,MAAM,QAAQ,WAAW;AAClC,OAAOC,cAAc,MAAM,yDAAyD;AAiBpF,OAAO,IAAMC,UAAU,GAA6C,SAAvDA,UAAUA,CAA8CC,EAQnD,EAAI;oBAFAA,EAEJ,CAPhBC,QAAQ;IAARA,QAAQ,GAAAC,WAAA,cAAG,IAAI,GAAAA,WAAA;IAAAC,YAAA,GAKKH,EAEJ,CANhBI,SAAS;IAATA,SAAS,GAAAD,YAAA,cAAG,EAAE,GAAAA,YAAA;IACdE,EAAE,GAGkBL,EAEJ,CALhBK,EAAE;IACFC,QAAQ,GAEYN,EAEJ,CAJhBM,QAAQ;IACRC,iBAAiB,GACGP,EAEJ,CAHhBO,iBAAiB;IACjBC,oBAAoB,GAAAR,EAEJ,CAFhBQ,oBAAoB;IACjBC,KAAK,GAAAC,MAAA,CAAAV,EAAA,EAP2D,wFAQpE,CADS;EACa,OACrBP,KAAA,CAAAkB,aAAA,CAACf,WAAW,CAACgB,QAAQ,QAClB,UAAAC,IAAA,EAAe;IAAA,IAAZC,MAAM,GAAAD,IAAA,CAANC,MAAM;IACR,IAAMC,gBAAgB,GACpBtB,KAAA,CAAAkB,aAAA;MAAKP,SAAS,EAAEV,GAAG,CAACC,MAAM,CAACoB,gBAAgB;IAAC,GAC1CtB,KAAA,CAAAkB,aAAA,CAACd,MAAM,EAAAmB,MAAA,CAAAC,MAAA;MACLC,OAAO,EAAC,OAAO;MACfC,IAAI,EAAC,QAAQ;MACbC,OAAO,EAAE,SAAAA,QAAAC,GAAG,EAAG;QACbf,QAAQ,CAACe,GAAG,EAAEP,MAAM,CAAC;MACvB;IAAC,GACGP,iBAAiB,GAErBd,KAAA,CAAAkB,aAAA;MAAMP,SAAS,EAAEV,GAAG,CAACC,MAAM,CAAC2B,oBAAoB;IAAC,GAC/C7B,KAAA,CAAAkB,aAAA,CAACb,cAAc;MAAA,eAAa;IAAM,EAAG,CAChC,CACA,CAEZ;IAED,OACEL,KAAA,CAAAkB,aAAA,QAAAK,MAAA,CAAAC,MAAA;MACEb,SAAS,EAAEV,GAAG,CAACC,MAAM,CAAC4B,UAAU,EAAEf,oBAAoB,IAAIb,MAAM,CAAC6B,SAAS,CAACC,WAAW,EAAErB,SAAS,CAAC;MAClGC,EAAE,EAAEA;IAAE,GACFI,KAAK,GAERH,QAAQ,IAAI,CAACE,oBAAoB,IAAIO,gBAAgB,EACrDd,QAAQ,EACRK,QAAQ,IAAIE,oBAAoB,IAAIO,gBAAgB,CACjD;EAEV,CAAC,CACoB;CACxB;AACDhB,UAAU,CAAC2B,WAAW,GAAG,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}