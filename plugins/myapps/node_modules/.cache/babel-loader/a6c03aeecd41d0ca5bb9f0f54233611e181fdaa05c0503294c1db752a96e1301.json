{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { invariant, InvariantError } from \"../utilities/globals/index.js\";\nimport { ApolloLink, execute } from \"../link/core/index.js\";\nimport { version } from \"../version.js\";\nimport { HttpLink } from \"../link/http/index.js\";\nimport { QueryManager } from \"./QueryManager.js\";\nimport { LocalState } from \"./LocalState.js\";\nvar hasSuggestedDevtools = false;\nimport { mergeOptions } from \"../utilities/index.js\";\nexport { mergeOptions };\nvar ApolloClient = function () {\n  function ApolloClient(options) {\n    var _this = this;\n    this.resetStoreCallbacks = [];\n    this.clearStoreCallbacks = [];\n    var uri = options.uri,\n      credentials = options.credentials,\n      headers = options.headers,\n      cache = options.cache,\n      _a = options.ssrMode,\n      ssrMode = _a === void 0 ? false : _a,\n      _b = options.ssrForceFetchDelay,\n      ssrForceFetchDelay = _b === void 0 ? 0 : _b,\n      _c = options.connectToDevTools,\n      connectToDevTools = _c === void 0 ? typeof window === 'object' && !window.__APOLLO_CLIENT__ && __DEV__ : _c,\n      _d = options.queryDeduplication,\n      queryDeduplication = _d === void 0 ? true : _d,\n      defaultOptions = options.defaultOptions,\n      _e = options.assumeImmutableResults,\n      assumeImmutableResults = _e === void 0 ? false : _e,\n      resolvers = options.resolvers,\n      typeDefs = options.typeDefs,\n      fragmentMatcher = options.fragmentMatcher,\n      clientAwarenessName = options.name,\n      clientAwarenessVersion = options.version;\n    var link = options.link;\n    if (!link) {\n      link = uri ? new HttpLink({\n        uri: uri,\n        credentials: credentials,\n        headers: headers\n      }) : ApolloLink.empty();\n    }\n    if (!cache) {\n      throw __DEV__ ? new InvariantError(\"To initialize Apollo Client, you must specify a 'cache' property \" + \"in the options object. \\n\" + \"For more information, please visit: https://go.apollo.dev/c/docs\") : new InvariantError(9);\n    }\n    this.link = link;\n    this.cache = cache;\n    this.disableNetworkFetches = ssrMode || ssrForceFetchDelay > 0;\n    this.queryDeduplication = queryDeduplication;\n    this.defaultOptions = defaultOptions || Object.create(null);\n    this.typeDefs = typeDefs;\n    if (ssrForceFetchDelay) {\n      setTimeout(function () {\n        return _this.disableNetworkFetches = false;\n      }, ssrForceFetchDelay);\n    }\n    this.watchQuery = this.watchQuery.bind(this);\n    this.query = this.query.bind(this);\n    this.mutate = this.mutate.bind(this);\n    this.resetStore = this.resetStore.bind(this);\n    this.reFetchObservableQueries = this.reFetchObservableQueries.bind(this);\n    if (connectToDevTools && typeof window === 'object') {\n      window.__APOLLO_CLIENT__ = this;\n    }\n    if (!hasSuggestedDevtools && connectToDevTools && __DEV__) {\n      hasSuggestedDevtools = true;\n      if (typeof window !== 'undefined' && window.document && window.top === window.self && !window.__APOLLO_DEVTOOLS_GLOBAL_HOOK__) {\n        var nav = window.navigator;\n        var ua = nav && nav.userAgent;\n        var url = void 0;\n        if (typeof ua === \"string\") {\n          if (ua.indexOf(\"Chrome/\") > -1) {\n            url = \"https://chrome.google.com/webstore/detail/\" + \"apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm\";\n          } else if (ua.indexOf(\"Firefox/\") > -1) {\n            url = \"https://addons.mozilla.org/en-US/firefox/addon/apollo-developer-tools/\";\n          }\n        }\n        if (url) {\n          __DEV__ && invariant.log(\"Download the Apollo DevTools for a better development \" + \"experience: \" + url);\n        }\n      }\n    }\n    this.version = version;\n    this.localState = new LocalState({\n      cache: cache,\n      client: this,\n      resolvers: resolvers,\n      fragmentMatcher: fragmentMatcher\n    });\n    this.queryManager = new QueryManager({\n      cache: this.cache,\n      link: this.link,\n      defaultOptions: this.defaultOptions,\n      queryDeduplication: queryDeduplication,\n      ssrMode: ssrMode,\n      clientAwareness: {\n        name: clientAwarenessName,\n        version: clientAwarenessVersion\n      },\n      localState: this.localState,\n      assumeImmutableResults: assumeImmutableResults,\n      onBroadcast: connectToDevTools ? function () {\n        if (_this.devToolsHookCb) {\n          _this.devToolsHookCb({\n            action: {},\n            state: {\n              queries: _this.queryManager.getQueryStore(),\n              mutations: _this.queryManager.mutationStore || {}\n            },\n            dataWithOptimisticResults: _this.cache.extract(true)\n          });\n        }\n      } : void 0\n    });\n  }\n  ApolloClient.prototype.stop = function () {\n    this.queryManager.stop();\n  };\n  ApolloClient.prototype.watchQuery = function (options) {\n    if (this.defaultOptions.watchQuery) {\n      options = mergeOptions(this.defaultOptions.watchQuery, options);\n    }\n    if (this.disableNetworkFetches && (options.fetchPolicy === 'network-only' || options.fetchPolicy === 'cache-and-network')) {\n      options = __assign(__assign({}, options), {\n        fetchPolicy: 'cache-first'\n      });\n    }\n    return this.queryManager.watchQuery(options);\n  };\n  ApolloClient.prototype.query = function (options) {\n    if (this.defaultOptions.query) {\n      options = mergeOptions(this.defaultOptions.query, options);\n    }\n    __DEV__ ? invariant(options.fetchPolicy !== 'cache-and-network', 'The cache-and-network fetchPolicy does not work with client.query, because ' + 'client.query can only return a single result. Please use client.watchQuery ' + 'to receive multiple results from the cache and the network, or consider ' + 'using a different fetchPolicy, such as cache-first or network-only.') : invariant(options.fetchPolicy !== 'cache-and-network', 10);\n    if (this.disableNetworkFetches && options.fetchPolicy === 'network-only') {\n      options = __assign(__assign({}, options), {\n        fetchPolicy: 'cache-first'\n      });\n    }\n    return this.queryManager.query(options);\n  };\n  ApolloClient.prototype.mutate = function (options) {\n    if (this.defaultOptions.mutate) {\n      options = mergeOptions(this.defaultOptions.mutate, options);\n    }\n    return this.queryManager.mutate(options);\n  };\n  ApolloClient.prototype.subscribe = function (options) {\n    return this.queryManager.startGraphQLSubscription(options);\n  };\n  ApolloClient.prototype.readQuery = function (options, optimistic) {\n    if (optimistic === void 0) {\n      optimistic = false;\n    }\n    return this.cache.readQuery(options, optimistic);\n  };\n  ApolloClient.prototype.readFragment = function (options, optimistic) {\n    if (optimistic === void 0) {\n      optimistic = false;\n    }\n    return this.cache.readFragment(options, optimistic);\n  };\n  ApolloClient.prototype.writeQuery = function (options) {\n    var ref = this.cache.writeQuery(options);\n    if (options.broadcast !== false) {\n      this.queryManager.broadcastQueries();\n    }\n    return ref;\n  };\n  ApolloClient.prototype.writeFragment = function (options) {\n    var ref = this.cache.writeFragment(options);\n    if (options.broadcast !== false) {\n      this.queryManager.broadcastQueries();\n    }\n    return ref;\n  };\n  ApolloClient.prototype.__actionHookForDevTools = function (cb) {\n    this.devToolsHookCb = cb;\n  };\n  ApolloClient.prototype.__requestRaw = function (payload) {\n    return execute(this.link, payload);\n  };\n  ApolloClient.prototype.resetStore = function () {\n    var _this = this;\n    return Promise.resolve().then(function () {\n      return _this.queryManager.clearStore({\n        discardWatches: false\n      });\n    }).then(function () {\n      return Promise.all(_this.resetStoreCallbacks.map(function (fn) {\n        return fn();\n      }));\n    }).then(function () {\n      return _this.reFetchObservableQueries();\n    });\n  };\n  ApolloClient.prototype.clearStore = function () {\n    var _this = this;\n    return Promise.resolve().then(function () {\n      return _this.queryManager.clearStore({\n        discardWatches: true\n      });\n    }).then(function () {\n      return Promise.all(_this.clearStoreCallbacks.map(function (fn) {\n        return fn();\n      }));\n    });\n  };\n  ApolloClient.prototype.onResetStore = function (cb) {\n    var _this = this;\n    this.resetStoreCallbacks.push(cb);\n    return function () {\n      _this.resetStoreCallbacks = _this.resetStoreCallbacks.filter(function (c) {\n        return c !== cb;\n      });\n    };\n  };\n  ApolloClient.prototype.onClearStore = function (cb) {\n    var _this = this;\n    this.clearStoreCallbacks.push(cb);\n    return function () {\n      _this.clearStoreCallbacks = _this.clearStoreCallbacks.filter(function (c) {\n        return c !== cb;\n      });\n    };\n  };\n  ApolloClient.prototype.reFetchObservableQueries = function (includeStandby) {\n    return this.queryManager.reFetchObservableQueries(includeStandby);\n  };\n  ApolloClient.prototype.refetchQueries = function (options) {\n    var map = this.queryManager.refetchQueries(options);\n    var queries = [];\n    var results = [];\n    map.forEach(function (result, obsQuery) {\n      queries.push(obsQuery);\n      results.push(result);\n    });\n    var result = Promise.all(results);\n    result.queries = queries;\n    result.results = results;\n    result.catch(function (error) {\n      __DEV__ && invariant.debug(\"In client.refetchQueries, Promise.all promise rejected with error \".concat(error));\n    });\n    return result;\n  };\n  ApolloClient.prototype.getObservableQueries = function (include) {\n    if (include === void 0) {\n      include = \"active\";\n    }\n    return this.queryManager.getObservableQueries(include);\n  };\n  ApolloClient.prototype.extract = function (optimistic) {\n    return this.cache.extract(optimistic);\n  };\n  ApolloClient.prototype.restore = function (serializedState) {\n    return this.cache.restore(serializedState);\n  };\n  ApolloClient.prototype.addResolvers = function (resolvers) {\n    this.localState.addResolvers(resolvers);\n  };\n  ApolloClient.prototype.setResolvers = function (resolvers) {\n    this.localState.setResolvers(resolvers);\n  };\n  ApolloClient.prototype.getResolvers = function () {\n    return this.localState.getResolvers();\n  };\n  ApolloClient.prototype.setLocalStateFragmentMatcher = function (fragmentMatcher) {\n    this.localState.setFragmentMatcher(fragmentMatcher);\n  };\n  ApolloClient.prototype.setLink = function (newLink) {\n    this.link = this.queryManager.link = newLink;\n  };\n  return ApolloClient;\n}();\nexport { ApolloClient };","map":{"version":3,"names":["invariant","InvariantError","ApolloLink","execute","version","HttpLink","QueryManager","LocalState","hasSuggestedDevtools","mergeOptions","ApolloClient","options","_this","resetStoreCallbacks","clearStoreCallbacks","uri","credentials","headers","cache","_a","ssrMode","_b","ssrForceFetchDelay","_c","connectToDevTools","window","__APOLLO_CLIENT__","__DEV__","_d","queryDeduplication","defaultOptions","_e","assumeImmutableResults","resolvers","typeDefs","fragmentMatcher","clientAwarenessName","name","clientAwarenessVersion","link","empty","disableNetworkFetches","Object","create","setTimeout","watchQuery","bind","query","mutate","resetStore","reFetchObservableQueries","document","top","self","__APOLLO_DEVTOOLS_GLOBAL_HOOK__","nav","navigator","ua","userAgent","url","indexOf","log","localState","client","queryManager","clientAwareness","onBroadcast","devToolsHookCb","action","state","queries","getQueryStore","mutations","mutationStore","dataWithOptimisticResults","extract","prototype","stop","fetchPolicy","__assign","subscribe","startGraphQLSubscription","readQuery","optimistic","readFragment","writeQuery","ref","broadcast","broadcastQueries","writeFragment","__actionHookForDevTools","cb","__requestRaw","payload","Promise","resolve","then","clearStore","discardWatches","all","map","fn","onResetStore","push","filter","c","onClearStore","includeStandby","refetchQueries","results","forEach","result","obsQuery","catch","error","debug","concat","getObservableQueries","include","restore","serializedState","addResolvers","setResolvers","getResolvers","setLocalStateFragmentMatcher","setFragmentMatcher","setLink","newLink"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@apollo/src/core/ApolloClient.ts"],"sourcesContent":["import { invariant, InvariantError } from '../utilities/globals';\n\nimport { ExecutionResult, DocumentNode } from 'graphql';\n\nimport { ApolloLink, FetchResult, GraphQLRequest, execute } from '../link/core';\nimport { ApolloCache, DataProxy, Reference } from '../cache';\nimport { Observable } from '../utilities';\nimport { version } from '../version';\nimport { HttpLink, UriFunction } from '../link/http';\n\nimport { QueryManager } from './QueryManager';\nimport { ObservableQuery } from './ObservableQuery';\n\nimport {\n  ApolloQueryResult,\n  DefaultContext,\n  OperationVariables,\n  Resolvers,\n  RefetchQueriesOptions,\n  RefetchQueriesResult,\n  InternalRefetchQueriesResult,\n  RefetchQueriesInclude,\n} from './types';\n\nimport {\n  QueryOptions,\n  WatchQueryOptions,\n  MutationOptions,\n  SubscriptionOptions,\n  WatchQueryFetchPolicy,\n} from './watchQueryOptions';\n\nimport {\n  LocalState,\n  FragmentMatcher,\n} from './LocalState';\n\nexport interface DefaultOptions {\n  watchQuery?: Partial<WatchQueryOptions<any, any>>;\n  query?: Partial<QueryOptions<any, any>>;\n  mutate?: Partial<MutationOptions<any, any, any>>;\n}\n\nlet hasSuggestedDevtools = false;\n\nexport type ApolloClientOptions<TCacheShape> = {\n  uri?: string | UriFunction;\n  credentials?: string;\n  headers?: Record<string, string>;\n  link?: ApolloLink;\n  cache: ApolloCache<TCacheShape>;\n  ssrForceFetchDelay?: number;\n  ssrMode?: boolean;\n  connectToDevTools?: boolean;\n  queryDeduplication?: boolean;\n  defaultOptions?: DefaultOptions;\n  assumeImmutableResults?: boolean;\n  resolvers?: Resolvers | Resolvers[];\n  typeDefs?: string | string[] | DocumentNode | DocumentNode[];\n  fragmentMatcher?: FragmentMatcher;\n  name?: string;\n  version?: string;\n};\n\n// Though mergeOptions now resides in @apollo/client/utilities, it was\n// previously declared and exported from this module, and then reexported from\n// @apollo/client/core. Since we need to preserve that API anyway, the easiest\n// solution is to reexport mergeOptions where it was previously declared (here).\nimport { mergeOptions } from \"../utilities\";\nexport { mergeOptions }\n\n/**\n * This is the primary Apollo Client class. It is used to send GraphQL documents (i.e. queries\n * and mutations) to a GraphQL spec-compliant server over a {@link NetworkInterface} instance,\n * receive results from the server and cache the results in a store. It also delivers updates\n * to GraphQL queries through {@link Observable} instances.\n */\nexport class ApolloClient<TCacheShape> implements DataProxy {\n  public link: ApolloLink;\n  public cache: ApolloCache<TCacheShape>;\n  public disableNetworkFetches: boolean;\n  public version: string;\n  public queryDeduplication: boolean;\n  public defaultOptions: DefaultOptions;\n  public readonly typeDefs: ApolloClientOptions<TCacheShape>['typeDefs'];\n\n  private queryManager: QueryManager<TCacheShape>;\n  private devToolsHookCb: Function;\n  private resetStoreCallbacks: Array<() => Promise<any>> = [];\n  private clearStoreCallbacks: Array<() => Promise<any>> = [];\n  private localState: LocalState<TCacheShape>;\n\n  /**\n   * Constructs an instance of {@link ApolloClient}.\n   *\n   * @param uri The GraphQL endpoint that Apollo Client will connect to. If\n   *            `link` is configured, this option is ignored.\n   * @param link The {@link ApolloLink} over which GraphQL documents will be resolved into a response.\n   *\n   * @param cache The initial cache to use in the data store.\n   *\n   * @param ssrMode Determines whether this is being run in Server Side Rendering (SSR) mode.\n   *\n   * @param ssrForceFetchDelay Determines the time interval before we force fetch queries for a\n   * server side render.\n   *\n   * @param queryDeduplication If set to false, a query will still be sent to the server even if a query\n   * with identical parameters (query, variables, operationName) is already in flight.\n   *\n   * @param defaultOptions Used to set application wide defaults for the\n   *                       options supplied to `watchQuery`, `query`, or\n   *                       `mutate`.\n   *\n   * @param assumeImmutableResults When this option is true, the client will assume results\n   *                               read from the cache are never mutated by application code,\n   *                               which enables substantial performance optimizations.\n   *\n   * @param name A custom name that can be used to identify this client, when\n   *             using Apollo client awareness features. E.g. \"iOS\".\n   *\n   * @param version A custom version that can be used to identify this client,\n   *                when using Apollo client awareness features. This is the\n   *                version of your client, which you may want to increment on\n   *                new builds. This is NOT the version of Apollo Client that\n   *                you are using.\n   */\n  constructor(options: ApolloClientOptions<TCacheShape>) {\n    const {\n      uri,\n      credentials,\n      headers,\n      cache,\n      ssrMode = false,\n      ssrForceFetchDelay = 0,\n      connectToDevTools =\n        // Expose the client instance as window.__APOLLO_CLIENT__ and call\n        // onBroadcast in queryManager.broadcastQueries to enable browser\n        // devtools, but disable them by default in production.\n        typeof window === 'object' &&\n        !(window as any).__APOLLO_CLIENT__ &&\n        __DEV__,\n      queryDeduplication = true,\n      defaultOptions,\n      assumeImmutableResults = false,\n      resolvers,\n      typeDefs,\n      fragmentMatcher,\n      name: clientAwarenessName,\n      version: clientAwarenessVersion,\n    } = options;\n\n    let { link } = options;\n\n    if (!link) {\n      link = uri\n        ? new HttpLink({ uri, credentials, headers })\n        : ApolloLink.empty();\n    }\n\n    if (!cache) {\n      throw new InvariantError(\n        \"To initialize Apollo Client, you must specify a 'cache' property \" +\n        \"in the options object. \\n\" +\n        \"For more information, please visit: https://go.apollo.dev/c/docs\"\n      );\n    }\n\n    this.link = link;\n    this.cache = cache;\n    this.disableNetworkFetches = ssrMode || ssrForceFetchDelay > 0;\n    this.queryDeduplication = queryDeduplication;\n    this.defaultOptions = defaultOptions || Object.create(null);\n    this.typeDefs = typeDefs;\n\n    if (ssrForceFetchDelay) {\n      setTimeout(\n        () => (this.disableNetworkFetches = false),\n        ssrForceFetchDelay,\n      );\n    }\n\n    this.watchQuery = this.watchQuery.bind(this);\n    this.query = this.query.bind(this);\n    this.mutate = this.mutate.bind(this);\n    this.resetStore = this.resetStore.bind(this);\n    this.reFetchObservableQueries = this.reFetchObservableQueries.bind(this);\n\n    if (connectToDevTools && typeof window === 'object') {\n      (window as any).__APOLLO_CLIENT__ = this;\n    }\n\n    /**\n     * Suggest installing the devtools for developers who don't have them\n     */\n    if (!hasSuggestedDevtools && connectToDevTools && __DEV__) {\n      hasSuggestedDevtools = true;\n      if (\n        typeof window !== 'undefined' &&\n        window.document &&\n        window.top === window.self &&\n        !(window as any).__APOLLO_DEVTOOLS_GLOBAL_HOOK__\n      ) {\n        const nav = window.navigator;\n        const ua = nav && nav.userAgent;\n        let url: string | undefined;\n        if (typeof ua === \"string\") {\n          if (ua.indexOf(\"Chrome/\") > -1) {\n            url = \"https://chrome.google.com/webstore/detail/\" +\n              \"apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm\";\n          } else if (ua.indexOf(\"Firefox/\") > -1) {\n            url = \"https://addons.mozilla.org/en-US/firefox/addon/apollo-developer-tools/\";\n          }\n        }\n        if (url) {\n          invariant.log(\n            \"Download the Apollo DevTools for a better development \" +\n              \"experience: \" + url\n          );\n        }\n      }\n    }\n\n    this.version = version;\n\n    this.localState = new LocalState({\n      cache,\n      client: this,\n      resolvers,\n      fragmentMatcher,\n    });\n\n    this.queryManager = new QueryManager({\n      cache: this.cache,\n      link: this.link,\n      defaultOptions: this.defaultOptions,\n      queryDeduplication,\n      ssrMode,\n      clientAwareness: {\n        name: clientAwarenessName!,\n        version: clientAwarenessVersion!,\n      },\n      localState: this.localState,\n      assumeImmutableResults,\n      onBroadcast: connectToDevTools ? () => {\n        if (this.devToolsHookCb) {\n          this.devToolsHookCb({\n            action: {},\n            state: {\n              queries: this.queryManager.getQueryStore(),\n              mutations: this.queryManager.mutationStore || {},\n            },\n            dataWithOptimisticResults: this.cache.extract(true),\n          });\n        }\n      } : void 0,\n    });\n  }\n\n  /**\n   * Call this method to terminate any active client processes, making it safe\n   * to dispose of this `ApolloClient` instance.\n   */\n  public stop() {\n    this.queryManager.stop();\n  }\n\n  /**\n   * This watches the cache store of the query according to the options specified and\n   * returns an {@link ObservableQuery}. We can subscribe to this {@link ObservableQuery} and\n   * receive updated results through a GraphQL observer when the cache store changes.\n   *\n   * Note that this method is not an implementation of GraphQL subscriptions. Rather,\n   * it uses Apollo's store in order to reactively deliver updates to your query results.\n   *\n   * For example, suppose you call watchQuery on a GraphQL query that fetches a person's\n   * first and last name and this person has a particular object identifier, provided by\n   * dataIdFromObject. Later, a different query fetches that same person's\n   * first and last name and the first name has now changed. Then, any observers associated\n   * with the results of the first query will be updated with a new result object.\n   *\n   * Note that if the cache does not change, the subscriber will *not* be notified.\n   *\n   * See [here](https://medium.com/apollo-stack/the-concepts-of-graphql-bc68bd819be3#.3mb0cbcmc) for\n   * a description of store reactivity.\n   */\n  public watchQuery<T = any, TVariables extends OperationVariables = OperationVariables>(\n    options: WatchQueryOptions<TVariables, T>,\n  ): ObservableQuery<T, TVariables> {\n    if (this.defaultOptions.watchQuery) {\n      options = mergeOptions(this.defaultOptions.watchQuery, options);\n    }\n\n    // XXX Overwriting options is probably not the best way to do this long term...\n    if (\n      this.disableNetworkFetches &&\n      (options.fetchPolicy === 'network-only' ||\n        options.fetchPolicy === 'cache-and-network')\n    ) {\n      options = { ...options, fetchPolicy: 'cache-first' };\n    }\n\n    return this.queryManager.watchQuery<T, TVariables>(options);\n  }\n\n  /**\n   * This resolves a single query according to the options specified and\n   * returns a {@link Promise} which is either resolved with the resulting data\n   * or rejected with an error.\n   *\n   * @param options An object of type {@link QueryOptions} that allows us to\n   * describe how this query should be treated e.g. whether it should hit the\n   * server at all or just resolve from the cache, etc.\n   */\n  public query<T = any, TVariables extends OperationVariables = OperationVariables>(\n    options: QueryOptions<TVariables, T>,\n  ): Promise<ApolloQueryResult<T>> {\n    if (this.defaultOptions.query) {\n      options = mergeOptions(this.defaultOptions.query, options);\n    }\n\n    invariant(\n      (options.fetchPolicy as WatchQueryFetchPolicy) !== 'cache-and-network',\n      'The cache-and-network fetchPolicy does not work with client.query, because ' +\n      'client.query can only return a single result. Please use client.watchQuery ' +\n      'to receive multiple results from the cache and the network, or consider ' +\n      'using a different fetchPolicy, such as cache-first or network-only.'\n    );\n\n    if (this.disableNetworkFetches && options.fetchPolicy === 'network-only') {\n      options = { ...options, fetchPolicy: 'cache-first' };\n    }\n\n    return this.queryManager.query<T, TVariables>(options);\n  }\n\n  /**\n   * This resolves a single mutation according to the options specified and returns a\n   * {@link Promise} which is either resolved with the resulting data or rejected with an\n   * error.\n   *\n   * It takes options as an object with the following keys and values:\n   */\n  public mutate<\n    TData = any,\n    TVariables extends OperationVariables = OperationVariables,\n    TContext extends Record<string, any> = DefaultContext,\n    TCache extends ApolloCache<any> = ApolloCache<any>\n  >(\n    options: MutationOptions<TData, TVariables, TContext>,\n  ): Promise<FetchResult<TData>> {\n    if (this.defaultOptions.mutate) {\n      options = mergeOptions(this.defaultOptions.mutate, options);\n    }\n    return this.queryManager.mutate<TData, TVariables, TContext, TCache>(options);\n  }\n\n  /**\n   * This subscribes to a graphql subscription according to the options specified and returns an\n   * {@link Observable} which either emits received data or an error.\n   */\n  public subscribe<T = any, TVariables extends OperationVariables = OperationVariables>(\n    options: SubscriptionOptions<TVariables, T>,\n  ): Observable<FetchResult<T>> {\n    return this.queryManager.startGraphQLSubscription<T>(options);\n  }\n\n  /**\n   * Tries to read some data from the store in the shape of the provided\n   * GraphQL query without making a network request. This method will start at\n   * the root query. To start at a specific id returned by `dataIdFromObject`\n   * use `readFragment`.\n   *\n   * @param optimistic Set to `true` to allow `readQuery` to return\n   * optimistic results. Is `false` by default.\n   */\n  public readQuery<T = any, TVariables = OperationVariables>(\n    options: DataProxy.Query<TVariables, T>,\n    optimistic: boolean = false,\n  ): T | null {\n    return this.cache.readQuery<T, TVariables>(options, optimistic);\n  }\n\n  /**\n   * Tries to read some data from the store in the shape of the provided\n   * GraphQL fragment without making a network request. This method will read a\n   * GraphQL fragment from any arbitrary id that is currently cached, unlike\n   * `readQuery` which will only read from the root query.\n   *\n   * You must pass in a GraphQL document with a single fragment or a document\n   * with multiple fragments that represent what you are reading. If you pass\n   * in a document with multiple fragments then you must also specify a\n   * `fragmentName`.\n   *\n   * @param optimistic Set to `true` to allow `readFragment` to return\n   * optimistic results. Is `false` by default.\n   */\n  public readFragment<T = any, TVariables = OperationVariables>(\n    options: DataProxy.Fragment<TVariables, T>,\n    optimistic: boolean = false,\n  ): T | null {\n    return this.cache.readFragment<T, TVariables>(options, optimistic);\n  }\n\n  /**\n   * Writes some data in the shape of the provided GraphQL query directly to\n   * the store. This method will start at the root query. To start at a\n   * specific id returned by `dataIdFromObject` then use `writeFragment`.\n   */\n  public writeQuery<TData = any, TVariables = OperationVariables>(\n    options: DataProxy.WriteQueryOptions<TData, TVariables>,\n  ): Reference | undefined {\n    const ref = this.cache.writeQuery<TData, TVariables>(options);\n\n    if (options.broadcast !== false) {\n      this.queryManager.broadcastQueries();\n    }\n\n    return ref;\n  }\n\n  /**\n   * Writes some data in the shape of the provided GraphQL fragment directly to\n   * the store. This method will write to a GraphQL fragment from any arbitrary\n   * id that is currently cached, unlike `writeQuery` which will only write\n   * from the root query.\n   *\n   * You must pass in a GraphQL document with a single fragment or a document\n   * with multiple fragments that represent what you are writing. If you pass\n   * in a document with multiple fragments then you must also specify a\n   * `fragmentName`.\n   */\n  public writeFragment<TData = any, TVariables = OperationVariables>(\n    options: DataProxy.WriteFragmentOptions<TData, TVariables>,\n  ): Reference | undefined {\n    const ref = this.cache.writeFragment<TData, TVariables>(options);\n\n    if (options.broadcast !== false) {\n      this.queryManager.broadcastQueries();\n    }\n\n    return ref;\n  }\n\n  public __actionHookForDevTools(cb: () => any) {\n    this.devToolsHookCb = cb;\n  }\n\n  public __requestRaw(payload: GraphQLRequest): Observable<ExecutionResult> {\n    return execute(this.link, payload);\n  }\n\n  /**\n   * Resets your entire store by clearing out your cache and then re-executing\n   * all of your active queries. This makes it so that you may guarantee that\n   * there is no data left in your store from a time before you called this\n   * method.\n   *\n   * `resetStore()` is useful when your user just logged out. You’ve removed the\n   * user session, and you now want to make sure that any references to data you\n   * might have fetched while the user session was active is gone.\n   *\n   * It is important to remember that `resetStore()` *will* refetch any active\n   * queries. This means that any components that might be mounted will execute\n   * their queries again using your network interface. If you do not want to\n   * re-execute any queries then you should make sure to stop watching any\n   * active queries.\n   */\n  public resetStore(): Promise<ApolloQueryResult<any>[] | null> {\n    return Promise.resolve()\n      .then(() => this.queryManager.clearStore({\n        discardWatches: false,\n      }))\n      .then(() => Promise.all(this.resetStoreCallbacks.map(fn => fn())))\n      .then(() => this.reFetchObservableQueries());\n  }\n\n  /**\n   * Remove all data from the store. Unlike `resetStore`, `clearStore` will\n   * not refetch any active queries.\n   */\n  public clearStore(): Promise<any[]> {\n    return Promise.resolve()\n      .then(() => this.queryManager.clearStore({\n        discardWatches: true,\n      }))\n      .then(() => Promise.all(this.clearStoreCallbacks.map(fn => fn())));\n  }\n\n  /**\n   * Allows callbacks to be registered that are executed when the store is\n   * reset. `onResetStore` returns an unsubscribe function that can be used\n   * to remove registered callbacks.\n   */\n  public onResetStore(cb: () => Promise<any>): () => void {\n    this.resetStoreCallbacks.push(cb);\n    return () => {\n      this.resetStoreCallbacks = this.resetStoreCallbacks.filter(c => c !== cb);\n    };\n  }\n\n  /**\n   * Allows callbacks to be registered that are executed when the store is\n   * cleared. `onClearStore` returns an unsubscribe function that can be used\n   * to remove registered callbacks.\n   */\n  public onClearStore(cb: () => Promise<any>): () => void {\n    this.clearStoreCallbacks.push(cb);\n    return () => {\n      this.clearStoreCallbacks = this.clearStoreCallbacks.filter(c => c !== cb);\n    };\n  }\n\n  /**\n   * Refetches all of your active queries.\n   *\n   * `reFetchObservableQueries()` is useful if you want to bring the client back to proper state in case of a network outage\n   *\n   * It is important to remember that `reFetchObservableQueries()` *will* refetch any active\n   * queries. This means that any components that might be mounted will execute\n   * their queries again using your network interface. If you do not want to\n   * re-execute any queries then you should make sure to stop watching any\n   * active queries.\n   * Takes optional parameter `includeStandby` which will include queries in standby-mode when refetching.\n   */\n  public reFetchObservableQueries(\n    includeStandby?: boolean,\n  ): Promise<ApolloQueryResult<any>[]> {\n    return this.queryManager.reFetchObservableQueries(includeStandby);\n  }\n\n  /**\n   * Refetches specified active queries. Similar to \"reFetchObservableQueries()\" but with a specific list of queries.\n   *\n   * `refetchQueries()` is useful for use cases to imperatively refresh a selection of queries.\n   *\n   * It is important to remember that `refetchQueries()` *will* refetch specified active\n   * queries. This means that any components that might be mounted will execute\n   * their queries again using your network interface. If you do not want to\n   * re-execute any queries then you should make sure to stop watching any\n   * active queries.\n   */\n  public refetchQueries<\n    TCache extends ApolloCache<any> = ApolloCache<TCacheShape>,\n    TResult = Promise<ApolloQueryResult<any>>,\n  >(\n    options: RefetchQueriesOptions<TCache, TResult>,\n  ): RefetchQueriesResult<TResult> {\n    const map = this.queryManager.refetchQueries(options);\n    const queries: ObservableQuery<any>[] = [];\n    const results: InternalRefetchQueriesResult<TResult>[] = [];\n\n    map.forEach((result, obsQuery) => {\n      queries.push(obsQuery);\n      results.push(result);\n    });\n\n    const result = Promise.all<TResult>(\n      results as TResult[]\n    ) as RefetchQueriesResult<TResult>;\n\n    // In case you need the raw results immediately, without awaiting\n    // Promise.all(results):\n    result.queries = queries;\n    result.results = results;\n\n    // If you decide to ignore the result Promise because you're using\n    // result.queries and result.results instead, you shouldn't have to worry\n    // about preventing uncaught rejections for the Promise.all result.\n    result.catch(error => {\n      invariant.debug(`In client.refetchQueries, Promise.all promise rejected with error ${error}`);\n    });\n\n    return result;\n  }\n\n  /**\n   * Get all currently active `ObservableQuery` objects, in a `Map` keyed by\n   * query ID strings.\n   *\n   * An \"active\" query is one that has observers and a `fetchPolicy` other than\n   * \"standby\" or \"cache-only\".\n   *\n   * You can include all `ObservableQuery` objects (including the inactive ones)\n   * by passing \"all\" instead of \"active\", or you can include just a subset of\n   * active queries by passing an array of query names or DocumentNode objects.\n   */\n  public getObservableQueries(\n    include: RefetchQueriesInclude = \"active\",\n  ): Map<string, ObservableQuery<any>> {\n    return this.queryManager.getObservableQueries(include);\n  }\n\n  /**\n   * Exposes the cache's complete state, in a serializable format for later restoration.\n   */\n  public extract(optimistic?: boolean): TCacheShape {\n    return this.cache.extract(optimistic);\n  }\n\n  /**\n   * Replaces existing state in the cache (if any) with the values expressed by\n   * `serializedState`.\n   *\n   * Called when hydrating a cache (server side rendering, or offline storage),\n   * and also (potentially) during hot reloads.\n   */\n  public restore(serializedState: TCacheShape): ApolloCache<TCacheShape> {\n    return this.cache.restore(serializedState);\n  }\n\n  /**\n   * Add additional local resolvers.\n   */\n  public addResolvers(resolvers: Resolvers | Resolvers[]) {\n    this.localState.addResolvers(resolvers);\n  }\n\n  /**\n   * Set (override existing) local resolvers.\n   */\n  public setResolvers(resolvers: Resolvers | Resolvers[]) {\n    this.localState.setResolvers(resolvers);\n  }\n\n  /**\n   * Get all registered local resolvers.\n   */\n  public getResolvers() {\n    return this.localState.getResolvers();\n  }\n\n  /**\n   * Set a custom local state fragment matcher.\n   */\n  public setLocalStateFragmentMatcher(fragmentMatcher: FragmentMatcher) {\n    this.localState.setFragmentMatcher(fragmentMatcher);\n  }\n\n  /**\n   * Define a new ApolloLink (or link chain) that Apollo Client will use.\n   */\n  public setLink(newLink: ApolloLink) {\n    this.link = this.queryManager.link = newLink;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}