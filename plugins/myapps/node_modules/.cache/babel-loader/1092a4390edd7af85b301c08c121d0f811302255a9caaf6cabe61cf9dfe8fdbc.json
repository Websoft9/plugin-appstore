{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { useCallback, useMemo, useRef } from 'react';\nimport { mergeOptions } from \"../../utilities/index.js\";\nimport { useInternalState } from \"./useQuery.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nvar EAGER_METHODS = ['refetch', 'reobserve', 'fetchMore', 'updateQuery', 'startPolling', 'subscribeToMore'];\nexport function useLazyQuery(query, options) {\n  var _a;\n  var execOptionsRef = useRef();\n  var optionsRef = useRef();\n  var queryRef = useRef();\n  var merged = execOptionsRef.current ? mergeOptions(options, execOptionsRef.current) : options;\n  var document = (_a = merged === null || merged === void 0 ? void 0 : merged.query) !== null && _a !== void 0 ? _a : query;\n  optionsRef.current = merged;\n  queryRef.current = document;\n  var internalState = useInternalState(useApolloClient(options && options.client), document);\n  var useQueryResult = internalState.useQuery(__assign(__assign({}, merged), {\n    skip: !execOptionsRef.current\n  }));\n  var initialFetchPolicy = useQueryResult.observable.options.initialFetchPolicy || internalState.getDefaultFetchPolicy();\n  var result = Object.assign(useQueryResult, {\n    called: !!execOptionsRef.current\n  });\n  var eagerMethods = useMemo(function () {\n    var eagerMethods = {};\n    var _loop_1 = function _loop_1(key) {\n      var method = result[key];\n      eagerMethods[key] = function () {\n        if (!execOptionsRef.current) {\n          execOptionsRef.current = Object.create(null);\n          internalState.forceUpdate();\n        }\n        return method.apply(this, arguments);\n      };\n    };\n    for (var _i = 0, EAGER_METHODS_1 = EAGER_METHODS; _i < EAGER_METHODS_1.length; _i++) {\n      var key = EAGER_METHODS_1[_i];\n      _loop_1(key);\n    }\n    return eagerMethods;\n  }, []);\n  Object.assign(result, eagerMethods);\n  var execute = useCallback(function (executeOptions) {\n    execOptionsRef.current = executeOptions ? __assign(__assign({}, executeOptions), {\n      fetchPolicy: executeOptions.fetchPolicy || initialFetchPolicy\n    }) : {\n      fetchPolicy: initialFetchPolicy\n    };\n    var options = mergeOptions(optionsRef.current, __assign({\n      query: queryRef.current\n    }, execOptionsRef.current));\n    var promise = internalState.executeQuery(__assign(__assign({}, options), {\n      skip: false\n    })).then(function (queryResult) {\n      return Object.assign(queryResult, eagerMethods);\n    });\n    promise.catch(function () {});\n    return promise;\n  }, []);\n  return [execute, result];\n}","map":{"version":3,"names":["useCallback","useMemo","useRef","mergeOptions","useInternalState","useApolloClient","EAGER_METHODS","useLazyQuery","query","options","execOptionsRef","optionsRef","queryRef","merged","current","document","_a","internalState","client","useQueryResult","useQuery","__assign","skip","initialFetchPolicy","observable","getDefaultFetchPolicy","result","Object","assign","called","eagerMethods","key","method","create","forceUpdate","apply","arguments","_i","EAGER_METHODS_1","length","execute","executeOptions","fetchPolicy","promise","executeQuery","then","queryResult","catch"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@apollo/src/react/hooks/useLazyQuery.ts"],"sourcesContent":["import { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport { useCallback, useMemo, useRef } from 'react';\n\nimport { OperationVariables } from '../../core';\nimport { mergeOptions } from '../../utilities';\nimport {\n  LazyQueryHookOptions,\n  LazyQueryResultTuple,\n  QueryResult,\n} from '../types/types';\nimport { useInternalState } from './useQuery';\nimport { useApolloClient } from './useApolloClient';\n\n// The following methods, when called will execute the query, regardless of\n// whether the useLazyQuery execute function was called before.\nconst EAGER_METHODS = [\n  'refetch',\n  'reobserve',\n  'fetchMore',\n  'updateQuery',\n  'startPolling',\n  'subscribeToMore',\n] as const;\n\nexport function useLazyQuery<TData = any, TVariables extends OperationVariables = OperationVariables>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: LazyQueryHookOptions<TData, TVariables>\n): LazyQueryResultTuple<TData, TVariables> {\n  const execOptionsRef = useRef<Partial<LazyQueryHookOptions<TData, TVariables>>>();\n  const optionsRef = useRef<LazyQueryHookOptions<TData, TVariables>>();\n  const queryRef = useRef<DocumentNode | TypedDocumentNode<TData, TVariables>>();\n  const merged = execOptionsRef.current ? mergeOptions(options, execOptionsRef.current) : options;\n  const document = merged?.query ?? query;\n\n  // Use refs to track options and the used query to ensure the `execute` \n  // function remains referentially stable between renders.\n  optionsRef.current = merged;\n  queryRef.current = document;\n\n  const internalState = useInternalState<TData, TVariables>(\n    useApolloClient(options && options.client),\n    document\n  );\n\n  const useQueryResult = internalState.useQuery({\n    ...merged,\n    skip: !execOptionsRef.current,\n  });\n\n  const initialFetchPolicy =\n    useQueryResult.observable.options.initialFetchPolicy ||\n    internalState.getDefaultFetchPolicy();\n\n  const result: QueryResult<TData, TVariables> =\n    Object.assign(useQueryResult, {\n      called: !!execOptionsRef.current,\n    });\n\n  // We use useMemo here to make sure the eager methods have a stable identity.\n  const eagerMethods = useMemo(() => {\n    const eagerMethods: Record<string, any> = {};\n    for (const key of EAGER_METHODS) {\n      const method = result[key];\n      eagerMethods[key] = function () {\n        if (!execOptionsRef.current) {\n          execOptionsRef.current = Object.create(null);\n          // Only the first time populating execOptionsRef.current matters here.\n          internalState.forceUpdate();\n        }\n        return method.apply(this, arguments);\n      };\n    }\n\n    return eagerMethods;\n  }, []);\n\n  Object.assign(result, eagerMethods);\n\n  const execute = useCallback<\n    LazyQueryResultTuple<TData, TVariables>[0]\n  >(executeOptions => {\n    execOptionsRef.current = executeOptions ? {\n      ...executeOptions,\n      fetchPolicy: executeOptions.fetchPolicy || initialFetchPolicy,\n    } : {\n      fetchPolicy: initialFetchPolicy,\n    };\n\n    const options = mergeOptions(optionsRef.current, {\n      query: queryRef.current,\n      ...execOptionsRef.current,\n    })\n\n    const promise = internalState\n      .executeQuery({ ...options, skip: false }) \n      .then((queryResult) => Object.assign(queryResult, eagerMethods));\n\n    // Because the return value of `useLazyQuery` is usually floated, we need\n    // to catch the promise to prevent unhandled rejections.\n    promise.catch(() => {});\n\n    return promise;\n  }, []);\n\n  return [execute, result];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}