{"ast":null,"code":"import isFinite from \"../polyfills/isFinite.mjs\";\nimport objectValues from \"../polyfills/objectValues.mjs\";\nimport inspect from \"../jsutils/inspect.mjs\";\nimport invariant from \"../jsutils/invariant.mjs\";\nimport isObjectLike from \"../jsutils/isObjectLike.mjs\";\nimport safeArrayFrom from \"../jsutils/safeArrayFrom.mjs\";\nimport { Kind } from \"../language/kinds.mjs\";\nimport { GraphQLID } from \"../type/scalars.mjs\";\nimport { isLeafType, isEnumType, isInputObjectType, isListType, isNonNullType } from \"../type/definition.mjs\";\n/**\n * Produces a GraphQL Value AST given a JavaScript object.\n * Function will match JavaScript/JSON values to GraphQL AST schema format\n * by using suggested GraphQLInputType. For example:\n *\n *     astFromValue(\"value\", GraphQLString)\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * JavaScript values.\n *\n * | JSON Value    | GraphQL Value        |\n * | ------------- | -------------------- |\n * | Object        | Input Object         |\n * | Array         | List                 |\n * | Boolean       | Boolean              |\n * | String        | String / Enum Value  |\n * | Number        | Int / Float          |\n * | Mixed         | Enum Value           |\n * | null          | NullValue            |\n *\n */\n\nexport function astFromValue(value, type) {\n  if (isNonNullType(type)) {\n    var astValue = astFromValue(value, type.ofType);\n    if ((astValue === null || astValue === void 0 ? void 0 : astValue.kind) === Kind.NULL) {\n      return null;\n    }\n    return astValue;\n  } // only explicit null, not undefined, NaN\n\n  if (value === null) {\n    return {\n      kind: Kind.NULL\n    };\n  } // undefined\n\n  if (value === undefined) {\n    return null;\n  } // Convert JavaScript array to GraphQL list. If the GraphQLType is a list, but\n  // the value is not an array, convert the value using the list's item type.\n\n  if (isListType(type)) {\n    var itemType = type.ofType;\n    var items = safeArrayFrom(value);\n    if (items != null) {\n      var valuesNodes = [];\n      for (var _i2 = 0; _i2 < items.length; _i2++) {\n        var item = items[_i2];\n        var itemNode = astFromValue(item, itemType);\n        if (itemNode != null) {\n          valuesNodes.push(itemNode);\n        }\n      }\n      return {\n        kind: Kind.LIST,\n        values: valuesNodes\n      };\n    }\n    return astFromValue(value, itemType);\n  } // Populate the fields of the input object by creating ASTs from each value\n  // in the JavaScript object according to the fields in the input type.\n\n  if (isInputObjectType(type)) {\n    if (!isObjectLike(value)) {\n      return null;\n    }\n    var fieldNodes = [];\n    for (var _i4 = 0, _objectValues2 = objectValues(type.getFields()); _i4 < _objectValues2.length; _i4++) {\n      var field = _objectValues2[_i4];\n      var fieldValue = astFromValue(value[field.name], field.type);\n      if (fieldValue) {\n        fieldNodes.push({\n          kind: Kind.OBJECT_FIELD,\n          name: {\n            kind: Kind.NAME,\n            value: field.name\n          },\n          value: fieldValue\n        });\n      }\n    }\n    return {\n      kind: Kind.OBJECT,\n      fields: fieldNodes\n    };\n  } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')\n\n  if (isLeafType(type)) {\n    // Since value is an internally represented value, it must be serialized\n    // to an externally represented value before converting into an AST.\n    var serialized = type.serialize(value);\n    if (serialized == null) {\n      return null;\n    } // Others serialize based on their corresponding JavaScript scalar types.\n\n    if (typeof serialized === 'boolean') {\n      return {\n        kind: Kind.BOOLEAN,\n        value: serialized\n      };\n    } // JavaScript numbers can be Int or Float values.\n\n    if (typeof serialized === 'number' && isFinite(serialized)) {\n      var stringNum = String(serialized);\n      return integerStringRegExp.test(stringNum) ? {\n        kind: Kind.INT,\n        value: stringNum\n      } : {\n        kind: Kind.FLOAT,\n        value: stringNum\n      };\n    }\n    if (typeof serialized === 'string') {\n      // Enum types use Enum literals.\n      if (isEnumType(type)) {\n        return {\n          kind: Kind.ENUM,\n          value: serialized\n        };\n      } // ID types can use Int literals.\n\n      if (type === GraphQLID && integerStringRegExp.test(serialized)) {\n        return {\n          kind: Kind.INT,\n          value: serialized\n        };\n      }\n      return {\n        kind: Kind.STRING,\n        value: serialized\n      };\n    }\n    throw new TypeError(\"Cannot convert value to AST: \".concat(inspect(serialized), \".\"));\n  } // istanbul ignore next (Not reachable. All possible input types have been considered)\n\n  false || invariant(0, 'Unexpected input type: ' + inspect(type));\n}\n/**\n * IntValue:\n *   - NegativeSign? 0\n *   - NegativeSign? NonZeroDigit ( Digit+ )?\n */\n\nvar integerStringRegExp = /^-?(?:0|[1-9][0-9]*)$/;","map":{"version":3,"names":["isFinite","objectValues","inspect","invariant","isObjectLike","safeArrayFrom","Kind","GraphQLID","isLeafType","isEnumType","isInputObjectType","isListType","isNonNullType","astFromValue","value","type","astValue","ofType","kind","NULL","undefined","itemType","items","valuesNodes","_i2","length","item","itemNode","push","LIST","values","fieldNodes","_i4","_objectValues2","getFields","field","fieldValue","name","OBJECT_FIELD","NAME","OBJECT","fields","serialized","serialize","BOOLEAN","stringNum","String","integerStringRegExp","test","INT","FLOAT","ENUM","STRING","TypeError","concat"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/graphql/utilities/astFromValue.mjs"],"sourcesContent":["import isFinite from \"../polyfills/isFinite.mjs\";\nimport objectValues from \"../polyfills/objectValues.mjs\";\nimport inspect from \"../jsutils/inspect.mjs\";\nimport invariant from \"../jsutils/invariant.mjs\";\nimport isObjectLike from \"../jsutils/isObjectLike.mjs\";\nimport safeArrayFrom from \"../jsutils/safeArrayFrom.mjs\";\nimport { Kind } from \"../language/kinds.mjs\";\nimport { GraphQLID } from \"../type/scalars.mjs\";\nimport { isLeafType, isEnumType, isInputObjectType, isListType, isNonNullType } from \"../type/definition.mjs\";\n/**\n * Produces a GraphQL Value AST given a JavaScript object.\n * Function will match JavaScript/JSON values to GraphQL AST schema format\n * by using suggested GraphQLInputType. For example:\n *\n *     astFromValue(\"value\", GraphQLString)\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * JavaScript values.\n *\n * | JSON Value    | GraphQL Value        |\n * | ------------- | -------------------- |\n * | Object        | Input Object         |\n * | Array         | List                 |\n * | Boolean       | Boolean              |\n * | String        | String / Enum Value  |\n * | Number        | Int / Float          |\n * | Mixed         | Enum Value           |\n * | null          | NullValue            |\n *\n */\n\nexport function astFromValue(value, type) {\n  if (isNonNullType(type)) {\n    var astValue = astFromValue(value, type.ofType);\n\n    if ((astValue === null || astValue === void 0 ? void 0 : astValue.kind) === Kind.NULL) {\n      return null;\n    }\n\n    return astValue;\n  } // only explicit null, not undefined, NaN\n\n\n  if (value === null) {\n    return {\n      kind: Kind.NULL\n    };\n  } // undefined\n\n\n  if (value === undefined) {\n    return null;\n  } // Convert JavaScript array to GraphQL list. If the GraphQLType is a list, but\n  // the value is not an array, convert the value using the list's item type.\n\n\n  if (isListType(type)) {\n    var itemType = type.ofType;\n    var items = safeArrayFrom(value);\n\n    if (items != null) {\n      var valuesNodes = [];\n\n      for (var _i2 = 0; _i2 < items.length; _i2++) {\n        var item = items[_i2];\n        var itemNode = astFromValue(item, itemType);\n\n        if (itemNode != null) {\n          valuesNodes.push(itemNode);\n        }\n      }\n\n      return {\n        kind: Kind.LIST,\n        values: valuesNodes\n      };\n    }\n\n    return astFromValue(value, itemType);\n  } // Populate the fields of the input object by creating ASTs from each value\n  // in the JavaScript object according to the fields in the input type.\n\n\n  if (isInputObjectType(type)) {\n    if (!isObjectLike(value)) {\n      return null;\n    }\n\n    var fieldNodes = [];\n\n    for (var _i4 = 0, _objectValues2 = objectValues(type.getFields()); _i4 < _objectValues2.length; _i4++) {\n      var field = _objectValues2[_i4];\n      var fieldValue = astFromValue(value[field.name], field.type);\n\n      if (fieldValue) {\n        fieldNodes.push({\n          kind: Kind.OBJECT_FIELD,\n          name: {\n            kind: Kind.NAME,\n            value: field.name\n          },\n          value: fieldValue\n        });\n      }\n    }\n\n    return {\n      kind: Kind.OBJECT,\n      fields: fieldNodes\n    };\n  } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')\n\n\n  if (isLeafType(type)) {\n    // Since value is an internally represented value, it must be serialized\n    // to an externally represented value before converting into an AST.\n    var serialized = type.serialize(value);\n\n    if (serialized == null) {\n      return null;\n    } // Others serialize based on their corresponding JavaScript scalar types.\n\n\n    if (typeof serialized === 'boolean') {\n      return {\n        kind: Kind.BOOLEAN,\n        value: serialized\n      };\n    } // JavaScript numbers can be Int or Float values.\n\n\n    if (typeof serialized === 'number' && isFinite(serialized)) {\n      var stringNum = String(serialized);\n      return integerStringRegExp.test(stringNum) ? {\n        kind: Kind.INT,\n        value: stringNum\n      } : {\n        kind: Kind.FLOAT,\n        value: stringNum\n      };\n    }\n\n    if (typeof serialized === 'string') {\n      // Enum types use Enum literals.\n      if (isEnumType(type)) {\n        return {\n          kind: Kind.ENUM,\n          value: serialized\n        };\n      } // ID types can use Int literals.\n\n\n      if (type === GraphQLID && integerStringRegExp.test(serialized)) {\n        return {\n          kind: Kind.INT,\n          value: serialized\n        };\n      }\n\n      return {\n        kind: Kind.STRING,\n        value: serialized\n      };\n    }\n\n    throw new TypeError(\"Cannot convert value to AST: \".concat(inspect(serialized), \".\"));\n  } // istanbul ignore next (Not reachable. All possible input types have been considered)\n\n\n  false || invariant(0, 'Unexpected input type: ' + inspect(type));\n}\n/**\n * IntValue:\n *   - NegativeSign? 0\n *   - NegativeSign? NonZeroDigit ( Digit+ )?\n */\n\nvar integerStringRegExp = /^-?(?:0|[1-9][0-9]*)$/;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}