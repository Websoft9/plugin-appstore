{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { DualListSelectorTreeItem } from './DualListSelectorTreeItem';\nexport var DualListSelectorTree = function DualListSelectorTree(_a) {\n  var data = _a.data,\n    _a$hasBadges = _a.hasBadges,\n    hasBadges = _a$hasBadges === void 0 ? false : _a$hasBadges,\n    _a$isNested = _a.isNested,\n    isNested = _a$isNested === void 0 ? false : _a$isNested,\n    _a$defaultAllExpanded = _a.defaultAllExpanded,\n    defaultAllExpanded = _a$defaultAllExpanded === void 0 ? false : _a$defaultAllExpanded,\n    onOptionCheck = _a.onOptionCheck,\n    _a$isDisabled = _a.isDisabled,\n    isDisabled = _a$isDisabled === void 0 ? false : _a$isDisabled,\n    props = __rest(_a, [\"data\", \"hasBadges\", \"isNested\", \"defaultAllExpanded\", \"onOptionCheck\", \"isDisabled\"]);\n  var dataToRender = typeof data === 'function' ? data() : data;\n  var tree = dataToRender.map(function (item) {\n    return React.createElement(DualListSelectorTreeItem, Object.assign({\n      key: item.id,\n      text: item.text,\n      id: item.id,\n      defaultExpanded: item.defaultExpanded !== undefined ? item.defaultExpanded : defaultAllExpanded,\n      onOptionCheck: onOptionCheck,\n      isChecked: item.isChecked,\n      checkProps: item.checkProps,\n      hasBadge: item.hasBadge !== undefined ? item.hasBadge : hasBadges,\n      badgeProps: item.badgeProps,\n      itemData: item,\n      isDisabled: isDisabled,\n      useMemo: true\n    }, item.children && {\n      children: React.createElement(DualListSelectorTree, {\n        isNested: true,\n        data: item.children,\n        hasBadges: hasBadges,\n        defaultAllExpanded: defaultAllExpanded,\n        onOptionCheck: onOptionCheck,\n        isDisabled: isDisabled\n      })\n    }));\n  });\n  return isNested ? React.createElement(\"ul\", Object.assign({\n    className: css(styles.dualListSelectorList),\n    role: \"group\"\n  }, props), tree) : React.createElement(React.Fragment, null, tree);\n};\nDualListSelectorTree.displayName = 'DualListSelectorTree';","map":{"version":3,"names":["React","css","styles","DualListSelectorTreeItem","DualListSelectorTree","_a","data","_a$hasBadges","hasBadges","_a$isNested","isNested","_a$defaultAllExpanded","defaultAllExpanded","onOptionCheck","_a$isDisabled","isDisabled","props","__rest","dataToRender","tree","map","item","createElement","Object","assign","key","id","text","defaultExpanded","undefined","isChecked","checkProps","hasBadge","badgeProps","itemData","useMemo","children","className","dualListSelectorList","role","Fragment","displayName"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@patternfly/react-core/src/components/DualListSelector/DualListSelectorTree.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { DualListSelectorTreeItem } from './DualListSelectorTreeItem';\n\nexport interface DualListSelectorTreeItemData {\n  /** Content rendered inside the dual list selector. */\n  children?: DualListSelectorTreeItemData[];\n  /** Additional classes applied to the dual list selector. */\n  className?: string;\n  /** Flag indicating this option is expanded by default. */\n  defaultExpanded?: boolean;\n  /** Flag indicating this option has a badge */\n  hasBadge?: boolean;\n  /** Callback fired when an option is checked */\n  onOptionCheck?: (\n    event: React.MouseEvent | React.ChangeEvent<HTMLInputElement> | React.KeyboardEvent,\n    isChecked: boolean,\n    isChosen: boolean,\n    itemData: DualListSelectorTreeItemData\n  ) => void;\n  /** ID of the option */\n  id: string;\n  /** Text of the option */\n  text: string;\n  /** Parent id of an option */\n  parentId?: string;\n  /** Checked state of the option */\n  isChecked: boolean;\n  /** Additional properties to pass to the option checkbox */\n  checkProps?: any;\n  /** Additional properties to pass to the option badge */\n  badgeProps?: any;\n  /** Flag indicating whether the component is disabled. */\n  isDisabled?: boolean;\n}\n\n/** Used in place of the DualListSelectorListItem sub-component when building a\n * composable dual list selector with a tree.\n */\n\nexport interface DualListSelectorTreeProps extends Omit<React.HTMLProps<HTMLUListElement>, 'data'> {\n  /** Data of the tree view */\n  data: DualListSelectorTreeItemData[] | (() => DualListSelectorTreeItemData[]);\n  /** ID of the tree view */\n  id?: string;\n  /** @hide Flag indicating if the list is nested */\n  isNested?: boolean;\n  /** Flag indicating if all options should have badges */\n  hasBadges?: boolean;\n  /** Sets the default expanded behavior */\n  defaultAllExpanded?: boolean;\n  /** Flag indicating if the dual list selector tree is in the disabled state */\n  isDisabled?: boolean;\n  /** Callback fired when an option is checked */\n  onOptionCheck?: (\n    event: React.MouseEvent | React.ChangeEvent<HTMLInputElement> | React.KeyboardEvent,\n    isChecked: boolean,\n    itemData: DualListSelectorTreeItemData\n  ) => void;\n}\n\nexport const DualListSelectorTree: React.FunctionComponent<DualListSelectorTreeProps> = ({\n  data,\n  hasBadges = false,\n  isNested = false,\n  defaultAllExpanded = false,\n  onOptionCheck,\n  isDisabled = false,\n  ...props\n}: DualListSelectorTreeProps) => {\n  const dataToRender = typeof data === 'function' ? data() : data;\n  const tree = dataToRender.map(item => (\n    <DualListSelectorTreeItem\n      key={item.id}\n      text={item.text}\n      id={item.id}\n      defaultExpanded={item.defaultExpanded !== undefined ? item.defaultExpanded : defaultAllExpanded}\n      onOptionCheck={onOptionCheck}\n      isChecked={item.isChecked}\n      checkProps={item.checkProps}\n      hasBadge={item.hasBadge !== undefined ? item.hasBadge : hasBadges}\n      badgeProps={item.badgeProps}\n      itemData={item}\n      isDisabled={isDisabled}\n      useMemo={true}\n      {...(item.children && {\n        children: (\n          <DualListSelectorTree\n            isNested\n            data={item.children}\n            hasBadges={hasBadges}\n            defaultAllExpanded={defaultAllExpanded}\n            onOptionCheck={onOptionCheck}\n            isDisabled={isDisabled}\n          />\n        )\n      })}\n    />\n  ));\n  return isNested ? (\n    <ul className={css(styles.dualListSelectorList)} role=\"group\" {...props}>\n      {tree}\n    </ul>\n  ) : (\n    <>{tree}</>\n  );\n};\n\nDualListSelectorTree.displayName = 'DualListSelectorTree';\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,GAAG,QAAQ,0BAA0B;AAC9C,OAAOC,MAAM,MAAM,6EAA6E;AAChG,SAASC,wBAAwB,QAAQ,4BAA4B;AA2DrE,OAAO,IAAMC,oBAAoB,GAAuD,SAA3EA,oBAAoBA,CAAwDC,EAQ7D,EAAI;MAP9BC,IAAI,GAKcD,EAEQ,CAP1BC,IAAI;IAAAC,YAAA,GAKcF,EAEQ,CAN1BG,SAAS;IAATA,SAAS,GAAAD,YAAA,cAAG,KAAK,GAAAA,YAAA;IAAAE,WAAA,GAICJ,EAEQ,CAL1BK,QAAQ;IAARA,QAAQ,GAAAD,WAAA,cAAG,KAAK,GAAAA,WAAA;IAAAE,qBAAA,GAGEN,EAEQ,CAJ1BO,kBAAkB;IAAlBA,kBAAkB,GAAAD,qBAAA,cAAG,KAAK,GAAAA,qBAAA;IAC1BE,aAAa,GACKR,EAEQ,CAH1BQ,aAAa;IAAAC,aAAA,GACKT,EAEQ,CAF1BU,UAAU;IAAVA,UAAU,GAAAD,aAAA,cAAG,KAAK,GAAAA,aAAA;IACfE,KAAK,GAAAC,MAAA,CAAAZ,EAAA,EAP+E,sFAQxF,CADS;EAER,IAAMa,YAAY,GAAG,OAAOZ,IAAI,KAAK,UAAU,GAAGA,IAAI,EAAE,GAAGA,IAAI;EAC/D,IAAMa,IAAI,GAAGD,YAAY,CAACE,GAAG,CAAC,UAAAC,IAAI;IAAA,OAChCrB,KAAA,CAAAsB,aAAA,CAACnB,wBAAwB,EAAAoB,MAAA,CAAAC,MAAA;MACvBC,GAAG,EAAEJ,IAAI,CAACK,EAAE;MACZC,IAAI,EAAEN,IAAI,CAACM,IAAI;MACfD,EAAE,EAAEL,IAAI,CAACK,EAAE;MACXE,eAAe,EAAEP,IAAI,CAACO,eAAe,KAAKC,SAAS,GAAGR,IAAI,CAACO,eAAe,GAAGhB,kBAAkB;MAC/FC,aAAa,EAAEA,aAAa;MAC5BiB,SAAS,EAAET,IAAI,CAACS,SAAS;MACzBC,UAAU,EAAEV,IAAI,CAACU,UAAU;MAC3BC,QAAQ,EAAEX,IAAI,CAACW,QAAQ,KAAKH,SAAS,GAAGR,IAAI,CAACW,QAAQ,GAAGxB,SAAS;MACjEyB,UAAU,EAAEZ,IAAI,CAACY,UAAU;MAC3BC,QAAQ,EAAEb,IAAI;MACdN,UAAU,EAAEA,UAAU;MACtBoB,OAAO,EAAE;IAAI,GACRd,IAAI,CAACe,QAAQ,IAAI;MACpBA,QAAQ,EACNpC,KAAA,CAAAsB,aAAA,CAAClB,oBAAoB;QACnBM,QAAQ;QACRJ,IAAI,EAAEe,IAAI,CAACe,QAAQ;QACnB5B,SAAS,EAAEA,SAAS;QACpBI,kBAAkB,EAAEA,kBAAkB;QACtCC,aAAa,EAAEA,aAAa;QAC5BE,UAAU,EAAEA;MAAU;KAG1B,EACF;EAAA,CACH,CAAC;EACF,OAAOL,QAAQ,GACbV,KAAA,CAAAsB,aAAA,OAAAC,MAAA,CAAAC,MAAA;IAAIa,SAAS,EAAEpC,GAAG,CAACC,MAAM,CAACoC,oBAAoB,CAAC;IAAEC,IAAI,EAAC;EAAO,GAAKvB,KAAK,GACpEG,IAAI,CACF,GAELnB,KAAA,CAAAsB,aAAA,CAAAtB,KAAA,CAAAwC,QAAA,QAAGrB,IAAI,CACR;AACH,CAAC;AAEDf,oBAAoB,CAACqC,WAAW,GAAG,sBAAsB"},"metadata":{},"sourceType":"module","externalDependencies":[]}