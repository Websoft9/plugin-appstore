{"ast":null,"code":"import { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { print } from \"../../language/printer.mjs\";\nimport { isInputType } from \"../../type/definition.mjs\";\nimport { typeFromAST } from \"../../utilities/typeFromAST.mjs\";\n\n/**\n * Variables are input types\n *\n * A GraphQL operation is only valid if all the variables it defines are of\n * input types (scalar, enum, or input object).\n */\nexport function VariablesAreInputTypesRule(context) {\n  return {\n    VariableDefinition: function VariableDefinition(node) {\n      var type = typeFromAST(context.getSchema(), node.type);\n      if (type && !isInputType(type)) {\n        var variableName = node.variable.name.value;\n        var typeName = print(node.type);\n        context.reportError(new GraphQLError(\"Variable \\\"$\".concat(variableName, \"\\\" cannot be non-input type \\\"\").concat(typeName, \"\\\".\"), node.type));\n      }\n    }\n  };\n}","map":{"version":3,"names":["GraphQLError","print","isInputType","typeFromAST","VariablesAreInputTypesRule","context","VariableDefinition","node","type","getSchema","variableName","variable","name","value","typeName","reportError","concat"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/graphql/validation/rules/VariablesAreInputTypesRule.mjs"],"sourcesContent":["import { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { print } from \"../../language/printer.mjs\";\nimport { isInputType } from \"../../type/definition.mjs\";\nimport { typeFromAST } from \"../../utilities/typeFromAST.mjs\";\n\n/**\n * Variables are input types\n *\n * A GraphQL operation is only valid if all the variables it defines are of\n * input types (scalar, enum, or input object).\n */\nexport function VariablesAreInputTypesRule(context) {\n  return {\n    VariableDefinition: function VariableDefinition(node) {\n      var type = typeFromAST(context.getSchema(), node.type);\n\n      if (type && !isInputType(type)) {\n        var variableName = node.variable.name.value;\n        var typeName = print(node.type);\n        context.reportError(new GraphQLError(\"Variable \\\"$\".concat(variableName, \"\\\" cannot be non-input type \\\"\").concat(typeName, \"\\\".\"), node.type));\n      }\n    }\n  };\n}\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,8BAA8B;AAC3D,SAASC,KAAK,QAAQ,4BAA4B;AAClD,SAASC,WAAW,QAAQ,2BAA2B;AACvD,SAASC,WAAW,QAAQ,iCAAiC;;AAE7D;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,0BAA0BA,CAACC,OAAO,EAAE;EAClD,OAAO;IACLC,kBAAkB,EAAE,SAASA,kBAAkBA,CAACC,IAAI,EAAE;MACpD,IAAIC,IAAI,GAAGL,WAAW,CAACE,OAAO,CAACI,SAAS,CAAC,CAAC,EAAEF,IAAI,CAACC,IAAI,CAAC;MAEtD,IAAIA,IAAI,IAAI,CAACN,WAAW,CAACM,IAAI,CAAC,EAAE;QAC9B,IAAIE,YAAY,GAAGH,IAAI,CAACI,QAAQ,CAACC,IAAI,CAACC,KAAK;QAC3C,IAAIC,QAAQ,GAAGb,KAAK,CAACM,IAAI,CAACC,IAAI,CAAC;QAC/BH,OAAO,CAACU,WAAW,CAAC,IAAIf,YAAY,CAAC,cAAc,CAACgB,MAAM,CAACN,YAAY,EAAE,gCAAgC,CAAC,CAACM,MAAM,CAACF,QAAQ,EAAE,KAAK,CAAC,EAAEP,IAAI,CAACC,IAAI,CAAC,CAAC;MACjJ;IACF;EACF,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}