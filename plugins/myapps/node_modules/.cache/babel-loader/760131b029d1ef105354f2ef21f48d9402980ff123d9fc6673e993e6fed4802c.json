{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Badge/badge';\nexport var Badge = function Badge(_a) {\n  var _a$isRead = _a.isRead,\n    isRead = _a$isRead === void 0 ? false : _a$isRead,\n    _a$className = _a.className,\n    className = _a$className === void 0 ? '' : _a$className,\n    _a$children = _a.children,\n    children = _a$children === void 0 ? '' : _a$children,\n    screenReaderText = _a.screenReaderText,\n    props = __rest(_a, [\"isRead\", \"className\", \"children\", \"screenReaderText\"]);\n  return React.createElement(\"span\", Object.assign({}, props, {\n    className: css(styles.badge, isRead ? styles.modifiers.read : styles.modifiers.unread, className)\n  }), children, screenReaderText && React.createElement(\"span\", {\n    className: \"pf-screen-reader\"\n  }, screenReaderText));\n};\nBadge.displayName = 'Badge';","map":{"version":3,"names":["React","css","styles","Badge","_a","isRead","_a$isRead","_a$className","className","_a$children","children","screenReaderText","props","__rest","createElement","Object","assign","badge","modifiers","read","unread","displayName"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@patternfly/react-core/src/components/Badge/Badge.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Badge/badge';\n\nexport interface BadgeProps extends React.HTMLProps<HTMLSpanElement> {\n  /** Text announced by screen readers to indicate the current content/status of the badge. */\n  screenReaderText?: string;\n  /**  Adds styling to the badge to indicate it has been read */\n  isRead?: boolean;\n  /** content rendered inside the Badge */\n  children?: React.ReactNode;\n  /** additional classes added to the Badge */\n  className?: string;\n}\n\nexport const Badge: React.FunctionComponent<BadgeProps> = ({\n  isRead = false,\n  className = '',\n  children = '',\n  screenReaderText,\n  ...props\n}: BadgeProps) => (\n  <span\n    {...props}\n    className={css(styles.badge, (isRead ? styles.modifiers.read : styles.modifiers.unread) as any, className)}\n  >\n    {children}\n    {screenReaderText && <span className=\"pf-screen-reader\">{screenReaderText}</span>}\n  </span>\n);\nBadge.displayName = 'Badge';\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,GAAG,QAAQ,0BAA0B;AAC9C,OAAOC,MAAM,MAAM,qDAAqD;AAaxE,OAAO,IAAMC,KAAK,GAAwC,SAA7CA,KAAKA,CAAyCC,EAM9C,EAAI;kBAFCA,EAEL,CALXC,MAAM;IAANA,MAAM,GAAAC,SAAA,cAAG,KAAK,GAAAA,SAAA;IAAAC,YAAA,GAGEH,EAEL,CAJXI,SAAS;IAATA,SAAS,GAAAD,YAAA,cAAG,EAAE,GAAAA,YAAA;IAAAE,WAAA,GAEEL,EAEL,CAHXM,QAAQ;IAARA,QAAQ,GAAAD,WAAA,cAAG,EAAE,GAAAA,WAAA;IACbE,gBAAgB,GAAAP,EAEL,CAFXO,gBAAgB;IACbC,KAAK,GAAAC,MAAA,CAAAT,EAAA,EALiD,uDAM1D,CADS;EACQ,OAChBJ,KAAA,CAAAc,aAAA,SAAAC,MAAA,CAAAC,MAAA,KACMJ,KAAK;IACTJ,SAAS,EAAEP,GAAG,CAACC,MAAM,CAACe,KAAK,EAAGZ,MAAM,GAAGH,MAAM,CAACgB,SAAS,CAACC,IAAI,GAAGjB,MAAM,CAACgB,SAAS,CAACE,MAAM,EAAUZ,SAAS;EAAC,IAEzGE,QAAQ,EACRC,gBAAgB,IAAIX,KAAA,CAAAc,aAAA;IAAMN,SAAS,EAAC;EAAkB,GAAEG,gBAAgB,CAAQ,CAC5E;CACR;AACDR,KAAK,CAACkB,WAAW,GAAG,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}