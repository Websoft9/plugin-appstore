{"ast":null,"code":"import _classCallCheck from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _createForOfIteratorHelper from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DataList/data-list';\nimport { DataListContext } from './DataList';\nimport { KeyTypes } from '../../helpers/constants';\nimport { DataListDragButton } from './DataListDragButton';\nfunction findDataListDragButton(node) {\n  if (!React.isValidElement(node)) {\n    return null;\n  }\n  if (node.type === DataListDragButton) {\n    return node;\n  }\n  if (node.props.children) {\n    var _iterator = _createForOfIteratorHelper(React.Children.toArray(node.props.children)),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var child = _step.value;\n        var button = findDataListDragButton(child);\n        if (button) {\n          return button;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  return null;\n}\nexport var DataListItem = /*#__PURE__*/function (_React$Component) {\n  _inherits(DataListItem, _React$Component);\n  var _super = _createSuper(DataListItem);\n  function DataListItem() {\n    _classCallCheck(this, DataListItem);\n    return _super.apply(this, arguments);\n  }\n  _createClass(DataListItem, [{\n    key: \"render\",\n    value: function render() {\n      var _a = this.props,\n        children = _a.children,\n        isExpanded = _a.isExpanded,\n        className = _a.className,\n        id = _a.id,\n        ariaLabelledBy = _a['aria-labelledby'],\n        selectableInputAriaLabel = _a.selectableInputAriaLabel,\n        props = __rest(_a, [\"children\", \"isExpanded\", \"className\", \"id\", 'aria-labelledby', \"selectableInputAriaLabel\"]);\n      return React.createElement(DataListContext.Consumer, null, function (_ref) {\n        var isSelectable = _ref.isSelectable,\n          selectedDataListItemId = _ref.selectedDataListItemId,\n          updateSelectedDataListItem = _ref.updateSelectedDataListItem,\n          selectableRow = _ref.selectableRow,\n          isDraggable = _ref.isDraggable,\n          dragStart = _ref.dragStart,\n          dragEnd = _ref.dragEnd,\n          drop = _ref.drop;\n        var selectDataListItem = function selectDataListItem(event) {\n          var target = event.target;\n          while (event.currentTarget !== target) {\n            if ('onclick' in target && target.onclick || target.parentNode.classList.contains(styles.dataListItemAction) || target.parentNode.classList.contains(styles.dataListItemControl)) {\n              // check other event handlers are not present.\n              return;\n            } else {\n              target = target.parentNode;\n            }\n          }\n          updateSelectedDataListItem(id);\n        };\n        var onKeyDown = function onKeyDown(event) {\n          if (event.key === KeyTypes.Enter) {\n            updateSelectedDataListItem(id);\n          }\n        };\n        // We made the DataListDragButton determine if the entire item is draggable instead of\n        // DataListItem like we should have.\n        // Recursively search children for the DataListDragButton and see if it's disabled...\n        var dragButton = findDataListDragButton(children);\n        var dragProps = isDraggable && {\n          draggable: dragButton ? !dragButton.props.isDisabled : true,\n          onDrop: drop,\n          onDragEnd: dragEnd,\n          onDragStart: dragStart\n        };\n        var isSelected = selectedDataListItemId === id;\n        var selectableInputAriaProps = selectableInputAriaLabel ? {\n          'aria-label': selectableInputAriaLabel\n        } : {\n          'aria-labelledby': ariaLabelledBy\n        };\n        return React.createElement(\"li\", Object.assign({\n          id: id,\n          className: css(styles.dataListItem, isExpanded && styles.modifiers.expanded, isSelectable && styles.modifiers.selectable, selectedDataListItemId && isSelected && styles.modifiers.selected, className),\n          \"aria-labelledby\": ariaLabelledBy\n        }, isSelectable && {\n          tabIndex: 0,\n          onClick: selectDataListItem,\n          onKeyDown: onKeyDown\n        }, isSelectable && isSelected && {\n          'aria-selected': true\n        }, props, dragProps), selectableRow && React.createElement(\"input\", Object.assign({\n          className: \"pf-screen-reader\",\n          type: \"radio\",\n          checked: isSelected,\n          onChange: function onChange(event) {\n            return selectableRow.onChange(id, event);\n          },\n          tabIndex: -1\n        }, selectableInputAriaProps)), React.Children.map(children, function (child) {\n          return React.isValidElement(child) && React.cloneElement(child, {\n            rowid: ariaLabelledBy\n          });\n        }));\n      });\n    }\n  }]);\n  return DataListItem;\n}(React.Component);\nDataListItem.displayName = 'DataListItem';\nDataListItem.defaultProps = {\n  isExpanded: false,\n  className: '',\n  id: '',\n  children: null,\n  'aria-labelledby': ''\n};","map":{"version":3,"names":["React","css","styles","DataListContext","KeyTypes","DataListDragButton","findDataListDragButton","node","isValidElement","type","props","children","_iterator","_createForOfIteratorHelper","Children","toArray","_step","s","n","done","child","value","button","err","e","f","DataListItem","_React$Component","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","render","_a","isExpanded","className","id","ariaLabelledBy","selectableInputAriaLabel","__rest","createElement","Consumer","_ref","isSelectable","selectedDataListItemId","updateSelectedDataListItem","selectableRow","isDraggable","dragStart","dragEnd","drop","selectDataListItem","event","target","currentTarget","onclick","parentNode","classList","contains","dataListItemAction","dataListItemControl","onKeyDown","Enter","dragButton","dragProps","draggable","isDisabled","onDrop","onDragEnd","onDragStart","isSelected","selectableInputAriaProps","Object","assign","dataListItem","modifiers","expanded","selectable","selected","tabIndex","onClick","checked","onChange","map","cloneElement","rowid","Component","displayName","defaultProps"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@patternfly/react-core/src/components/DataList/DataListItem.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DataList/data-list';\nimport { DataListContext } from './DataList';\nimport { KeyTypes } from '../../helpers/constants';\nimport { DataListDragButton, DataListDragButtonProps } from './DataListDragButton';\n\nexport interface DataListItemProps extends Omit<React.HTMLProps<HTMLLIElement>, 'children' | 'ref'> {\n  /** Flag to show if the expanded content of the DataList item is visible */\n  isExpanded?: boolean;\n  /** Content rendered inside the DataList item */\n  children: React.ReactNode;\n  /** Additional classes added to the DataList item should be either <DataListItemRow> or <DataListContent> */\n  className?: string;\n  /** Adds accessible text to the DataList item */\n  'aria-labelledby': string;\n  /** Unique id for the DataList item */\n  id?: string;\n  /** Aria label to apply to the selectable input if one is rendered */\n  selectableInputAriaLabel?: string;\n}\n\nexport interface DataListItemChildProps {\n  /** Id for the row */\n  rowid: string;\n}\n\nfunction findDataListDragButton(node: React.ReactNode): React.ReactElement<DataListDragButtonProps> | null {\n  if (!React.isValidElement(node)) {\n    return null;\n  }\n  if (node.type === DataListDragButton) {\n    return node as React.ReactElement<DataListDragButtonProps>;\n  }\n  if (node.props.children) {\n    for (const child of React.Children.toArray(node.props.children)) {\n      const button = findDataListDragButton(child);\n      if (button) {\n        return button;\n      }\n    }\n  }\n\n  return null;\n}\n\nexport class DataListItem extends React.Component<DataListItemProps> {\n  static displayName = 'DataListItem';\n  static defaultProps: DataListItemProps = {\n    isExpanded: false,\n    className: '',\n    id: '',\n    children: null,\n    'aria-labelledby': ''\n  };\n  render() {\n    const {\n      children,\n      isExpanded,\n      className,\n      id,\n      'aria-labelledby': ariaLabelledBy,\n      selectableInputAriaLabel,\n      ...props\n    } = this.props;\n    return (\n      <DataListContext.Consumer>\n        {({\n          isSelectable,\n          selectedDataListItemId,\n          updateSelectedDataListItem,\n          selectableRow,\n          isDraggable,\n          dragStart,\n          dragEnd,\n          drop\n        }) => {\n          const selectDataListItem = (event: React.MouseEvent) => {\n            let target: any = event.target;\n            while (event.currentTarget !== target) {\n              if (\n                ('onclick' in target && target.onclick) ||\n                target.parentNode.classList.contains(styles.dataListItemAction) ||\n                target.parentNode.classList.contains(styles.dataListItemControl)\n              ) {\n                // check other event handlers are not present.\n                return;\n              } else {\n                target = target.parentNode;\n              }\n            }\n            updateSelectedDataListItem(id);\n          };\n\n          const onKeyDown = (event: React.KeyboardEvent) => {\n            if (event.key === KeyTypes.Enter) {\n              updateSelectedDataListItem(id);\n            }\n          };\n\n          // We made the DataListDragButton determine if the entire item is draggable instead of\n          // DataListItem like we should have.\n          // Recursively search children for the DataListDragButton and see if it's disabled...\n          const dragButton = findDataListDragButton(children);\n          const dragProps = isDraggable && {\n            draggable: dragButton ? !dragButton.props.isDisabled : true,\n            onDrop: drop,\n            onDragEnd: dragEnd,\n            onDragStart: dragStart\n          };\n\n          const isSelected = selectedDataListItemId === id;\n\n          const selectableInputAriaProps = selectableInputAriaLabel\n            ? { 'aria-label': selectableInputAriaLabel }\n            : { 'aria-labelledby': ariaLabelledBy };\n\n          return (\n            <li\n              id={id}\n              className={css(\n                styles.dataListItem,\n                isExpanded && styles.modifiers.expanded,\n                isSelectable && styles.modifiers.selectable,\n                selectedDataListItemId && isSelected && styles.modifiers.selected,\n                className\n              )}\n              aria-labelledby={ariaLabelledBy}\n              {...(isSelectable && { tabIndex: 0, onClick: selectDataListItem, onKeyDown })}\n              {...(isSelectable && isSelected && { 'aria-selected': true })}\n              {...props}\n              {...dragProps}\n            >\n              {selectableRow && (\n                <input\n                  className=\"pf-screen-reader\"\n                  type=\"radio\"\n                  checked={isSelected}\n                  onChange={event => selectableRow.onChange(id, event)}\n                  tabIndex={-1}\n                  {...selectableInputAriaProps}\n                />\n              )}\n              {React.Children.map(\n                children,\n                child =>\n                  React.isValidElement(child) &&\n                  React.cloneElement(child as React.ReactElement<any>, {\n                    rowid: ariaLabelledBy\n                  })\n              )}\n            </li>\n          );\n        }}\n      </DataListContext.Consumer>\n    );\n  }\n}\n"],"mappings":";;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,GAAG,QAAQ,0BAA0B;AAC9C,OAAOC,MAAM,MAAM,4DAA4D;AAC/E,SAASC,eAAe,QAAQ,YAAY;AAC5C,SAASC,QAAQ,QAAQ,yBAAyB;AAClD,SAASC,kBAAkB,QAAiC,sBAAsB;AAsBlF,SAASC,sBAAsBA,CAACC,IAAqB;EACnD,IAAI,CAACP,KAAK,CAACQ,cAAc,CAACD,IAAI,CAAC,EAAE;IAC/B,OAAO,IAAI;;EAEb,IAAIA,IAAI,CAACE,IAAI,KAAKJ,kBAAkB,EAAE;IACpC,OAAOE,IAAmD;;EAE5D,IAAIA,IAAI,CAACG,KAAK,CAACC,QAAQ,EAAE;IAAA,IAAAC,SAAA,GAAAC,0BAAA,CACHb,KAAK,CAACc,QAAQ,CAACC,OAAO,CAACR,IAAI,CAACG,KAAK,CAACC,QAAQ,CAAC;MAAAK,KAAA;IAAA;MAA/D,KAAAJ,SAAA,CAAAK,CAAA,MAAAD,KAAA,GAAAJ,SAAA,CAAAM,CAAA,IAAAC,IAAA,GAAiE;QAAA,IAAtDC,KAAK,GAAAJ,KAAA,CAAAK,KAAA;QACd,IAAMC,MAAM,GAAGhB,sBAAsB,CAACc,KAAK,CAAC;QAC5C,IAAIE,MAAM,EAAE;UACV,OAAOA,MAAM;;;IAEhB,SAAAC,GAAA;MAAAX,SAAA,CAAAY,CAAA,CAAAD,GAAA;IAAA;MAAAX,SAAA,CAAAa,CAAA;IAAA;;EAGH,OAAO,IAAI;AACb;AAEA,WAAaC,YAAa,0BAAAC,gBAAA;EAAAC,SAAA,CAAAF,YAAA,EAAAC,gBAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,YAAA;EAAA,SAAAA,aAAA;IAAAK,eAAA,OAAAL,YAAA;IAAA,OAAAG,MAAA,CAAAG,KAAA,OAAAC,SAAA;EAAA;EAAAC,YAAA,CAAAR,YAAA;IAAAS,GAAA;IAAAd,KAAA,EASxB,SAAAe,OAAA,EAAM;MACE,IAAAC,EAAA,GAQF,IAAI,CAAC3B,KAAK;QAPZC,QAAQ,GAKgB0B,EAEZ,CAPZ1B,QAAQ;QACR2B,UAAU,GAIcD,EAEZ,CANZC,UAAU;QACVC,SAAS,GAGeF,EAEZ,CALZE,SAAS;QACTC,EAAE,GAEsBH,EAEZ,CAJZG,EAAE;QACiBC,cAAc,GACTJ,EAEZ,CAHZ,iBAAiB;QACjBK,wBAAwB,GAAAL,EAEZ,CAFZK,wBAAwB;QACrBhC,KAAK,GAAAiC,MAAA,CAAAN,EAAA,EAPJ,4FAQL,CAAa;MACd,OACErC,KAAA,CAAA4C,aAAA,CAACzC,eAAe,CAAC0C,QAAQ,QACtB,UAAAC,IAAA,EASI;QAAA,IARHC,YAAY,GAAAD,IAAA,CAAZC,YAAY;UACZC,sBAAsB,GAAAF,IAAA,CAAtBE,sBAAsB;UACtBC,0BAA0B,GAAAH,IAAA,CAA1BG,0BAA0B;UAC1BC,aAAa,GAAAJ,IAAA,CAAbI,aAAa;UACbC,WAAW,GAAAL,IAAA,CAAXK,WAAW;UACXC,SAAS,GAAAN,IAAA,CAATM,SAAS;UACTC,OAAO,GAAAP,IAAA,CAAPO,OAAO;UACPC,IAAI,GAAAR,IAAA,CAAJQ,IAAI;QAEJ,IAAMC,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAIC,KAAuB,EAAI;UACrD,IAAIC,MAAM,GAAQD,KAAK,CAACC,MAAM;UAC9B,OAAOD,KAAK,CAACE,aAAa,KAAKD,MAAM,EAAE;YACrC,IACG,SAAS,IAAIA,MAAM,IAAIA,MAAM,CAACE,OAAO,IACtCF,MAAM,CAACG,UAAU,CAACC,SAAS,CAACC,QAAQ,CAAC5D,MAAM,CAAC6D,kBAAkB,CAAC,IAC/DN,MAAM,CAACG,UAAU,CAACC,SAAS,CAACC,QAAQ,CAAC5D,MAAM,CAAC8D,mBAAmB,CAAC,EAChE;cACA;cACA;aACD,MAAM;cACLP,MAAM,GAAGA,MAAM,CAACG,UAAU;;;UAG9BX,0BAA0B,CAACT,EAAE,CAAC;QAChC,CAAC;QAED,IAAMyB,SAAS,GAAG,SAAZA,SAASA,CAAIT,KAA0B,EAAI;UAC/C,IAAIA,KAAK,CAACrB,GAAG,KAAK/B,QAAQ,CAAC8D,KAAK,EAAE;YAChCjB,0BAA0B,CAACT,EAAE,CAAC;;QAElC,CAAC;QAED;QACA;QACA;QACA,IAAM2B,UAAU,GAAG7D,sBAAsB,CAACK,QAAQ,CAAC;QACnD,IAAMyD,SAAS,GAAGjB,WAAW,IAAI;UAC/BkB,SAAS,EAAEF,UAAU,GAAG,CAACA,UAAU,CAACzD,KAAK,CAAC4D,UAAU,GAAG,IAAI;UAC3DC,MAAM,EAAEjB,IAAI;UACZkB,SAAS,EAAEnB,OAAO;UAClBoB,WAAW,EAAErB;SACd;QAED,IAAMsB,UAAU,GAAG1B,sBAAsB,KAAKR,EAAE;QAEhD,IAAMmC,wBAAwB,GAAGjC,wBAAwB,GACrD;UAAE,YAAY,EAAEA;QAAwB,CAAE,GAC1C;UAAE,iBAAiB,EAAED;QAAc,CAAE;QAEzC,OACEzC,KAAA,CAAA4C,aAAA,OAAAgC,MAAA,CAAAC,MAAA;UACErC,EAAE,EAAEA,EAAE;UACND,SAAS,EAAEtC,GAAG,CACZC,MAAM,CAAC4E,YAAY,EACnBxC,UAAU,IAAIpC,MAAM,CAAC6E,SAAS,CAACC,QAAQ,EACvCjC,YAAY,IAAI7C,MAAM,CAAC6E,SAAS,CAACE,UAAU,EAC3CjC,sBAAsB,IAAI0B,UAAU,IAAIxE,MAAM,CAAC6E,SAAS,CAACG,QAAQ,EACjE3C,SAAS,CACV;UAAA,mBACgBE;QAAc,GAC1BM,YAAY,IAAI;UAAEoC,QAAQ,EAAE,CAAC;UAAEC,OAAO,EAAE7B,kBAAkB;UAAEU,SAAS,EAATA;QAAS,CAAE,EACvElB,YAAY,IAAI2B,UAAU,IAAI;UAAE,eAAe,EAAE;QAAI,CAAE,EACxDhE,KAAK,EACL0D,SAAS,GAEZlB,aAAa,IACZlD,KAAA,CAAA4C,aAAA,UAAAgC,MAAA,CAAAC,MAAA;UACEtC,SAAS,EAAC,kBAAkB;UAC5B9B,IAAI,EAAC,OAAO;UACZ4E,OAAO,EAAEX,UAAU;UACnBY,QAAQ,EAAE,SAAAA,SAAA9B,KAAK;YAAA,OAAIN,aAAa,CAACoC,QAAQ,CAAC9C,EAAE,EAAEgB,KAAK,CAAC;UAAA;UACpD2B,QAAQ,EAAE,CAAC;QAAC,GACRR,wBAAwB,EAE/B,EACA3E,KAAK,CAACc,QAAQ,CAACyE,GAAG,CACjB5E,QAAQ,EACR,UAAAS,KAAK;UAAA,OACHpB,KAAK,CAACQ,cAAc,CAACY,KAAK,CAAC,IAC3BpB,KAAK,CAACwF,YAAY,CAACpE,KAAgC,EAAE;YACnDqE,KAAK,EAAEhD;WACR,CAAC;QAAA,EACL,CACE;MAET,CAAC,CACwB;IAE/B;EAAC;EAAA,OAAAf,YAAA;AAAA,EA9G+B1B,KAAK,CAAC0F,SAA4B;AAC3DhE,YAAA,CAAAiE,WAAW,GAAG,cAAc;AAC5BjE,YAAA,CAAAkE,YAAY,GAAsB;EACvCtD,UAAU,EAAE,KAAK;EACjBC,SAAS,EAAE,EAAE;EACbC,EAAE,EAAE,EAAE;EACN7B,QAAQ,EAAE,IAAI;EACd,iBAAiB,EAAE;CACpB"},"metadata":{},"sourceType":"module","externalDependencies":[]}