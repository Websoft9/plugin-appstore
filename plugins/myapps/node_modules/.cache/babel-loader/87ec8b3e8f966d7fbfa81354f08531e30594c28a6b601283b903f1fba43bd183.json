{"ast":null,"code":"import _classCallCheck from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/data/stackhub-web/plugins/myapps/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { css } from '@patternfly/react-styles';\nimport { ToolbarGroup } from './ToolbarGroup';\nimport { ToolbarItem } from './ToolbarItem';\nimport { Button } from '../Button';\nimport { ToolbarContext } from './ToolbarUtils';\nexport var ToolbarExpandableContent = /*#__PURE__*/function (_React$Component) {\n  _inherits(ToolbarExpandableContent, _React$Component);\n  var _super = _createSuper(ToolbarExpandableContent);\n  function ToolbarExpandableContent() {\n    _classCallCheck(this, ToolbarExpandableContent);\n    return _super.apply(this, arguments);\n  }\n  _createClass(ToolbarExpandableContent, [{\n    key: \"render\",\n    value: function render() {\n      var _a = this.props,\n        className = _a.className,\n        expandableContentRef = _a.expandableContentRef,\n        chipContainerRef = _a.chipContainerRef,\n        isExpanded = _a.isExpanded,\n        clearAllFilters = _a.clearAllFilters,\n        clearFiltersButtonText = _a.clearFiltersButtonText,\n        showClearFiltersButton = _a.showClearFiltersButton,\n        props = __rest(_a, [\"className\", \"expandableContentRef\", \"chipContainerRef\", \"isExpanded\", \"clearAllFilters\", \"clearFiltersButtonText\", \"showClearFiltersButton\"]);\n      var _this$context = this.context,\n        numberOfFilters = _this$context.numberOfFilters,\n        customChipGroupContent = _this$context.customChipGroupContent;\n      var clearChipGroups = function clearChipGroups() {\n        clearAllFilters();\n      };\n      return React.createElement(\"div\", Object.assign({\n        className: css(styles.toolbarExpandableContent, className),\n        ref: expandableContentRef\n      }, props), React.createElement(ToolbarGroup, null), numberOfFilters > 0 && React.createElement(ToolbarGroup, {\n        className: styles.modifiers.chipContainer\n      }, React.createElement(ToolbarGroup, {\n        ref: chipContainerRef\n      }), showClearFiltersButton && !customChipGroupContent && React.createElement(ToolbarItem, null, React.createElement(Button, {\n        variant: \"link\",\n        onClick: clearChipGroups,\n        isInline: true\n      }, clearFiltersButtonText)), customChipGroupContent && customChipGroupContent));\n    }\n  }]);\n  return ToolbarExpandableContent;\n}(React.Component);\nToolbarExpandableContent.displayName = 'ToolbarExpandableContent';\nToolbarExpandableContent.contextType = ToolbarContext;\nToolbarExpandableContent.defaultProps = {\n  isExpanded: false,\n  clearFiltersButtonText: 'Clear all filters'\n};","map":{"version":3,"names":["React","styles","css","ToolbarGroup","ToolbarItem","Button","ToolbarContext","ToolbarExpandableContent","_React$Component","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","render","_a","props","className","expandableContentRef","chipContainerRef","isExpanded","clearAllFilters","clearFiltersButtonText","showClearFiltersButton","__rest","_this$context","context","numberOfFilters","customChipGroupContent","clearChipGroups","createElement","Object","assign","toolbarExpandableContent","ref","modifiers","chipContainer","variant","onClick","isInline","Component","displayName","contextType","defaultProps"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@patternfly/react-core/src/components/Toolbar/ToolbarExpandableContent.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { css } from '@patternfly/react-styles';\n\nimport { RefObject } from 'react';\nimport { ToolbarGroup } from './ToolbarGroup';\nimport { ToolbarItem } from './ToolbarItem';\nimport { Button } from '../Button';\nimport { ToolbarContext } from './ToolbarUtils';\nimport { PickOptional } from '../../helpers/typeUtils';\n\nexport interface ToolbarExpandableContentProps extends React.HTMLProps<HTMLDivElement> {\n  /** Classes added to the root element of the data toolbar expandable content */\n  className?: string;\n  /** Flag indicating the expandable content is expanded */\n  isExpanded?: boolean;\n  /** Expandable content reference for passing to data toolbar children */\n  expandableContentRef?: RefObject<HTMLDivElement>;\n  /** Chip container reference for passing to data toolbar children */\n  chipContainerRef?: RefObject<any>;\n  /** optional callback for clearing all filters in the toolbar */\n  clearAllFilters?: () => void;\n  /** Text to display in the clear all filters button */\n  clearFiltersButtonText?: string;\n  /** Flag indicating that the clear all filters button should be visible */\n  showClearFiltersButton: boolean;\n}\n\nexport class ToolbarExpandableContent extends React.Component<ToolbarExpandableContentProps> {\n  static displayName = 'ToolbarExpandableContent';\n  static contextType = ToolbarContext;\n  context!: React.ContextType<typeof ToolbarContext>;\n  static defaultProps: PickOptional<ToolbarExpandableContentProps> = {\n    isExpanded: false,\n    clearFiltersButtonText: 'Clear all filters'\n  };\n\n  render() {\n    const {\n      className,\n      expandableContentRef,\n      chipContainerRef,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isExpanded,\n      clearAllFilters,\n      clearFiltersButtonText,\n      showClearFiltersButton,\n      ...props\n    } = this.props;\n    const { numberOfFilters, customChipGroupContent } = this.context;\n\n    const clearChipGroups = () => {\n      clearAllFilters();\n    };\n\n    return (\n      <div className={css(styles.toolbarExpandableContent, className)} ref={expandableContentRef} {...props}>\n        <ToolbarGroup />\n        {numberOfFilters > 0 && (\n          <ToolbarGroup className={styles.modifiers.chipContainer}>\n            <ToolbarGroup ref={chipContainerRef} />\n            {showClearFiltersButton && !customChipGroupContent && (\n              <ToolbarItem>\n                <Button variant=\"link\" onClick={clearChipGroups} isInline>\n                  {clearFiltersButtonText}\n                </Button>\n              </ToolbarItem>\n            )}\n            {customChipGroupContent && customChipGroupContent}\n          </ToolbarGroup>\n        )}\n      </div>\n    );\n  }\n}\n"],"mappings":";;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,MAAM,MAAM,yDAAyD;AAC5E,SAASC,GAAG,QAAQ,0BAA0B;AAG9C,SAASC,YAAY,QAAQ,gBAAgB;AAC7C,SAASC,WAAW,QAAQ,eAAe;AAC3C,SAASC,MAAM,QAAQ,WAAW;AAClC,SAASC,cAAc,QAAQ,gBAAgB;AAoB/C,WAAaC,wBAAyB,0BAAAC,gBAAA;EAAAC,SAAA,CAAAF,wBAAA,EAAAC,gBAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,wBAAA;EAAA,SAAAA,yBAAA;IAAAK,eAAA,OAAAL,wBAAA;IAAA,OAAAG,MAAA,CAAAG,KAAA,OAAAC,SAAA;EAAA;EAAAC,YAAA,CAAAR,wBAAA;IAAAS,GAAA;IAAAC,KAAA,EASpC,SAAAC,OAAA,EAAM;MACE,IAAAC,EAAA,GAUF,IAAI,CAACC,KAAK;QATZC,SAAS,GAOaF,EAEV,CATZE,SAAS;QACTC,oBAAoB,GAMEH,EAEV,CARZG,oBAAoB;QACpBC,gBAAgB,GAKMJ,EAEV,CAPZI,gBAAgB;QAEhBC,UAAU,GAGYL,EAEV,CALZK,UAAU;QACVC,eAAe,GAEON,EAEV,CAJZM,eAAe;QACfC,sBAAsB,GACAP,EAEV,CAHZO,sBAAsB;QACtBC,sBAAsB,GAAAR,EAEV,CAFZQ,sBAAsB;QACnBP,KAAK,GAAAQ,MAAA,CAAAT,EAAA,EATJ,8IAUL,CAAa;MACd,IAAAU,aAAA,GAAoD,IAAI,CAACC,OAAO;QAAxDC,eAAe,GAAAF,aAAA,CAAfE,eAAe;QAAEC,sBAAsB,GAAAH,aAAA,CAAtBG,sBAAsB;MAE/C,IAAMC,eAAe,GAAG,SAAlBA,eAAeA,CAAA,EAAQ;QAC3BR,eAAe,EAAE;MACnB,CAAC;MAED,OACEzB,KAAA,CAAAkC,aAAA,QAAAC,MAAA,CAAAC,MAAA;QAAKf,SAAS,EAAEnB,GAAG,CAACD,MAAM,CAACoC,wBAAwB,EAAEhB,SAAS,CAAC;QAAEiB,GAAG,EAAEhB;MAAoB,GAAMF,KAAK,GACnGpB,KAAA,CAAAkC,aAAA,CAAC/B,YAAY,OAAG,EACf4B,eAAe,GAAG,CAAC,IAClB/B,KAAA,CAAAkC,aAAA,CAAC/B,YAAY;QAACkB,SAAS,EAAEpB,MAAM,CAACsC,SAAS,CAACC;MAAa,GACrDxC,KAAA,CAAAkC,aAAA,CAAC/B,YAAY;QAACmC,GAAG,EAAEf;MAAgB,EAAI,EACtCI,sBAAsB,IAAI,CAACK,sBAAsB,IAChDhC,KAAA,CAAAkC,aAAA,CAAC9B,WAAW,QACVJ,KAAA,CAAAkC,aAAA,CAAC7B,MAAM;QAACoC,OAAO,EAAC,MAAM;QAACC,OAAO,EAAET,eAAe;QAAEU,QAAQ;MAAA,GACtDjB,sBAAsB,CAChB,CAEZ,EACAM,sBAAsB,IAAIA,sBAAsB,CAEpD,CACG;IAEV;EAAC;EAAA,OAAAzB,wBAAA;AAAA,EA7C2CP,KAAK,CAAC4C,SAAwC;AACnFrC,wBAAA,CAAAsC,WAAW,GAAG,0BAA0B;AACxCtC,wBAAA,CAAAuC,WAAW,GAAGxC,cAAc;AAE5BC,wBAAA,CAAAwC,YAAY,GAAgD;EACjEvB,UAAU,EAAE,KAAK;EACjBE,sBAAsB,EAAE;CACzB"},"metadata":{},"sourceType":"module","externalDependencies":[]}