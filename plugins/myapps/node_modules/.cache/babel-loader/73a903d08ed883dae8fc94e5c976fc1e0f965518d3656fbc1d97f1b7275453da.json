{"ast":null,"code":"export function iterateObserversSafely(observers, method, argument) {\n  var observersWithMethod = [];\n  observers.forEach(function (obs) {\n    return obs[method] && observersWithMethod.push(obs);\n  });\n  observersWithMethod.forEach(function (obs) {\n    return obs[method](argument);\n  });\n}","map":{"version":3,"names":["iterateObserversSafely","observers","method","argument","observersWithMethod","forEach","obs","push"],"sources":["/data/stackhub-web/plugins/myapps/node_modules/@apollo/src/utilities/observables/iteration.ts"],"sourcesContent":["import { Observer } from \"./Observable\";\n\nexport function iterateObserversSafely<E, A>(\n  observers: Set<Observer<E>>,\n  method: keyof Observer<E>,\n  argument?: A,\n) {\n  // In case observers is modified during iteration, we need to commit to the\n  // original elements, which also provides an opportunity to filter them down\n  // to just the observers with the given method.\n  const observersWithMethod: Observer<E>[] = [];\n  observers.forEach(obs => obs[method] && observersWithMethod.push(obs));\n  observersWithMethod.forEach(obs => (obs as any)[method](argument));\n}\n"],"mappings":"AAEA,OAAM,SAAUA,sBAAsBA,CACpCC,SAA2B,EAC3BC,MAAyB,EACzBC,QAAY;EAKZ,IAAMC,mBAAmB,GAAkB,EAAE;EAC7CH,SAAS,CAACI,OAAO,CAAC,UAAAC,GAAG;IAAI,OAAAA,GAAG,CAACJ,MAAM,CAAC,IAAIE,mBAAmB,CAACG,IAAI,CAACD,GAAG,CAAC;EAA5C,CAA4C,CAAC;EACtEF,mBAAmB,CAACC,OAAO,CAAC,UAAAC,GAAG;IAAI,OAACA,GAAW,CAACJ,MAAM,CAAC,CAACC,QAAQ,CAAC;EAA9B,CAA8B,CAAC;AACpE"},"metadata":{},"sourceType":"module","externalDependencies":[]}