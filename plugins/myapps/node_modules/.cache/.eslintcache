[{"/data/stackhub-web/plugins/myapps/src/index.js":"1","/data/stackhub-web/plugins/myapps/src/App.js":"2","/data/stackhub-web/plugins/myapps/src/config.js":"3","/data/stackhub-web/plugins/myapps/src/redux/store.js":"4","/data/stackhub-web/plugins/myapps/src/redux/reducers.js":"5","/data/stackhub-web/plugins/myapps/src/redux/sagas.js":"6","/data/stackhub-web/plugins/myapps/src/routes/Routes.js":"7","/data/stackhub-web/plugins/myapps/src/redux/layout/reducers.js":"8","/data/stackhub-web/plugins/myapps/src/redux/layout/saga.js":"9","/data/stackhub-web/plugins/myapps/src/routes/index.js":"10","/data/stackhub-web/plugins/myapps/src/routes/Root.js":"11","/data/stackhub-web/plugins/myapps/src/redux/layout/constants.js":"12","/data/stackhub-web/plugins/myapps/src/layouts/Default.js":"13","/data/stackhub-web/plugins/myapps/src/layouts/Detached.js":"14","/data/stackhub-web/plugins/myapps/src/pages/myterminal.js":"15","/data/stackhub-web/plugins/myapps/src/pages/myapps.js":"16","/data/stackhub-web/plugins/myapps/src/pages/error/CustomError.js":"17","/data/stackhub-web/plugins/myapps/src/pages/error/ServerError.js":"18","/data/stackhub-web/plugins/myapps/src/pages/error/PageNotFound.js":"19","/data/stackhub-web/plugins/myapps/src/constants/layout.js":"20","/data/stackhub-web/plugins/myapps/src/redux/actions.js":"21","/data/stackhub-web/plugins/myapps/src/layouts/Topbar.js":"22","/data/stackhub-web/plugins/myapps/src/pages/appdetail.js":"23","/data/stackhub-web/plugins/myapps/src/components/FormInput.js":"24","/data/stackhub-web/plugins/myapps/src/components/Spinner.js":"25","/data/stackhub-web/plugins/myapps/src/utils/index.js":"26","/data/stackhub-web/plugins/myapps/src/helpers/index.js":"27","/data/stackhub-web/plugins/myapps/src/lib/terminal.js":"28","/data/stackhub-web/plugins/myapps/src/utils/array.js":"29","/data/stackhub-web/plugins/myapps/src/utils/layout.js":"30","/data/stackhub-web/plugins/myapps/src/lib/cockpit-components-terminal.js":"31","/data/stackhub-web/plugins/myapps/src/lib/cockpit-dark-theme.js":"32","/data/stackhub-web/plugins/myapps/src/redux/layout/actions.js":"33","/data/stackhub-web/plugins/myapps/src/pages/appdetailtabs/appaccess.js":"34","/data/stackhub-web/plugins/myapps/src/pages/appdetailtabs/appcontainer.js":"35","/data/stackhub-web/plugins/myapps/src/pages/appdetailtabs/appoverview.js":"36","/data/stackhub-web/plugins/myapps/src/pages/appdetailtabs/appuninstall.js":"37","/data/stackhub-web/plugins/myapps/src/helpers/api/index.js":"38","/data/stackhub-web/plugins/myapps/src/lib/cockpit-components-context-menu.js":"39","/data/stackhub-web/plugins/myapps/src/helpers/api/appManager.js":"40","/data/stackhub-web/plugins/myapps/src/helpers/api/apiCore.js":"41"},{"size":1074,"mtime":1685673098610,"results":"42","hashOfConfig":"43"},{"size":204,"mtime":1685673098582,"results":"44","hashOfConfig":"43"},{"size":136,"mtime":1685673098610,"results":"45","hashOfConfig":"43"},{"size":655,"mtime":1685673098610,"results":"46","hashOfConfig":"43"},{"size":148,"mtime":1685673098610,"results":"47","hashOfConfig":"43"},{"size":169,"mtime":1685673098610,"results":"48","hashOfConfig":"43"},{"size":225,"mtime":1685673098610,"results":"49","hashOfConfig":"43"},{"size":1984,"mtime":1685673098610,"results":"50","hashOfConfig":"43"},{"size":1821,"mtime":1685673098610,"results":"51","hashOfConfig":"43"},{"size":2161,"mtime":1685675034581,"results":"52","hashOfConfig":"43"},{"size":250,"mtime":1685675019789,"results":"53","hashOfConfig":"43"},{"size":483,"mtime":1685673098610,"results":"54","hashOfConfig":"43"},{"size":948,"mtime":1685673098610,"results":"55","hashOfConfig":"43"},{"size":2665,"mtime":1685673098610,"results":"56","hashOfConfig":"43"},{"size":889,"mtime":1685673098610,"results":"57","hashOfConfig":"43"},{"size":22256,"mtime":1685673098610,"results":"58","hashOfConfig":"43"},{"size":2529,"mtime":1685673098610,"results":"59","hashOfConfig":"43"},{"size":2495,"mtime":1685673098610,"results":"60","hashOfConfig":"43"},{"size":2447,"mtime":1685673098610,"results":"61","hashOfConfig":"43"},{"size":689,"mtime":1685673098610,"results":"62","hashOfConfig":"43"},{"size":68,"mtime":1685673098610,"results":"63","hashOfConfig":"43"},{"size":2988,"mtime":1685675302623,"results":"64","hashOfConfig":"43"},{"size":16503,"mtime":1685673098610,"results":"65","hashOfConfig":"43"},{"size":9304,"mtime":1685673098610,"results":"66","hashOfConfig":"43"},{"size":1007,"mtime":1685673098610,"results":"67","hashOfConfig":"43"},{"size":51,"mtime":1685673098610,"results":"68","hashOfConfig":"43"},{"size":24,"mtime":1685673098610,"results":"69","hashOfConfig":"43"},{"size":7083,"mtime":1685673098610,"results":"70","hashOfConfig":"43"},{"size":612,"mtime":1685673098610,"results":"71","hashOfConfig":"43"},{"size":227,"mtime":1685673098610,"results":"72","hashOfConfig":"43"},{"size":10420,"mtime":1685673098610,"results":"73","hashOfConfig":"43"},{"size":1799,"mtime":1685673098610,"results":"74","hashOfConfig":"43"},{"size":1096,"mtime":1685673098610,"results":"75","hashOfConfig":"43"},{"size":29369,"mtime":1685673098610,"results":"76","hashOfConfig":"43"},{"size":8191,"mtime":1685673098610,"results":"77","hashOfConfig":"43"},{"size":3820,"mtime":1685673098610,"results":"78","hashOfConfig":"43"},{"size":7794,"mtime":1685673098610,"results":"79","hashOfConfig":"43"},{"size":377,"mtime":1685673098610,"results":"80","hashOfConfig":"43"},{"size":2813,"mtime":1685673098610,"results":"81","hashOfConfig":"43"},{"size":2143,"mtime":1685673098610,"results":"82","hashOfConfig":"43"},{"size":2544,"mtime":1685673098610,"results":"83","hashOfConfig":"43"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"13lm6na",{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","suppressedMessages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","suppressedMessages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132"},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","suppressedMessages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","suppressedMessages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","suppressedMessages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151"},{"filePath":"152","messages":"153","suppressedMessages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"155"},{"filePath":"156","messages":"157","suppressedMessages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","suppressedMessages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","suppressedMessages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"165","messages":"166","suppressedMessages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","suppressedMessages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","suppressedMessages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","suppressedMessages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"177","messages":"178","suppressedMessages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","suppressedMessages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183"},{"filePath":"184","messages":"185","suppressedMessages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"187","messages":"188","suppressedMessages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":4,"source":"190"},{"filePath":"191","messages":"192","suppressedMessages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":3,"source":"194"},{"filePath":"195","messages":"196","suppressedMessages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198"},{"filePath":"199","messages":"200","suppressedMessages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"202","messages":"203","suppressedMessages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"205","messages":"206","suppressedMessages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"208","messages":"209","suppressedMessages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"211","messages":"212","suppressedMessages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/data/stackhub-web/plugins/myapps/src/index.js",[],[],"/data/stackhub-web/plugins/myapps/src/App.js",[],[],"/data/stackhub-web/plugins/myapps/src/config.js",[],[],"/data/stackhub-web/plugins/myapps/src/redux/store.js",[],[],"/data/stackhub-web/plugins/myapps/src/redux/reducers.js",[],[],"/data/stackhub-web/plugins/myapps/src/redux/sagas.js",[],[],"/data/stackhub-web/plugins/myapps/src/routes/Routes.js",[],[],"/data/stackhub-web/plugins/myapps/src/redux/layout/reducers.js",[],[],"/data/stackhub-web/plugins/myapps/src/redux/layout/saga.js",[],[],"/data/stackhub-web/plugins/myapps/src/routes/index.js",[],[],"/data/stackhub-web/plugins/myapps/src/routes/Root.js",[],[],"/data/stackhub-web/plugins/myapps/src/redux/layout/constants.js",[],[],"/data/stackhub-web/plugins/myapps/src/layouts/Default.js",[],[],"/data/stackhub-web/plugins/myapps/src/layouts/Detached.js",[],[],"/data/stackhub-web/plugins/myapps/src/pages/myterminal.js",[],[],"/data/stackhub-web/plugins/myapps/src/pages/myapps.js",["214","215","216","217","218","219","220","221","222"],[],"import MuiAlert from '@mui/material/Alert';\nimport Snackbar from '@mui/material/Snackbar';\nimport classNames from 'classnames';\nimport cockpit from 'cockpit';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Alert, Button, Col, Dropdown, Modal, Row } from 'react-bootstrap';\nimport { Link, Navigate, useNavigate } from 'react-router-dom';\nimport DefaultImg from '../assets/images/default.png';\nimport FormInput from '../components/FormInput';\nimport Spinner from '../components/Spinner';\nimport { AppList, AppRestart, AppStart, AppStop, AppUninstall } from '../helpers';\nimport AppDetailModal from './appdetail';\n\nconst _ = cockpit.gettext;\n\nconst MyMuiAlert = React.forwardRef(function Alert(props, ref) {\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\n//应用状态为failed时，显示错误消息\nconst ErrorInfoModal = (props): React$Element<React$FragmentType> => {\n    return (\n        <Modal show={props.showConform} onHide={props.onClose} size=\"lg\" scrollable=\"true\" backdrop=\"static\">\n            <Modal.Header onHide={props.onClose} closeButton className={classNames('modal-colored-header', 'bg-danger')}>\n                <h4>{_(\"This is the error message for\")} {props.app.customer_name}</h4>\n            </Modal.Header>\n            <Modal.Body className=\"row\" >\n                {\n                    props.app.status_reason &&\n                    <>\n                        <span style={{ margin: \"10px 0px\" }}> <b>{_(\"Code: \")}</b>{props.app.status_reason.Code} </span>\n                        <span style={{ margin: \"10px 0px\" }}> <b>{_(\"Message: \")}</b>{props.app.status_reason.Message} </span>\n                        <span style={{ margin: \"10px 0px\" }}> <b>{_(\"Detail: \")}</b>{props.app.status_reason.Detail} </span>\n                    </>\n                }\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"light\" onClick={props.onClose}>\n                    {_(\"Close\")}\n                </Button>\n                <Button variant=\"light\" onClick={() => window.open('https://www.websoft9.com/ticket', '_blank')}>\n                    {_(\"Support\")}\n                </Button>\n            </Modal.Footer>\n        </Modal >\n    );\n}\n\n//删除应用弹窗\nconst UninstallConform = (props): React$Element<React$FragmentType> => {\n    const navigate = useNavigate(); //用于页面跳转\n    const [disable, setDisable] = useState(false);//用于按钮禁用\n    const [showAlert, setShowAlert] = useState(false); //用于是否显示错误提示\n    const [alertMessage, setAlertMessage] = useState(\"\");//用于显示错误提示消息\n\n    function closeAllModals() {\n        //关闭所有弹窗\n        props.onClose();\n        props.onDataChange();\n    }\n\n    return (\n        <Modal show={props.showConform} onHide={props.onClose} size=\"lg\"\n            scrollable=\"true\" backdrop=\"static\">\n            <Modal.Header onHide={props.onClose} className={classNames('modal-colored-header', 'bg-warning')}>\n                <h4>{_(\"Remove\")} {props.app.customer_name}</h4>\n            </Modal.Header>\n            <Modal.Body className=\"row\" >\n                <span style={{ margin: \"10px 0px\" }}>{_(\"This will immediately remove\")} {props.app.customer_name} {_(\"and remove all its data.\")}</span>\n                <div>\n                    {showAlert && <Alert variant=\"danger\" className=\"my-2\">\n                        {alertMessage}\n                    </Alert>}\n                </div>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"light\" onClick={props.onClose}>\n                    {_(\"Close\")}\n                </Button>{\" \"}\n                <Button disabled={disable} variant=\"warning\" onClick={async () => {\n                    try {\n                        setDisable(true);\n                        //调用卸载应用接口\n                        const response = await AppUninstall({ app_id: props.app.app_id });\n                        if (response.data.Error) {\n                            setShowAlert(true);\n                            setAlertMessage(response.data.Error.Message);\n                        }\n                        else {\n                            closeAllModals(); //关闭弹窗并更新数据\n                        }\n                    }\n                    catch (error) {\n                        navigate(\"/error-500\");\n                    }\n                }}>\n                    {disable && <Spinner className=\"spinner-border-sm me-1\" tag=\"span\" color=\"white\" />} {_(\"Remove\")}\n                </Button>\n            </Modal.Footer>\n        </Modal >\n    );\n}\n\nconst MyApps = (): React$Element<React$FragmentType> => {\n    const [showModal, setShowModal] = useState(false); //用于显示状态为running或exited弹窗的标识\n    const [showUninstallConform, setShowUninstallConform] = useState(false); //用于显示状态为failed时显示确定删除的弹窗\n    const [showErrorInfo, setShowErrorInfo] = useState(false); //用于显示状态为failed时显示错误消息的弹窗\n    const [showOtherAppModal, setShowOtherAppModal] = useState(false); //用于显示非websoft9应用的的弹窗的标识\n    const [isLoading, setIsLoading] = useState(false); //用于非官方应用启动 停止 重启 卸载时，显示加载中\n    const [showAlert, setShowAlert] = useState(false); //用于是否显示错误提示\n    const [alertMessage, setAlertMessage] = useState(\"\");//用于显示错误提示消息\n    const [alertType, setAlertType] = useState(\"\");//用于确定弹窗的类型：error\\success\n\n    const [selectedApp, setSelectedApp] = useState(null); //用于存储被选中的产品（点击应用详情时使用）\n    const [apps, setApps] = useState([]); //所有“我的应用”\n    const [statusApps, setStatusApps] = useState([]);//根据状态筛选的应用\n    const [searchString, setSearchString] = useState(\"\");//用户输入的筛选字符串\n    const [selectedStatus, setSelectedStatus] = useState(\"all\"); //用于存储用户筛选应用状态的标识\n    const [progressId, setProgressId] = useState([]); //用于存储当前正在安装的应用ID，用于做进度查询的参数\n\n    const selectedAppRef = useRef(selectedApp);\n    const navigate = useNavigate(); //用于页面跳转\n\n    const [code, setCode] = useState(0);\n    const [error, setError] = useState(null);\n    const [errorDetails, setErrorDetails] = useState(null)\n    const [loading, setLoading] = useState(false);\n\n    const menuItems = (appStatus) => {\n        return [\n            { label: 'Stop', icon: 'dripicons-power noti-icon', condition: appStatus === \"running\" },\n            { label: 'Start', icon: 'dripicons-media-play noti-icon', condition: appStatus === \"exited\" },\n            { label: 'Restart', icon: 'dripicons-clockwise noti-icon', condition: appStatus === \"running\" || appStatus === \"exited\" },\n            {\n                label: 'Uninstall',\n                icon: 'dripicons-trash noti-icon',\n                variant: 'text-danger',\n                hasDivider: true,\n                condition: true\n            }\n        ]\n    };\n\n    let timer;\n\n    //获取所有已安装的App(只执行一次)\n    const getAllAppsOnce = () => {\n        AppList().then((response) => {\n            if (response.data.Error) {\n                setCode(response.data.Error.Code);\n                setError(response.data.Error.Message);\n                setErrorDetails(response.data.Error.Details);\n            }\n            else {\n                const newApps = response.data.ResponseData;\n                setApps(newApps);\n                if (selectedAppRef.current) {\n                    const updatedApp = newApps.find(\n                        (app) => app.app_id === selectedAppRef.current.app_id\n                    );\n                    setSelectedApp(updatedApp);\n                }\n            }\n            setLoading(false);\n        }).catch((error) => {\n            <Navigate to=\"/error-500\" />\n        });\n    }\n\n    //获取所有已安装的App(每隔5秒执行一次)\n    const getAllApps = () => {\n        setLoading(true);\n        //调用接口获取已经安装应用\n        timer = setInterval(() => {\n            AppList().then((response) => {\n                if (response.data.Error) {\n                    setCode(response.data.Error.Code);\n                    setError(response.data.Error.Message);\n                    setErrorDetails(response.data.Error.Details);\n                }\n                else {\n                    const newApps = response.data.ResponseData;\n                    setApps(newApps);\n                    if (selectedAppRef.current) {\n                        const updatedApp = newApps.find(\n                            (app) => app.app_id === selectedAppRef.current.app_id\n                        );\n                        setSelectedApp(updatedApp);\n                    }\n                }\n                setLoading(false);\n            }).catch((error) => {\n                <Navigate to=\"/error-500\" />\n            });\n        }, 5000);\n        return () => clearInterval(timer);\n    }\n\n    useEffect(() => {\n        getAllAppsOnce();\n    }, []);\n\n    useEffect(() => {\n        getAllApps();\n    }, []);\n\n    useEffect(() => {\n        selectedAppRef.current = selectedApp;\n    }, [selectedApp]);\n\n    useEffect(() => {\n        return () => clearInterval(timer);  //用于清除定时器\n    }, []);\n\n    if (loading) return <Spinner className='dis_mid' />;\n    if (code) return <p>Code : ${code} </p>;\n    if (error) return <p>Error : ${error} </p>;\n\n    //用于根据应用“状态”过滤应用\n    const changeStatus = (selectedStatus) => {\n        setSelectedStatus(selectedStatus);\n    };\n\n    //用于根据用户输入搜索应用\n    const handleInputChange = (searchString) => {\n        setSearchString(searchString);\n    }\n\n    //用于用户点击应用详情\n    const handleClick = (app) => {\n        setSelectedApp(app);\n        setShowModal(true);\n    };\n\n    //用于应用为failed时删除应用\n    const deleteApp = (app) => {\n        setSelectedApp(app);\n        setShowUninstallConform(true);\n    };\n\n    //用于应用为failed时显示错误信息弹窗\n    const showError = (app) => {\n        setSelectedApp(app);\n        setShowErrorInfo(true);\n    };\n\n    //用于关闭显示错误消息弹窗\n    const cancelShowError = () => {\n        setShowErrorInfo(false);\n    };\n\n    //用于取消删除应用\n    const canceldeleteApp = () => {\n        setShowUninstallConform(false);\n    };\n\n    //用于关闭应用详情的弹窗\n    const handleClose = () => {\n        setShowModal(false);\n        setSelectedApp(null);\n    };\n\n    const handleAlertClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        setShowAlert(false);\n        setAlertMessage(\"\");\n    };\n\n    //用于立即刷新数据\n    const handleDataChange = () => {\n        getAllAppsOnce();\n    };\n\n    //非官方应用的操作\n    const appActions = {\n        \"Stop\": {\n            api: AppStop,\n        },\n        \"Start\": {\n            api: AppStart,\n        },\n        \"Restart\": {\n            api: AppRestart,\n        },\n        \"Uninstall\": {\n            api: AppUninstall,\n        }\n    }\n\n    //处理非官方应用的操作\n    const NoOfficialAppClick = async (label, app) => {\n        if (label === \"Uninstall\") {\n            setSelectedApp(app);\n            setShowUninstallConform(true);\n            return;\n        }\n\n        setIsLoading(true);\n        try {\n            const response = await appActions[label].api({ app_id: app.app_id });\n            if (response.data.Error) {\n                setShowAlert(true);\n                setAlertType(\"error\")\n                setAlertMessage(response.data.Error.Message);\n            }\n            else {\n                setShowAlert(true);\n                setAlertType(\"success\")\n                setAlertMessage(\"执行成功\");\n                handleDataChange();\n            }\n        }\n        catch (error) {\n            navigate(\"/error-500\");\n        }\n        finally {\n            setIsLoading(false);\n        }\n    }\n\n    return (\n        <>\n            <Row className=\"mb-2 align-items-center\">\n                <Col xs={12} sm={6} md={3} lg={2}>\n                    <span style={{ fontSize: \"28px\" }}>{_(\"My Apps\")}</span>\n                </Col>\n                <Col xs={12} sm={6} md={3} lg={2}>\n                    <FormInput\n                        value={selectedStatus}\n                        name=\"select\"\n                        type=\"select\"\n                        className=\"form-select\"\n                        key=\"select\"\n                        onChange={(e) => changeStatus(e.target.value)}\n                    >\n                        <option value=\"all\">{\"All States\"}</option>\n                        <option value=\"installing\">installing</option>\n                        <option value=\"running\">running</option>\n                        <option value=\"exited\">exited</option>\n                        <option value=\"restarting\">restarting</option>\n                        <option value=\"failed\">failed</option>\n                    </FormInput>\n                </Col>\n                <Col xs={12} sm={12} md={6} lg={7}>\n                    <FormInput\n                        type=\"text\"\n                        name=\"search\"\n                        placeholder=\"Search for apps like WordPress, Dropbox, Slack, Trello, …\"\n                        onChange={(e) => handleInputChange(e.target.value)}\n                    />\n                </Col>\n                <Col xs={12} sm={12} md={12} lg={1}>\n                    <Button\n                        variant=\"primary\"\n                        className=\"float-end\"\n                        onClick={() => {\n                            window.location.reload(false);\n                        }}\n                    >\n                        {_(\"Refresh\")}\n                    </Button>\n                </Col>\n            </Row>\n\n            {\n                [true, false].map((official_app) => {\n                    // 过滤出符合条件的apps\n                    const filteredApps = apps.filter((app) => selectedStatus === 'all' || app.status === selectedStatus)\n                        .filter((app) => app.official_app === official_app)\n                        .filter((app) => app.customer_name.includes(searchString));\n                    // 如果有数据，返回一个Row组件，否则返回null\n                    return filteredApps.length > 0 ? (\n                        <Row>\n                            {/* 根据official_app的值显示不同的标题 */}\n                            <h4 style={official_app ? {} : { paddingTop: \"10px\" }}>{official_app ? _(\"Websoft9's Apps\") : _(\"Other Apps\")}</h4>\n                            {filteredApps.map((app, i) => (\n                                <Col xxl={2} md={3} key={app.app_id + i} className=\"appstore-item\">\n                                    <div className='appstore-item-content highlight text-align-center'>\n                                        {\n                                            (!official_app && (app.status === \"running\" || app.status === \"exited\")) &&\n                                            <Dropdown className=\"float-end\">\n                                                <Dropdown.Toggle as={Link} to=\"#\" className=\"arrow-none card-drop\">\n                                                    {isLoading ? <Spinner className=\"spinner-border-sm noti-icon\" /> : <i className=\"dripicons-gear noti-icon\" />}\n                                                </Dropdown.Toggle>\n                                                <Dropdown.Menu align=\"end\">\n                                                    {(menuItems(app.status) || []).map((item, index) => {\n                                                        return (\n                                                            <React.Fragment key={index}>\n                                                                {item.condition && item.hasDivider && <Dropdown.Divider as=\"div\" />}\n                                                                {\n                                                                    item.condition && <Dropdown.Item className={classNames(item.variant ? item.variant : '')}\n                                                                        onClick={() => NoOfficialAppClick(item.label, app)}\n                                                                    >\n                                                                        {item.icon && <i className={classNames(item.icon, 'me-1')}></i>}\n                                                                        {/* {isLoading ? <Spinner className=\"spinner-border-sm noti-icon\" /> : item.icon && <i className={classNames(item.icon, 'me-1')}></i>} */}\n                                                                        {item.label}\n                                                                    </Dropdown.Item>\n                                                                }\n                                                            </React.Fragment>\n                                                        );\n                                                    })}\n                                                </Dropdown.Menu>\n                                            </Dropdown>\n                                        }\n                                        {\n                                            (official_app && (app.status === \"running\" || app.status === \"exited\")) &&\n                                            <>\n                                                <div className=\"float-end arrow-none card-drop p-0\" onClick={() => { handleClick(app) }}>\n                                                    <i className=\"dripicons-gear noti-icon\"></i>\n                                                </div>\n                                                <div className=\"clearfix\"></div>\n                                            </>\n                                        }\n                                        {\n                                            (official_app && app.status === \"installing\") &&\n                                            <>\n                                                <div className=\"float-end arrow-none card-drop p-0\">\n                                                    <i className=\"dripicons-empty noti-icon\"></i>\n                                                </div>\n                                                <div className=\"clearfix\"></div>\n                                            </>\n                                        }\n                                        {\n                                            app.status === 'failed' &&\n                                            <>\n                                                <div className=\"float-end arrow-none card-drop p-0\" >\n                                                    <i className=\"dripicons-information noti-icon\" style={{ paddingRight: \"10px\" }} onClick={() => { showError(app) }}></i>\n                                                    <i className=\"dripicons-trash noti-icon\" onClick={() => { deleteApp(app) }}></i>\n                                                </div>\n                                                <div className=\"clearfix\"></div>\n                                            </>\n                                        }\n                                        <div>\n                                            <img\n                                                src={app.image_url}\n                                                alt={app.app_name}\n                                                className=\"app-icon\"\n                                                style={{ margin: \"20px 10px 20px 10px\" }}\n                                                onError={(e) => (e.target.src = DefaultImg)}\n                                            />\n                                        </div>\n                                        <div>\n                                            <h3 className=\"appstore-item-content-title\" style={{ color: \"#2196f3\" }}>\n                                                {app.customer_name}\n                                            </h3>\n                                            <div style={{ color: app.status === 'failed' ? 'red' : 'inherit', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n                                                {app.status && app.status === \"installing\" && <Spinner className=\"spinner-border-sm m-2\" />}\n                                                {\" \"}\n                                                <div className=\"m-2\">{app.status}</div>\n                                            </div>\n                                        </div>\n                                    </div >\n                                </Col>\n                            ))}\n                        </Row >\n                    ) : null;\n                })\n            }\n            {\n                showModal && <AppDetailModal current_app={selectedApp} showFlag={showModal} onClose={handleClose} onDataChange={handleDataChange} />\n            }\n            {\n                showUninstallConform &&\n                <UninstallConform showConform={showUninstallConform} onClose={canceldeleteApp} app={selectedApp} onDataChange={handleDataChange} />\n            }\n            {\n                showErrorInfo &&\n                <ErrorInfoModal showConform={showErrorInfo} onClose={cancelShowError} app={selectedApp} />\n            }\n            {\n                showAlert &&\n                <Snackbar open={showAlert} autoHideDuration={5000} onClose={handleAlertClose} anchorOrigin={{ vertical: 'top', horizontal: 'center' }}>\n                    <MyMuiAlert onClose={handleAlertClose} severity={alertType} sx={{ width: '100%' }}>\n                        {alertMessage}\n                    </MyMuiAlert>\n                </Snackbar>\n            }\n        </>\n    );\n};\n\nexport default MyApps;\n","/data/stackhub-web/plugins/myapps/src/pages/error/CustomError.js",[],[],"/data/stackhub-web/plugins/myapps/src/pages/error/ServerError.js",[],[],"/data/stackhub-web/plugins/myapps/src/pages/error/PageNotFound.js",[],[],"/data/stackhub-web/plugins/myapps/src/constants/layout.js",[],[],"/data/stackhub-web/plugins/myapps/src/redux/actions.js",[],[],"/data/stackhub-web/plugins/myapps/src/layouts/Topbar.js",["223"],[],"// @flow\nimport classNames from 'classnames';\nimport cockpit from 'cockpit';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n// images\nimport logoSM from '../assets/images/logo-sm.svg';\nimport logo from '../assets/images/logo.svg';\nimport logoEn from '../assets/images/websoft9.svg';\n\nconst _ = cockpit.gettext;\nconst language = cockpit.language;//获取cockpit的当前语言环境\n\ntype TopbarProps = {\n    hideLogo?: boolean,\n    navCssClasses?: string,\n    openLeftMenuCallBack?: () => void,\n    topbarDark?: boolean,\n};\n\nconst Topbar = ({ hideLogo, navCssClasses, openLeftMenuCallBack, topbarDark }: TopbarProps): React$Element<any> => {\n    const navbarCssClasses = navCssClasses || '';\n    const containerCssClasses = !hideLogo ? 'container-fluid' : '';\n\n    return (\n        <>\n            <div className={classNames('navbar-custom', navbarCssClasses)}>\n                <div className={containerCssClasses}>\n                    {!hideLogo && (\n                        <Link to=\"/\" className=\"topnav-logo\">\n                            <span className=\"topnav-logo-lg\">\n                                {\n                                    language === \"zh_CN\" ? <img src={logo} alt=\"logo\" width=\"99\" /> : <img src={logoEn} alt=\"logo\" width=\"99\" />\n                                }\n                            </span>\n                            <span className=\"topnav-logo-sm\">\n                                <img src={logoSM} alt=\"logo\" width=\"24px\" height=\"24\" />\n                            </span>\n                        </Link>\n                    )}\n                    {/* <ul style={{\n                        display: \"flex\", justifyContent: \"flex-end\", flexDirection: \"row\",\n                        alignItems: \"center\", minHeight: \"70px\", fontSize: \"16px\", listStyle: \"none\",\n                        marginBottom: \"0px\"\n                    }}>\n                        <li style={{ margin: \"0 10px\" }}>\n                            <a href='/myapps' style={{ color: \"#428bca\" }} target=\"_parent\" >\n                                <i className=\"dripicons-view-apps\"></i>{' '}{_(\"My Apps\")}\n                            </a>\n                        </li>\n                        <li style={{ margin: \"0 10px\" }}>\n                            <a href='/appstore' style={{ color: \"#428bca\" }} target=\"_parent\">\n                                <i className=\"dripicons-cloud-download\"></i>{' '}{_(\"App Store\")}\n                            </a>\n                        </li>\n                        <li>\n                            <button\n                                className=\"nav-link dropdown-toggle end-bar-toggle arrow-none btn btn-link shadow-none\" style={{ color: \"#428bca\" }}>\n                                <i className=\"dripicons-gear noti-icon\"></i>{' '}\n                            </button>\n                        </li>\n                    </ul> */}\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default Topbar;\n","/data/stackhub-web/plugins/myapps/src/pages/appdetail.js",["224","225"],[],"import classnames from \"classnames\";\nimport cockpit from 'cockpit';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Button, Col, Modal, Nav, OverlayTrigger, Row, Tab, Tooltip } from 'react-bootstrap';\nimport { Link, useNavigate } from 'react-router-dom';\nimport DefaultImg from '../assets/images/default.png';\nimport Spinner from '../components/Spinner';\nimport { AppRestart, AppStart, AppStop } from '../helpers';\nimport AppAccess from './appdetailtabs/appaccess';\nimport AppContainer from './appdetailtabs/appcontainer';\nimport AppOverview from './appdetailtabs/appoverview';\nimport Uninstall from './appdetailtabs/appuninstall';\n\nconst _ = cockpit.gettext;\n\nconst AppDetailModal = (props): React$Element<React$FragmentType> => {\n    const [restartDisable, setRestartDisable] = useState(false);//用于重启按钮的按钮禁用\n    const [buttonDisable, setButtonDisable] = useState(false); //用于启动/停止按钮禁用\n    const [currentApp, setCurrentApp] = useState(props.current_app);\n    const [startAppLoading, setStartAppLoading] = useState(false); //用户显示启动应用的加载状态\n    const [stopAppLoading, setStopAppLoading] = useState(false); //用户显示停止时应用的加载状态\n    const [restartAppLoading, setRestartAppLoading] = useState(false); //用户显示重启时应用的加载状态\n    const navigate = useNavigate(); //用于页面跳转\n    const childRef = useRef();\n\n    //设置卸载页面的按钮禁用\n    const setUninstallButtonDisable = () => {\n        // 通过ref调用子组件的方法\n        childRef.current.setButtonDisable();\n    };\n\n    //设置卸载页面的按钮启用\n    const setUninstallButtonEnable = () => {\n        // 通过ref调用子组件的方法\n        childRef.current.setButtonEnable();\n    };\n\n    //设置启动/停止按钮禁用,用于传递给卸载页面\n    const setAppdetailButtonDisable = () => {\n        setButtonDisable(true);\n        setRestartDisable(true);\n    };\n    //设置启动/停止按钮启用,用于传递给卸载页面\n    const setAppdetailButtonEnable = () => {\n        setButtonDisable(false);\n        setRestartDisable(false);\n    };\n\n    useEffect(() => {\n        setCurrentApp(props.current_app);\n    }, [props.current_app]);\n\n    const tabContents = [\n        {\n            id: '1',\n            title: _(\"Overview\"),\n            icon: 'mdi dripicons-home',\n            text: <AppOverview data={currentApp} />,\n        },\n        {\n            id: '2',\n            title: _(\"Access\"),\n            icon: 'mdi dripicons-web',\n            text: <AppAccess data={currentApp} />,\n        },\n        {\n            id: '3',\n            title: _(\"Container\"),\n            icon: 'mdi dripicons-stack',\n            text: <AppContainer data={currentApp} />,\n        },\n        {\n            id: '4',\n            title: _(\"Uninstall\"),\n            icon: 'mdi mdi-cog-outline',\n            text: <Uninstall data={currentApp} ref={childRef} disabledButton={setAppdetailButtonDisable} enableButton={setAppdetailButtonEnable}\n                onDataChange={props.onDataChange} onCloseFatherModal={props.onClose} />,\n        },\n    ];\n\n    return (\n        currentApp && <Modal show={props.showFlag} backdrop=\"static\" onHide={props.onClose} size=\"lg\" scrollable=\"true\" dialogClassName=\"modal-full-width\" >\n            <Modal.Header onHide={props.onClose} closeButton>\n                <div style={{ padding: \"10px\", display: \"flex\", width: \"100%\", alignItems: \"center\" }}>\n                    <div className='appstore-item-content-icon col-same-height'>\n                        <img\n                            src={currentApp.image_url}\n                            alt=\"\"\n                            className=\"app-icon\"\n                            onError={(e) => (e.target.src = DefaultImg)}\n                        />\n                    </div>\n                    <div className='col-same-height'>\n                        <h4 className=\"appstore-item-content-title\" style={{ marginTop: \"5px\" }}>\n                            {currentApp.customer_name}\n                        </h4>\n                        <h5 className=\"appstore-item-content-title\" style={{ marginTop: \"5px\" }}>\n                            {currentApp.status}\n                        </h5>\n                    </div>\n                    <div className='col-same-height' style={{ flexGrow: 1, display: \"flex\", justifyContent: \"flex-end\", alignItems: \"center\" }}>\n                        {\n                            currentApp.status === \"exited\" &&\n                            <OverlayTrigger\n                                key=\"bottom1\"\n                                placement=\"bottom\"\n                                overlay={\n                                    <Tooltip id=\"tooltip-bottom\">\n                                        {_(\"Start App\")}\n                                    </Tooltip>\n                                }>\n                                <Button variant=\"primary\" disabled={buttonDisable}\n                                    style={{ padding: \"5px 10px\", borderRadius: \"3px\", marginRight: \"10px\" }}\n                                    onClick={async () => {\n                                        setUninstallButtonDisable();\n                                        setStartAppLoading(true);\n                                        setRestartDisable(true);\n                                        try {\n                                            const response = await AppStart({ app_id: currentApp.app_id });\n                                            if (response.data.Error) {\n                                                navigate(\"/error\")\n                                            }\n                                            else {\n                                                props.onDataChange();\n                                            }\n                                        }\n                                        catch (error) {\n                                            navigate(\"/error-500\");\n                                        }\n                                        finally {\n                                            setUninstallButtonEnable();\n                                            setStartAppLoading(false);\n                                            setRestartDisable(false);\n                                        }\n                                    }}\n                                >\n                                    {\n                                        startAppLoading ?\n                                            <Spinner className=\"spinner-border-sm noti-icon\" color=\"light\" />\n                                            :\n                                            <i className=\"dripicons-media-play noti-icon\"></i>\n                                    }\n                                </Button>\n                            </OverlayTrigger>\n                        }\n                        {\n                            currentApp.status === \"running\" &&\n                            <OverlayTrigger\n                                key=\"bottom2\"\n                                placement=\"bottom\"\n                                overlay={\n                                    <Tooltip id=\"tooltip-bottom\">\n                                        {_(\"Stop App\")}\n                                    </Tooltip>\n                                }>\n                                <Button variant=\"primary\" disabled={buttonDisable}\n                                    style={{ padding: \"5px 10px\", borderRadius: \"3px\", marginRight: \"10px\" }}\n                                    onClick={async () => {\n                                        setUninstallButtonDisable();\n                                        setStopAppLoading(true);\n                                        setRestartDisable(true);\n                                        try {\n                                            const response = await AppStop({ app_id: currentApp.app_id });\n                                            if (response.data.Error) {\n                                                navigate(\"/error\");\n                                            }\n                                            else {\n                                                props.onDataChange();\n                                            }\n                                        }\n                                        catch (error) {\n                                            navigate(\"/error-500\");\n                                        }\n                                        finally {\n                                            setUninstallButtonEnable();\n                                            setStopAppLoading(false);\n                                            setRestartDisable(false);\n                                        }\n                                    }}\n                                >\n                                    {\n                                        stopAppLoading ?\n                                            <Spinner className=\"spinner-border-sm noti-icon\" color=\"light\" />\n                                            :\n                                            <i className=\"dripicons-power noti-icon\"></i>\n                                    }\n                                </Button>\n                            </OverlayTrigger>\n                        }\n                        <OverlayTrigger\n                            key=\"bottom3\"\n                            placement=\"bottom\"\n                            overlay={\n                                <Tooltip id=\"tooltip-bottom\">\n                                    {_(\"Restart App\")}\n                                </Tooltip>\n                            }>\n                            <Button disabled={restartDisable}\n                                style={{ padding: \"5px 10px\", borderRadius: \"3px\", marginRight: \"10px\" }}\n                                onClick={async () => {\n                                    try {\n                                        setUninstallButtonDisable();\n                                        setRestartAppLoading(true);\n                                        setButtonDisable(true);\n                                        const response = await AppRestart({ app_id: currentApp.app_id });\n                                        if (response.data.Error) {\n                                            navigate(\"/error\");\n                                        }\n                                        else {\n                                            props.onDataChange();\n                                        }\n                                    }\n                                    catch (error) {\n                                        navigate(\"/error-500\");\n                                    }\n                                    finally {\n                                        setUninstallButtonEnable();\n                                        setRestartAppLoading(false);\n                                        setButtonDisable(false);\n                                    }\n                                }}\n                            >\n                                {\n                                    restartAppLoading ?\n                                        <Spinner className=\"spinner-border-sm noti-icon\" color=\"light\" />\n                                        :\n                                        <i className=\"dripicons-clockwise noti-icon\"></i>\n                                }\n                            </Button>\n                        </OverlayTrigger>\n                        {\n                            currentApp.status === \"running\" &&\n                            <OverlayTrigger\n                                key=\"bottom4\"\n                                placement=\"bottom\"\n                                overlay={\n                                    <Tooltip id=\"tooltip-bottom\">\n                                        {_(\"Terminal\")}\n                                    </Tooltip>\n                                }>\n                                <Link to={{ pathname: '/terminal', search: `?id=${currentApp.customer_name}` }}\n                                    style={{ color: \"#fff\", backgroundColor: \"#727cf5\", padding: \"5px 10px\", borderRadius: \"3px\", borderColor: \"#727cf5\", marginRight: \"10px\" }}\n                                    target=\"_blank\">\n                                    <i className=\"dripicons-code noti-icon\"></i>{' '}\n                                </Link>\n                            </OverlayTrigger>\n                        }\n                        {\n                            <OverlayTrigger\n                                key=\"bottom5\"\n                                placement=\"bottom\"\n                                overlay={\n                                    <Tooltip id=\"tooltip-bottom\">\n                                        {_(\"Documentation\")}\n                                    </Tooltip>\n                                }>\n                                <a href={'https://support.websoft9.com/docs/' + currentApp.app_name}\n                                    style={{ color: \"#fff\", backgroundColor: \"#727cf5\", padding: \"5px 10px\", borderRadius: \"3px\", borderColor: \"#727cf5\", marginRight: \"10px\" }}\n                                    target=\"_blank\">\n                                    <i className=\"dripicons-document noti-icon\"></i>{' '}\n                                </a>\n                            </OverlayTrigger>\n                        }\n                    </div>\n                </div>\n            </Modal.Header>\n            <Modal.Body className=\"row\">\n                <Tab.Container defaultActiveKey={_(\"Overview\")}>\n                    <Col sm={2} className=\"mb-2 mb-sm-0\">\n                        <Nav variant=\"pills\" className=\"flex-column\">\n                            {tabContents.map((tab, index) => {\n                                const renderElement = () => {\n                                    return (\n                                        <Nav.Item key={index}>\n                                            <Nav.Link as={Link} to=\"#\" eventKey={tab.title}>\n                                                <i\n                                                    className={classnames(\n                                                        tab.icon,\n                                                        'd-md-none',\n                                                        'd-block',\n                                                        'me-1'\n                                                    )}></i>\n                                                <span className=\"d-none d-md-block\">{tab.title}</span>\n                                            </Nav.Link>\n                                        </Nav.Item>\n                                    );\n                                }\n                                if (tab.title === \"Terminal\") {\n                                    if (currentApp.status === \"running\") {\n                                        return renderElement();\n                                    }\n                                } else {\n                                    return renderElement();\n                                }\n                            })}\n                        </Nav>\n                    </Col>\n                    <Col sm={10}>\n                        <Tab.Content style={{ height: \"100%\" }}>\n                            {tabContents.map((tab, index) => {\n                                return (\n                                    <Tab.Pane eventKey={tab.title} id={tab.id} key={index} style={{ height: \"100%\" }}>\n                                        <Row style={{ height: \"100%\" }}>\n                                            <Col sm=\"12\" style={{ height: tab.title === \"Terminal\" ? \"600px\" : \"\" }}>\n                                                {tab.text}\n                                            </Col>\n                                        </Row>\n                                    </Tab.Pane>\n                                );\n                            })}\n                        </Tab.Content>\n                    </Col>\n                </Tab.Container>\n            </Modal.Body>\n        </Modal >\n    );\n}\n\nexport default AppDetailModal;","/data/stackhub-web/plugins/myapps/src/components/FormInput.js",[],[],"/data/stackhub-web/plugins/myapps/src/components/Spinner.js",[],[],"/data/stackhub-web/plugins/myapps/src/utils/index.js",[],[],"/data/stackhub-web/plugins/myapps/src/helpers/index.js",[],[],"/data/stackhub-web/plugins/myapps/src/lib/terminal.js",[],[],"/data/stackhub-web/plugins/myapps/src/utils/array.js",[],[],"/data/stackhub-web/plugins/myapps/src/utils/layout.js",[],[],"/data/stackhub-web/plugins/myapps/src/lib/cockpit-components-terminal.js",[],[],"/data/stackhub-web/plugins/myapps/src/lib/cockpit-dark-theme.js",["226"],[],"function debug() {\n    if (window.debugging == \"all\" || window.debugging?.includes(\"style\")) {\n        console.debug([`cockpit-dark-theme: ${document.documentElement.id}:`, ...arguments].join(\" \"));\n    }\n}\n\nfunction changeDarkThemeClass(documentElement, dark_mode) {\n    debug(`Setting cockpit theme to ${dark_mode ? \"dark\" : \"light\"}`);\n\n    if (dark_mode) {\n        documentElement.classList.add('pf-theme-dark');\n    } else {\n        documentElement.classList.remove('pf-theme-dark');\n    }\n}\n\nfunction _setDarkMode(_style) {\n    const style = _style || localStorage.getItem('shell:style') || 'auto';\n    let dark_mode;\n    // If a user set's an explicit theme, ignore system changes.\n    if ((window.matchMedia?.('(prefers-color-scheme: dark)').matches && style === \"auto\") || style === \"dark\") {\n        dark_mode = true;\n    } else {\n        dark_mode = false;\n    }\n    changeDarkThemeClass(document.documentElement, dark_mode);\n}\n\nwindow.addEventListener(\"storage\", event => {\n    if (event.key === \"shell:style\") {\n        debug(`Storage element 'shell:style' changed from  ${event.oldValue} to ${event.newValue}`);\n\n        _setDarkMode();\n    }\n});\n\n// When changing the theme from the shell switcher the localstorage change will not fire for the same page (aka shell)\n// so we need to listen for the event on the window object.\nwindow.addEventListener(\"cockpit-style\", event => {\n    const style = event.detail.style;\n    debug(`Event received from shell with 'cockpit-style'  ${style}`);\n\n    _setDarkMode(style);\n});\n\nwindow.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {\n    debug(`Operating system theme preference changed to ${window.matchMedia?.('(prefers-color-scheme: dark)').matches ? \"dark\" : \"light\"}`);\n    _setDarkMode();\n});\n\n_setDarkMode();","/data/stackhub-web/plugins/myapps/src/redux/layout/actions.js",[],[],"/data/stackhub-web/plugins/myapps/src/pages/appdetailtabs/appaccess.js",["227","228","229","230","231","232","233","234","235","236","237","238","239","240"],[],"import ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport Accordion from '@mui/material/Accordion';\nimport AccordionDetails from '@mui/material/AccordionDetails';\nimport AccordionSummary from '@mui/material/AccordionSummary';\nimport MuiAlert from '@mui/material/Alert';\nimport Snackbar from '@mui/material/Snackbar';\nimport Typography from '@mui/material/Typography';\nimport classNames from 'classnames';\nimport cockpit from 'cockpit';\nimport { default as React, useEffect, useState } from 'react';\nimport { Alert, Badge, Button, Card, Col, Form, Modal, Row } from 'react-bootstrap';\nimport { useNavigate } from 'react-router-dom';\nimport FormInput from '../../components/FormInput';\nimport Spinner from '../../components/Spinner';\nimport { AppDomainAdd, AppDomainDelete, AppDomainList, AppDomainSet, AppDomainUpdate } from '../../helpers';\n\nconst _ = cockpit.gettext;\n\nconst MyMuiAlert = React.forwardRef(function Alert(props, ref) {\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\n//删除绑定的域名\nconst RemoveDomain = (props): React$Element<React$FragmentType> => {\n    const navigate = useNavigate(); //用于页面跳转\n    const [disable, setDisable] = useState(false);//用于按钮禁用\n    const [showAlert, setShowAlert] = useState(false); //用于是否显示错误提示\n    const [alertMessage, setAlertMessage] = useState(\"\");//用于显示错误提示消息\n\n    function closeAllModals() {\n        //关闭所有弹窗\n        props.onClose();\n        props.onDataChange();\n    }\n\n    return (\n        <Modal show={props.showConform} onHide={props.onClose} size=\"lg\"\n            scrollable=\"true\" backdrop=\"static\" style={{ backgroundColor: \"rgba(0,0,0,0.8)\" }}>\n            <Modal.Header onHide={props.onClose} className={classNames('modal-colored-header', 'bg-warning')}>\n                <h4>{_(\"Delete domain binding\")}</h4>\n            </Modal.Header>\n            <Modal.Body className=\"row\" >\n                <span style={{ margin: \"10px 0px\" }}>{_(\"Are you sure you want to delete the domain for:\")} {props.deleteRowData.domainValue} ? </span>\n                <div>\n                    {showAlert && <Alert variant=\"danger\" className=\"my-2\">\n                        {alertMessage}\n                    </Alert>}\n                </div>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"light\" onClick={props.onClose}>\n                    {_(\"Close\")}\n                </Button>{\" \"}\n                <Button disabled={disable} variant=\"warning\" onClick={async () => {\n                    try {\n                        setDisable(true);\n                        const response = await AppDomainDelete({ app_id: props.deleteRowData.app_id, domain: props.deleteRowData.domainValue });\n                        if (response.data.Error) {\n                            setShowAlert(true);\n                            setAlertMessage(response.data.Error.Message);\n                        }\n                        else { //删除成功\n                            setDisable(false);\n                            closeAllModals();\n                        }\n                    }\n                    catch (error) {\n                        navigate(\"/error-500\");\n                    }\n                    finally {\n                        setDisable(false);\n                    }\n                }}>\n                    {disable && <Spinner className=\"spinner-border-sm me-1\" tag=\"span\" color=\"white\" />} {_(\"Delete\")}\n                </Button>\n            </Modal.Footer>\n        </Modal >\n    );\n}\n\nconst AppAccess = (props): React$Element<React$FragmentType> => {\n    const navigate = useNavigate(); //用于页面跳转\n    const [domains, setDomains] = useState([]); // 定义域名数组\n    const [loading, setLoading] = useState(false); // 定义执行操作时的加载转态\n\n    const [showAlert, setShowAlert] = useState(false); //用于是否显示错误提示\n    const [alertMessage, setAlertMessage] = useState(\"\");  //用于显示错误提示消息\n    const [alertType, setAlertType] = useState(\"\");  //用于确定弹窗的类型：error\\success\n    const [showRemoveDomain, setShowRemoveDomain] = useState(false); //用于显示状态为failed时显示确定删除的弹窗\n    const [deleteRowData, setDeleteRowData] = useState(null); //用于保存将要删除的行数据\n    const [inputDomainValue, setInputDomainValue] = useState(\"\");//用户保存用户输入的域名\n\n    const [isExpandedForDomain, setIsExpandedForDomain] = React.useState(true); //用于保存“域名绑定”的折叠状态\n    const [isExpandedForNoDomain, setIsExpandedForNoDomain] = React.useState(true);//用于保存“无域名访问”的折叠状态\n    const [isExpandedForAccount, setIsExpandedForAccount] = React.useState(false);//用于保存“无域名访问”的折叠状态\n\n    const getDomains = async () => {\n        try {\n            const response = await AppDomainList({ app_id: props.data.app_id });\n            if (response.data.Error) {\n                setShowAlert(true);\n                setAlertType(\"error\")\n                setAlertMessage(response.data.Error.Message);\n            }\n            else {\n                let responseData = response.data.ResponseData.Domain_set;\n                let defaultdomain = responseData.default_domain; //获取返回的默认域名数据\n\n                let resturnDomains = responseData.domains.map(domain => {\n                    return {\n                        app_id: props.data.app_id,\n                        domainValue: domain,\n                        newDomainValue: domain,\n                        isEditable: false,\n                        isFromAPI: true,\n                        isDefaultDomain: domain === defaultdomain ? true : false\n                    };\n                });\n                //排序：将默认域名放前面\n                resturnDomains.sort((a, b) => {\n                    return b.isDefaultDomain - a.isDefaultDomain;\n                });\n                setDomains(resturnDomains);\n            }\n        }\n        catch (error) {\n            navigate(\"/error-500\");\n        }\n    }\n\n    useEffect(() => {\n        getDomains();\n    }, []);\n\n    //添加域名\n    const addRow = () => {\n        if (domains.length < 10) {\n            // 限制最多只能有10个domain\n            setDomains([\n                ...domains,\n                {\n                    app_id: props.data.app_id,\n                    domainValue: \"\",\n                    newDomainValue: \"\",\n                    isEditable: true,\n                    isFromAPI: false,\n                    isDefaultDomain: false\n                },\n            ]);\n        }\n    }\n\n    //删除域名\n    const deleteRow = async (row, index) => {\n        if (!row.isFromAPI) { //如果是点“添加”产生的记录行，则直接删除，不需要调用接口\n            const newRows = [...domains]; // 复制状态数组\n            newRows.splice(index, 1); // 删除指定索引的对象\n            setDomains(newRows); // 更新状态数组\n        }\n        else { //表示记录是从接口获取的，删除时需要调用接口删除\n            setShowRemoveDomain(true);\n            setDeleteRowData(row);\n        }\n    }\n\n    //编辑\n    const editRow = (index) => {\n        const newRows = [...domains]; // 复制状态数组\n        newRows[index].isEditable = !newRows[index].isEditable; // 切换isEditable属性\n        setDomains(newRows); // 更新状态数组\n    }\n\n    //取消编辑\n    const cancelEditRow = (index) => {\n        const newRows = [...domains]; // 复制状态数组\n        newRows[index].newDomainValue = newRows[index].domainValue; // 用户有修改但是取消编辑，需要将数据还原\n        newRows[index].isEditable = !newRows[index].isEditable; // 切换isEditable属性\n        setDomains(newRows); // 更新状态数组\n    }\n\n    //设为默认域名\n    const setDefaultDomain = async (index) => {\n        const defaultDomain = domains[index].newDomainValue; //获取域名\n        setLoading(true);\n        try {  //调用设定默认域名接口\n            const response = await AppDomainSet({ app_id: props.data.app_id, domain: defaultDomain });\n            if (response.data.Error) {\n                setShowAlert(true);\n                setAlertType(\"error\")\n                setAlertMessage(response.data.Error.Message);\n            }\n            else {\n                setShowAlert(true);\n                setAlertType(\"success\")\n                setAlertMessage(\"设置成功!\");\n                getDomains();\n            }\n        }\n        catch (error) {\n            navigate(\"/error-500\");\n        }\n        finally {\n            setLoading(false);\n        }\n    }\n\n    //保存\n    const saveRow = async (row, index) => {\n        const input = document.getElementsByName(`domain-${index}`)[0]; // 获取搜索框元素\n        const value = input.value; // 获取搜索框的值\n        const regex = /^(?!https?:\\/\\/)([\\da-z\\.-]+\\.)*([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?$/; // 定义一个正则表达式，用来验证域名的格式\n        if (value) {\n            if (regex.test(value)) {\n                if (row.isFromAPI) { //如果取到isFromAPI为true,表示要修改数据\n                    if (row.domainValue != row.newDomainValue) { //如果修改前的数据不等于修改后的数据，则调用修改接口\n                        setLoading(true);\n                        try {\n                            const response = await AppDomainUpdate({ app_id: props.data.app_id, domain_old: row.domainValue, domain_new: value });\n                            if (response.data.Error) {\n                                setShowAlert(true);\n                                setAlertType(\"error\")\n                                setAlertMessage(response.data.Error.Message);\n                            }\n                            else {\n                                setShowAlert(true);\n                                setAlertType(\"success\")\n                                setAlertMessage(\"Success\");\n                                getDomains();\n                            }\n                        }\n                        catch (error) {\n                            navigate(\"/error-500\");\n                        }\n                        finally {\n                            setLoading(false);\n                        }\n                    }\n                    else {\n                        const newRows = [...domains]; // 复制状态数组\n                        newRows[index].isEditable = !newRows[index].isEditable; // 切换isEditable属性\n                        setDomains(newRows); // 更新状态数组\n                    }\n                }\n                else { //如果取到isFromAPI为false,表示是绑定数据 \n                    try {\n                        setLoading(true);\n                        const response = await AppDomainAdd({ app_id: props.data.app_id, domains: value });\n                        if (response.data.Error) {\n                            setShowAlert(true);\n                            setAlertType(\"error\")\n                            setAlertMessage(response.data.Error.Message);\n                        }\n                        else {\n                            setShowAlert(true);\n                            setAlertType(\"success\")\n                            setAlertMessage(\"Success\");\n                            getDomains();\n                        }\n                    }\n                    catch (error) {\n                        navigate(\"/error-500\");\n                    }\n                    finally {\n                        setLoading(false);\n                    }\n                }\n            } else {\n                setShowAlert(true);\n                setAlertType(\"error\")\n                setAlertMessage(_(\"Please enter the correct domain name and cannot start with http or https!\"));\n            }\n        }\n        else {\n            // 如果搜索框的值为空\n            setShowAlert(true);\n            setAlertType(\"error\")\n            setAlertMessage(_(\"Domain name cannot be empty\"));\n        }\n    }\n\n    //处理输入\n    function handleChange(index, e) {\n        const newRows = [...domains]; // 复制状态数组\n        newRows[index].newDomainValue = e.target.value; // 修改inputValue属性\n        setDomains(newRows); // 更新状态数组\n    }\n\n    const handleAlertClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        setShowAlert(false);\n        setAlertMessage(\"\");\n    };\n\n    //用于取消删除域名弹窗\n    const cancelRemoveDomain = () => {\n        setShowRemoveDomain(false);\n    };\n\n    const [isOpen, setIsOpen] = useState(false);\n    const toggle = () => setIsOpen(!isOpen);\n\n    const handleChangefordomin = (event, newExpanded) => {\n        setIsExpandedForDomain(newExpanded);\n    };\n\n    const handleChangefornodomin = (event, newExpanded) => {\n        setIsExpandedForNoDomain(newExpanded);\n    };\n\n    const handleChangeforaccount = (event, newExpanded) => {\n        setIsExpandedForAccount(newExpanded);\n    };\n\n    return (\n        <>\n            <Card>\n                {loading && (\n                    <div className=\"card-disabled\" style={{ zIndex: 999 }}>\n                        <div className=\"card-portlets-loader\"></div>\n                    </div>\n                )}\n                <Card.Body>\n                    <Accordion defaultExpanded={true} onChange={handleChangefordomin} className='mb-2'>\n                        <AccordionSummary\n                            expandIcon={<ExpandMoreIcon />}\n                            aria-controls=\"panel1a-content\"\n                            id=\"panel1a-header\"\n                        >\n                            <Typography>\n                                <label className=\"me-2 fs-5 d-block\">域名访问</label>\n                                <span className=\"me-2 fs-6\" style={{ display: isExpandedForDomain ? 'inline' : 'none' }}>\n                                    建议绑定域名访问应用，以免无域名造成应用异常。如要需要进行Https设置或者自定义配置，请点击\n                                    <a href=\"/nginx\" target=\"_parent\">\n                                        更多\n                                    </a>\n                                </span>\n                            </Typography>\n                        </AccordionSummary>\n                        <AccordionDetails>\n                            <Typography>\n                                <Card>\n                                    <Card.Header>\n                                        <Row className=\"mb-2 align-items-center\">\n                                            <Col xs={12} md={12} className=\"d-flex justify-content-end\">\n                                                <Button variant=\"primary\" size=\"sm\" className=\"me-2\" onClick={() => addRow()}>添加域名</Button>\n                                                {\n                                                    props.data?.config?.admin_domain_url && (\n                                                        <a href={props.data?.config?.admin_domain_url} target=\"_blank\" className=\"me-2\">\n                                                            <Button variant=\"primary\" size=\"sm\">访问后台</Button>\n                                                        </a>\n                                                    )\n                                                }\n                                                <Button size=\"sm\" className=\"me-2\" variant=\"primary\"\n                                                    onClick={async () => {\n                                                        setLoading(true);\n                                                        await getDomains();\n                                                        setLoading(false);\n                                                    }} > {_(\"Refresh\")}\n                                                </Button>\n                                            </Col>\n                                        </Row>\n                                    </Card.Header>\n                                    <Card.Body>\n                                        {domains.map((row, index) => (\n                                            <Row className=\"mb-2\" key={index}>\n                                                <Col xs={12} className=\"d-flex justify-content-between\">\n                                                    <Col>\n                                                        <FormInput className=\"mb-2 mb-md-0\" type=\"text\"\n                                                            name={`domain-${index}`}\n                                                            value={row.newDomainValue}\n                                                            disabled={!row.isEditable}\n                                                            onChange={(e) => handleChange(index, e)} />\n                                                    </Col>\n                                                    <Col className='col-auto ms-auto'>\n                                                        <Button variant=\"link text-danger\" style={{ padding: \"5px\" }} onClick={() => deleteRow(row, index)}>\n                                                            {_(\"delete\")}\n                                                        </Button>\n                                                        {row.isEditable && row.isFromAPI && (\n                                                            <>\n                                                                <Button variant=\"link text-success\" style={{ padding: \"5px\" }} onClick={() => saveRow(row, index)}>\n                                                                    {_(\"save\")}\n                                                                </Button>\n                                                                <Button variant=\"link text-success\" style={{ padding: \"5px\" }} onClick={() => cancelEditRow(index)}>\n                                                                    {_(\"cancel\")}\n                                                                </Button>\n                                                            </>\n                                                        )}\n                                                        {row.isEditable && !row.isFromAPI && (\n\n                                                            <Button variant=\"link text-success\" style={{ padding: \"5px\" }} onClick={() => saveRow(row, index)}>\n                                                                {_(\"save\")}\n                                                            </Button>\n                                                        )}\n                                                        {!row.isEditable && (\n                                                            <>\n                                                                <Button variant=\"link text-primary\" style={{ padding: \"5px\" }} onClick={() => editRow(index)}>\n                                                                    {_(\"edit\")}\n                                                                </Button>\n                                                                <a href={'http://' + row.domainValue} target=\"_blank\">\n                                                                    <Button variant=\"link text-primary\" style={{ padding: \"5px\" }}>{_(\"access\")}</Button>\n                                                                </a>\n                                                                {\n                                                                    row.isDefaultDomain ? (\n                                                                        <Badge className=\"ms-2 bg-success\"> {_(\"default\")} </Badge>\n                                                                    ) : (\n                                                                        <Button variant=\"link text-primary\" onClick={() => setDefaultDomain(index)}>\n                                                                            {_(\"set as default\")}\n                                                                        </Button>\n                                                                    )\n                                                                }\n                                                            </>\n                                                        )}\n                                                    </Col>\n                                                </Col>\n                                            </Row>\n                                        ))}\n                                    </Card.Body>\n                                    {/* <Card.Footer>\n                                        <Row className=\"mb-2 mt-2\">\n                                            <Col sm={12}>\n                                                <span>\n                                                    如要需要进行Https设置,或者更多自定义配置，请点击更多\n                                                </span>\n                                                <a href=\"/nginx\" target=\"_parent\" className=\"me-2 float-end\">\n                                                    <Button variant=\"primary\" size=\"sm\">{_(\"More\")}</Button>\n                                                </a>\n                                            </Col>\n                                        </Row>\n                                    </Card.Footer> */}\n                                </Card >\n                            </Typography>\n                        </AccordionDetails>\n                    </Accordion>\n                    {\n                        (props.data?.config?.url && ((props.data?.config?.default_domain && !props.data?.app_replace_url) || (!props.data?.config?.default_domain))) &&\n                        <Accordion defaultExpanded={true} onChange={handleChangefornodomin} className='mb-2'>\n                            <AccordionSummary\n                                expandIcon={<ExpandMoreIcon />}\n                                aria-controls=\"panel2a-content\"\n                                id=\"panel2a-header\"\n                            >\n                                <Typography>\n                                    <label className=\"me-2 fs-5 d-block\">无域名访问</label>\n                                    <span className=\"me-2 fs-6\" style={{ display: isExpandedForNoDomain ? 'inline' : 'none' }}>没有域名可以通过IP+端口的方式临时访问应用</span>\n                                </Typography>\n                            </AccordionSummary>\n                            <AccordionDetails>\n                                <Typography>\n                                    <Card>\n                                        <Card.Body>\n                                            {\n                                                props.data?.config?.url &&\n                                                (\n                                                    <div>\n                                                        <label className=\"me-2 fs-5\">前台:</label>\n                                                        <a href={props.data?.config?.url} target=\"_blank\" className=\"me-2\">\n                                                            {props.data?.config?.url}\n                                                        </a>\n                                                    </div>\n                                                )\n                                            }\n                                            {\n                                                props.data?.config?.admin_url &&\n                                                (\n                                                    <div>\n                                                        <label className=\"me-2 fs-5\">后台:</label>\n                                                        <a href={props.data?.config?.admin_url} target=\"_blank\" className=\"me-2\">\n                                                            {props.data?.config?.admin_url}\n                                                        </a>\n                                                    </div>\n                                                )\n                                            }\n                                        </Card.Body>\n                                    </Card>\n                                </Typography>\n                            </AccordionDetails>\n                        </Accordion>\n                    }\n                    {\n                        props.data?.config?.admin_username &&\n                        <Accordion className='mb-2' onChange={handleChangeforaccount}>\n                            <AccordionSummary\n                                expandIcon={<ExpandMoreIcon />}\n                                aria-controls=\"panel3a-content\"\n                                id=\"panel3a-header\"\n                            >\n                                <Typography>\n                                    <label className=\"me-2 fs-5 d-block\">初始账号</label>\n                                    <span className=\"me-2 fs-6\" style={{ display: isExpandedForAccount ? 'inline' : 'none' }}>\n                                        此应用程序是使用管理员帐户预先设置的，请立即更改管理员密码。初始凭据为：\n                                    </span>\n                                </Typography>\n                            </AccordionSummary>\n                            <AccordionDetails>\n                                <Typography>\n                                    <Card>\n                                        <Card.Body>\n                                            {/* <p>\n                                                This app is pre-setup with an admin account,Please change the admin password immediately. The initial credentials are:\n                                            </p> */}\n                                            <Form.Group as={Row} className=\"mb-3\">\n                                                <Form.Label htmlFor=\"username\" column md={2} className='fs-5'>\n                                                    UserName\n                                                </Form.Label>\n                                                <Col md={4}>\n                                                    <Form.Control\n                                                        type=\"text\"\n                                                        name=\"username\"\n                                                        id=\"username\"\n                                                        defaultValue={props.data?.config?.admin_username}\n                                                        readOnly\n                                                    />\n                                                </Col>\n                                            </Form.Group>\n\n                                            <Form.Group as={Row} className=\"mb-3\">\n                                                <Form.Label htmlFor=\"password\" column md={2} className='fs-5'>\n                                                    Password\n                                                </Form.Label>\n                                                <Col md={4}>\n                                                    <FormInput\n                                                        type=\"password\"\n                                                        name=\"password\"\n                                                        containerClass={'mb-3'}\n                                                        value={props.data?.config?.admin_password}\n                                                        readOnly\n                                                    />\n                                                </Col>\n                                            </Form.Group>\n                                        </Card.Body>\n                                    </Card>\n                                </Typography>\n                            </AccordionDetails>\n                        </Accordion>\n                    }\n                </Card.Body>\n            </Card >\n            {\n                showRemoveDomain &&\n                <RemoveDomain showConform={showRemoveDomain} onClose={cancelRemoveDomain} deleteRowData={deleteRowData} onDataChange={getDomains} />\n            }\n            {\n                showAlert &&\n                <Snackbar open={showAlert} autoHideDuration={5000} onClose={handleAlertClose} anchorOrigin={{ vertical: 'top', horizontal: 'center' }}>\n                    <MyMuiAlert onClose={handleAlertClose} severity={alertType} sx={{ width: '100%' }}>\n                        {alertMessage}\n                    </MyMuiAlert>\n                </Snackbar>\n            }\n        </>\n    );\n}\n\nexport default AppAccess;","/data/stackhub-web/plugins/myapps/src/pages/appdetailtabs/appcontainer.js",["241","242","243","244","245","246","247"],[],"import axios from 'axios';\nimport cockpit from \"cockpit\";\nimport React, { useEffect, useState } from 'react';\nimport { Badge, Button, Card, Col, Row, Table } from 'react-bootstrap';\nimport { useNavigate } from 'react-router-dom';\n\nconst _ = cockpit.gettext;\n\nconst AppContainer = (props): React$Element<React$FragmentType> => {\n    const navigate = useNavigate(); //用于页面跳转\n    const [containersInfo, setContainersInfo] = useState([]);\n    const customer_name = props.data.customer_name;\n    const [endpointsId, setEndpointsId] = useState(null);\n\n    //通过Portainer的接口获取容器数据\n    const getContainersData = async () => {\n        try {\n            let jwt = window.localStorage.getItem(\"portainer.JWT2\"); //获取存储在本地的JWT数据 \n\n            //如果获取不到jwt，则模拟登录并写入新的jwt\n            if (jwt === null) {\n                const response = await axios.get('./config.json'); //从项目下读取配置文件\n                if (response.status === 200) {\n                    let config = response.data.PORTAINER;\n                    const { PORTAINER_USERNAME, PORTAINER_PASSWORD, PORTAINER_AUTH_URL, PORTAINER_HOME_PAGE } = config;\n\n                    //调用portainer的登录API，模拟登录\n                    const authResponse = await axios.post(PORTAINER_AUTH_URL, {\n                        username: PORTAINER_USERNAME,\n                        password: PORTAINER_PASSWORD\n                    });\n                    if (authResponse.status === 200) {\n                        //jwt = \"\\\"\" + authResponse.data.jwt + \"\\\"\";\n                        jwt = authResponse.data.jwt\n                        //let jwt_localStorage = \"\\\"\" + authResponse.data.jwt + \"\\\"\";\n                        window.localStorage.setItem('portainer\\.JWT2', jwt); //关键是将通过API登录后获取的jwt，存储到本地localStorage\n                    } else {\n                        console.error('Error:', authResponse);\n                    }\n                }\n                else {\n                    console.error('Error:', response);\n                }\n            }\n            else {\n                jwt = jwt.replace(/\"/g, '')\n            }\n\n            //从portainer接口获取endpoints\n            const endpointsData = await axios.get('/portainer/api/endpoints', {\n                headers: {\n                    'Authorization': 'Bearer ' + jwt\n                }\n            });\n            if (endpointsData.status === 200) {\n                //应该可能会返回“远程”的endpoint，这里只获取“本地”endpoint,条件为URL包含'/var/run/docker.sock'\n                const id = endpointsData.data.find(({ URL }) => URL.includes('/var/run/docker.sock')).Id;\n                setEndpointsId(id)\n                //调用接口获取\n                const containersData = await axios.get(`/portainer/api/endpoints/${id}/docker/containers/json`, {\n                    headers: {\n                        'Authorization': 'Bearer ' + jwt\n                    },\n                    params: {\n                        all: true,\n                        filters: JSON.stringify({ \"label\": [`com.docker.compose.project=${customer_name}`] })\n                    }\n                })\n                if (containersData.status === 200) {\n                    setContainersInfo(containersData.data);\n                }\n                else {\n                    console.error('Error:', containersData);\n                }\n            }\n            else {\n                console.error('Error:', endpointsData);\n            }\n        }\n        catch (error) {\n            console.error('Error:', error);\n            //navigate(\"/error-500\");\n        }\n    }\n\n    useEffect(() => {\n        getContainersData();\n    }, []);\n\n    return (\n        <Row>\n            <Col xs={12}>\n                <Card>\n                    <Card.Header>\n                        <Row className=\"align-items-center\">\n                            <Col xs={12} md={10}>\n                                <label className=\"me-2 fs-5 d-block\">{_(\"Container\")}</label>\n                                <span className=\"me-2 fs-6\">本应用由如下容器组成，名称为 {customer_name} 的为主容器  </span>\n                            </Col>\n                            <Col xs={12} md={2}>\n                                <a href={`/portainer/#!/${endpointsId}/docker/stacks/${customer_name}?type=2&regular=false&external=true&orphaned=false`}\n                                    target=\"_blank\" className=\"me-2\">\n                                    <Button variant=\"primary\" size=\"sm\" className=\"float-end\">{_(\"More\")}</Button>\n                                </a>\n                            </Col>\n                        </Row>\n                    </Card.Header>\n                    <Card.Body>\n                        <Table className=\"mb-0\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>State</th>\n                                    <th style={{ textAlign: 'center' }}>Actions</th>\n                                    <th>Image</th>\n                                    <th>Created</th>\n                                    <th>Ip Address</th>\n                                    <th>Published Ports</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {containersInfo.map((container, index) => {\n                                    return (\n                                        <tr key={index}>\n                                            <td>{container.Names?.[0]?.replace(/^\\/|\\/$/g, '')}</td>\n                                            <td>\n                                                <Badge className={`${container.State === 'running' ? 'bg-success' : container.State === 'exited' ? 'bg-danger' : 'info'}`}>\n                                                    {container.State}\n                                                </Badge>\n                                            </td>\n                                            <td style={{ textAlign: 'center' }}>\n                                                <a href={`/portainer/#!/${endpointsId}/docker/containers/${container.Id}/logs`}\n                                                    target=\"_blank\" title='Logs'>\n                                                    <i className=\"dripicons-document-remove noti-icon\"></i>{' '}\n                                                </a>\n                                                {\n                                                    container.State === \"running\" && (\n                                                        <a href={`/portainer/#!/${endpointsId}/docker/containers/${container.Id}/stats`}\n                                                            target=\"_blank\" title='Stats'>\n                                                            <i className=\"dripicons-pulse noti-icon\"></i>{' '}\n                                                        </a>\n                                                    )\n                                                }\n\n                                            </td>\n                                            <td>{container.Image}</td>\n                                            <td>{new Date(container.Created * 1000).toLocaleString()}</td>\n                                            <td>{container.NetworkSettings.Networks[container.HostConfig.NetworkMode].IPAddress}</td>\n                                            <td>{container.Ports.find(port => port.IP && /^(\\d{1,3}\\.){3}\\d{1,3}$/.test(port.IP))?.PublicPort}:{container.Ports.find(port => port.IP && /^(\\d{1,3}\\.){3}\\d{1,3}$/.test(port.IP))?.PrivatePort}</td>\n                                        </tr>\n                                    );\n                                })}\n                            </tbody>\n                        </Table>\n                    </Card.Body>\n                </Card>\n            </Col>\n        </Row >\n    );\n}\n\nexport default AppContainer;","/data/stackhub-web/plugins/myapps/src/pages/appdetailtabs/appoverview.js",["248","249"],[],"import cockpit from \"cockpit\";\nimport React from 'react';\nimport { Card, Col, Row, Table } from 'react-bootstrap';\nimport { useNavigate } from 'react-router-dom';\n\nconst _ = cockpit.gettext;\n\nconst AppOverview = (props): React$Element<React$FragmentType> => {\n    const navigate = useNavigate(); //用于页面跳转\n\n    return (\n        <Row>\n            <Col xs={12}>\n                <Card>\n                    <Card.Header>\n                        <label className=\"me-2 fs-5 d-block\">应用概览</label>\n                    </Card.Header>\n                    <Card.Body>\n                        <Table responsive className=\"mb-0\" bordered={false} style={{ display: 'flex' }}>\n                            <tbody>\n                                <tr>\n                                    <td style={{ fontWeight: \"bold\" }}>应用名称：</td>\n                                    <td>{props.data?.app_name}</td>\n                                </tr>\n                                <tr>\n                                    <td style={{ fontWeight: \"bold\" }}>应用版本：</td>\n                                    <td>{props.data?.app_version}</td>\n                                </tr>\n                                <tr>\n                                    <td style={{ fontWeight: \"bold\" }}>应用端口：</td>\n                                    <td>{props.data?.config?.port}</td>\n                                </tr>\n                                <tr>\n                                    <td style={{ fontWeight: \"bold\" }}>创建时间：</td>\n                                    <td>{props.data?.create_time}</td>\n                                </tr>\n                                <tr>\n                                    <td style={{ fontWeight: \"bold\" }}>配置目录： </td>\n                                    <td>{props.data?.config_path}</td>\n                                </tr>\n                                <tr>\n                                    <td style={{ fontWeight: \"bold\" }}>数据目录：</td>\n                                    <td>{props.data?.volume_data}</td>\n                                </tr>\n                            </tbody>\n                        </Table>\n                        {/* <Table responsive className=\"mb-0\" bordered={false}>\n                            <tbody>\n                                <tr>\n                                    <td style={{ width: '10%', fontWeight: \"bold\" }}>应用名称：</td>\n                                    <td>{props.data?.app_name}</td>\n                                    <td style={{ width: '10%', fontWeight: \"bold\" }}>应用版本：</td>\n                                    <td>{props.data?.app_version}</td>\n                                </tr>\n                                <tr>\n                                    <td style={{ width: '10%', fontWeight: \"bold\" }}>应用端口：</td>\n                                    <td>{props.data?.config?.port}</td>\n                                    <td style={{ width: '10%', fontWeight: \"bold\" }}>创建时间：</td>\n                                    <td>{props.data?.create_time}</td>\n                                </tr>\n                                <tr>\n                                    <td style={{ width: '10%', fontWeight: \"bold\" }}>配置目录： </td>\n                                    <td>{props.data?.config_path}</td>\n                                    <td style={{ width: '10%', fontWeight: \"bold\" }}>数据目录：</td>\n                                    <td>{props.data?.volume_data}</td>\n                                </tr>\n                            </tbody>\n                        </Table> */}\n                    </Card.Body>\n                </Card>\n            </Col>\n        </Row>\n    );\n}\n\nexport default AppOverview;","/data/stackhub-web/plugins/myapps/src/pages/appdetailtabs/appuninstall.js",[],[],"/data/stackhub-web/plugins/myapps/src/helpers/api/index.js",[],[],"/data/stackhub-web/plugins/myapps/src/lib/cockpit-components-context-menu.js",[],[],"/data/stackhub-web/plugins/myapps/src/helpers/api/appManager.js",[],[],"/data/stackhub-web/plugins/myapps/src/helpers/api/apiCore.js",[],[],{"ruleId":"250","severity":1,"message":"251","line":108,"column":12,"nodeType":"252","messageId":"253","endLine":108,"endColumn":29},{"ruleId":"250","severity":1,"message":"254","line":108,"column":31,"nodeType":"252","messageId":"253","endLine":108,"endColumn":51},{"ruleId":"250","severity":1,"message":"255","line":116,"column":12,"nodeType":"252","messageId":"253","endLine":116,"endColumn":22},{"ruleId":"250","severity":1,"message":"256","line":116,"column":24,"nodeType":"252","messageId":"253","endLine":116,"endColumn":37},{"ruleId":"250","severity":1,"message":"257","line":119,"column":12,"nodeType":"252","messageId":"253","endLine":119,"endColumn":22},{"ruleId":"250","severity":1,"message":"258","line":119,"column":24,"nodeType":"252","messageId":"253","endLine":119,"endColumn":37},{"ruleId":"250","severity":1,"message":"259","line":126,"column":12,"nodeType":"252","messageId":"253","endLine":126,"endColumn":24},{"ruleId":"260","severity":1,"message":"261","line":205,"column":8,"nodeType":"262","endLine":205,"endColumn":10,"suggestions":"263"},{"ruleId":"260","severity":1,"message":"264","line":213,"column":8,"nodeType":"262","endLine":213,"endColumn":10,"suggestions":"265"},{"ruleId":"250","severity":1,"message":"266","line":11,"column":7,"nodeType":"252","messageId":"253","endLine":11,"endColumn":8},{"ruleId":"267","severity":1,"message":"268","line":257,"column":33,"nodeType":"269","messageId":"270","endLine":259,"endColumn":53,"fix":"271"},{"ruleId":"272","severity":1,"message":"273","line":271,"column":59,"nodeType":"274","messageId":"275","endLine":271,"endColumn":61},{"ruleId":"276","severity":1,"message":"277","line":2,"column":26,"nodeType":"278","messageId":"279","endLine":2,"endColumn":28},{"ruleId":"250","severity":1,"message":"280","line":91,"column":12,"nodeType":"252","messageId":"253","endLine":91,"endColumn":28},{"ruleId":"250","severity":1,"message":"281","line":91,"column":30,"nodeType":"252","messageId":"253","endLine":91,"endColumn":49},{"ruleId":"260","severity":1,"message":"282","line":133,"column":8,"nodeType":"262","endLine":133,"endColumn":10,"suggestions":"283"},{"ruleId":"284","severity":1,"message":"285","line":211,"column":47,"nodeType":"286","messageId":"287","endLine":211,"endColumn":48,"suggestions":"288"},{"ruleId":"284","severity":1,"message":"285","line":211,"column":63,"nodeType":"286","messageId":"287","endLine":211,"endColumn":64,"suggestions":"289"},{"ruleId":"284","severity":1,"message":"285","line":211,"column":76,"nodeType":"286","messageId":"287","endLine":211,"endColumn":77,"suggestions":"290"},{"ruleId":"284","severity":1,"message":"291","line":211,"column":87,"nodeType":"286","messageId":"287","endLine":211,"endColumn":88,"suggestions":"292"},{"ruleId":"284","severity":1,"message":"285","line":211,"column":92,"nodeType":"286","messageId":"287","endLine":211,"endColumn":93,"suggestions":"293"},{"ruleId":"276","severity":1,"message":"294","line":215,"column":41,"nodeType":"278","messageId":"279","endLine":215,"endColumn":43},{"ruleId":"250","severity":1,"message":"295","line":302,"column":11,"nodeType":"252","messageId":"253","endLine":302,"endColumn":17},{"ruleId":"267","severity":1,"message":"268","line":350,"column":57,"nodeType":"269","messageId":"270","endLine":350,"endColumn":137,"fix":"296"},{"ruleId":"267","severity":1,"message":"268","line":401,"column":65,"nodeType":"269","messageId":"270","endLine":401,"endColumn":119,"fix":"297"},{"ruleId":"267","severity":1,"message":"268","line":458,"column":57,"nodeType":"269","messageId":"270","endLine":458,"endColumn":124,"fix":"298"},{"ruleId":"267","severity":1,"message":"268","line":469,"column":57,"nodeType":"269","messageId":"270","endLine":469,"endColumn":130,"fix":"299"},{"ruleId":"250","severity":1,"message":"300","line":10,"column":11,"nodeType":"252","messageId":"253","endLine":10,"endColumn":19},{"ruleId":"250","severity":1,"message":"301","line":25,"column":89,"nodeType":"252","messageId":"253","endLine":25,"endColumn":108},{"ruleId":"284","severity":1,"message":"285","line":36,"column":63,"nodeType":"286","messageId":"287","endLine":36,"endColumn":64,"suggestions":"302"},{"ruleId":"260","severity":1,"message":"303","line":88,"column":8,"nodeType":"262","endLine":88,"endColumn":10,"suggestions":"304"},{"ruleId":"267","severity":1,"message":"268","line":101,"column":33,"nodeType":"269","messageId":"270","endLine":102,"endColumn":70,"fix":"305"},{"ruleId":"267","severity":1,"message":"268","line":132,"column":49,"nodeType":"269","messageId":"270","endLine":133,"endColumn":82,"fix":"306"},{"ruleId":"267","severity":1,"message":"268","line":138,"column":57,"nodeType":"269","messageId":"270","endLine":139,"endColumn":91,"fix":"307"},{"ruleId":"250","severity":1,"message":"266","line":6,"column":7,"nodeType":"252","messageId":"253","endLine":6,"endColumn":8},{"ruleId":"250","severity":1,"message":"300","line":9,"column":11,"nodeType":"252","messageId":"253","endLine":9,"endColumn":19},"no-unused-vars","'showOtherAppModal' is assigned a value but never used.","Identifier","unusedVar","'setShowOtherAppModal' is assigned a value but never used.","'statusApps' is assigned a value but never used.","'setStatusApps' is assigned a value but never used.","'progressId' is assigned a value but never used.","'setProgressId' is assigned a value but never used.","'errorDetails' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getAllApps'. Either include it or remove the dependency array.","ArrayExpression",["308"],"React Hook useEffect has a missing dependency: 'timer'. Either include it or remove the dependency array.",["309"],"'_' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","JSXOpeningElement","noTargetBlankWithoutNoreferrer",{"range":"310","text":"311"},"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'inputDomainValue' is assigned a value but never used.","'setInputDomainValue' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getDomains'. Either include it or remove the dependency array.",["312"],"no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["313","314"],["315","316"],["317","318"],"Unnecessary escape character: \\/.",["319","320"],["321","322"],"Expected '!==' and instead saw '!='.","'toggle' is assigned a value but never used.",{"range":"323","text":"311"},{"range":"324","text":"311"},{"range":"325","text":"311"},{"range":"326","text":"311"},"'navigate' is assigned a value but never used.","'PORTAINER_HOME_PAGE' is assigned a value but never used.",["327","328"],"React Hook useEffect has a missing dependency: 'getContainersData'. Either include it or remove the dependency array.",["329"],{"range":"330","text":"311"},{"range":"331","text":"311"},{"range":"332","text":"311"},{"desc":"333","fix":"334"},{"desc":"335","fix":"336"},[13199,13199]," rel=\"noreferrer\"",{"desc":"337","fix":"338"},{"messageId":"339","fix":"340","desc":"341"},{"messageId":"342","fix":"343","desc":"344"},{"messageId":"339","fix":"345","desc":"341"},{"messageId":"342","fix":"346","desc":"344"},{"messageId":"339","fix":"347","desc":"341"},{"messageId":"342","fix":"348","desc":"344"},{"messageId":"339","fix":"349","desc":"341"},{"messageId":"342","fix":"350","desc":"344"},{"messageId":"339","fix":"351","desc":"341"},{"messageId":"342","fix":"352","desc":"344"},[14241,14241],[18420,18420],[22387,22387],[23151,23151],{"messageId":"339","fix":"353","desc":"341"},{"messageId":"342","fix":"354","desc":"344"},{"desc":"355","fix":"356"},[4283,4283],[6176,6176],[6707,6707],"Update the dependencies array to be: [getAllApps]",{"range":"357","text":"358"},"Update the dependencies array to be: [timer]",{"range":"359","text":"360"},"Update the dependencies array to be: [getDomains]",{"range":"361","text":"362"},"removeEscape",{"range":"363","text":"364"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"365","text":"366"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"367","text":"364"},{"range":"368","text":"366"},{"range":"369","text":"364"},{"range":"370","text":"366"},{"range":"371","text":"364"},{"range":"372","text":"366"},{"range":"373","text":"364"},{"range":"374","text":"366"},{"range":"375","text":"364"},{"range":"376","text":"366"},"Update the dependencies array to be: [getContainersData]",{"range":"377","text":"378"},[8618,8620],"[getAllApps]",[8799,8801],"[timer]",[5817,5819],"[getDomains]",[8265,8266],"",[8265,8265],"\\",[8281,8282],[8281,8281],[8294,8295],[8294,8294],[8305,8306],[8305,8305],[8310,8311],[8310,8310],[1674,1675],[1674,1674],[3550,3552],"[getContainersData]"]