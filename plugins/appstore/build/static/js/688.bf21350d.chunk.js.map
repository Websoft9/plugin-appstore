{"version":3,"file":"static/js/688.bf21350d.chunk.js","mappings":"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","sources":["components/FormInput.js","components/Spinner.js","helpers/api/apiCore.js","helpers/api/appManager.js","pages/appstore.js"],"sourcesContent":["// @flow\nimport classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { Form, InputGroup } from 'react-bootstrap';\n\n/* Password Input */\nconst PasswordInput = ({ name, placeholder, refCallback, errors, register, className, value, readOnly }) => {\n    const [showPassword, setShowPassword] = useState(false);\n\n    return (\n        <>\n            <InputGroup className=\"mb-0\">\n                <Form.Control\n                    type={showPassword ? 'text' : 'password'}\n                    placeholder={placeholder}\n                    name={name}\n                    id={name}\n                    as=\"input\"\n                    ref={(r) => {\n                        if (refCallback) refCallback(r);\n                    }}\n                    className={className}\n                    isInvalid={errors && errors[name] ? true : false}\n                    {...(register ? register(name) : {})}\n                    autoComplete={name}\n                    defaultValue={value}\n                    readOnly={readOnly}\n                />\n                <div\n                    className={classNames('input-group-text', 'input-group-password', {\n                        'show-password': showPassword,\n                    })}\n                    data-password={showPassword ? 'true' : 'false'}>\n                    <span\n                        className=\"password-eye\"\n                        onClick={() => {\n                            setShowPassword(!showPassword);\n                        }}></span>\n                </div>\n            </InputGroup>\n        </>\n    );\n};\n\ntype FormInputProps = {\n    label?: string,\n    type?: string,\n    name?: string,\n    value?: string,\n    placeholder?: string,\n    register?: any,\n    errors?: any,\n    className?: string,\n    labelClassName?: string,\n    containerClass?: string,\n    refCallback?: any,\n    children?: any,\n};\n\nconst FormInput = ({\n    label,\n    type,\n    name,\n    value,\n    readOnly,\n    placeholder,\n    register,\n    errors,\n    className,\n    labelClassName,\n    containerClass,\n    refCallback,\n    children,\n    ...otherProps\n}: FormInputProps): React$Element<React$FragmentType> => {\n    // handle input type\n    const comp = type === 'textarea' ? 'textarea' : type === 'select' ? 'select' : 'input';\n\n    return (\n        <>\n            {type === 'hidden' ? (\n                <input type={type} name={name} {...(register ? register(name) : {})} {...otherProps} />\n            ) : (\n                <>\n                    {type === 'password' ? (\n                        <>\n                            <Form.Group className={containerClass}>\n                                {label ? (\n                                    <>\n                                        {' '}\n                                        <Form.Label className={labelClassName}>{label}</Form.Label> {children}{' '}\n                                    </>\n                                ) : null}\n                                <PasswordInput\n                                    name={name}\n                                    placeholder={placeholder}\n                                    refCallback={refCallback}\n                                    errors={errors}\n                                    register={register}\n                                    className={className}\n                                    value={value}\n                                    readOnly={readOnly}\n                                />\n\n                                {errors && errors[name] ? (\n                                    <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                                        {errors[name]['message']}\n                                    </Form.Control.Feedback>\n                                ) : null}\n                            </Form.Group>\n                        </>\n                    ) : (\n                        <>\n                            {type === 'select' ? (\n                                <>\n                                    <Form.Group className={containerClass}>\n                                        {label ? <Form.Label className={labelClassName}>{label}</Form.Label> : null}\n\n                                        <Form.Select\n                                            type={type}\n                                            label={label}\n                                            name={name}\n                                            id={name}\n                                            ref={(r) => {\n                                                if (refCallback) refCallback(r);\n                                            }}\n                                            comp={comp}\n                                            className={className}\n                                            isInvalid={errors && errors[name] ? true : false}\n                                            {...(register ? register(name) : {})}\n                                            {...otherProps}>\n                                            {children}\n                                        </Form.Select>\n\n                                        {errors && errors[name] ? (\n                                            <Form.Control.Feedback type=\"invalid\">\n                                                {errors[name]['message']}\n                                            </Form.Control.Feedback>\n                                        ) : null}\n                                    </Form.Group>\n                                </>\n                            ) : (\n                                <>\n                                    {type === 'checkbox' || type === 'radio' ? (\n                                        <>\n                                            <Form.Group className={containerClass}>\n                                                <Form.Check\n                                                    type={type}\n                                                    label={label}\n                                                    name={name}\n                                                    id={name}\n                                                    ref={(r) => {\n                                                        if (refCallback) refCallback(r);\n                                                    }}\n                                                    className={className}\n                                                    isInvalid={errors && errors[name] ? true : false}\n                                                    {...(register ? register(name) : {})}\n                                                    {...otherProps}\n                                                />\n\n                                                {errors && errors[name] ? (\n                                                    <Form.Control.Feedback type=\"invalid\">\n                                                        {errors[name]['message']}\n                                                    </Form.Control.Feedback>\n                                                ) : null}\n                                            </Form.Group>\n                                        </>\n                                    ) : (\n                                        <Form.Group className={containerClass}>\n                                            {label ? <Form.Label className={labelClassName}>{label}</Form.Label> : null}\n\n                                            <Form.Control\n                                                type={type}\n                                                placeholder={placeholder}\n                                                value={value}\n                                                name={name}\n                                                id={name}\n                                                as={comp}\n                                                ref={(r) => {\n                                                    if (refCallback) refCallback(r);\n                                                }}\n                                                className={className}\n                                                isInvalid={errors && errors[name] ? true : false}\n                                                {...(register ? register(name) : {})}\n                                                {...otherProps}\n                                                autoComplete={name}>\n                                                {children ? children : null}\n                                            </Form.Control>\n\n                                            {errors && errors[name] ? (\n                                                <Form.Control.Feedback type=\"invalid\">\n                                                    {errors[name]['message']}\n                                                </Form.Control.Feedback>\n                                            ) : null}\n                                        </Form.Group>\n                                    )}\n                                </>\n                            )}\n                        </>\n                    )}\n                </>\n            )}\n        </>\n    );\n};\n\nexport default FormInput;\n","// @flow\nimport React from 'react';\nimport classNames from 'classnames';\n\ntype SpinnerProps = {\n    tag?: string,\n    className?: string,\n    size?: 'lg' | 'md' | 'sm',\n    type?: 'bordered' | 'grow',\n    color?: string,\n    children?: any,\n};\n\n/**\n * Spinner\n */\nconst Spinner = (props: SpinnerProps): React$Element<any> => {\n    const children = props.children || null;\n    const Tag = props.tag || 'div';\n    const color = props.color || 'secondary';\n    const size = props.size || '';\n\n    return (\n        <Tag\n            role=\"status\"\n            className={classNames(\n                {\n                    'spinner-border': props.type === 'bordered',\n                    'spinner-grow': props.type === 'grow',\n                },\n                [`text-${color}`],\n                { [`avatar-${size}`]: size },\n                props.className\n            )}>\n            {children}\n        </Tag>\n    );\n};\n\nSpinner.defaultProps = {\n    tag: 'div',\n    type: 'bordered',\n};\n\nexport default Spinner;\n","import axios from 'axios';\nimport { Navigate } from \"react-router-dom\";\n\n// 定义一个全局变量来存储 config.json 的内容\nlet credentials;\n\nasync function getCredentials() {\n    // 如果 credentials 不存在，就从 config.json 中获取它\n    if (!credentials) {\n        const response = await fetch('../myapps/config.json');\n        const data = await response.json();\n        const userName = data.APPMANAGE.APPMANAGE_USERNAME;\n        const uerPassword = data.APPMANAGE.APPMANAGE_PASSWORD;\n        credentials = btoa(userName + \":\" + uerPassword);\n    }\n    // 返回 credentials\n    return credentials;\n}\n\n// 设置 axios 的默认配置\naxios.defaults.headers.post['Content-Type'] = 'application/json';\naxios.defaults.headers.get['Content-Type'] = 'application/json';\naxios.defaults.headers.common['Cache-Control'] = 'no-cache';\naxios.defaults.headers.common['Pragma'] = 'no-cache';\naxios.defaults.headers.common['Expires'] = '0';\n\n// 拦截响应以捕获错误\naxios.interceptors.response.use(\n    (response) => {\n        return response;\n    },\n    (error) => {\n        // 任何不在 2xx 范围内的状态码都会触发这个函数\n        let message;\n\n        if (error && error.response && error.response.status === 404) {\n            <Navigate to=\"/error-404\" />\n        } else if (error && error.response && error.response.status === 500) {\n            <Navigate to=\"/error-500\" />\n        } else {\n            message = error.response && error.response.data ? error.response.data['message'] : error.message || error;\n            return Promise.reject(message);\n        }\n    }\n);\n\nclass APICore {\n    /**\n    * Fetches data from given url\n    */\n    get = async (url, params) => {\n        // 等待获取凭证并设置授权头\n        axios.defaults.headers.common['Authorization'] = 'Basic ' + await getCredentials();\n        let response;\n        if (params) {\n            var queryString = params\n                ? Object.keys(params)\n                    .map((key) => key + '=' + params[key])\n                    .join('&')\n                : '';\n            response = axios.get(`${url}?${queryString}`, params);\n        } else {\n            response = axios.get(`${url}`, params);\n        }\n        return response;\n    };\n\n    /**\n    * post given data to url\n    */\n    create = async (url, data) => {\n        // 等待获取凭证并设置授权头\n        axios.defaults.headers.common['Authorization'] = 'Basic ' + await getCredentials();\n        return axios.post(url, data);\n    };\n}\n\nexport { APICore };\n","import { APICore } from './apiCore';\n\nconst api = new APICore();\n\n//App 安装\nfunction AppInstall(params: any): Promise<any> {\n    const baseUrl = '/AppManage/AppInstall';\n    return api.get(`${baseUrl}`, params);\n}\n\nexport { AppInstall };\n\n","// @flow\nimport { gql, useQuery } from '@apollo/client';\nimport MuiAlert from '@mui/material/Alert';\nimport Snackbar from '@mui/material/Snackbar';\nimport cockpit from 'cockpit';\nimport React, { useEffect, useState } from 'react';\nimport { Button, Carousel, Col, Form, Modal, Row } from 'react-bootstrap';\nimport { useNavigate } from \"react-router-dom\";\nimport FormInput from '../components/FormInput';\nimport Spinner from '../components/Spinner';\nimport { AppInstall } from '../helpers';\n\nconst _ = cockpit.gettext;\nconst language = cockpit.language;//获取cockpit的当前语言环境\n\nconst Alert = React.forwardRef(function Alert(props, ref) {\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nconst getContentfulData = gql`\n    query($locale: String,$skip: Int){\n        productCollection(locale:$locale,where:{appStore:true},limit: 100, skip: $skip) {\n            total\n            items {\n            sys { \n                id \n            }\n            key\n            trademark\n            summary\n            overview\n            websiteurl\n            description\n            screenshots\n            distribution\n            vcpu\n            memory\n            storage\n            logo {\n                imageurl\n            }\n            catalogCollection(limit:20) {\n                items {\n                key\n                title\n                catalogCollection(limit:1){\n                    items{\n                        key\n                        title\n                    }\n                    }\n                }\n            }\n            }\n        }\n        catalog(id: \"2Yp0TY3kBHgG6VDjsHZNpK\",locale:$locale) {\n            linkedFrom(allowedLocales:[\"en-US\"]) {\n            catalogCollection(limit:20) {\n                items {\n                key\n                title\n                linkedFrom(allowedLocales:[\"en-US\"]) {\n                    catalogCollection(limit:20) {\n                    items {\n                        key\n                        title\n                    }\n                    }\n                }\n                }\n            }\n            }\n        }\n    }\n`;\n\n//应用详情弹窗\nconst AppDetailModal = ({ product, showFlag, onClose }) => {\n    const [index, setIndex] = useState(0); //用户图片浏览\n    const navigate = useNavigate(); //用于页面跳转\n    const [visible, setVisible] = useState(true); //用于显示安装选项：版本和应用名称\n    const [customName, setCustomName] = useState(\"\"); //用户存储用户输入的应用名称\n    const [showAlert, setShowAlert] = useState(false); //用于是否显示错误提示\n    const [alertMessage, setAlertMessage] = useState(\"\");//用于显示错误提示消息\n    const [disable, setDisable] = useState(false);//用于按钮禁用\n\n    //用户单击“安装”按钮\n    async function handleInstallClick() {\n        if (!visible) {\n            if (!customName || customName.length < 2 || customName.length > 20) { //判断用户是否输入应用名称\n                setShowAlert(true);\n                setAlertMessage(_(\"Please enter a custom application name between 2 and 20 characters.\"))\n            }\n            else {\n                //调用应用安装接口\n                try {\n                    setDisable(true);\n                    const response = await AppInstall({ app_name: product.key, app_version: selectedVersion, customer_app_name: customName })\n                    if (response.data.Error) {\n                        setShowAlert(true);\n                        setAlertMessage(response.data.Error.Message);\n                        setDisable(false);\n                    }\n                    else {\n                        setShowAlert(false);\n                        setAlertMessage(\"\");\n                        cockpit.file('/etc/hostname').watch(content => {\n                            console.log(content);\n                        });\n                        cockpit.jump(\"/myapps\");\n                        onClose();\n                    }\n                }\n                catch (error) {\n                    setShowAlert(false);\n                    setAlertMessage(\"\");\n                    navigate(\"/error-500\");\n                }\n            }\n            return;\n        }\n        setVisible(!visible);\n    }\n\n    const handleSelect = (selectedIndex, e) => {\n        setIndex(selectedIndex);\n    };\n\n    let versions = (product.distribution?.filter(item => item.key === \"Community\") || []).map(version => { return version.value });//获取应用的版本\n\n    let versionList = (versions && versions.length === 1) ? versions.toString().split(\",\") : versions;\n\n    const [selectedVersion, setselectedVersion] = useState(versionList[0]); //存储用户选择的安装版本\n\n    const changeVersion = (version) => {\n        setselectedVersion(version);\n    };\n\n    const handleInputChange = (inputValue) => {\n        setCustomName(inputValue);\n        if (!inputValue) { //验证输入应用名称\n            setShowAlert(true);\n            setAlertMessage(_(\"Please enter a custom application name between 2 and 20 characters.\"))\n        }\n        else {\n            const newValue = inputValue.replace(/[^a-z0-9]/gi, '').toLowerCase(); //先替换输入值\n            setCustomName(newValue);\n            setShowAlert(false);\n            setAlertMessage(\"\");\n        }\n    }\n\n    const handleClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        setShowAlert(false);\n        setAlertMessage(\"\");\n    };\n\n    return (\n        <>\n            <Modal show={showFlag} onHide={onClose} size=\"lg\" scrollable=\"true\" backdrop=\"static\">\n                <Modal.Header onHide={onClose} closeButton>\n                    <div style={{ padding: \"10px\" }}>\n                        <div className='appstore-item-content-icon col-same-height'>\n                            <img\n                                src={product.logo.imageurl}\n                                alt=\"\"\n                                className=\"app-icon\"\n                            />\n                        </div>\n                        <div className='col-same-height'>\n                            <h4 className=\"appstore-item-content-title\" style={{ marginTop: \"5px\" }}>\n                                {product.trademark}\n                            </h4>\n                            <div>\n                                <a rel=\"noreferrer\" href={`https://support.websoft9.com/docs/` + product.key} target=\"_blank\" style={{ color: '#2196f3' }} >{product.trademark} {_(\"developers\")}</a>\n                            </div>\n                            <div style={{ display: \"flex\", alignItems: \"center\" }}>\n                                <span style={{ marginRight: \"5px\" }}>{_(\"Version\")} : </span> {versions}\n                            </div>\n                            <div style={{ display: \"flex\", alignItems: \"center\" }}>\n                                <span style={{ marginRight: \"5px\" }}>{_(\"Requires at least\")} : {product.vcpu} vCPU,  {product.memory}  GB memory, {product.storage} GB storage</span>\n                            </div>\n                        </div>\n                    </div>\n                </Modal.Header>\n                <Modal.Body>\n                    <div style={{ display: visible ? \"block\" : \"none\" }}>\n                        <Carousel activeIndex={index} onSelect={handleSelect} style={{ width: \"80%\", margin: \"0 auto\" }}>\n                            {\n                                (product.screenshots || []).map((item) => {\n                                    return (\n                                        <Carousel.Item key={item?.id} >\n                                            <img\n                                                className=\"d-block\"\n                                                src={item?.value}\n                                                alt={item?.key}\n                                                width=\"100%\"\n                                                height=\"300px\"\n                                            />\n                                        </Carousel.Item>\n                                    );\n                                })\n                            }\n                        </Carousel>\n                        <div style={{ padding: \"10px\" }}>\n                            <h4>{_(\"Overview\")}</h4>\n                            {product.overview}\n                        </div>\n                        <div style={{ padding: \"10px\" }}>\n                            <h4>{_(\"Description\")}</h4>\n                            {product.description}\n                        </div>\n                    </div>\n                    <div style={{ display: visible ? \"none\" : \"block\" }}>\n                        <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n                            <div>\n                                <span style={{ marginRight: \"5px\" }}>{_(\"Version\")} :</span>\n                                {\n                                    versionList && <FormInput\n                                        name=\"select\"\n                                        type=\"select\"\n                                        className=\"form-select\"\n                                        onChange={(e) => changeVersion(e.target.value)}\n                                        key=\"select\">\n                                        {\n                                            (versionList || []).map((version, i) => {\n                                                return <option value={version} key={version + i}>{version}</option>\n                                            })\n                                        }\n                                    </FormInput>\n                                }\n                            </div>\n                            <div style={{ marginTop: \"5px\" }}>\n                                <span style={{ marginRight: \"5px\" }}>{_(\"Name\")} :</span>\n                                <FormInput type=\"text\" value={customName} name=\"app_Name\"\n                                    placeholder={_(\"Only letters and numbers from 2 to 20 are allowed. No special characters.\")}\n                                    onChange={(e) => { handleInputChange(e.target.value) }} />\n                            </div>\n                        </div>\n                    </div>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"light\" onClick={onClose}>\n                        {_(\"Close\")}\n                    </Button>{' '}\n                    <Button disabled={disable} variant=\"primary\" onClick={handleInstallClick}>\n                        {_(\"Install\")}\n                    </Button>\n                </Modal.Footer>\n            </Modal >\n            {\n                showAlert &&\n                <Snackbar open={showAlert} autoHideDuration={5000} onClose={handleClose} anchorOrigin={{ vertical: 'top', horizontal: 'center' }}>\n                    <Alert onClose={handleClose} severity=\"error\" sx={{ width: '100%' }}>\n                        {alertMessage}\n                    </Alert>\n                </Snackbar>\n            }\n        </>\n    );\n}\n\nconst AppStore = (): React$Element<React$FragmentType> => {\n    const [showModal, setShowModal] = useState(false); //用于显示弹窗的标识\n    const [selectedProduct, setSelectedProduct] = useState(null); //用于存储被选中的产品（点击应用详情时使用）\n    const [subCatalogs, setSubCatalogs] = useState(null); //用于存储二级目录\n    const [allMainCatalogApps, setAllMainCatalogApps] = useState(null); //用于存储某个一级子目录下的所有应用\n    const [isAllSelected, setIsAllSelected] = useState(true);\n    const [searchValue, setSearchValue] = useState(\"\");\n\n    const { loading: dataLoading, error: dataError, data: allData, fetchMore } = useQuery(getContentfulData, { variables: { locale: language === \"zh_CN\" ? \"zh-CN\" : \"en-US\" } });\n\n    // 定义一个变量来存储已经查询过的数据的数量\n    let skipCount = 0;\n\n    // 定义一个函数来使用fetchMore方法获取更多的产品\n    const fetchMoreProducts = () => {\n        // 检查是否还有更多的产品可以获取\n        if (allData.productCollection.items.length < allData.productCollection.total) {\n            // 使用fetchMore方法，把已经查询过的数据的数量作为skip变量传入\n            fetchMore({\n                variables: {\n                    skip: skipCount,\n                },\n                // 使用新的结果更新之前的结果，通过连接items数组\n                updateQuery: (prevResult, { fetchMoreResult }) => {\n                    return Object.assign({}, prevResult, {\n                        productCollection: {\n                            ...fetchMoreResult.productCollection,\n                            items: [\n                                ...prevResult.productCollection.items,\n                                ...fetchMoreResult.productCollection.items,\n                            ],\n                        },\n                    });\n                },\n            });\n        }\n    };\n\n    const mainCatalogs = allData?.catalog.linkedFrom.catalogCollection.items; //主目录数据\n    //const apps = allData?.productCollection?.items;//所有应用数据\n\n    const [apps, setApps] = useState(null); //用于存储通过目录筛选出来的数据\n    const [appList, setAppList] = useState(null); //用于存储通过目录筛选出来的数据\n\n    useEffect(() => {\n        // 检查是否有任何数据\n        if (allData) {\n            // 更新已经查询过的数据的数量，加上当前返回的数据的数量\n            skipCount += allData.productCollection.items.length;\n            // 调用fetchMoreProducts函数来获取更多的产品，如果有的话\n            fetchMoreProducts();\n            setAppList(allData.productCollection?.items);\n            setApps(allData.productCollection?.items);\n        }\n    }, [allData])\n\n    // if (dataLoading) return <p>Loading...</p>;\n\n    if (dataLoading) return <Spinner className='dis_mid' />\n    if (dataError) return <p>Error : ${dataError.message} </p>;\n\n    //用于显示应用详情的弹窗\n    const handleClick = (product) => {\n        setSelectedProduct(product);\n        setShowModal(true);\n    };\n\n    //用于关闭应用详情的弹窗\n    const handleClose = () => {\n        setShowModal(false);\n        setSelectedProduct(null);\n    };\n\n    //当主目录改变时\n    const changeMainCatalog = (selectedMainCatalog) => {\n        // 查询主目录下的二级目录\n        let updatedData = null;\n        //  filter\n        updatedData =\n            selectedMainCatalog === 'All'\n                ? []\n                : mainCatalogs.filter(c => c.key === selectedMainCatalog)?.[0]?.linkedFrom?.catalogCollection?.items;\n        setSubCatalogs(updatedData);\n\n        //根据主目录过滤app数据\n        let subCatalogApps = null;\n        let mainCatalogAllApps = null;\n        mainCatalogAllApps = apps.filter(app => app?.catalogCollection?.items.some(sub => sub?.catalogCollection?.items.some(subsub => subsub.key === selectedMainCatalog)));\n        subCatalogApps =\n            selectedMainCatalog === \"All\"\n                ? apps\n                : mainCatalogAllApps;\n        setAppList(subCatalogApps);\n        setAllMainCatalogApps(mainCatalogAllApps);\n        setIsAllSelected(false);\n        setSearchValue(\"\");\n    };\n\n    //当子目录改变时，过滤应用数据\n    const changeSubCatalog = (selectedSubCatalog) => {\n        let updatedData = null;\n        updatedData =\n            selectedSubCatalog === \"All\"\n                ? allMainCatalogApps\n                : apps.filter(app => app?.catalogCollection?.items.some(c => c.key === selectedSubCatalog));\n        setAppList(updatedData);\n        setSearchValue(\"\");\n    };\n\n    //当搜索框的内容发生改变时，进行app的过滤搜索\n    const handleInputChange = (searchString) => {\n        setSearchValue(searchString);\n        let updatedData = null;\n        updatedData =\n            searchString === \"\"\n                ? apps\n                : apps.filter(app => { return app.trademark.toLowerCase().includes(searchString) || app.key.toLowerCase().includes(searchString) });\n\n        setAppList(updatedData);\n        setIsAllSelected(true);\n        setSubCatalogs(null);\n    }\n\n    return (\n        <>\n            <Row className=\"mb-2\">\n                <Col sm={6}>\n                    <Form.Group as={Row}>\n                        <Col sm={6}>\n                            <FormInput\n                                name=\"select1\"\n                                type=\"select\"\n                                className=\"form-select\"\n                                key=\"select1\"\n                                onChange={(e) => changeMainCatalog(e.target.value)}>\n                                <option value=\"All\" selected={isAllSelected}>{_(\"All\")}</option>\n                                {\n                                    (mainCatalogs || []).map((item, i) => {\n                                        return (\n                                            <option value={item?.key} key={item?.key + i}>{item?.title}</option>\n                                        );\n                                    })\n                                }\n                            </FormInput>\n                        </Col>\n                        <Col sm={6}>\n                            <FormInput\n                                name=\"select2\"\n                                type=\"select\"\n                                className=\"form-select\"\n                                key=\"select2\"\n                                onChange={(e) => changeSubCatalog(e.target.value)}>\n                                <option value=\"All\">{_(\"All\")}</option>\n                                {\n                                    (subCatalogs || []).map((item, i) => {\n                                        return (\n                                            <option value={item?.key} key={item?.key + i}>{item?.title}</option>\n                                        );\n                                    })\n                                }\n                            </FormInput>\n                        </Col>\n                    </Form.Group>\n                </Col>\n                <Col sm={6}>\n                    <Col xs=\"auto\">\n                        <FormInput type=\"text\" name=\"search\"\n                            placeholder={_(\"Search for apps like WordPress, MySQL, GitLab, …\")}\n                            value={searchValue}\n                            onChange={(e) => handleInputChange(e.target.value)} />\n                    </Col>\n                </Col>\n            </Row>\n            <Row>\n                {(appList || []).map((app, i) => {\n                    return (\n                        <Col xxl={3} sm={6} md={4} key={\"app-\" + i} className=\"appstore-item\">\n                            <div className='appstore-item-content highlight' onClick={() => { handleClick(app) }}>\n                                <div className='appstore-item-content-icon col-same-height'>\n                                    <img\n                                        src={app?.logo.imageurl}\n                                        alt=\"\"\n                                        className=\"app-icon\"\n                                    />\n                                </div>\n                                <div className='col-same-height' style={{ textAlign: \"initial\" }}>\n                                    <h4 className=\"appstore-item-content-title\">\n                                        {app?.trademark}\n                                    </h4>\n                                    <div className='appstore-item-content-tagline text-muted'>\n                                        {app?.summary}\n                                    </div>\n                                </div>\n                            </div>\n                        </Col>\n                    );\n                })}\n            </Row>\n            {showModal && <AppDetailModal product={selectedProduct} showFlag={showModal} onClose={handleClose} />}\n        </>\n    );\n};\n\nexport default AppStore;\n"],"names":["PasswordInput","_ref","name","placeholder","refCallback","errors","register","className","value","readOnly","_useState","useState","_useState2","_slicedToArray","showPassword","setShowPassword","_jsx","_Fragment","children","_jsxs","InputGroup","Form","Control","_objectSpread","type","id","as","ref","r","isInvalid","autoComplete","defaultValue","classNames","onClick","_ref2","label","labelClassName","containerClass","otherProps","_objectWithoutProperties","_excluded","comp","Group","Label","Feedback","Select","Check","Spinner","props","Tag","tag","color","size","role","concat","_defineProperty","defaultProps","credentials","getCredentials","_getCredentials","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee3","response","data","userName","uerPassword","wrap","_context3","prev","next","fetch","sent","json","APPMANAGE","APPMANAGE_USERNAME","APPMANAGE_PASSWORD","btoa","abrupt","stop","axios","defaults","headers","post","get","common","interceptors","use","error","message","status","Navigate","Promise","reject","APICore","_createClass","_classCallCheck","_callee","url","params","queryString","_context","t0","Object","keys","map","key","join","_x","_x2","create","_callee2","_context2","_x3","_x4","api","_","cockpit","language","Alert","React","MuiAlert","elevation","variant","getContentfulData","gql","_templateObject","_taggedTemplateLiteral","AppDetailModal","_product$distribution","product","showFlag","onClose","index","setIndex","navigate","useNavigate","_useState3","_useState4","visible","setVisible","_useState5","_useState6","customName","setCustomName","_useState7","_useState8","showAlert","setShowAlert","_useState9","_useState10","alertMessage","setAlertMessage","_useState11","_useState12","disable","setDisable","_handleInstallClick","length","app_name","app_version","selectedVersion","customer_app_name","Error","Message","watch","content","console","log","versions","distribution","filter","item","version","versionList","toString","split","_useState13","_useState14","setselectedVersion","handleClose","event","reason","Modal","show","onHide","scrollable","backdrop","Header","closeButton","style","padding","src","logo","imageurl","alt","marginTop","trademark","rel","href","target","display","alignItems","marginRight","vcpu","memory","storage","Body","Carousel","activeIndex","onSelect","selectedIndex","e","width","margin","screenshots","Item","height","overview","description","flexDirection","FormInput","onChange","i","inputValue","newValue","replace","toLowerCase","handleInputChange","Footer","Button","disabled","Snackbar","open","autoHideDuration","anchorOrigin","vertical","horizontal","severity","sx","_useState15","_useState16","showModal","setShowModal","_useState17","_useState18","selectedProduct","setSelectedProduct","_useState19","_useState20","subCatalogs","setSubCatalogs","_useState21","_useState22","allMainCatalogApps","setAllMainCatalogApps","_useState23","_useState24","isAllSelected","setIsAllSelected","_useState25","_useState26","searchValue","setSearchValue","_useQuery","useQuery","variables","locale","dataLoading","loading","dataError","allData","fetchMore","skipCount","mainCatalogs","catalog","linkedFrom","catalogCollection","items","_useState27","_useState28","apps","setApps","_useState29","_useState30","appList","setAppList","useEffect","_allData$productColle","_allData$productColle2","productCollection","total","skip","updateQuery","prevResult","fetchMoreResult","assign","_toConsumableArray","Row","Col","sm","selectedMainCatalog","_mainCatalogs$filter","_mainCatalogs$filter$","_mainCatalogs$filter$2","_mainCatalogs$filter$3","updatedData","mainCatalogAllApps","c","app","_app$catalogCollectio","some","sub","_sub$catalogCollectio","subsub","changeMainCatalog","selected","title","selectedSubCatalog","_app$catalogCollectio2","changeSubCatalog","xs","searchString","includes","xxl","md","textAlign","summary"],"sourceRoot":""}