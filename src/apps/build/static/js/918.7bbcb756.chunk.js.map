{"version":3,"file":"static/js/918.7bbcb756.chunk.js","mappings":"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","sources":["components/FormInput.js","components/Spinner.js","helpers/api/apiCore.js","helpers/api/appManager.js","pages/appstore.js"],"sourcesContent":["// @flow\nimport React, { useState } from 'react';\nimport { Form, InputGroup } from 'react-bootstrap';\nimport classNames from 'classnames';\n\n/* Password Input */\nconst PasswordInput = ({ name, placeholder, refCallback, errors, register, className }) => {\n    const [showPassword, setShowPassword] = useState(false);\n\n    return (\n        <>\n            <InputGroup className=\"mb-0\">\n                <Form.Control\n                    type={showPassword ? 'text' : 'password'}\n                    placeholder={placeholder}\n                    name={name}\n                    id={name}\n                    as=\"input\"\n                    ref={(r) => {\n                        if (refCallback) refCallback(r);\n                    }}\n                    className={className}\n                    isInvalid={errors && errors[name] ? true : false}\n                    {...(register ? register(name) : {})}\n                    autoComplete={name}\n                />\n                <div\n                    className={classNames('input-group-text', 'input-group-password', {\n                        'show-password': showPassword,\n                    })}\n                    data-password={showPassword ? 'true' : 'false'}>\n                    <span\n                        className=\"password-eye\"\n                        onClick={() => {\n                            setShowPassword(!showPassword);\n                        }}></span>\n                </div>\n            </InputGroup>\n        </>\n    );\n};\n\ntype FormInputProps = {\n    label?: string,\n    type?: string,\n    name?: string,\n    placeholder?: string,\n    register?: any,\n    errors?: any,\n    className?: string,\n    labelClassName?: string,\n    containerClass?: string,\n    refCallback?: any,\n    children?: any,\n};\n\nconst FormInput = ({\n    label,\n    type,\n    name,\n    placeholder,\n    register,\n    errors,\n    className,\n    labelClassName,\n    containerClass,\n    refCallback,\n    children,\n    ...otherProps\n}: FormInputProps): React$Element<React$FragmentType> => {\n    // handle input type\n    const comp = type === 'textarea' ? 'textarea' : type === 'select' ? 'select' : 'input';\n\n    return (\n        <>\n            {type === 'hidden' ? (\n                <input type={type} name={name} {...(register ? register(name) : {})} {...otherProps} />\n            ) : (\n                <>\n                    {type === 'password' ? (\n                        <>\n                            <Form.Group className={containerClass}>\n                                {label ? (\n                                    <>\n                                        {' '}\n                                        <Form.Label className={labelClassName}>{label}</Form.Label> {children}{' '}\n                                    </>\n                                ) : null}\n                                <PasswordInput\n                                    name={name}\n                                    placeholder={placeholder}\n                                    refCallback={refCallback}\n                                    errors={errors}\n                                    register={register}\n                                    className={className}\n                                />\n\n                                {errors && errors[name] ? (\n                                    <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                                        {errors[name]['message']}\n                                    </Form.Control.Feedback>\n                                ) : null}\n                            </Form.Group>\n                        </>\n                    ) : (\n                        <>\n                            {type === 'select' ? (\n                                <>\n                                    <Form.Group className={containerClass}>\n                                        {label ? <Form.Label className={labelClassName}>{label}</Form.Label> : null}\n\n                                        <Form.Select\n                                            type={type}\n                                            label={label}\n                                            name={name}\n                                            id={name}\n                                            ref={(r) => {\n                                                if (refCallback) refCallback(r);\n                                            }}\n                                            comp={comp}\n                                            className={className}\n                                            isInvalid={errors && errors[name] ? true : false}\n                                            {...(register ? register(name) : {})}\n                                            {...otherProps}>\n                                            {children}\n                                        </Form.Select>\n\n                                        {errors && errors[name] ? (\n                                            <Form.Control.Feedback type=\"invalid\">\n                                                {errors[name]['message']}\n                                            </Form.Control.Feedback>\n                                        ) : null}\n                                    </Form.Group>\n                                </>\n                            ) : (\n                                <>\n                                    {type === 'checkbox' || type === 'radio' ? (\n                                        <>\n                                            <Form.Group className={containerClass}>\n                                                <Form.Check\n                                                    type={type}\n                                                    label={label}\n                                                    name={name}\n                                                    id={name}\n                                                    ref={(r) => {\n                                                        if (refCallback) refCallback(r);\n                                                    }}\n                                                    className={className}\n                                                    isInvalid={errors && errors[name] ? true : false}\n                                                    {...(register ? register(name) : {})}\n                                                    {...otherProps}\n                                                />\n\n                                                {errors && errors[name] ? (\n                                                    <Form.Control.Feedback type=\"invalid\">\n                                                        {errors[name]['message']}\n                                                    </Form.Control.Feedback>\n                                                ) : null}\n                                            </Form.Group>\n                                        </>\n                                    ) : (\n                                        <Form.Group className={containerClass}>\n                                            {label ? <Form.Label className={labelClassName}>{label}</Form.Label> : null}\n\n                                            <Form.Control\n                                                type={type}\n                                                placeholder={placeholder}\n                                                name={name}\n                                                id={name}\n                                                as={comp}\n                                                ref={(r) => {\n                                                    if (refCallback) refCallback(r);\n                                                }}\n                                                className={className}\n                                                isInvalid={errors && errors[name] ? true : false}\n                                                {...(register ? register(name) : {})}\n                                                {...otherProps}\n                                                autoComplete={name}>\n                                                {children ? children : null}\n                                            </Form.Control>\n\n                                            {errors && errors[name] ? (\n                                                <Form.Control.Feedback type=\"invalid\">\n                                                    {errors[name]['message']}\n                                                </Form.Control.Feedback>\n                                            ) : null}\n                                        </Form.Group>\n                                    )}\n                                </>\n                            )}\n                        </>\n                    )}\n                </>\n            )}\n        </>\n    );\n};\n\nexport default FormInput;\n","// @flow\nimport React from 'react';\nimport classNames from 'classnames';\n\ntype SpinnerProps = {\n    tag?: string,\n    className?: string,\n    size?: 'lg' | 'md' | 'sm',\n    type?: 'bordered' | 'grow',\n    color?: string,\n    children?: any,\n};\n\n/**\n * Spinner\n */\nconst Spinner = (props: SpinnerProps): React$Element<any> => {\n    const children = props.children || null;\n    const Tag = props.tag || 'div';\n    const color = props.color || 'secondary';\n    const size = props.size || '';\n\n    return (\n        <Tag\n            role=\"status\"\n            className={classNames(\n                {\n                    'spinner-border': props.type === 'bordered',\n                    'spinner-grow': props.type === 'grow',\n                },\n                [`text-${color}`],\n                { [`avatar-${size}`]: size },\n                props.className\n            )}>\n            {children}\n        </Tag>\n    );\n};\n\nSpinner.defaultProps = {\n    tag: 'div',\n    type: 'bordered',\n};\n\nexport default Spinner;\n","import axios from 'axios';\nimport { Navigate } from \"react-router-dom\";\n//import config from '../../config';\n\n// content type\naxios.defaults.headers.post['Content-Type'] = 'application/json';\naxios.defaults.headers.get['Content-Type'] = 'application/json';\naxios.defaults.headers = {\n    'Cache-Control': 'no-cache',\n    'Pragma': 'no-cache',\n    'Expires': '0',\n};\n//axios.defaults.baseURL = config.API_URL;\n// axios.defaults.httpsAgent = new https.Agent({\n//     rejectUnauthorized: false,\n// });\n\n// intercepting to capture errors\naxios.interceptors.response.use(\n    (response) => {\n        return response;\n    },\n    (error) => {\n        // Any status codes that falls outside the range of 2xx cause this function to trigger\n        let message;\n\n        if (error && error.response && error.response.status === 404) {\n            <Navigate to=\"/error-404\" />\n        } else if (error && error.response && error.response.status === 500) {\n            <Navigate to=\"/error-500\" />\n        } else {\n            message = error.response && error.response.data ? error.response.data['message'] : error.message || error;\n            return Promise.reject(message);\n        }\n    }\n);\n\nclass APICore {\n    /**\n     * Fetches data from given url\n     */\n    get = (url, params) => {\n        let response;\n        if (params) {\n            var queryString = params\n                ? Object.keys(params)\n                    .map((key) => key + '=' + params[key])\n                    .join('&')\n                : '';\n            response = axios.get(`${url}?${queryString}`, params);\n        } else {\n            response = axios.get(`${url}`, params);\n        }\n        return response;\n    };\n\n    /**\n     * post given data to url\n     */\n    create = (url, data) => {\n        return axios.post(url, data);\n    };\n}\n\nexport { APICore };\n","import { APICore } from './apiCore';\n\nconst api = new APICore();\n\n//安装应用\nfunction installApp(params: any): Promise<any> {\n    const baseUrl = '/api/v1/apps/install';\n    return api.get(`${baseUrl}`, params);\n}\n\n//获取已经安装的应用\nfunction getInstalledApps(params: any): Promise<any> {\n    const baseUrl = '/api/v1/apps';\n    return api.get(`${baseUrl}`, params);\n}\n\n//卸载应用\nfunction unInstallApp(params: any): Promise<any> {\n    const baseUrl = '/api/v1/apps/uninstall';\n    return api.get(`${baseUrl}`, params);\n}\n\n//获取应用安装进度\nfunction getInstallProgress(params: any): Promise<any> {\n    const baseUrl = '/api/v1/apps/process';\n    return api.get(`${baseUrl}`, params);\n}\n\n//停止应用\nfunction stopApp(params: any): Promise<any> {\n    const baseUrl = '/api/v1/apps/stop';\n    return api.get(`${baseUrl}`, params);\n}\n\n//启动应用\nfunction startApp(params: any): Promise<any> {\n    const baseUrl = '/api/v1/apps/start';\n    return api.get(`${baseUrl}`, params);\n}\n\n//查询应用详情\nfunction getAppDetails(params: any): Promise<any> {\n    const baseUrl = '/api/v1/apps/details';\n    return api.get(`${baseUrl}`, params);\n}\n\nexport { installApp, getInstalledApps, unInstallApp, getInstallProgress, stopApp, startApp, getAppDetails };\n\n","// @flow\nimport { gql, useQuery } from '@apollo/client';\nimport React, { useEffect, useState } from 'react';\nimport { Alert, Button, Carousel, Col, Form, Modal, Row } from 'react-bootstrap';\nimport { useNavigate } from \"react-router-dom\";\nimport FormInput from '../components/FormInput';\nimport Spinner from '../components/Spinner';\nimport { installApp } from '../helpers';\n\nconst getContentfulData = gql`\n    query{\n        productCollection {\n            items {\n            sys {\n                id\n            }\n            key\n            trademark\n            summary\n            overview\n            websiteurl\n            description\n            screenshots\n            distribution\n            highlights\n            vcpu\n            memory\n            storage\n            logo {\n                imageurl\n            }\n            catalogCollection(limit:20) {\n                items {\n                key\n                title\n                catalogCollection(limit:1){\n                    items{\n                        key\n                        title\n                    }\n                    }\n                }\n            }\n            }\n        }\n        catalog(id: \"2Yp0TY3kBHgG6VDjsHZNpK\") {\n            linkedFrom(allowedLocales:[\"en-US\"]) {\n            catalogCollection(limit:20) {\n                items {\n                key\n                title\n                linkedFrom(allowedLocales:[\"en-US\"]) {\n                    catalogCollection(limit:20) {\n                    items {\n                        key\n                        title\n                    }\n                    }\n                }\n                }\n            }\n            }\n        }\n    }\n`;\n\n//应用详情弹窗\nconst AppDetailModal = ({ product, showFlag, onClose }) => {\n    const [index, setIndex] = useState(0); //用户图片浏览\n    const navigate = useNavigate(); //用于页面跳转\n    const [visible, setVisible] = useState(true); //用于显示安装选项：版本和应用名称\n    const [customName, setCustomName] = useState(''); //用户存储用户输入的应用名称\n    const [showAlert, setShowAlert] = useState(false); //用于是否显示错误提示\n    const [alertMessage, setAlertMessage] = useState(\"\");//用于显示错误提示消息\n    const [disable, setDisable] = useState(false);//用于按钮禁用\n\n    //用户单击“安装”按钮\n    async function handleInstallClick() {\n        if (!visible) {\n            if (!customName) { //判断用户是否输入应用名称\n                setShowAlert(true);\n                setAlertMessage(\"Please enter custom name \")\n            }\n            else {\n                //调用应用安装接口\n                try {\n                    setDisable(true);\n                    const response = await installApp({ app_name: product.key, app_version: selectedVersion, customer_app_name: customName })\n                    if (response.data.code === 0) {\n                        navigate(\"/myapps\")\n                    }\n                    else if (response.data.code === -1) {\n                        setShowAlert(true);\n                        setAlertMessage(response.data.message);\n                        setDisable(false);\n                    }\n                }\n                catch (error) {\n                    // 捕获错误并导航到错误页面\n                    navigate(\"/error-500\");\n                }\n            }\n            return;\n        }\n        setVisible(!visible);\n    }\n\n    const handleSelect = (selectedIndex, e) => {\n        setIndex(selectedIndex);\n    };\n\n    let versions = (product.distribution?.filter(item => item.key === \"Community\") || []).map(version => { return version.value });//获取应用的版本\n\n    let versionList = (versions && versions.length === 1) ? versions.toString().split(\",\") : versions;\n\n    const [selectedVersion, setselectedVersion] = useState(versionList[0]); //存储用户选择的安装版本\n\n    const changeVersion = (version) => {\n        setselectedVersion(version);\n    };\n\n    const handleInputChange = (inputValue) => {\n        if (!inputValue) { //当用户没有输入应用名称\n            setShowAlert(true);\n            setAlertMessage(\"Please enter custom name\");\n        }\n        else {\n            setShowAlert(false);\n            setAlertMessage(\"\");\n        }\n        const newValue = inputValue.replace(/[^a-z0-9]/gi, '').toLowerCase();\n        setCustomName(newValue);\n    }\n\n    return (\n        <Modal show={showFlag} onHide={onClose} size=\"lg\" scrollable=\"true\" backdrop=\"static\">\n            <Modal.Header onHide={onClose} closeButton>\n                <div style={{ padding: \"10px\" }}>\n                    <div className='appstore-item-content-icon col-same-height'>\n                        <img\n                            src={product.logo.imageurl}\n                            alt=\"\"\n                            className=\"app-icon\"\n                        />\n                    </div>\n                    <div className='col-same-height'>\n                        <h4 className=\"appstore-item-content-title\" style={{ marginTop: \"5px\" }}>\n                            {product.trademark}\n                        </h4>\n                        <div>\n                            <a rel=\"noreferrer\" href={`https://support.websoft9.com/docs/` + product.key} target=\"_blank\" style={{ color: '#2196f3' }} >{product.trademark} developers</a>\n                        </div>\n                        <div style={{ display: \"flex\", alignItems: \"center\" }}>\n                            <span style={{ marginRight: \"5px\" }}>Version :</span> {versions}\n                        </div>\n                        <div style={{ display: \"flex\", alignItems: \"center\" }}>\n                            <span style={{ marginRight: \"5px\" }}>Requires at least : {product.vcpu} vCPU,  {product.memory}  GB memory, {product.storage} GB storage</span>\n                        </div>\n                    </div>\n                </div>\n            </Modal.Header>\n            <Modal.Body>\n                <div style={{ display: visible ? \"block\" : \"none\" }}>\n                    <Carousel activeIndex={index} onSelect={handleSelect} style={{ width: \"80%\", margin: \"0 auto\" }}>\n                        {\n                            (product.screenshots || []).map((item) => {\n                                return (\n                                    <Carousel.Item key={item?.id} >\n                                        <img\n                                            className=\"d-block\"\n                                            src={item?.value}\n                                            alt={item?.key}\n                                            width=\"100%\"\n                                            height=\"300px\"\n                                        />\n                                    </Carousel.Item>\n                                );\n                            })\n                        }\n                    </Carousel>\n                    <div style={{ padding: \"10px\" }}>\n                        <h4>Overview</h4>\n                        {product.overview}\n                    </div>\n                    <div style={{ padding: \"10px\" }}>\n                        <h4>Description</h4>\n                        {product.description}\n                    </div>\n                </div>\n                <div style={{ display: visible ? \"none\" : \"block\" }}>\n                    <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n                        <div>\n                            <span style={{ marginRight: \"5px\" }}>Version :</span>\n                            {\n                                versionList && <FormInput\n                                    name=\"select\"\n                                    type=\"select\"\n                                    className=\"form-select\"\n                                    onChange={(e) => changeVersion(e.target.value)}\n                                    key=\"select\">\n                                    {\n                                        (versionList || []).map((version, i) => {\n                                            return <option value={version} key={version + i}>{version}</option>\n                                        })\n                                    }\n                                </FormInput>\n                            }\n                        </div>\n                        <div style={{ marginTop: \"5px\" }}>\n                            <span style={{ marginRight: \"5px\" }}>Name :</span>\n                            <FormInput type=\"text\" value={customName} name=\"app_Name\"\n                                placeholder=\"Please enter a custom application name\"\n                                onChange={(e) => { handleInputChange(e.target.value) }} />\n                            <span style={{ fontStyle: \"italic\", color: \"green\", marginLeft: \"5px\" }}>it can only be a combination of lowercase letters and numbers</span>\n                        </div>\n                        <div>\n                            {showAlert && <Alert variant=\"danger\" className=\"my-2\">\n                                {alertMessage}\n                            </Alert>}\n                        </div>\n                    </div>\n                </div>\n\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"light\" onClick={onClose}>\n                    Close\n                </Button>{' '}\n                <Button disabled={disable} variant=\"primary\" onClick={handleInstallClick}>\n                    Install\n                </Button>\n            </Modal.Footer>\n        </Modal >\n    );\n}\n\nconst AppStore = (): React$Element<React$FragmentType> => {\n    const [showModal, setShowModal] = useState(false); //用于显示弹窗的标识\n    const [selectedProduct, setSelectedProduct] = useState(null); //用于存储被选中的产品（点击应用详情时使用）\n    const [subCatalogs, setSubCatalogs] = useState(null); //用于存储二级目录\n    const [allMainCatalogApps, setAllMainCatalogApps] = useState(null); //用于存储某个一级子目录下的所有应用\n    const [mainSelect, setMainSelect] = useState(\"All\")\n    const [subSelect, setSubSelect] = useState(\"All\")\n\n\n    const { loading: dataLoading, error: dataError, data: allData } = useQuery(getContentfulData);\n\n    const mainCatalogs = allData?.catalog.linkedFrom.catalogCollection.items; //主目录数据\n    const apps = allData?.productCollection?.items;//所有应用数据\n\n    const [appList, setAppList] = useState(apps); //用于存储通过目录筛选出来的数据\n\n    useEffect(() => {\n        setAppList(apps);\n    }, [apps])\n\n    // if (dataLoading) return <p>Loading...</p>;\n\n    if (dataLoading) return <Spinner className='dis_mid' />/*<Spinner className='dis_mid' color=\"primary\" size=\"md\" />*/;\n    if (dataError) return <p>Error : ${dataError.message} </p>;\n\n    //用于显示应用详情的弹窗\n    const handleClick = (product) => {\n        setSelectedProduct(product);\n        setShowModal(true);\n    };\n\n    //用于关闭应用详情的弹窗\n    const handleClose = () => {\n        setShowModal(false);\n        setSelectedProduct(null);\n    };\n\n    //当主目录改变时\n    const changeMainCatalog = (selectedMainCatalog) => {\n        // 查询主目录下的二级目录\n        let updatedData = null;\n        //  filter\n        updatedData =\n            selectedMainCatalog === 'All'\n                ? []\n                : mainCatalogs.filter(c => c.key === selectedMainCatalog)?.[0]?.linkedFrom?.catalogCollection?.items;\n        setSubCatalogs(updatedData);\n\n        //根据主目录过滤app数据\n        let subCatalogApps = null;\n        let mainCatalogAllApps = null;\n        mainCatalogAllApps = apps.filter(app => app?.catalogCollection?.items.some(sub => sub?.catalogCollection?.items.some(subsub => subsub.key === selectedMainCatalog)));\n        subCatalogApps =\n            selectedMainCatalog === \"All\"\n                ? apps\n                : mainCatalogAllApps;\n        setAppList(subCatalogApps);\n        setAllMainCatalogApps(mainCatalogAllApps);\n        setMainSelect(selectedMainCatalog);\n    };\n\n    //当子目录改变时，过滤应用数据\n    const changeSubCatalog = (selectedSubCatalog) => {\n        let updatedData = null;\n        updatedData =\n            selectedSubCatalog === \"All\"\n                ? allMainCatalogApps\n                : apps.filter(app => app?.catalogCollection?.items.some(c => c.key === selectedSubCatalog));\n        setAppList(updatedData);\n        setSubSelect(selectedSubCatalog);\n    };\n\n    //当搜索框的内容发生改变时，进行app的过滤搜索\n    const handleInputChange = (searchString) => {\n        let updatedData = null;\n        updatedData =\n            searchString === \"\"\n                ? apps\n                : apps.filter(app => { return app.trademark.toLowerCase().includes(searchString) || app.key.toLowerCase().includes(searchString) });\n\n        setAppList(updatedData);\n        setMainSelect(\"All\");\n        setSubSelect(\"All\");\n    }\n\n    return (\n        <>\n            <Row className=\"mb-2\">\n                <Col sm={6}>\n                    <Form.Group as={Row}>\n                        <Col sm={6}>\n                            <FormInput\n                                value={mainSelect}\n                                name=\"select\"\n                                type=\"select\"\n                                className=\"form-select\"\n                                key=\"select\"\n                                onChange={(e) => changeMainCatalog(e.target.value)}>\n                                <option value=\"All\">All</option>\n                                {\n                                    (mainCatalogs || []).map((item, i) => {\n                                        return (\n                                            <option value={item?.key} key={item?.key + i}>{item?.title}</option>\n                                        );\n                                    })\n                                }\n                            </FormInput>\n                        </Col>\n                        <Col sm={6}>\n                            <FormInput\n                                value={subSelect}\n                                name=\"select\"\n                                type=\"select\"\n                                className=\"form-select\"\n                                key=\"select\"\n                                onChange={(e) => changeSubCatalog(e.target.value)}>\n                                <option value=\"All\">All</option>\n                                {\n                                    (subCatalogs || []).map((item, i) => {\n                                        return (\n                                            <option value={item?.key} key={item?.key + i}>{item?.title}</option>\n                                        );\n                                    })\n                                }\n                            </FormInput>\n                        </Col>\n                    </Form.Group>\n                </Col>\n                <Col sm={6}>\n                    <Col xs=\"auto\">\n                        <FormInput type=\"text\" name=\"search\"\n                            placeholder=\"Search for apps like WordPress, Dropbox, Slack, Trello, …\"\n                            onChange={(e) => handleInputChange(e.target.value)} />\n                    </Col>\n                </Col>\n            </Row>\n            <Row>\n                {(appList || []).map((app, i) => {\n                    return (\n                        <Col xxl={3} md={6} key={app.sys.id} className=\"appstore-item\">\n                            <div className='appstore-item-content highlight' onClick={() => { handleClick(app) }}>\n                                <div className='appstore-item-content-icon col-same-height'>\n                                    <img\n                                        src={app.logo.imageurl}\n                                        alt=\"\"\n                                        className=\"app-icon\"\n                                    />\n                                </div>\n                                <div className='col-same-height'>\n                                    <h4 className=\"appstore-item-content-title\">\n                                        {app.trademark}\n                                    </h4>\n                                    <div className='appstore-item-content-tagline text-muted'>\n                                        {app.summary}\n                                    </div>\n                                </div>\n                            </div>\n                        </Col>\n                    );\n                })}\n            </Row>\n            {showModal && <AppDetailModal product={selectedProduct} showFlag={showModal} onClose={handleClose} />}\n        </>\n    );\n};\n\nexport default AppStore;\n"],"names":["PasswordInput","_ref","name","placeholder","refCallback","errors","register","className","_useState","useState","_useState2","_slicedToArray","showPassword","setShowPassword","_jsx","_Fragment","children","_jsxs","InputGroup","Form","_objectSpread","type","id","as","ref","r","isInvalid","autoComplete","classNames","onClick","_ref2","label","labelClassName","containerClass","otherProps","_objectWithoutProperties","_excluded","comp","Spinner","props","Tag","tag","color","size","role","concat","_defineProperty","defaultProps","axios","response","error","message","status","Navigate","data","Promise","reject","api","_createClass","APICore","_classCallCheck","get","url","params","queryString","Object","keys","map","key","join","create","installApp","getInstalledApps","unInstallApp","getInstallProgress","stopApp","startApp","getAppDetails","getContentfulData","gql","_templateObject","_taggedTemplateLiteral","AppDetailModal","_product$distribution","product","showFlag","onClose","index","setIndex","navigate","useNavigate","_useState3","_useState4","visible","setVisible","_useState5","_useState6","customName","setCustomName","_useState7","_useState8","showAlert","setShowAlert","_useState9","_useState10","alertMessage","setAlertMessage","_useState11","_useState12","disable","setDisable","_handleInstallClick","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","app_name","app_version","selectedVersion","customer_app_name","sent","code","t0","abrupt","stop","apply","arguments","versions","distribution","filter","item","version","value","versionList","length","toString","split","_useState13","_useState14","setselectedVersion","Modal","show","onHide","scrollable","backdrop","closeButton","style","padding","src","logo","imageurl","alt","marginTop","trademark","rel","href","target","display","alignItems","marginRight","vcpu","memory","storage","Carousel","activeIndex","onSelect","selectedIndex","e","width","margin","screenshots","height","overview","description","flexDirection","FormInput","onChange","i","inputValue","newValue","replace","toLowerCase","handleInputChange","fontStyle","marginLeft","Alert","variant","Button","disabled","_allData$productColle","_useState15","_useState16","showModal","setShowModal","_useState17","_useState18","selectedProduct","setSelectedProduct","_useState19","_useState20","subCatalogs","setSubCatalogs","_useState21","_useState22","allMainCatalogApps","setAllMainCatalogApps","_useState23","_useState24","mainSelect","setMainSelect","_useState25","_useState26","subSelect","setSubSelect","_useQuery","useQuery","dataLoading","loading","dataError","allData","mainCatalogs","catalog","linkedFrom","catalogCollection","items","apps","productCollection","_useState27","_useState28","appList","setAppList","useEffect","Row","Col","sm","selectedMainCatalog","_mainCatalogs$filter","_mainCatalogs$filter$","_mainCatalogs$filter$2","_mainCatalogs$filter$3","updatedData","mainCatalogAllApps","c","app","_app$catalogCollectio","some","sub","_sub$catalogCollectio","subsub","changeMainCatalog","title","selectedSubCatalog","_app$catalogCollectio2","changeSubCatalog","xs","searchString","includes","xxl","md","summary","sys"],"sourceRoot":""}